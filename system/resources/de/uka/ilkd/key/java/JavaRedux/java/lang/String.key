\functions {
  CharList strContent(java.lang.String);
  java.lang.String strPool(CharList);
}


\contracts {
  //
  // length
  //
  stringLength {
      \programVariables {
          int result;
          java.lang.String string;
      }
      true ->
      \<{
          result = string.length();
      }\>(result = clLength(strContent(string)))
      \modifies empty
  };


  //
  // charAt
  //
  stringCharAtNormal {
      \programVariables {
          char result;
          java.lang.String string;
          int charIdx;
          java.lang.Exception exc;
      }
      (charIdx >= 0 & charIdx < clLength(strContent(string))) ->
      \<{
          #catchAll(exc) {
              result = string.charAt(charIdx);
      }}\>(exc = null & result = clCharAt(charIdx, strContent(string)))
      \modifies empty
  };
  
  stringCharAtExc {
      \programVariables {
          char result;
          java.lang.String string;
          int charIdx;
          java.lang.Exception exc;          
      }
      (charIdx < 0 | charIdx >= clLength(strContent(string))) ->
      \<{
          #catchAll(exc) {
              result = string.charAt(charIdx);
      }}\>(  exc != null
           & java.lang.IndexOutOfBoundsException::instance(exc) = TRUE)
      \modifies empty
  };
  
  
  //
  // concat
  //
  stringConcatNormal {
      \programVariables {
          java.lang.String result, calleeStringObj, argumentStringObj;
          Heap heapAtPre;
      }
      (argumentStringObj != null & clLength(strContent(argumentStringObj)) > 0) ->
      {heapAtPre := heap}
      \<{
          result = calleeStringObj.concat(argumentStringObj);
      }\>(  boolean::select(heapAtPre, result, java.lang.Object::<created>) = FALSE
          & result != null
          & strContent(result) = clConcat(strContent(calleeStringObj), strContent(argumentStringObj)) )
      \modifies empty
  };
    
  stringConcatNormalLen0 {
      \programVariables {
          java.lang.String result, calleeStringObj, argumentStringObj;
      }
      (argumentStringObj != null & clLength(strContent(argumentStringObj)) = 0) ->
      \<{
          result = calleeStringObj.concat(argumentStringObj);
      }\>(result = calleeStringObj)
      \modifies empty
  };
  
  stringConcatExc {
      \programVariables {
          java.lang.String result, calleeStringObj, argumentStringObj;
          java.lang.Exception exc;                    
      }
      (argumentStringObj = null) ->
      \<{
          #catchAll(exc) {
              result = calleeStringObj.concat(argumentStringObj);
      }}\>(  exc != null
           & java.lang.NullPointerException::instance(exc) = TRUE)
      \modifies empty
  };



  //
  // substring
  //
  stringSubstringNormal {
      \programVariables {
          java.lang.String result, string;
          int startIdx, endIdx;
          Heap heapAtPre;
      }
      (endIdx >= startIdx & startIdx >= 0 & endIdx <= clLength(strContent(string))) ->
      {heapAtPre := heap}
      \<{
          result = string.substring(startIdx, endIdx);
      }\>(  boolean::select(heapAtPre, result, java.lang.Object::<created>) = FALSE
          & result != null
          & strContent(result) = clSub(startIdx, endIdx, strContent(string)))
      \modifies empty
  };

  stringSubstringExc {
      \programVariables {
          java.lang.String result, string;
          int startIdx, endIdx;
          java.lang.Exception exc;                              
      }
      (startIdx > endIdx | startIdx < 0 | endIdx > clLength(strContent(string))) ->
      \<{
          #catchAll(exc) {
              result = string.substring(startIdx, endIdx);
      }}\>(  exc != null
           & java.lang.IndexOutOfBoundsException::instance(exc) = TRUE)
      \modifies empty
  };

  stringSubstring2Normal {
      \programVariables {
          java.lang.String result, string;
          int startIdx;
          Heap heapAtPre;
      }
      (startIdx >= 0 & startIdx < clLength(strContent(string))) ->
      {heapAtPre := heap}
      \<{
          result = string.substring(startIdx);
      }\>(  boolean::select(heapAtPre, result, java.lang.Object::<created>) = FALSE
          & result != null
          & strContent(result) = clSub(startIdx, clLength(strContent(string)), strContent(string)))
      \modifies empty
  };

  stringSubstring2Exc {
      \programVariables {
          java.lang.String result, string;
          int startIdx;
          java.lang.Exception exc;          
      }
      (startIdx < 0 | startIdx > clLength(strContent(string))) ->
      \<{
          #catchAll(exc) {
          result = string.substring(startIdx);
      }}\>(  exc != null
           & java.lang.IndexOutOfBoundsException::instance(exc) = TRUE)
      \modifies empty
  };


  //
  // compareTo
  //
  stringCompareToNormal {
      \programVariables {
          java.lang.String stringCallee, stringArgument;
          int result;
      }
      (stringArgument != null) ->
      \<{
          result = stringCallee.compareTo(stringArgument);
      }\>( result = \ifEx int i; (  i < clLength(strContent(stringCallee))
                                  & i < clLength(strContent(stringArgument))
                                  & clCharAt(i, strContent(stringCallee))
                                     != clCharAt(i, strContent(stringArgument)) )
                        \then (clCharAt(i, strContent(stringCallee)) - clCharAt(i, strContent(stringArgument)))
                        \else (clLength(strContent(stringCallee)) - clLength(strContent(stringArgument))) )
      \modifies empty
  };

  stringCompareToExc {
      \programVariables {
          java.lang.String stringCallee, stringArgument;
          int result;
          java.lang.Exception exc;
      }
      (stringArgument = null) ->
      \<{
          #catchAll(exc) {
              result = stringCallee.compareTo(stringArgument);
      }}\>(  exc != null
           & java.lang.NullPointerException::instance(exc) = TRUE)
      \modifies empty
  };



  //
  // endsWith
  //
  stringEndsWithNormal {
      \programVariables {
          java.lang.String stringCallee, stringArgument;
          boolean result;
      }
      (stringArgument != null) ->
      \<{
          result = stringCallee.endsWith(stringArgument);
      }\>(result = TRUE <-> clEndsWith(strContent(stringArgument), strContent(stringCallee)))
      \modifies empty
  };

  stringEndsWithExc {
      \programVariables {
          java.lang.String stringCallee, stringArgument;
          boolean result;
          java.lang.Exception exc;          
      }
      (stringArgument = null) ->
      \<{
          #catchAll(exc) {
              result = stringCallee.endsWith(stringArgument);
      }}\>(  exc != null
           & java.lang.NullPointerException::instance(exc) = TRUE)
      \modifies empty
  };


  //
  // startsWith
  //
  stringStartsWith1Normal {
      \programVariables {
          java.lang.String stringCallee, stringArgument;
          boolean result;
      }
      (stringArgument != null) ->
      \<{
          result = stringCallee.startsWith(stringArgument);
      }\>(result = TRUE <-> clStartsWith(strContent(stringArgument), strContent(stringCallee)))
      \modifies empty
  };

  stringStartsWith1Exc {
      \programVariables {
          java.lang.String stringCallee, stringArgument;
          boolean result;
          java.lang.Exception exc;          
      }
      (stringArgument = null) ->
      \<{
          #catchAll(exc) {
              result = stringCallee.startsWith(stringArgument);
      }}\>(  exc != null
           & java.lang.NullPointerException::instance(exc) = TRUE)
      \modifies empty
  };

  stringStartsWith2Normal {
      \programVariables {
          java.lang.String stringCallee, stringArgument;
          boolean result;
          int startIdx;
      }
      (stringArgument != null) ->
      \<{
          result = stringCallee.startsWith(stringArgument, startIdx);
      }\>(result = TRUE <-> (  (startIdx >= 0)
                             & (startIdx <= clLength(strContent(stringCallee)))
                             & clStartsWith(strContent(stringArgument),
                                            clSub(startIdx,
                                                  clLength(strContent(stringCallee)),
                                                  strContent(stringCallee))) ))
      \modifies empty
  };

  stringStartsWith2Exc {
      \programVariables {
          java.lang.String stringCallee, stringArgument;
          boolean result;
          int startIdx;
          java.lang.Exception exc;          
      }
      (stringArgument = null) ->
      \<{
          #catchAll(exc) {
              result = stringCallee.startsWith(stringArgument, startIdx);
      }}\>(  exc != null
           & java.lang.NullPointerException::instance(exc) = TRUE)
      \modifies empty
  };


  //
  // replace
  //
  stringReplaceNormal {
      \programVariables {
          java.lang.String s, result;
          char c1, c2;
          Heap heapAtPre;
      }
      true ->
      {heapAtPre := heap}
      \<{
          result = s.replace(c1,c2);
      }\>(\if (\exists int i; (  i >= 0 
                               & i < clLength(strContent(s))
                               & clCharAt(i, strContent(s)) = c1))
          \then(  boolean::select(heapAtPre, result, java.lang.Object::<created>) = FALSE
                & result != null
                & strContent(result) = clReplace(c1, c2, strContent(s)) )
          \else ( result = s ))
      \modifies empty
  };


  //
  // indexOf
  //
  stringIndexOfNormal {
      \programVariables {
          java.lang.String s;
          int charVal;
          int result;
      }
      true ->
      \<{ 
          result = s.indexOf(charVal);
      }\>(result = clIndexOfChar(charVal, 0, strContent(s)))
      \modifies empty
  };

  stringIndexOfFromNormal {
      \programVariables {
          java.lang.String s;
          int charVal, from;
          int result;
      }
      true ->
      \<{
          result = s.indexOf(charVal,from);
      }\>(result = clIndexOfChar(charVal, from, strContent(s)))
      \modifies empty
  };

  stringIndexOfStringNormal {
      \programVariables {
          java.lang.String s, t;
          int result;
      }
      (t != null) ->
      \<{
          result = s.indexOf(t);
      }\>(result = clIndexOfCl(strContent(t), 0, strContent(s)))
      \modifies empty
  };

  stringIndexOfStringExc {
      \programVariables {
          java.lang.String s, t;
          int result;
          java.lang.Exception exc;
      }
      (t = null) ->
      \<{
          #catchAll (exc) {
              result = s.indexOf(t);
      }}\>(  exc != null
           & java.lang.NullPointerException::instance(exc) = TRUE)
      \modifies empty
  };

  stringIndexOfStringFromNormal {
      \programVariables {
          java.lang.String s, t;
          int result, from;
      }
      (t != null) ->
      \<{
          result = s.indexOf(t, from);
      }\>(result = clIndexOfCl(strContent(t), from, strContent(s)))
      \modifies empty
  };

  stringIndexOfStringFromExc {
      \programVariables {
          java.lang.String s, t;
          int result, from;
          java.lang.Exception exc;
      }
      (t = null) ->
      \<{
          #catchAll (exc) {
              result = s.indexOf(t,from);
      }}\>(  exc != null
           & java.lang.NullPointerException::instance(exc) = TRUE)
      \modifies empty
  };


  //
  // lastIndexOf
  //
  stringLastIndexOfNormal {
      \programVariables {
          java.lang.String s;
          int charVal;
          int result;
      }
      true ->
      \<{ 
          result = s.lastIndexOf(charVal);
      }\>(result = clLastIndexOfChar(charVal, clLength(strContent(s)) - 1, strContent(s)))
      \modifies empty
  };

  stringLastIndexOfFromNormal {
      \programVariables {
          java.lang.String s;
          int charVal, from;
          int result;
      }
      true ->
      \<{ 
          result = s.lastIndexOf(charVal, from);
      }\>(result = clLastIndexOfChar(charVal, from, strContent(s)))
      \modifies empty
  };

  stringLastIndexOfStringNormal {
      \programVariables {
          java.lang.String s, t;
          int result;
      }
      (t != null) ->
      \<{
          result = s.lastIndexOf(t);
      }\>(result = clLastIndexOfCl(strContent(t),
                                   clLength(strContent(s)) - 1, 
                                   strContent(s)))
      \modifies empty
  };

  stringLastIndexOfStringExc {
      \programVariables {
          java.lang.String s, t;
          int result;
          java.lang.Exception exc;
      }
      (t = null) ->
      \<{
          #catchAll (exc) {
              result = s.lastIndexOf(t);
      }}\>(  exc != null
           & java.lang.NullPointerException::instance(exc) = TRUE)
      \modifies empty
  };

  stringLastIndexOfStringFromNormal {
      \programVariables {
          java.lang.String s, t;
          int result, from;
      }
      (t != null) ->
      \<{
          result = s.lastIndexOf(t, from);
      }\>(result = clLastIndexOfCl(strContent(t), from, strContent(s)))
      \modifies empty
  };

  stringLastIndexOfStringFromExc {
      \programVariables {
          java.lang.String s, t;
          int result, from;
          java.lang.Exception exc;
      }
      (t = null) ->
      \<{
          #catchAll (exc) {
              result = s.lastIndexOf(t, from);
      }}\>(  exc != null
           & java.lang.NullPointerException::instance(exc) = TRUE)
      \modifies empty
  };


  //
  // toString
  //
  stringToStringNormal {
      \programVariables {
          java.lang.String s, result;
      }
      true ->
      \<{
          result = s.toString();
      }\>(result = s)
      \modifies empty
  };


  //
  // equals
  //
  stringEqualsNormal {
      \programVariables {
          java.lang.String s;
          java.lang.Object obj;
          boolean result;
      }
      true ->
      \<{
          result = s.equals(obj);
      }\>( result = TRUE <-> (  obj != null
          & java.lang.String::instance(obj) = TRUE
          & strContent(s) = strContent((java.lang.String)obj) ))
      \modifies empty
  };


  //
  // isEmpty
  //
  stringIsEmptyNormal {
      \programVariables {
          java.lang.String s;
          boolean result;
      }
      true ->
      \<{
          result = s.isEmpty();
      }\>( result = TRUE <-> strContent(s) = clEmpty )
      \modifies empty
  };


  //
  // copyValueOf
  //
  stringCopyValueOfNormal {
      \programVariables {
          java.lang.String result;
          char[] data;
          Heap heapAtPre;
      }
      (data != null) ->
      {heapAtPre := heap}
      \<{
      result = java.lang.String.copyValueOf(data);
      }\>(   clLength(strContent(result)) = data.length
          & \forall int i; ((i >= 0 & i < data.length)
                  -> clCharAt(i, strContent(result)) = data[i] )
          & boolean::select(heapAtPre, result, java.lang.Object::<created>) = FALSE
          & result != null )
      \modifies empty
  };

  stringCopyValueOfExc {
      \programVariables {
          java.lang.String result;
          char[] data;
          java.lang.Exception exc;
      }
      (data = null) ->
      \<{
          #catchAll (exc) {
              result = java.lang.String.copyValueOf(data);
      }}\> (  exc != null
           & java.lang.NullPointerException::instance(exc) = TRUE)
      \modifies empty
  };

  stringCopyValueOfRangeNormal {
      \programVariables {
          java.lang.String result;
          char[] data;
          int offset, count;
          Heap heapAtPre;
      }
      (  data != null 
       & offset >= 0
       & count >= 0
       & offset+count <= data.length)
      ->
      {heapAtPre := heap}
      \<{
          result = java.lang.String.copyValueOf(data, offset, count);
      }\>(  clLength(strContent(result)) = count
          & \forall int i; ((i >= 0 & i < count)
                         -> clCharAt(i, strContent(result)) = data[i+offset] )
          & boolean::select(heapAtPre, result, java.lang.Object::<created>) = FALSE
          & result != null )
      \modifies empty
  };

  stringCopyValueOfRangeExcBounds {
      \programVariables {
          java.lang.String result;
          char[] data;
          int offset, count;
          java.lang.Exception exc;
      }
      (  data != null
       & ( offset < 0
          | count < 0
          | offset+count > data.length))
      ->
      \<{
          #catchAll (exc) {
              result = java.lang.String.copyValueOf (data,offset,count);
      }}\>(  exc != null
           & java.lang.IndexOutOfBoundsException::instance(exc) = TRUE)
      \modifies empty
  };

  stringCopyValueOfRangeExcNull {
      \programVariables {
          java.lang.String result;
          char[] data;
          int offset, count;
          java.lang.Exception exc;
      }
      (data = null) ->
      \<{
          #catchAll (exc) {
              result = java.lang.String.copyValueOf(data, offset, count);
      }}\> (  exc != null
           & java.lang.NullPointerException::instance(exc) = TRUE)
      \modifies empty
  };


  //
  // getChars
  //
  stringGetCharsNormal {
      \programVariables {
          java.lang.String s;
          char[] dst;
          int srcBegin, srcEnd, dstBegin;
          Heap heapAtPre;
      }
      (  dst != null
       & srcBegin >= 0
       & srcBegin <= srcEnd
       & srcEnd <= clLength(strContent(s))
       & dstBegin >= 0
       & dstBegin + (srcEnd - srcBegin) <= dst.length )
      ->
      {heapAtPre := heap}
      \<{
          s.getChars(srcBegin, srcEnd, dst, dstBegin);
      }\>(\forall int i; ( ((i >= 0 & i < (srcEnd - srcBegin))
		    	      -> clCharAt(srcBegin + i, strContent(s)) = dst[dstBegin + i])
			     & ((i >= 0 & i < dstBegin)
			       -> dst[i] = int::select(heapAtPre, dst, arr(i)))
			     & ((i >= dstBegin + (srcEnd - srcBegin) & i < dst.length)
			       -> dst[i] = int::select(heapAtPre, dst, arr(i))) ))
      \modifies allFields(dst)
  };

  stringGetCharsExcBounds {
      \programVariables {
          java.lang.String s;
          char[] dst;
          int srcBegin, srcEnd, dstBegin;
          java.lang.Exception exc;
      }
      (  dst != null
       & (  srcBegin < 0
          | srcBegin > srcEnd
          | srcEnd > clLength(strContent(s))
          | dstBegin < 0 
          | dstBegin + (srcEnd - srcBegin) > dst.length ))
      ->
      \<{
          #catchAll (exc) {
              s.getChars(srcBegin, srcEnd, dst, dstBegin);
      }}\>( exc != null
          & java.lang.IndexOutOfBoundsException::instance(exc) = TRUE)
      \modifies empty
  };

  stringGetCharsExcNull {
      \programVariables {
          java.lang.String s;
          char[] dst;
          int srcBegin, srcEnd, dstBegin;
          java.lang.Exception exc;
      }
      (dst = null) ->
      \<{
          #catchAll (exc) {
              s.getChars(srcBegin, srcEnd, dst, dstBegin);
      }}\>( exc != null
           & java.lang.NullPointerException::instance(exc) = TRUE)
      \modifies empty
  };


  //
  // toCharArray
  //
  stringToCharArray {
      \programVariables {
          java.lang.String s;
          char[] result;
          Heap heapAtPre;
      }
      true ->
      {heapAtPre := heap}
      \<{
          result = s.toCharArray();
      }\>(  result != null
          & result.length = clLength(strContent(s))
          & \forall int i; ((i >= 0 & i < clLength(strContent(s)))
                       -> clCharAt(i, strContent(s)) = result[i])
          & boolean::select(heapAtPre, result, java.lang.Object::<created>) = FALSE)
      \modifies empty
  };


  //
  // valueOf
  //
  stringValueOfBoolean {
      \programVariables {
          java.lang.String result;
          boolean bVal;
          Heap heapAtPre;
      }
      true ->
      {heapAtPre := heap}
      \<{
          result = java.lang.String.valueOf(bVal);
      }\>(strContent(result) = \if (bVal = TRUE)
                               \then ( clCons('t',
                                       clCons('r',
                                       clCons('u',
                                       clCons('e', clEmpty)))) )
                               \else ( clCons('f',
                                       clCons('a',
                                       clCons('l',
                                       clCons('s',
                                       clCons('e', clEmpty))))) )
          & boolean::select(heapAtPre, result, java.lang.Object::<created>) = FALSE
          & result != null )
      \modifies empty
  };

  stringValueOfChar {
      \programVariables {
          java.lang.String result;
          char charVal;
          Heap heapAtPre;
      }
      true ->
      {heapAtPre := heap}
      \<{
          result = java.lang.String.valueOf(charVal);
      }\>(   strContent(result) = clCons(charVal, clEmpty)
          & boolean::select(heapAtPre, result, java.lang.Object::<created>) = FALSE
          & result != null )
      \modifies empty
  };

  stringValueOfCharArrayNormal {
      \programVariables {
          java.lang.String result;
          char[] data;
          Heap heapAtPre;
      }
      (data != null) ->
      {heapAtPre := heap}
      \<{
          result = java.lang.String.valueOf(data);
      }\>(   (\forall int i; ((i >= 0 & i < data.length)
                      -> clCharAt(i, strContent(result)) = data[i]))
          & clLength(strContent(result)) = data.length
          & boolean::select(heapAtPre, result, java.lang.Object::<created>) = FALSE
          & result != null )
      \modifies empty
  };

  stringValueOfCharArrayExc {
      \programVariables {
          java.lang.String result;
          char[] data;
          java.lang.Exception exc;
      }
      (data = null) ->
      \<{
          #catchAll (exc) {
             result = java.lang.String.valueOf(data);
      }}\>( exc != null
           & java.lang.NullPointerException::instance(exc) = TRUE )
      \modifies empty
  };

  stringValueOfInt {
      \programVariables {
          java.lang.String result;
          int iVal;
          Heap heapAtPre;
      }
      true ->
      {heapAtPre := heap}
      \<{
          result = java.lang.String.valueOf(iVal);
      }\>(   strContent(result) = clRemoveZeros(clTranslateInt(iVal))
          & boolean::select(heapAtPre, result, java.lang.Object::<created>) = FALSE
          & result != null )
      \modifies empty
  };

  stringValueOfLong {
      \programVariables {
          java.lang.String result;
          long lVal;
          Heap heapAtPre;
      }
      true ->
      {heapAtPre := heap}
      \<{
          result = java.lang.String.valueOf(lVal);
      }\>(   strContent(result) = clRemoveZeros(clTranslateInt(lVal))
          & boolean::select(heapAtPre, result, java.lang.Object::<created>) = FALSE
          & result != null )
      \modifies empty
  };

  stringValueOfCharArrayRangeNormal {
      \programVariables {
          java.lang.String result;
          char[] data;
          int offset, count;
          Heap heapAtPre;
      }
      ( data != null & offset >= 0 & count >= 0
       & offset + count <= data.length)
      ->
      {heapAtPre := heap}
      \<{
          result = java.lang.String.valueOf(data, offset, count);
      }\>(   (\forall int i; ((i >= 0 & i < count)
                        -> clCharAt(i, strContent(result)) = data[offset + i]))
          & clLength(strContent(result)) = count
          & boolean::select(heapAtPre, result, java.lang.Object::<created>) = FALSE
          & result != null )
      \modifies empty
  };

  stringValueOfCharArrayRangeExcBounds {
      \programVariables {
          java.lang.String result;
          char[] data;
          int offset, count;
          java.lang.Exception exc;
      }
      (  data != null
       & (offset < 0 | count < 0 | offset+count > data.length))
      ->
      \<{
          #catchAll (exc) {
              result = java.lang.String.valueOf(data, offset, count);
      }}\>(  exc != null
           & java.lang.IndexOutOfBoundsException::instance(exc) = TRUE )
      \modifies empty
  };

  stringValueOfCharArrayRangeExcNull {
      \programVariables {
          java.lang.String result;
          char[] data;
          int offset, count;
          java.lang.Exception exc;
      }
      (data = null) ->
      \<{
          #catchAll (exc) {
              result = java.lang.String.valueOf(data, offset, count);
      }}\>(  exc != null
           & java.lang.NullPointerException::instance(exc) = TRUE )
      \modifies empty
  };

  stringValueOfObjectNull {
      \programVariables {
          java.lang.String result;
          java.lang.Object obj;
          Heap heapAtPre;
      }
      obj = null ->
      {heapAtPre := heap}
      \<{
          result = java.lang.String.valueOf(obj);
      }\>(   strContent(result) = clCons('n', clCons('u',
                        clCons('l', clCons('l', clEmpty))))
          & boolean::select(heapAtPre, result, java.lang.Object::<created>) = FALSE
          & result != null )
      \modifies empty
  };

  stringValueOfObjectNonNull {
      \programVariables {
          java.lang.String result;
          java.lang.Object obj;
      }
      obj != null ->
      \<{
          result = java.lang.String.valueOf(obj);
      }\>( result = obj.toString() )
      \modifies empty
  };
    
    
  //
  // hashCode
  //  
  stringHashCode {
      \programVariables {
          java.lang.String s;
          int result;
      }
      true ->
      \<{
          result = s.hashCode();
      }\>(result = clHashCode(strContent(s)))
      \modifies empty
  };
  
  
  //
  // intern
  //  
  stringIntern {
      \programVariables {
          java.lang.String s;
          String result;
      }
      true ->
      \<{
          result = s.intern();
      }\>(result != null & result = strPool(strContent(s)))
      \modifies empty
  };
    
 
  //
  // Constructors
  //  
  stringConstrNormal {
      \programVariables {
          java.lang.String s;
      }
      true ->
      \<{
          s = new String();
      }\>(strContent(s) = clEmpty)
      \modifies empty
  };

  stringConstrCharArrayNormal {
      \programVariables {
          java.lang.String s;
          char[] v;
      }
      (v != null) ->
      \<{
          s = new String(v);
      }\>(  clLength(strContent(s)) = v.length
          & \forall int i; ((i >= 0 & i < v.length)
                       -> clCharAt(i, strContent(s)) = v[i]) )
      \modifies empty
  };

  stringConstrCharArrayExc {
      \programVariables {
          java.lang.String s;
          char[] v;
          java.lang.Exception exc;
      }
      (v = null) ->
      \<{
           #catchAll (exc) {
               s = new String(v);
      }}\>(  exc != null
           & java.lang.NullPointerException::instance(exc) = TRUE )
      \modifies empty
  };

  stringConstrCharArrayRangeNormal {
      \programVariables {
          java.lang.String s;
          char[] v;
          int offset, count;
      }
      (  v != null & offset >= 0
       & count >= 0 & offset + count <= v.length) ->
      \<{
          s = new String(v, offset, count);
      }\>(  clLength(strContent(s)) = count
          & \forall int i; ((i >= 0 & i < count)
                    -> clCharAt(i, strContent(s)) = v[offset+i]) )
      \modifies empty
  };

  stringConstrCharArrayRangeExcBounds {
      \programVariables {
          java.lang.String s;
          char[] v;
          int offset, count;
          java.lang.Exception exc;
      }
      (v != null & (offset < 0 | count < 0 | offset + count > v.length))
      ->
      \<{
          #catchAll(exc) {
              s = new String(v, offset, count);
      }}\>(  exc != null
           & java.lang.IndexOutOfBoundsException::instance(exc) = TRUE )
      \modifies empty
  };

  stringConstrCharArrayRangeExcNull {
      \programVariables {
          java.lang.String s;
          char[] v;
          int offset, count;
          java.lang.Exception exc;
      }
      (v = null) ->
      \<{
          #catchAll(exc) {
              s = new String(v, offset, count);
      }}\>(  exc != null
           & java.lang.NullPointerException::instance(exc) = TRUE )
	\modifies empty
  };

  stringConstrCopyNormal {
      \programVariables {
          java.lang.String s, t;
      }
      (t != null) ->
      \<{
          s = new String(t);
      }\>( strContent(s) = strContent(t) )
      \modifies empty
  };

  stringConstrCopyExc {
      \programVariables {
          java.lang.String s, t;
          java.lang.Exception exc;
      }
      (t = null) ->
      \<{
          #catchAll(exc) {
              s = new String(t);
      }}\>(  exc != null
           & java.lang.NullPointerException::instance(exc) = TRUE )
      \modifies empty
  };
}

/*
 * Program Rules for Strings
 */
\rules {

  poolKeyIsContentOfValue {
  	\schemaVar \term CharList slit;
  	\find (strContent(strPool(slit))) 
  	\replacewith(slit)
  	\heuristics (simplify)  	
  };


  poolIsInjective {
  	\schemaVar \term CharList slit1, slit2;
  	\find (strPool(slit1) = strPool(slit2))
  	\replacewith(slit1 = slit2)
  	\heuristics (simplify)
  };


  insert_constant_string_value {  
  	\schemaVar \program ConstantStringVariable #csv;
  	\assumes(inReachableState ==>)                           
        \find(#csv) 
        \sameUpdateLevel
  	\replacewith(strPool(#constantvalue(#csv)))
        \heuristics(concrete)  
  };
  
  
  nullString {
  	\find ( strContent(null) )
  	\replacewith(clCons('n', clCons('u', clCons('l', clCons('l', clEmpty)))))
  	\heuristics(concrete)
  };

    
  //
  // Assignment of a Literal
  //
  stringAssignment  {
      \schemaVar \modalOperator { diamond, box} #normalassign;
      \schemaVar \program Variable #v;
      \schemaVar \program StringLiteral #slit;
      \schemaVar \formula post;
      
      \find (\modality{#normalassign}{.. #v = #slit; ...}\endmodality(post))
      \sameUpdateLevel
       
      \replacewith ({ #v := strPool(#slit) }
                    { heap := create(heap, #v) } 
                    \modality{#normalassign}{.. ...}\endmodality(post))
      \add(==> strPool(#slit) = null)

      \heuristics (simplify_prog, simplify_prog_subset)
  };


  //
  // The "+" operator
  //
  stringConcat {
      \schemaVar \modalOperator { diamond, box } #normalassign;
      \schemaVar \program Variable #v;
      \schemaVar \program SimpleStringExpression #sstr1, #sstr2;
      \schemaVar \formula post;
      \schemaVar \skolemTerm java.lang.String sk;

      \find ( \modality{#normalassign} {.. 
                        #v = #sstr1 + #sstr2; 
              ...}\endmodality(post))
      \sameUpdateLevel
      \varcond(\new(sk, \dependingOn(post)))              
              
      \replacewith ( { #v := sk }
                     { heap := create(heap, sk) }
                      \modality{#normalassign}{.. ...}\endmodality(post) )
      \add(strContent(sk) = clConcat(strContent(#sstr1), strContent(#sstr2)) ==> sk = null)
      \heuristics (simplify_prog, simplify_prog_subset)
  };


  stringConcatIntExpLeft {
      \schemaVar \modalOperator { diamond, box } #normalassign;
      \schemaVar \program Variable #v;
      \schemaVar \program SimpleStringExpression #sstrRight;
      \schemaVar \program AnyJavaTypeExpression #seLeft;
      \schemaVar \formula post;
      \schemaVar \skolemTerm java.lang.String sk;

      \find ( \modality{#normalassign}
              {.. #v = #seLeft + #sstrRight; ...}
              \endmodality(post))
      \sameUpdateLevel              
      \varcond(\new(sk, \dependingOn(post)))              
      
      \replacewith ( { #v := sk }
                     { heap := create(heap, sk) }
                      \modality{#normalassign}{.. ...}\endmodality(post) )
      \add(strContent(sk) = clConcat(clTranslateInt(#seLeft), strContent(#sstrRight)) ==> sk = null)
      \heuristics (simplify_prog, simplify_prog_subset)
  };

  
  stringConcatIntExpRight {
      \schemaVar \modalOperator { diamond, box } #normalassign;
      \schemaVar \program Variable #v;
      \schemaVar \program SimpleStringExpression #sstrLeft;
      \schemaVar \program AnyJavaTypeExpression #seRight;
      \schemaVar \formula post;
      \schemaVar \skolemTerm java.lang.String sk;

      \find ( \modality{#normalassign}
              {.. #v = #sstrLeft + #seRight; ...}
              \endmodality(post))
      \sameUpdateLevel              
      \varcond(\new(sk, \dependingOn(post)))              
              
      \replacewith ( { #v := sk }
                     { heap := create(heap, sk) }
                      \modality{#normalassign}{.. ...}\endmodality(post) )
      \add(strContent(sk) = clConcat(strContent(#sstrLeft), clTranslateInt(#seRight)) ==> sk = null)
      \heuristics (simplify_prog, simplify_prog_subset)
  };
  
  stringConcatCharExpLeft {
      \schemaVar \modalOperator { diamond, box } #normalassign;
      \schemaVar \program Variable #v;
      \schemaVar \program SimpleStringExpression #sstrRight;
      \schemaVar \program JavaCharExpression #seLeft;
      \schemaVar \formula post;
      \schemaVar \skolemTerm java.lang.String sk;

      \find ( \modality{#normalassign}
              {.. #v = #seLeft + #sstrRight; ...}
              \endmodality(post))
      \sameUpdateLevel              
      \varcond(\new(sk, \dependingOn(post)))              
      
      \replacewith ( { #v := sk }
                     { heap := create(heap, sk) }
                      \modality{#normalassign}{.. ...}\endmodality(post) )
      \add(strContent(sk) = clConcat(clCons(#seLeft, clEmpty), strContent(#sstrRight)) ==> sk = null)
      \heuristics (simplify_prog, simplify_prog_subset)
  };

  
  stringConcatCharExpRight {
      \schemaVar \modalOperator { diamond, box } #normalassign;
      \schemaVar \program Variable #v;
      \schemaVar \program SimpleStringExpression #sstrLeft;
      \schemaVar \program JavaCharExpression #seRight;
      \schemaVar \formula post;
      \schemaVar \skolemTerm java.lang.String sk;

      \find ( \modality{#normalassign}
              {.. #v = #sstrLeft + #seRight; ...}
              \endmodality(post))
      \sameUpdateLevel              
      \varcond(\new(sk, \dependingOn(post)))              
              
      \replacewith ( { #v := sk }
                     { heap := create(heap, sk) }
                      \modality{#normalassign}{.. ...}\endmodality(post) )
      \add(strContent(sk) = clConcat(strContent(#sstrLeft), clCons(#seRight, clEmpty)) ==> sk = null)
      \heuristics (simplify_prog, simplify_prog_subset)
  };
  
  stringConcatBooleanLeft {
      \schemaVar \modalOperator { diamond, box } #normalassign;
      \schemaVar \program Variable #v;
      \schemaVar \program SimpleStringExpression #sstrRight;
      \schemaVar \program SimpleJavaBooleanExpression #seLeft;
      \schemaVar \formula post;
      \schemaVar \skolemTerm java.lang.String sk;

      \find ( \modality{#normalassign}
              {.. #v = #seLeft + #sstrRight; ...}
              \endmodality(post))
      \sameUpdateLevel
      \varcond(\new(sk, \dependingOn(post)))
              
      \replacewith ( { #v := sk }
                     { heap := create(heap, sk) }
                      \modality{#normalassign}{.. ...}\endmodality(post) )
      \add(strContent(sk) = clConcat(\if (#seLeft = TRUE) 
                                     \then (clCons('t', clCons('r', clCons('u', clCons('e', clEmpty)))))
                                     \else (clCons('f', clCons('a', clCons('l', clCons('s', clCons('e', clEmpty)))))), 
                                     strContent(#sstrRight)) ==> sk = null)
      \heuristics (simplify_prog, simplify_prog_subset)
  };
  

  stringConcatBooleanRight {
      \schemaVar \modalOperator { diamond, box } #normalassign;
      \schemaVar \program Variable #v;
      \schemaVar \program SimpleStringExpression #sstrLeft;
      \schemaVar \program SimpleJavaBooleanExpression #seRight;
      \schemaVar \formula post;
      \schemaVar \skolemTerm java.lang.String sk; 

      \find ( \modality{#normalassign}
              {.. #v = #sstrLeft + #seRight; ...}
              \endmodality(post))
      \sameUpdateLevel              
      \varcond(\new(sk, \dependingOn(post)))              
              
      \replacewith ( { #v := sk }
                     { heap := create(heap, sk) }
                      \modality{#normalassign}{.. ...}\endmodality(post) )
      \add(strContent(sk) = clConcat(strContent(#sstrLeft),
                                    \if (#seRight = TRUE) 
                                    \then (clCons('t', clCons('r', clCons('u', clCons('e', clEmpty))))) 
                                    \else (clCons('f', clCons('a', clCons('l', clCons('s', clCons('e', clEmpty))))))) ==> sk = null)
      \heuristics (simplify_prog, simplify_prog_subset)
  };
  
  
  stringConcatObjectLeft {
      \schemaVar \modalOperator { diamond, box } #normalassign;
      \schemaVar \program Variable #v;
      \schemaVar \program SimpleStringExpression #sstrRight;
      \schemaVar \program SimpleNonStringObjectExpression #seLeft;
      \schemaVar \formula post;    
      \schemaVar \skolemTerm java.lang.String sk;      

      \find ( \modality{#normalassign}
              {.. #v = #seLeft + #sstrRight; ...}
              \endmodality(post))
      \sameUpdateLevel              
      \varcond(\new(sk, \dependingOn(post)))              
              
      "#seLeft not null":              
      \replacewith (  
      	\modality{#normalassign}
              {.. #v = #seLeft.toString() + #sstrRight; ...}
        \endmodality(post) )
      \add(==> #seLeft = null);

      "#seLeft null":
      \replacewith ( { #v := sk }
                     { heap := create(heap, sk) }
                      \modality{#normalassign}{.. ...}\endmodality(post) )
      \add(#seLeft = null, strContent(sk) = clConcat(strContent(null), strContent(#sstrRight)) ==> sk = null)              
        
      \heuristics (simplify_prog, simplify_prog_subset)
  };


  stringConcatObjectRight {
      \schemaVar \modalOperator { diamond, box } #normalassign;
      \schemaVar \program Variable #v;
      \schemaVar \program SimpleStringExpression #sstrLeft;
      \schemaVar \program SimpleNonStringObjectExpression #seRight;
      \schemaVar \formula post;
      \schemaVar \skolemTerm java.lang.String sk;            

      \find ( \modality{#normalassign}
              {.. #v = #sstrLeft + #seRight; ...}
              \endmodality(post))
      \sameUpdateLevel              
      \varcond(\new(sk, \dependingOn(post)))              
              
      "#seRight not null":              
      \replacewith (  
      	\modality{#normalassign}
              {.. #v = #sstrLeft + #seRight.toString(); ...}
        \endmodality(post) )
      \add(==> #seRight = null);
        
      "#seRight null":              
      \replacewith ( { #v := sk }
                     { heap := create(heap, sk) }
                      \modality{#normalassign}{.. ...}\endmodality(post) )
      \add(#seRight = null, strContent(sk) = clConcat(strContent(#sstrLeft), strContent(null)) ==> sk = null)        
        
      \heuristics (simplify_prog, simplify_prog_subset)
  };
}
