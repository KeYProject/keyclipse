\rules {
  /***********
   *  AXIOMS  *
   ***********/
  /*
   * CharList strTranslateInt (int)
   * - translating an integer into a CharList
   */
  translate0 {
    \schemaVar \term numbers iz;
    \find (strTranslateInt(Z(0(iz))))
    \replacewith (strConcat(strTranslateInt(Z(iz)),strCons('0',strEmpty)))
    \heuristics (integerToString)
  };

  translate1 {
    \schemaVar \term numbers iz;
    \find (strTranslateInt(Z(1(iz))))
    \replacewith (strConcat(strTranslateInt(Z(iz)),strCons('1',strEmpty)))
    \heuristics (integerToString)
  };

  translate2 {
    \schemaVar \term numbers iz;
    \find (strTranslateInt(Z(2(iz))))
    \replacewith (strConcat(strTranslateInt(Z(iz)),strCons('2',strEmpty)))
    \heuristics (integerToString)
  };

  translate3 {
    \schemaVar \term numbers iz;
    \find (strTranslateInt(Z(3(iz))))
    \replacewith (strConcat(strTranslateInt(Z(iz)),strCons('3',strEmpty)))
    \heuristics (integerToString)
  };

  translate4 {
    \schemaVar \term numbers iz;
    \find (strTranslateInt(Z(4(iz))))
    \replacewith (strConcat(strTranslateInt(Z(iz)),strCons('4',strEmpty)))
    \heuristics (integerToString)
  };

  translate5 {
    \schemaVar \term numbers iz;
    \find (strTranslateInt(Z(5(iz))))
    \replacewith (strConcat(strTranslateInt(Z(iz)),strCons('5',strEmpty)))
    \heuristics (integerToString)
  };

  translate6 {
    \schemaVar \term numbers iz;
    \find (strTranslateInt(Z(6(iz))))
    \replacewith (strConcat(strTranslateInt(Z(iz)),strCons('6',strEmpty)))
    \heuristics (integerToString)
  };

  translate7 {
    \schemaVar \term numbers iz;
    \find (strTranslateInt(Z(7(iz))))
    \replacewith (strConcat(strTranslateInt(Z(iz)),strCons('7',strEmpty)))
    \heuristics (integerToString)
  };

  translate8 {
    \schemaVar \term numbers iz;
    \find (strTranslateInt(Z(8(iz))))
    \replacewith (strConcat(strTranslateInt(Z(iz)),strCons('8',strEmpty)))
    \heuristics (integerToString)
  };

  translate9 {
    \schemaVar \term numbers iz;
    \find (strTranslateInt(Z(9(iz))))
    \replacewith (strConcat(strTranslateInt(Z(iz)),strCons('9',strEmpty)))
    \heuristics (integerToString)
  };

  translate# {
    \find (strTranslateInt(Z(#)))
    \replacewith (strEmpty)
    \heuristics (integerToString)
  };

  translateNegLit {
    \schemaVar \term numbers iz;
    \find (strTranslateInt(Z(neglit(iz))))
    \replacewith (strConcat(strTranslateInt(Z(iz)),strCons('-',strEmpty)))
    \heuristics (integerToString)
  };

  
  /*
   * CharList strRemoveZeros (CharList) - removing '0' from
   * the beginning of a CharList must not lead to the empty list
   */
  removeZeros {
    \schemaVar \term CharList l;
    \schemaVar \term int c1, c2;
    \find (strRemoveZeros(strCons(c1,strCons(c2,l))))
    \replacewith (\if (c1 = '0') \then (strRemoveZeros(strCons(c2,l)))
    		      	   	 \else (strCons(c1,strCons(c2,l))))
    \heuristics (integerToString)
  };
  
  removeZerosEmpty {
    \schemaVar \term int c;
    \find (strRemoveZeros(strCons(c,strEmpty)))
    \replacewith (strCons(c,strEmpty))
    \heuristics (integerToString)
  };

 /*
   * int strCharAt (int,CharList)
   * an index < 0 and >= strLength(l) in unspecified
   */
  charAtBase {
    \schemaVar \term CharList str;
    \schemaVar \term int fstChar;
    
    \find ( strCharAt(0, strCons(fstChar, str) ) )
    \replacewith  ( fstChar )
 
    \heuristics ( simplify_literals )
  };
   
  charAtObserverDef {
     \schemaVar \term CharList str;
     \schemaVar \term int fstChar;
     \schemaVar \term int pos;
     
     \schemaVar \skolemTerm int newSym;
    
     \find ( strCharAt(pos, str) )
     \sameUpdateLevel         
     \varcond ( \new(newSym, \dependingOn(pos)),
     	        \new(newSym, \dependingOn(str)) )
     \add (
     	(pos >= 0 & pos < strLength(str) & str != strEmpty) ->  
     	   ( pos > 0 -> strCharAt(pos, str) = newSym & strCharAt(0, strSub(pos, pos + 1, str)) = newSym )     	 
     	     ==>
     )
     \heuristics ( defOpsCharAt )
  };
  
  /*
   * = (CharList,CharList)nonNe
   * the equality predicate
   */

  /*
   * Equality is also axiomatized using strCharAt...
   */
  stringEqualityDefinitionSucc {
    // strategy: not both leftStr and rightStr are literals 

    \schemaVar \term CharList leftStr, rightStr;
    \schemaVar \variables int idx;
    
    \find ( ==> leftStr = rightStr )
    \varcond ( \notFreeIn(idx, leftStr), \notFreeIn(idx, rightStr) )
    \add ( ==>
          strLength(leftStr) = strLength(rightStr) &         
          \forall idx; ((idx >= 0 & idx < strLength(leftStr))
                         -> strCharAt(idx, leftStr) = strCharAt(idx, rightStr)) )
    
    \heuristics (defOpsStringEquality)
  };

  stringEqualityRecursiveDef {
    \schemaVar \term CharList leftStr, rightStr;
    \schemaVar \term int fstCharLeft, fstCharRight;
    
    \find (strCons(fstCharLeft, leftStr) = strCons(fstCharRight, rightStr))
    \replacewith (\if (fstCharLeft = fstCharRight) 
    		  \then (leftStr = rightStr)
    		  \else (false))
    \heuristics ( defOpsStringEqualityInline ) 
  };
  
  stringEqualityFalse0 {
    \schemaVar \term CharList str;
    \schemaVar \term int fstChar;
    
    \find ( strCons(fstChar, str) = strEmpty )
    \replacewith ( false )
    \heuristics ( concrete )
  };

  stringEqualityFalse1 {
    \schemaVar \term CharList str;
    \schemaVar \term int fstChar;
    
    \find ( strEmpty = strCons(fstChar, str) )
    \replacewith ( false )
    \heuristics ( concrete )
  };

  /*
   * CharList strSub(int,int,CharList)
   * from start index to end index
   * The axiom substring0 uses the indirection through strConcat,
   * so it does not create a strCons term that is not in value form.
   */
  substringBase { 
    //strategy: apply if idx is nonNegLiteral
    // in case idx is not a non neg literal, but a term 
    // the this case will be taken care of by substringDef followed by that strEmpty is the only 
    // string with zero length 
    
    \schemaVar \term CharList str;
    \schemaVar \term int idx;
    
    \find ( strSub(idx, idx, str) )
    \replacewith ( 
         \if ( idx >= 0 & idx <= strLength(str) ) 
         \then ( strEmpty )
         \else ( strSub(idx, idx, str) ) )
    
    \heuristics ( defOpsSubstringInlineBase )
  };
  
  substringStepCons { //strategy: apply if endIdx is posliteral
    \schemaVar \term CharList str;
    \schemaVar \term int fstChar;
    \schemaVar \term int endIdx;
    
    \find ( strSub (0, endIdx, strCons(fstChar, str)) )
    \replacewith ( \if (endIdx > 0)
                   \then (strConcat(strCons(fstChar, strEmpty), strSub(0, endIdx - 1, str)))
                   \else (strSub(0, endIdx, strCons (fstChar, str))) )
    \heuristics ( defOpsSubstringInlineStepCons )
  };

  substringInline { //strategy: apply if startIdx is literal and endIdx
    \schemaVar \term CharList str;
    \schemaVar \term int fstChar;
    \schemaVar \term int startIdx, endIdx;
    
    \find ( strSub (startIdx, endIdx, strCons(fstChar, str)) )
    \replacewith ( 
    	\if (startIdx > 0 & startIdx <= endIdx) 
    	\then (strSub(startIdx - 1, endIdx - 1, str))
    	\else (strSub(startIdx, endIdx, strCons(fstChar, str))) 
    )
    \heuristics ( defOpsSubstringInline )
  };

  substringDef { //strategy: apply if startIdx is literal
    \schemaVar \term CharList str;
    \schemaVar \skolemTerm CharList newSym;
    \schemaVar \term int fstChar;
    \schemaVar \term int startIdx, endIdx;
    \schemaVar \variables int pos;
    
    
    \find ( strSub (startIdx, endIdx, str) )
    \sameUpdateLevel
    \varcond ( \new(newSym, \dependingOn(startIdx)), 
               \new(newSym, \dependingOn(endIdx)),
               \new(newSym, \dependingOn(str)),
               \notFreeIn(pos, startIdx, endIdx, str) )
    \add ( 
        ( startIdx >=0       & 
          startIdx <= endIdx & 
          endIdx <= strLength (str) ) 
      ->
        ( strSub (startIdx, endIdx, str) = newSym & 
          strLength(newSym) = endIdx - startIdx         &
          \forall pos; ( 
                ( pos >= startIdx & pos < endIdx )
                     -> strCharAt(pos, str) = strCharAt(pos, newSym)
          )
        ) ==> )
    \heuristics ( defOpsSubstring, stringsIntroduceNewSym )
  };
  
  
  /*
   * CharList strConcat (CharList,CharList)
   * concatenate the two lists
   */
  concatEmpty1 {
    \schemaVar \term CharList str;
    \find ( strConcat(strEmpty, str) )
    \replacewith ( str )
    \heuristics ( simplify_literals )
  };

  concatEmpty2 {
    \schemaVar \term CharList str;
    \find ( strConcat(str, strEmpty) )
    \replacewith ( str )
    \heuristics ( simplify_literals )
  };
  
  concatCons {
    \schemaVar \term CharList leftStr, rightStr;
    \schemaVar \term int fstCharLeft, fstCharRight;

    \find ( strConcat(strCons(fstCharLeft, leftStr), strCons(fstCharRight, rightStr)) )
    
    \replacewith ( strCat(strCons(fstCharLeft, strEmpty), 
                       strConcat(leftStr, strCons(fstCharRight, rightStr))) )

    \heuristics ( simplify_literals )
  };
  

  concatConsDef {
    // strategy, apply only once and only if leftStr or rightStr is not a literal  
    \schemaVar \term CharList leftStr, rightStr;
    \schemaVar \skolemTerm CharList newSym;
    
    \find ( strConcat(leftStr, rightStr) )
    \sameUpdateLevel    
    \varcond ( \new(newSym, \dependingOn(leftStr)) ,
      	       \new(newSym, \dependingOn(rightStr)) )
    \add (
	strConcat(leftStr, rightStr) = newSym &
        strLength(newSym) = strLength (leftStr) + strLength (rightStr) &
        strSub(0, strLength(leftStr), newSym) = leftStr &
        strSub(strLength(leftStr), strLength(newSym), newSym) = rightStr 
    	==> 
    )

    \heuristics ( defOpsConcat, stringsIntroduceNewSym )
  };


/** concat should not built terms, where a strCons subterm is
     not in value form so this axiom should be used with care **/
  concatConsDep {
    \schemaVar \term CharList l1, l2;
    \schemaVar \term int c;

    \find (strConcat(strCons(c,l1),l2))
    \replacewith (strCons(c,strConcat(l1,l2)))
  
  };

  cat {
    \schemaVar \term CharList str;
    \schemaVar \term int fstCharLeft, fstCharRight;
    
    \find ( strCat(strCons(fstCharLeft, strEmpty), strCons(fstCharRight, str)) )
    \replacewith ( strCons(fstCharLeft, strCons(fstCharRight, str)) )
    
    \heuristics ( simplify_literals )
  };

  /*
   * int strLength(CharList)
   */
  lengthEmpty {
    \find ( strLength(strEmpty) )
    \replacewith (0)
    
    \heuristics ( simplify_literals )
  };

  lengthCons {
    \schemaVar \term CharList l;
    \schemaVar \term int c;
    
    \find ( strLength(strCons(c, l)) )
    \replacewith ( strLength(l) + 1 )
    
    \heuristics ( simplify_literals )
  };
   
  /*
   * strContains (CharList,CharList)
   * predicate indicating whether the first list
   * is contained in the second
   */
  containsAxiomAntec {
    \schemaVar \term CharList searchString, textString;
    \schemaVar \variables int iv;

    \find ( strContains(searchString, textString) ==> )
    \varcond ( \notFreeIn (iv, searchString), \notFreeIn (iv, textString) )
    \replacewith ( \exists iv; (  iv >= 0
                               & iv + strLength(searchString) <= strLength(textString)
                               & strSub(iv, iv + strLength(searchString), textString) = searchString) ==> )
    
    \heuristics ( stringsExpandDefNormalOp )
  };

  containsAxiomSucc {
    \schemaVar \term CharList searchString, textString;
    \schemaVar \variables int iv;

    \find (==> strContains(searchString, textString) )
    \varcond ( \notFreeIn (iv, searchString), \notFreeIn (iv, textString) )
    \replacewith ( ==> \exists iv; (  iv >= 0
                       	            & iv + strLength(searchString) <= strLength(textString)
                                    & strSub(iv, iv + strLength(searchString), textString) = searchString) )
    
    \heuristics ( stringsExpandDefNormalOp )
  };
  
  
   contains {
    \schemaVar \term CharList searchString, textStringTail;
    \schemaVar \term int fstTextCharacter;
    \schemaVar \skolemTerm int newSym;    
    
    \find (strContains(searchString, strCons(fstTextCharacter, textStringTail) ) )
    \sameUpdateLevel
    \varcond ( \new(newSym, \dependingOn(searchString) ) )    
    \replacewith ( newSym < strLength(textStringTail) & 
                     ( strSub(0, newSym, strCons(fstTextCharacter, textStringTail)) = searchString | 
                       strContains(searchString, textStringTail) ) )
    \add ( strLength(searchString) = newSym ==>)
                               
    \heuristics ( stringsContainsDefInline, stringsIntroduceNewSym )
    
  };

 
  /*
   * structural induction over all CharLists
   */
  charlist_induction {
    \schemaVar \variables CharList lv;
    \schemaVar \variables int cv;
    \schemaVar \formula phi;
    \varcond ( \notFreeIn(cv,phi)  )
    "Base Case": \add ( ==> {\subst lv; strEmpty}(phi) );
    "Step Case": \add ( ==> \forall lv; \forall cv;
                              ((inChar(cv) & phi)
                               -> {\subst lv; strCons(cv,lv)}phi) );
    "Use Case":  \add ( \forall lv; (phi) ==> )
  };

  /*
   * int strIndexOfChar (int,int,CharList)
   */
  /*indexOf {
    \schemaVar \term CharList l;
    \schemaVar \term int c;
    \schemaVar \term int i;
    \schemaVar \variables int iv;
    \find (strIndexOfChar (c,i,l))
    \varcond ( \notFreeIn(iv,l),
               \notFreeIn(iv,c),
               \notFreeIn(iv,i) )
    \replacewith ( \ifEx iv; (  iv >= 0
                              & iv >= i
                              & iv < strLength(l)
                              & strCharAt(iv,l) = c )
                     \then (iv)
                     \else (-1) )
    \heuristics ( stringsExpandDefNormalOp )
  };*/


  
  /*
   * CharList strReplace (int,int,CharList)
   * replace all occurrences of the first character
   * with the second character
   */
  replaceEmpty {
    \schemaVar \term int searchChar, replChar;
    
    \find ( strReplace(searchChar, replChar, strEmpty))
    \replacewith ( strEmpty )
    \heuristics ( stringsSimplify )
  };

  replaceCons {
    \schemaVar \term CharList str;
    \schemaVar \term int searchChar, replChar, fstChar;
    
    \find ( strReplace(searchChar, replChar, strCons(fstChar, str)) )
    \replacewith ( \if (searchChar = fstChar)
                   \then (strConcat(strCons(replChar, strEmpty),
                                 strReplace(searchChar, replChar, str)))
                   \else (strConcat(strCons(fstChar, strEmpty),
                                 strReplace(searchChar, replChar, str))) )
    \heuristics ( defOpsReplaceInline )
  };
  
  replaceDef {
    \schemaVar \term CharList str;
    \schemaVar \skolemTerm CharList newSym;
    \schemaVar \term int searchChar, replChar;
    \schemaVar \variables int pos;
    
    \find ( strReplace(searchChar, replChar, str) )
    \sameUpdateLevel
    \varcond ( \notFreeIn(pos, str, searchChar, replChar),
               \new(newSym, \dependingOn(searchChar)),
               \new(newSym, \dependingOn(replChar)),
               \new(newSym, \dependingOn(str)) )  
    \add ( strReplace(searchChar, replChar, str) = newSym &
       strLength (newSym) = strLength(str) & 
       \forall pos; ( ( pos >= 0 & pos < strLength(str) ) ->  
               \if ( strCharAt (pos, str) = searchChar)
               \then ( strCharAt (pos, newSym) = replChar )
               \else ( strCharAt (pos, str) = strCharAt (pos, newSym) ) 
       ) ==> )
    
    \heuristics ( defOpsReplace, stringsIntroduceNewSym )
  };
  
  
  /*
   * strEndsWith(CharList,CharList)
   * predicate indicating if the first list
   * is a suffix of the second one
   */
  endsWith {
    \schemaVar \term CharList l1, l2;
    
    \find (strEndsWith(l1,l2))
    \replacewith ( \if (strLength(l1) > strLength(l2))
    		   \then (false)
		   \else (strSub(strLength(l2)-strLength(l1),
                                    strLength(l2),l2) = l1) )
    
    \heuristics ( defOpsStartsEndsWith )
  };

  /*
   * strStartsWith(CharList,CharList)
   * predicate indicating if the first list
   * is a prefix of the second one
   */
  startsWith {
    \schemaVar \term CharList l1,l2;
    \find(strStartsWith(l1,l2))
    \replacewith ( \if (strLength(l1)>strLength(l2))
    		   \then (false)
		   \else (strSub(0,strLength(l1),l2) = l1) )
    
    \heuristics ( defOpsStartsEndsWith )
  };

  /*
   * int strIndexOfStr (CharList,int,CharList)
   */
  /*indexOfStr {
    \schemaVar \term CharList l1, l2;
    \schemaVar \term int i;
    \schemaVar \variables int iv;
    \find (strIndexOfStr(l1,i,l2))
    \varcond ( \notFreeIn (iv,l1), \notFreeIn (iv,l2), \notFreeIn (iv,i) )
    \replacewith ( \ifEx iv; (iv >= i
    		   	      & iv >= 0
    		   	      & iv+strLength(l1) <= strLength(l2)
			      & (strSub(iv,iv+strLength(l1),l2) = l1))
                   \then (iv)
                   \else (-1) )
    \heuristics ( stringsExpandDefNormalOp )    
  };*/

  /*
   * int strLastIndexOfChar (int,int,CharList)
   */
  /*lastIndexOf {
      \schemaVar \term CharList l;
      \schemaVar \term int c;
      \schemaVar \term int i;
      \schemaVar \variables int iv;
      \find (strLastIndexOfChar (c,i,l))
      \varcond ( \notFreeIn (iv,c), \notFreeIn (iv,i), \notFreeIn (iv,l) )
      \replacewith (\ifEx iv; (  iv > 0
                                & i-iv >= 0
                                & i-iv < strLength(l)
                                & strCharAt(i-iv,l) = c)
                    \then (i - iv)
                    \else (-1))
      \heuristics ( stringsExpandDefNormalOp )  
  };*/

  /*
   * int strLastIndexOfStr (CharList,int,CharList)
   */
  /*lastIndexOfStr {
      \schemaVar \term CharList l1,l2;
      \schemaVar \term int i;
      \schemaVar \variables int iv;
      \find (strLastIndexOfStr (l1,i,l2))
      \varcond ( \notFreeIn (iv,l1), \notFreeIn (iv,i), \notFreeIn (iv,l2) )
      \replacewith (\ifEx iv; (  iv > 0
                                & i-iv >= 0
                                & strLength(l1)+i-iv <= strLength(l2)
                                & (strSub(i-iv,strLength(l1)+i-iv,l2) = l1))
                    \then (i - iv)
                    \else (-1))
      \heuristics ( stringsExpandDefNormalOp )
  };*/

 

  /**
   * we define only the base case
   */
  hashCodeBase {
    \find ( strHashCode(strEmpty) )
    \replacewith ( 0 )
    \heuristics ( simplify_literals )
  };

  /************
   *  LEMMAS  *
   ************/
   
  substringIdentity0 {
    \schemaVar \term CharList l;
    \schemaVar \term int len;    

    \assumes (strLength(l) = len ==>)
    \find ( strSub(0, len, l) )
    \sameUpdateLevel
    \replacewith ( l )
    \heuristics ( stringsSimplify )

    \displayname "substringIdentity"
  };


  substringIdentity1 {
    \schemaVar \term CharList str;

    \find ( strSub(0, strLength(str), str) )
    \replacewith ( str )
    \heuristics ( stringsSimplify )
    
    \displayname "substringIdentity"
  };

   /*
    * strEmpty is the only list having length 0
    */
   zeroLengthIsEmptyString { // strategy: apply only once
    \schemaVar \term CharList str;
    
    \find ( strLength(str) = 0 ==> )
    \add ( str = strEmpty ==> )
    \heuristics ( stringsLengthInvariant )
  };

  /*
   * The length of every CharList is at least 0
   */
  lengthNonNegative {
      \schemaVar \term CharList str;
  
      \find (strLength(str)) 
      \sameUpdateLevel
      \add (strLength(str) >= 0 ==> )
      \heuristics ( stringsLengthInvariant )
  };  
  
  /*
   * The length of a concatenation
   */
  lengthConcat {
      \schemaVar \term CharList leftStr, rightStr, concatStr;
      
      \assumes ( strConcat(leftStr, rightStr) = concatStr ==>)
      \find ( strLength(concatStr) )
      \sameUpdateLevel      
      \replacewith ( strLength(leftStr) + strLength(rightStr) )
      \heuristics ( stringsExpandLengthConcat )
      
      \displayname "lengthConcat"
  };

  /*
   * A strReplace application will not change
   * the length of the string
   */
  lengthReplace {
      \schemaVar \term CharList str, newStr;
      \schemaVar \term int searchChar, replaceChar;
      
      \assumes ( strReplace(searchChar, replaceChar, str) = newStr ==>)      
      \find ( strLength(newStr) )
      \sameUpdateLevel
      \replacewith( strLength(str) )
      \heuristics ( stringsSimplify )
  };

  /*
   * strCharAt applied on a concat will either refer
   * to the first or the second subterm
   */
  charAtConcat {
      \schemaVar \term CharList leftStr,rightStr;
      \schemaVar \term int charPos;
      
      \find ( strCharAt(charPos, strConcat(leftStr, rightStr)))
      \replacewith ( \if (charPos >= 0 & charPos < strLength(leftStr) + strLength(rightStr))
                     \then (\if (charPos < strLength(leftStr))
                             \then (strCharAt(charPos, leftStr))
                             \else (strCharAt(charPos - strLength(leftStr), rightStr)))
                     \else (strCharAt(charPos, strConcat(leftStr, rightStr))) )
      \heuristics ( stringsConcatNotBothLiterals, stringsReduceConcat )
  };

  /*
   * Two succedent substring calls can be combined to one
   */
  substringSubstring {
      \schemaVar \term CharList str;
      \schemaVar \skolemTerm CharList newSym;
      \schemaVar \term int outerStartIdx, outerEndIdx, innerStartIdx, innerEndIdx;
      
      \find ( strSub(outerStartIdx, outerEndIdx, strSub(innerStartIdx, innerEndIdx, str)) )
      \sameUpdateLevel
      
      \varcond ( \new(newSym, \dependingOn(str)),
                 \new(newSym, \dependingOn(outerStartIdx)), 
                 \new(newSym, \dependingOn(outerEndIdx)), 
                 \new(newSym, \dependingOn(innerStartIdx)) ) 
      \add ( (innerStartIdx >= 0 
      	      & innerEndIdx >= innerStartIdx
              & innerEndIdx <= strLength(str)
              & outerStartIdx >= 0
              & outerEndIdx >= outerStartIdx 
              & outerEndIdx <= innerEndIdx - innerStartIdx) 
            -> 
             (
             strSub(outerStartIdx, outerEndIdx, strSub(innerStartIdx, innerEndIdx, str)) = newSym & 
             strSub(outerStartIdx + innerStartIdx, innerStartIdx + outerEndIdx, str) = newSym) ==> )      
      \heuristics ( stringsReduceSubstring, stringsIntroduceNewSym )      
  };

  substringSubstring2 {
      \schemaVar \term CharList str, innerSub;
      \schemaVar \skolemTerm CharList newSym;
      \schemaVar \term int outerStartIdx, outerEndIdx, innerStartIdx, innerEndIdx;
      
      \assumes ( strSub(innerStartIdx, innerEndIdx, str) = innerSub ==> )
      \find ( strSub(outerStartIdx, outerEndIdx, innerSub) )
      \sameUpdateLevel      
      \varcond ( \new(newSym, \dependingOn(str)),
                 \new(newSym, \dependingOn(outerStartIdx)), 
                 \new(newSym, \dependingOn(outerEndIdx)), 
                 \new(newSym, \dependingOn(innerStartIdx)) ) 
      \add ( (innerStartIdx >= 0 
      	      & innerEndIdx >= innerStartIdx
              & innerEndIdx <= strLength(str)
              & outerStartIdx >= 0
              & outerEndIdx >= outerStartIdx 
              & outerEndIdx <= innerEndIdx - innerStartIdx) 
            -> 
             ( strSub(outerStartIdx, outerEndIdx, innerSub) = newSym & 
               strSub(outerStartIdx + innerStartIdx, innerStartIdx + outerEndIdx, str) = newSym ) ==> )      
      \heuristics ( stringsReduceSubstring, stringsIntroduceNewSym )      
  };


  /*
   * l is not equal to strCons(c,l)
   */
  consEq {
      \schemaVar \term CharList str;
      \schemaVar \term int fstChar;
      \find ( str = strCons(fstChar, str) )
      \replacewith ( false )
      \heuristics ( stringsSimplify )
  };

  /*
   * concatenation of a non empty string
   * changes the original string
   */
  concatEqLeft {
      \schemaVar \term CharList leftStr, rightStr;
      \assumes ( ==> leftStr = strEmpty)
      \find ( strConcat(leftStr, rightStr) = rightStr )
      \sameUpdateLevel
      \replacewith ( false )
      \heuristics ( stringsSimplify )
  };
  
  concatEqRight {
      \schemaVar \term CharList leftStr, rightStr;
      \assumes ( ==> rightStr = strEmpty)
      \find ( strConcat(leftStr, rightStr) = leftStr )
      \sameUpdateLevel
      \replacewith ( false )
      \heuristics ( stringsSimplify )
  };
  
  equalReduce {
    \schemaVar \term CharList l1, l2;
    \schemaVar \term int c;
    \find (strCons(c,l1) = strCons(c,l2))
    \replacewith (l1 = l2)
    \heuristics ( stringsSimplify ) 
  };
  
  equalCharacters {
    \schemaVar \term numbers iz1, iz2;
    \find ( C(iz1) = C(iz2) )
    \replacewith ( Z(iz1) = Z(iz2) )
    \heuristics ( stringsSimplify ) 
  };
  

// CONTINUE (rules below are sound, but optimal?)

  substringConcat {
      \schemaVar \term CharList leftStr, rightStr;
      \schemaVar \term int startIdx, endIdx;
      
      \find ( strSub(startIdx, endIdx, strConcat(leftStr, rightStr)) )
      \replacewith ( \if (  startIdx >= 0 & endIdx >= startIdx
                          & endIdx <= strLength(leftStr) + strLength(rightStr))
                     \then (\if (endIdx <= strLength(leftStr))
                            \then (strSub(startIdx, endIdx, leftStr))
                            \else (\if (startIdx >= strLength(leftStr))
                                   \then (strSub(
                                           startIdx - strLength(leftStr),
                                           endIdx - strLength(leftStr), rightStr))
                                   \else (strConcat(
                                           strSub(startIdx,
                                                     strLength(leftStr),
                                                     leftStr),
                                           strSub(0,
                                                     endIdx - strLength(leftStr),
                                                     rightStr)))))
                     \else (strSub(startIdx, endIdx, strConcat(leftStr, rightStr))) )
      \heuristics ( stringsReduceOrMoveOutsideConcat, stringsConcatNotBothLiterals )      
  };

  substringConcat2 {
      \schemaVar \term CharList leftStr, rightStr, concatStr;
      \schemaVar \term int startIdx, endIdx;

      \assumes ( strConcat(leftStr, rightStr) = concatStr ==> )      
      \find ( strSub(startIdx, endIdx, concatStr) )
      \replacewith ( \if (  startIdx >= 0 & endIdx >= startIdx
                          & endIdx <= strLength(concatStr) )
                     \then (\if (endIdx <= strLength(leftStr))
                            \then (strSub(startIdx, endIdx, leftStr))
                            \else (\if (startIdx >= strLength(leftStr))
                                   \then (strSub(
                                           startIdx - strLength(leftStr),
                                           endIdx - strLength(leftStr),rightStr))
                                   \else (strConcat(
                                           strSub(startIdx,
                                                     strLength(leftStr),
                                                     leftStr),
                                           strSub(0,
                                                     endIdx - strLength(leftStr),
                                                     rightStr)))))
                     \else (strSub(startIdx, endIdx, concatStr)) )
      \heuristics ( stringsReduceOrMoveOutsideConcat, stringsConcatNotBothLiterals )      
  
      \displayname "substringConcat"
  };

  concatConcat {
      \schemaVar \term CharList outerLeft, innerLeft, innerRight;
      
      \find ( strConcat(outerLeft, strConcat(innerLeft, innerRight)) )
      \replacewith ( strConcat(strConcat(outerLeft, innerLeft), innerRight) )
      
      \heuristics ( stringsSimplify )      
  };

  replaceSubstring {
      \schemaVar \term CharList str, subStr;
      \schemaVar \term int searchChar, replaceChar;
      \schemaVar \term int startIdx, endIdx;

      \assumes (strSub(startIdx, endIdx, str) = subStr ==>)

      \find (strReplace(searchChar, replaceChar, subStr))
      \replacewith (\if (startIdx >= 0 & endIdx >= startIdx & endIdx <= strLength(str))
                    \then (strSub(startIdx, endIdx, strReplace(searchChar, replaceChar, str)))
                    \else (strReplace(searchChar, replaceChar, subStr)) )
      \heuristics ( stringsMoveReplaceInside )      

      \displayname "replaceSubstring"      
  };

  /*
   * A strReplace inside a strConcat application
   * does not affect the strConcat...
   */
  replaceConcat {
      \schemaVar \term CharList leftStr, rightStr;
      \schemaVar \term int searchChar, replaceChar;
      \find (strReplace(searchChar, replaceChar, strConcat(leftStr, rightStr)))
      \replacewith (strConcat(strReplace(searchChar, replaceChar, leftStr),
                           strReplace(searchChar, replaceChar, rightStr)))
      \heuristics ( stringsMoveReplaceInside )      
   };
}

