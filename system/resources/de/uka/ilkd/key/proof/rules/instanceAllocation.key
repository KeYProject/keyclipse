// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2009 Universitaet Karlsruhe Germany
//                         Universitaet Koblenz-Landau, Germany
//                         and Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
//
//

\sorts {
  \generic G;
  \generic H \extends Object;
  \generic J \extends Object;
  \generic K;
  \generic alphaObj \extends Object;
  \generic betaObj \extends Object;
}


\schemaVariables {
  \modalOperator { diamond, box } #allmodal ;
  
  \program <allocate> #allocate;
 
  \program SpecialConstructorReference #scr;
 
  \program InstanceCreation #n;
  \program ArrayCreation #na;
  \program ArrayInitializer #arrayinitializer;
 
  \program SimpleExpression #len;
   
  \program StaticVariable #staticField;
  \program Variable #v0;
  \program LeftHandSide #lhs;
  \program Type #t, #t2;

 \program ExecutionContext #ex;
 
  \term int idx0, idx1, allocNr;
   
  \variables int iv;
  \variables boolean bv;
  \variables G ov;
  \term G ot;
  \term H const;
  \term J obj;
  \formula post, b;
  
  \term boolean bool;
  \skolemTerm G sk ;
  
  \term J array;
  // attention some strategies rely on the name of the SV if you change it, please adapt
  // the strategies as well
  \term int negLit;
  \term int nonNegLit;
}
 
 
\rules(programRules:Java) {

//----------------------------------------------------------------------------
//-----------                 object creation                      -----------
//----------------------------------------------------------------------------

   instanceCreationAssignment { \find (\modality{#allmodal}{.. #lhs = #n;  ...}\endmodality(post)) 
        \varcond(\new(#v0, \typeof(#lhs)))  //XXX, was: \new(#v0, \typeof(#n))
        \replacewith (\modality{#allmodal}{.. #typeof(#v0) #v0 = #create-object(#n); 
		          #constructor-call(#v0, #n); 
                          #post-work(#v0);
			  #lhs = #v0;
		      ...}\endmodality(post)) 
	\heuristics(simplify_object_creation)
   };

   instanceCreation { \find (\modality{#allmodal}{.. #n ...}\endmodality(post)) 
        \varcond(\new(#v0, \typeof(#n)))
        \replacewith (\modality{#allmodal}{.. #typeof(#v0) #v0 = #create-object(#n); 
		          #constructor-call(#v0, #n); 
                          #post-work(#v0); ...}\endmodality(post)) 
	\heuristics(simplify_object_creation)
   };


   allocateInstance {    
        \find (==> \modality{#allmodal}{.#t2().. #t(#lhs)::#t.#allocate(); ...}\endmodality(post))
	\varcond(\hasSort(#t2, alphaObj))
        \replacewith (==> {heap := store(heap,#lhs,java.lang.Object::<created>,TRUE)}
	                  \modality{#allmodal}{..  ...}\endmodality(post))
	\add(#lhs != null
	     & boolean::select(heap, #lhs, java.lang.Object::<created>) = FALSE 
	     & alphaObj::exactInstance(#lhs) = TRUE ==>)
	
	\heuristics(simplify_object_creation)
   };

   special_constructor_call { 
        \find (\modality{#allmodal}{.. #scr ...}\endmodality(post)) 
        \replacewith (\modality{#allmodal}{.. #special-constructor-call(#scr); ...}\endmodality(post)) 
	\heuristics(simplify_object_creation)
   };

   

//----------------------------------------------------------------------------
//-----------                 array creation                      -----------
//----------------------------------------------------------------------------

   

   arrayCreation { 
        \find (\modality{#allmodal}{.. #lhs = #na; ...}\endmodality(post)) 	
        \varcond(\new(#v0, \typeof(#na)))	
        \replacewith (\modality{#allmodal}{.. 	
		#typeof(#na) #v0; 
		#init-array-creation(#v0, #na);
                #lhs = #v0; ...}\endmodality(post)) 
	    \heuristics(simplify_prog)
   };

/*XXX, rule above seems to be used always
   arrayCreationWithInitializers { 
        \find (\modality{#allmodal}{.. #lhs = #arrayinitializer; ...}\endmodality(post)) 	
        \varcond(\new(#v0, \typeof(#lhs)))	
        \replacewith (\modality{#allmodal}{.. 	
		#typeof(#lhs) #v0; 
		#init-array-creation(#v0, #arrayinitializer);
                #lhs = #v0; ...}\endmodality(post)) 
	   \heuristics(simplify_prog)
   };
*/

// --------- createdness of objects -------------- //

   only_created_objects_are_referenced {
         \schemaVar \term Field f;
   	          
         \assumes (boolean::select(heap,obj,java.lang.Object::<created>) = TRUE, inReachableState ==>)	 
         \find ( alphaObj::select(heap, obj, f)) \sameUpdateLevel	 
         \add ( boolean::select(heap, alphaObj::select(heap,obj,f), java.lang.Object::<created>) = TRUE 
                | alphaObj::select(heap,obj,f) = null ==>)	 
         \displayname "referenced object is created"	 
   };
   
   only_created_objects_are_referenced_non_null {
         \schemaVar \term Field f;
         
         \assumes (boolean::select(heap,obj,java.lang.Object::<created>) = TRUE, inReachableState 
                    ==> alphaObj::select(heap,obj,f) = null)	 
         \find ( alphaObj::select(heap,obj,f) ) \sameUpdateLevel	 
         \add ( boolean::select(heap, alphaObj::select(heap,obj,f), java.lang.Object::<created>) = TRUE ==>)	 
         \heuristics(inReachableStateImplication)
         \displayname "referenced object is created"	 
   };

   only_created_objects_are_referenced_right {
         \schemaVar \term Field f;
   
         \assumes (inReachableState ==>)	 
         \find (==> boolean::select(heap, alphaObj::select(heap,obj,f), java.lang.Object::<created>) = TRUE)
         \add (boolean::select(heap, obj, java.lang.Object::<created>) = FALSE | obj=null | alphaObj::select(heap,obj,f) = null ==>)	 
         \heuristics(inReachableStateImplication)
         \displayname "referenced object is created"	 
   };

   only_created_objects_are_referenced_by_arrays_right {
         \assumes (inReachableState ==>)
         \find (==> boolean::select(heap, alphaObj::select(heap, array, arr(idx0)), java.lang.Object::<created>) = TRUE)
         \add (boolean::select(heap,array,java.lang.Object::<created>) = FALSE | array=null | alphaObj::select(heap,array,arr(idx0)) = null ==>)	 
         \heuristics(inReachableStateImplication)
         \displayname "indexed object is created"	 
   };

/*
   enclosing_this_is_created{
         \assumes (obj.<created>@(java.lang.Object) = TRUE, inReachableState ==>)	 
         \find ( obj.#et ) \sameUpdateLevel
         \add ((obj.#et).<created>@(java.lang.Object) = TRUE  ==> obj.#et=null)
         \heuristics(inReachableStateImplication)
         \displayname "enclosing instance is created"
   };
*/
   
   // extremely common situation due to skolem constants introduced during proofs
   only_created_object_are_referenced_non_null2 {
         \schemaVar \term Field f;
      
         \assumes (boolean::select(heap,obj,java.lang.Object::<created>) = TRUE, inReachableState ==> const = null)
         \find ( alphaObj::select(heap,obj,f) = const ==> )	 
         \add ( boolean::select(heap, const, java.lang.Object::<created>) = TRUE ==>)	 
         \heuristics(inReachableStateImplication)
         \displayname "referenced object is created"	 
   };
   

   only_created_object_are_referenced_by_arrays {	 
         \assumes (boolean::select(heap,array,java.lang.Object::<created>) = TRUE, inReachableState ==>)	 
         \find ( alphaObj::select(heap,array,arr(idx0)) ) \sameUpdateLevel
         \add (boolean::select(heap, alphaObj::select(heap,array,arr(idx0)), java.lang.Object::<created>) = TRUE 
               | alphaObj::select(heap,array,arr(idx0)) = null ==>)	 
         \displayname "indexed object is created"  
   };
   
   only_created_object_are_referenced_by_arrays_non_null {	 
         \assumes (boolean::select(heap,array,java.lang.Object::<created>) = TRUE, inReachableState 
                   ==> alphaObj::select(heap,array,arr(idx0)) = null)	 
         \find ( alphaObj::select(heap,array,arr(idx0)) ) \sameUpdateLevel	 
         \add ( boolean::select(heap, alphaObj::select(heap,array,arr(idx0)), java.lang.Object::<created>) = TRUE ==>)
         \heuristics(inReachableStateImplication)
         \displayname "indexed object is created"  
   };
   
   // extremely common situation due to skolem constants introduced during proofs
   only_created_object_are_referenced_by_arrays_non_null2 {
         \assumes (boolean::select(heap,array,java.lang.Object::<created>) = TRUE, inReachableState ==> const = null)
         \find ( alphaObj::select(heap,array,arr(idx0)) = const ==> )	 
         \add ( boolean::select(heap,const,java.lang.Object::<created>) = TRUE ==>)
         \heuristics(inReachableStateImplication)
         \displayname "indexed object is created"  
   };
   
   only_created_object_are_referenced_by_arrays_2 {	 
         \assumes (boolean::select(heap,array,java.lang.Object::<created>) = TRUE, inReachableState ==>)	 
         \find (==> boolean::select(heap, alphaObj::select(heap,array,arr(idx0)), java.lang.Object::<created>) = TRUE ) 
         \replacewith (==> !alphaObj::select(heap,array,arr(idx0)) = null)
         \heuristics (simplify) 
         \displayname "indexed object is created"  
   };   
      
      
  
   static_fields_of_initialized_classes_are_null_or_reference_created_objects {
        \schemaVar \term Field f;
         
   	\assumes (inReachableState, boolean::select(heap,null,betaObj::<classInitialized>) = TRUE ==>)
   	\find (alphaObj::select(heap, null, f)) \sameUpdateLevel 
   	\varcond(\same(betaObj, \containerType(f)))
   	\add(alphaObj::select(heap, null, f) = null 
   	     | boolean::select(heap, alphaObj::select(heap, null, f), java.lang.Object::<created>) = TRUE ==>)
   	\displayname "static field welldefined"
   };
   
  
   static_fields_of_initialized_classes_reference_created_objects {
        \schemaVar \term Field f;
    
   	\assumes (inReachableState, boolean::select(heap,null,betaObj::<classInitialized>) = TRUE ==> alphaObj::select(heap,null,f) = null)
   	\find (alphaObj::select(heap,null,f)) \sameUpdateLevel 
   	\varcond(\same(betaObj, \containerType(f)))
   	\add(boolean::select(heap, alphaObj::select(heap,null,f), java.lang.Object::<created>) = TRUE ==>)
        \heuristics(inReachableStateImplication)
   	\displayname "static field welldefined"
   };

   // extremely common situation due to skolem constants introduced during proofs
   static_fields_of_initialized_classes_reference_created_objects2 {
        \schemaVar \term Field f;
   
   	\assumes (inReachableState, boolean::select(heap,null,betaObj::<classInitialized>) = TRUE ==> const = null)
   	\find (alphaObj::select(heap,null,f) = const ==>)
   	\varcond(\same(betaObj, \containerType(f)))
   	\add(boolean::select(heap, const, java.lang.Object::<created>) = TRUE ==>)
        \heuristics(inReachableStateImplication)
   	\displayname "static field welldefined"
   };

   

// ---------------   JVM invariants  ------------------------ //

   array_length_non_negative { 
   	\assumes(inReachableState, boolean::select(heap, array, java.lang.Object::<created>) = TRUE ==> array = null)
        \find (int::select(heap, array, length) >= 0)  \sameUpdateLevel
        \replacewith (true)
	\displayname "array length is non-negative"
   };

   array_length_non_negative_2 { 
   	\assumes(inReachableState, boolean::select(heap, array, java.lang.Object::<created>) = TRUE ==> array = null)
        \find (int::select(heap, array, length) < 0)   \sameUpdateLevel       
        \replacewith(false) 
	\displayname "array length is non-negative"
   };

   array_length_non_negative_3 { 
   	\assumes(inReachableState, boolean::select(heap, array, java.lang.Object::<created>) = TRUE ==> array = null)
        \find(int::select(heap, array, length)) \sameUpdateLevel
        \add (int::select(heap, array, length) >=0 ==>)
	\heuristics(inReachableStateImplication)
	\displayname "array length is non-negative"
   };

   
   //====================================//
   //                                    //
   //    Definition of exactInstance     //
   //                                    //
   //====================================//
   /*
   exact_instance_implies_instance_reference { 
         \find (alphaObj::exactInstance(obj) = TRUE ==>)
         \add (alphaObj::instance(obj) = TRUE ==>)
         \heuristics (type_hierarchy_def)
   };   
*/
  exact_instance_definition_int {
         \find(int::exactInstance(idx0) = TRUE)
         \varcond(\notFreeIn(iv, idx0))
         \replacewith (\exists iv; (idx0 = iv))
         \heuristics (simplify)
   };

   exact_instance_definition_boolean {	 
         \find ( boolean::exactInstance(bool) = TRUE)
         \varcond(\notFreeIn(bv, bool))	 
         \replacewith (\exists bv; (bool = bv))
         \heuristics (simplify)	 
   };   
   
    exact_instance_definition_null {	 
         \find ( Null::exactInstance(obj) = TRUE)
         \varcond(\notFreeIn(bv, bool))	 
         \replacewith (obj = null)
         \heuristics (simplify)	 
   };   
      
   exact_instance_for_interfaces_or_abstract_classes {
         \find (G::exactInstance(obj)) 
         \varcond(\isAbstractOrInterface(G))	      
         \replacewith (FALSE)
         \heuristics (simplify)	 
         \displayname "interfaces or abstract classes have no exact instances"	 
   };   
}
