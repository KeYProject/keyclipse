// This file is part of KeY - Integrated Deductive Software Design
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2013 Karlsruhe Institute of Technology, Germany
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General


// This files declares rules which are used and needed for
// general (non-integer) invariants. In particular lexicographic
// ordering on pairs and sequences is implemented at the moment.
// The supported types are: integers and sequences and
// arbitrarily nested pairs of these types.

// The central predicate is "prec" (for predecessor) which
// captures a wellfounded (Notherian) relation on the type
// any. Its valuation is left underspecified for most cases
// and defined only for sensible applications.

\sorts {
    Pair;
}

\functions {
    // The constructor is unique which makes it also an injection.
    \unique Pair pair(any, any);
}

\predicates {
    prec(any, any);
}


\rules {

    precOfInt {
	\schemaVar \term int a;
	\schemaVar \term int b;

	\find(prec(a,b))

	\replacewith(0 <= a & a < b)

	\heuristics(simplify)
    };

    precOfIntPair {
	\schemaVar \term int a;
	\schemaVar \term int b;
	\schemaVar \term any x;

	\find(prec(a, pair(b,x)))

	\replacewith(0 <= a & a <= b)

	\heuristics(simplify)
    };

    precOfPairInt {
	\schemaVar \term int a;
	\schemaVar \term int b;
	\schemaVar \term any x;

	\find(prec(pair(a,x), b))

	\replacewith(0 <= a & a < b)

	\heuristics(simplify)
    };

    precOfPair {
	\schemaVar \term any a1;
	\schemaVar \term any a2;
	\schemaVar \term any b1;
	\schemaVar \term any b2;

	\find(prec(pair(a1,b1), pair(a2,b2)))

	\replacewith(prec(a1,a2) | (a1=a2 & prec(b1,b2)))

	\heuristics(simplify)
    };

    precOfSeq {
	\schemaVar \term Seq s1;
	\schemaVar \term Seq s2;
	\schemaVar \variables int iv, jv;

	\find(prec(s1, s2))

        \varcond (\notFreeIn(iv, s1, s2),
	          \notFreeIn(jv, s1, s2))

	\replacewith(
	    \exists iv; (0<=iv & iv < seqLen(s1) & iv < seqLen(s2) &
	        prec(any::seqGet(s1, iv), any::seqGet(s2, iv)) &
	        \forall jv; (0<=jv & jv<iv ->
                    any::seqGet(s1,jv)=any::seqGet(s2,jv)))
         |  seqLen(s1) < seqLen(s2) &
            \forall iv; (0<=iv & iv < seqLen(s1) ->
                any::seqGet(s1,iv)=any::seqGet(s2,iv))
	)
    };

}
