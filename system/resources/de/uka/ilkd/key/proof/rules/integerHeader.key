\sorts{
  numbers;
  int;  
  jbyte \extends int;
  jshort \extends int;
  jint \extends int;
  jlong \extends int;
  jchar \extends int;
  integerDomain \extends jbyte, jshort, jint, jlong, jchar;

  // these sorts are not axiomatised yet; to come in CHARTER
  // they are here included to allow us to load Java program that
  // contain some methods or fields of type float or double
  jfloat, jdouble;

}

\functions {

  /**
     The functions declared below preserve their semantics independently 
     from the current integer semantics.
   */
  numbers #;
  numbers 0 (numbers);
  numbers 1 (numbers);
  numbers 2 (numbers);
  numbers 3 (numbers);
  numbers 4 (numbers);
  numbers 5 (numbers);
  numbers 6 (numbers);
  numbers 7 (numbers);
  numbers 8 (numbers);
  numbers 9 (numbers);
  numbers neglit (numbers);

  integerDomain Z (numbers);
  integerDomain C (numbers);

  integerDomain add(int,int);
  integerDomain neg(int);
  integerDomain sub(int,int);
  
  int mul(int, int);

// modulo and division function with mathematical semantics
  integerDomain mod(int, int);
  integerDomain div(int, int);

// modulo and division function with Java semantics
  integerDomain jmod(int, int);
  integerDomain jdiv(int, int);

  integerDomain byte_MAX;
  integerDomain byte_MIN;
  integerDomain char_MAX;
  integerDomain char_MIN;
  integerDomain short_MAX;
  integerDomain short_MIN;
  integerDomain int_MAX;
  integerDomain int_MIN;
  integerDomain long_MAX;
  integerDomain long_MIN;

  integerDomain byte_RANGE;
  integerDomain byte_HALFRANGE;
  integerDomain short_RANGE;
  integerDomain short_HALFRANGE;
  integerDomain char_RANGE;
  integerDomain int_RANGE;
  integerDomain int_HALFRANGE;
  integerDomain long_RANGE;
  integerDomain long_HALFRANGE;

  integerDomain unaryMinusJint(int);
  integerDomain unaryMinusJlong(int);
  integerDomain addJint(int,int);
  integerDomain addJlong(int,int);
  integerDomain subJint(int,int);
  integerDomain subJlong(int,int);
  integerDomain mulJint(int, int);
  integerDomain mulJlong(int, int);
  integerDomain modJint(int, int);
  integerDomain modJlong(int, int);
  integerDomain divJint(int, int);
  integerDomain divJlong(int, int);
  integerDomain shiftrightJint(int, int);
  integerDomain shiftrightJlong(int, int);
  integerDomain shiftleftJint(int, int);
  integerDomain shiftleftJlong(int, int);
  integerDomain unsignedshiftrightJint(int, int);
  integerDomain unsignedshiftrightJlong(int, int);
  integerDomain orJint(int, int);
  integerDomain orJlong(int, int);
  integerDomain andJint(int, int);
  integerDomain andJlong(int, int);
  integerDomain xorJint(int, int);
  integerDomain xorJlong(int, int);
  integerDomain moduloByte(int);
  integerDomain moduloShort(int);
  integerDomain moduloInt(int);
  integerDomain moduloLong(int);
  integerDomain moduloChar(int);

  /**
     The functions declared below change their semantics when switching the
     used integer semantics.
   */
  // javaTranslationFunctions

  integerDomain javaUnaryMinusInt(int);
  integerDomain javaUnaryMinusLong(int);

  integerDomain javaBitwiseNegation(int);

  integerDomain javaAddInt(int,int);
  integerDomain javaAddLong(int,int);
  integerDomain javaSubInt(int,int);
  integerDomain javaSubLong(int,int);
  integerDomain javaMulInt(int, int);
  integerDomain javaMulLong(int, int);
  integerDomain javaMod(int, int);
  integerDomain javaDivInt(int, int);
  integerDomain javaDivLong(int, int);
  integerDomain javaShiftRightInt(int, int);
  integerDomain javaShiftRightLong(int, int);
  integerDomain javaShiftLeftInt(int, int);
  integerDomain javaShiftLeftLong(int, int);
  integerDomain javaUnsignedShiftRightInt(int, int);
  integerDomain javaUnsignedShiftRightLong(int, int);
  integerDomain javaBitwiseOrInt(int, int);
  integerDomain javaBitwiseOrLong(int, int);
  integerDomain javaBitwiseAndInt(int, int);
  integerDomain javaBitwiseAndLong(int, int);
  integerDomain javaBitwiseXOrInt(int, int);
  integerDomain javaBitwiseXOrLong(int, int);
  integerDomain javaCastByte(int);
  integerDomain javaCastShort(int);
  integerDomain javaCastInt(int);
  integerDomain javaCastLong(int);
  integerDomain javaCastChar(int);
}


\predicates {
  /**
     The predicates declared below preserve their semantics independently 
     from the current integer semantics.
   */
  lt(int, int);
  gt(int, int);
  geq(int, int);
  leq(int, int);

  /**
     The predicates declared below change their semantics when switching the
     used integer semantics.
   */
  inByte(int);
  inShort(int);
  inInt(int);
  inLong(int);
  inChar(int);
}


\schemaVariables {
  \term int left, right, i, i0, i1 ;
  \term numbers iz, jz;
}
