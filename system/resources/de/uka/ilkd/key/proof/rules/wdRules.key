\sorts{
	Formula;
	\generic I;
}

\schemaVariables {
	\formula a;
	\formula b;
	\term any c;
	\term any d;
	\term int e;
	\term int f;
	\term Heap h;
	\variables I i, j;
	\termlabel l;
	\term numbers n;
	\term Object o;
	\term Field p;
	\term LocSet s;
	\term LocSet t;
	\term any v;
}

\functions{
	boolean TRUE;
	boolean FALSE;
	Null null;
	//Field g(int);
}

\transformers {
	wd(any);
	WD(Formula);
}

\rules {
	wd_Prim_Expr_True_Bool {

		\find (
			wd(TRUE)
		)
		\replacewith (
			true
		)
		\heuristics ( concrete )
	};

	wd_Prim_Expr_True_Form {

		\find (
			WD(true)
		)
		\replacewith (
			true
		)
		\heuristics ( concrete )
	};

	wd_Prim_Expr_False_Bool {

		\find (
			wd(FALSE)
		)
		\replacewith (
			true
		)
		\heuristics ( concrete )
	};

	wd_Prim_Expr_False_Form {

		\find (
			WD(false)
		)
		\replacewith (
			true
		)
		\heuristics ( concrete )
	};

	wd_Logical_Op_Neg {

		\find (
			WD(!a)
		)
		\replacewith (
			WD(a)
		)
		\heuristics ( concrete )
	};

	wd_Logical_Op_Or {

		\find (
			WD((a | b)<<l>>)
		)
		\varcond (
			\not \isLabel(l, Shortcut)
		)
		\replacewith (
			WD(a) & WD(b)
		)
		\heuristics ( concrete )
	};

	wd_Logical_Op_OrSC {

		\find (
			WD(((a | b)<<l>>))
		)
		\varcond (
			\isLabel(l, Shortcut)
		)
		\replacewith (
			WD(a) & (!a -> WD(b))
		)
	};

	wd_Logical_Op_And {

		\find (
			WD((a & b)<<l>>)
		)
		\varcond (
			\not \isLabel(l, Shortcut)
		)
		\replacewith (
			WD(a) & WD(b)
		)
		\heuristics ( concrete )
	};

	wd_Logical_Op_AndSC {

		\find (
			WD(((a & b)<<l>>))
		)
		\varcond (
			\isLabel(l, Shortcut)
		)
		\replacewith (
			WD(a) & (a -> WD(b))
		)
	};

	wd_Logical_Op_Imp {

		\find (
			WD((a -> b))
		)
		\replacewith (
			(WD(a) & !a) | (WD(a) & WD(b))
		)
		\heuristics ( concrete )
	};

	wd_Logical_Op_Eqv {

		\find (
			WD((a <-> b))
		)
		\replacewith (
			WD(a) & WD(b)
		)
		\heuristics ( concrete )
	};

	wd_Equality_Pred_Eq {

		\find (
			WD((c = d))
		)
		\replacewith (
			wd(c) & wd(d)
		)
		\heuristics ( concrete )
	};

	wd_Equality_Pred_Lt {

		\find (
			WD(lt(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( concrete )
	};

	wd_Equality_Pred_Leq {

		\find (
			WD(leq(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( concrete )
	};

	wd_Equality_Pred_Gt {

		\find (
			WD(gt(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( concrete )
	};

	wd_Equality_Pred_Geq {

		\find (
			WD(geq(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( concrete )
	};

	wd_Numerical_Op_BitNeg {

		\find (
			wd(javaBitwiseNegation(e))
		)
		\replacewith (
			wd(e)
		)
		\heuristics ( concrete )
	};

	wd_Numerical_Op_Add {

		\find (
			wd(add(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( concrete )
	};

	wd_Numerical_Op_AddInt {

		\find (
			wd(javaAddInt(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( concrete )
	};

	wd_Numerical_Op_AddLong {

		\find (
			wd(javaAddLong(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( concrete )
	};

	wd_Numerical_Op_Sub {

		\find (
			wd(sub(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( concrete )
	};

	wd_Numerical_Op_SubInt {

		\find (
			wd(javaSubInt(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( concrete )
	};

	wd_Numerical_Op_SubLong {

		\find (
			wd(javaSubLong(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( concrete )
	};

	wd_Numerical_Op_Mul {

		\find (
			wd(mul(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( concrete )
	};

	wd_Numerical_Op_MulInt {

		\find (
			wd(javaMulInt(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( concrete )
	};

	wd_Numerical_Op_MulLong {

		\find (
			wd(javaMulLong(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( concrete )
	};

	wd_Numerical_Op_Div {

		\find (
			wd(div(e,f))
		)
		\replacewith (
			wd(e) & wd(f) & !(f = 0)
		)
		\heuristics ( concrete )
	};

	wd_Numerical_Op_DivInt {

		\find (
			wd(javaDivInt(e,f))
		)
		\replacewith (
			wd(e) & wd(f) & !(f = 0)
		)
		\heuristics ( concrete )
	};

	wd_Numerical_Op_DivLong {

		\find (
			wd(javaDivLong(e,f))
		)
		\replacewith (
			wd(e) & wd(f) & !(f = 0)
		)
		\heuristics ( concrete )
	};

	wd_Numerical_Op_ShiftRightInt {

		\find (
			wd(shiftrightJint(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( concrete )
	};

	wd_Numerical_Op_ShiftRightLong {

		\find (
			wd(shiftrightJlong(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( concrete )
	};

	wd_Numerical_Op_ShiftLeftInt {

		\find (
			wd(shiftleftJint(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( concrete )
	};

	wd_Numerical_Op_ShiftLeftLong {

		\find (
			wd(shiftleftJlong(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( concrete )
	};

	wd_Numerical_Op_UShiftRightInt {

		\find (
			wd(unsignedshiftrightJint(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( concrete )
	};

	wd_Numerical_Op_UShiftRightLong {

		\find (
			wd(unsignedshiftrightJlong(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( concrete )
	};

	wd_Numerical_Op_BitOrInt {

		\find (
			wd(javaBitwiseOrInt(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( concrete )
	};

	wd_Numerical_Op_BitOrLong {

		\find (
			wd(javaBitwiseOrLong(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( concrete )
	};

	wd_Numerical_Op_BitAndInt {

		\find (
			wd(javaBitwiseAndInt(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( concrete )
	};

	wd_Numerical_Op_BitAndLong {

		\find (
			wd(javaBitwiseAndLong(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( concrete )
	};

	wd_Numerical_Op_BitXOrInt {

		\find (
			wd(javaBitwiseXOrInt(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( concrete )
	};

	wd_Numerical_Op_BitXOrLong {

		\find (
			wd(javaBitwiseXOrLong(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( concrete )
	};

	wd_Numerical_Op_Mod {

		\find (
			wd(javaMod(e,f))
		)
		\replacewith (
			wd(e) & wd(f) & !(f = 0)
		)
		\heuristics ( concrete )
	};

	wd_Conditional_Expr {

		\find (
			wd(\if (a) \then (c) \else (d))
		)
		\replacewith (
			(a & WD(a) & wd(c))
					| (!a & WD(a) & wd(d))
		)
		\heuristics ( concrete )
	};

	wd_Ref_Expr_Int {

		\find (
			wd(Z(n))
		)
		\replacewith (
			true
		)
		\heuristics ( concrete )
	};

	wd_Ref_Expr_Const {

		\find (
			wd(n)
		)
		\replacewith (
			true
		)
		\heuristics ( concrete )
	};

	wd_Ref_Expr_AtomVar {
		\find (
			wd(v)
		)
		\varcond (
			\isAtomic(v)
		)
		\replacewith (
			true
		)
		\heuristics ( concrete )
	};

	wd_Ref_Expr_Empty {

		\find (
			wd( empty )
		)
		\replacewith (
			true
		)
		\heuristics ( concrete )
	};

	wd_Ref_Expr_AllLocs {

		\find (
			wd( allLocs )
		)
		\replacewith (
			true
		)
		\heuristics ( concrete )
	};

	wd_Ref_Expr_FreshLocs {

		\find (
			wd( freshLocs(h) )
		)
		\replacewith (
			true
		)
		\heuristics ( concrete )
	};

	wd_Ref_Expr_Union {

		\find (
			wd( union(s,t) )
		)
		\replacewith (
			wd(s) & wd(t)
		)
		\heuristics ( concrete )
	};

	wd_Ref_Expr_Singleton { // More to this?

		\find (
			wd( singleton(o,p) )
		)
		\replacewith (
			wd(o) & wd(p)
		)
		\heuristics ( concrete )
	};

	wd_Ref_Expr_ArrElem {

		\find (
			wd( arr(e) ) // TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO in heap.key
		)
		\replacewith (
			/*arr = java.lang.Object::<created> & arr != null & arr.\created &*/ wd(e) & leq(0,e) & leq(e,arr.length)
		)
		\heuristics ( concrete )
	};

	wd_Ref_Expr_Null {

		\find (
			wd( null )
		)
		\replacewith (
			true
		)
		\heuristics ( concrete )
	};

	wd_Logical_Quant_All {

		\find (
			WD(\forall i; a)
		)
		\replacewith (
			\forall i; WD(a)
		)
		\heuristics ( concrete )
	};

	wd_Logical_Quant_Exist {

		\find (
			WD(\exists i; a)
		)
		\replacewith (
			\forall i; WD(a)
		)
		\heuristics ( concrete )
	};

	wd_Type_Pred_Inst {
		\find(
			wd(I::instance(c))
		)
		\replacewith (
			wd(c) & !(c = null)
		)
		\heuristics ( concrete )
	};

	wd_Type_Pred_InByte {
		\find(
			WD(inByte(e))
		)
		\replacewith (
			wd(e)
		)
		\heuristics ( concrete )
	};

	wd_Type_Pred_InChar {
		\find(
			WD(inChar(e))
		)
		\replacewith (
			wd(e)
		)
		\heuristics ( concrete )
	};

	wd_Type_Pred_InShort {
		\find(
			WD(inShort(e))
		)
		\replacewith (
			wd(e)
		)
		\heuristics ( concrete )
	};

	wd_Type_Pred_InInt {
		\find(
			WD(inInt(e))
		)
		\replacewith (
			wd(e)
		)
		\heuristics ( concrete )
	};

	wd_Type_Pred_InLong {
		\find(
			WD(inLong(e))
		)
		\replacewith (
			wd(e)
		)
		\heuristics ( concrete )
	};
}