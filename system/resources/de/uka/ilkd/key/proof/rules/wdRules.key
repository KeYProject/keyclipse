\sorts{
	Formula;
	\generic I;
}

\schemaVariables {
	\formula a, b, t;
	\term any c, d;
	\term int e, f, g;
	\term Heap h;
	\variables I i;
	\variables int j, k;
	\termlabel l;
	\term numbers n;
	\term Object o;
	\term Field p;
	\term LocSet r, s;
	\term Seq u, v;
}

\functions{
	boolean TRUE;
	boolean FALSE;
	Null null;
}

\transformers {
	wd(any);
	WD(Formula);
}

\rules {
	wd_Prim_Expr_True_Bool {

		\find (
			wd(TRUE)
		)
		\replacewith (
			true
		)
		\heuristics ( simplify )
	};

	wd_Prim_Expr_True_Form {

		\find (
			WD(true)
		)
		\replacewith (
			true
		)
		\heuristics ( simplify )
	};

	wd_Prim_Expr_False_Bool {

		\find (
			wd(FALSE)
		)
		\replacewith (
			true
		)
		\heuristics ( simplify )
	};

	wd_Prim_Expr_False_Form {

		\find (
			WD(false)
		)
		\replacewith (
			true
		)
		\heuristics ( simplify )
	};

	wd_Logical_Op_Neg {

		\find (
			WD(!a)
		)
		\replacewith (
			WD(a)
		)
		\heuristics ( simplify )
	};

	wd_Logical_Op_Or {

		\find (
			WD((a | b)<<l>>)
		)
		\varcond (
			\not \hasLabel(l, Shortcut)
		)
		\replacewith (
			WD(a) & WD(b)
		)
		\heuristics ( simplify )
	};

	wd_Logical_Op_OrSC {

		\find (
			WD(((a | b)<<l>>))
		)
		\varcond (
			\hasLabel(l, Shortcut)
		)
		\replacewith (
			WD(a) & (!a -> WD(b))
		)
		\heuristics ( simplify )
	};

	wd_Logical_Op_And {

		\find (
			WD((a & b)<<l>>)
		)
		\varcond (
			\not \hasLabel(l, Shortcut)
		)
		\replacewith (
			WD(a) & WD(b)
		)
		\heuristics ( simplify )
	};

	wd_Logical_Op_AndSC {

		\find (
			WD(((a & b)<<l>>))
		)
		\varcond (
			\hasLabel(l, Shortcut)
		)
		\replacewith (
			WD(a) & (a -> WD(b))
		)
		\heuristics ( simplify )
	};

	wd_Logical_Op_Imp {

		\find (
			WD((a -> b))
		)
		\replacewith (
			(WD(a) & !a) | (WD(a) & WD(b))
		)
		\heuristics ( simplify )
	};

	wd_Logical_Op_Eqv {

		\find (
			WD((a <-> b))
		)
		\replacewith (
			WD(a) & WD(b)
		)
		\heuristics ( simplify )
	};

	wd_Equality_Pred_Eq {

		\find (
			WD((c = d))
		)
		\replacewith (
			wd(c) & wd(d)
		)
		\heuristics ( simplify )
	};

	wd_Equality_Pred_Lt {

		\find (
			WD(lt(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( simplify )
	};

	wd_Equality_Pred_Leq {

		\find (
			WD(leq(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( simplify )
	};

	wd_Equality_Pred_Gt {

		\find (
			WD(gt(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( simplify )
	};

	wd_Equality_Pred_Geq {

		\find (
			WD(geq(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Op_BitNeg {

		\find (
			wd(javaBitwiseNegation(e))
		)
		\replacewith (
			wd(e)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Op_Add {

		\find (
			wd(add(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Op_AddInt {

		\find (
			wd(javaAddInt(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Op_AddLong {

		\find (
			wd(javaAddLong(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Op_Sub {

		\find (
			wd(sub(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Op_SubInt {

		\find (
			wd(javaSubInt(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Op_SubLong {

		\find (
			wd(javaSubLong(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Op_Mul {

		\find (
			wd(mul(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Op_MulInt {

		\find (
			wd(javaMulInt(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Op_MulLong {

		\find (
			wd(javaMulLong(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Op_Div {

		\find (
			wd(div(e,f))
		)
		\replacewith (
			wd(e) & wd(f) & (f != 0)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Op_DivInt {

		\find (
			wd(javaDivInt(e,f))
		)
		\replacewith (
			wd(e) & wd(f) & (f != 0)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Op_DivLong {

		\find (
			wd(javaDivLong(e,f))
		)
		\replacewith (
			wd(e) & wd(f) & (f != 0)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Op_ShiftRightInt {

		\find (
			wd(shiftrightJint(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Op_ShiftRightLong {

		\find (
			wd(shiftrightJlong(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Op_ShiftLeftInt {

		\find (
			wd(shiftleftJint(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Op_ShiftLeftLong {

		\find (
			wd(shiftleftJlong(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Op_UShiftRightInt {

		\find (
			wd(unsignedshiftrightJint(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Op_UShiftRightLong {

		\find (
			wd(unsignedshiftrightJlong(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Op_BitOrInt {

		\find (
			wd(javaBitwiseOrInt(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Op_BitOrLong {

		\find (
			wd(javaBitwiseOrLong(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Op_BitAndInt {

		\find (
			wd(javaBitwiseAndInt(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Op_BitAndLong {

		\find (
			wd(javaBitwiseAndLong(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Op_BitXOrInt {

		\find (
			wd(javaBitwiseXOrInt(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Op_BitXOrLong {

		\find (
			wd(javaBitwiseXOrLong(e,f))
		)
		\replacewith (
			wd(e) & wd(f)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Op_Mod {

		\find (
			wd(javaMod(e,f))
		)
		\replacewith (
			wd(e) & wd(f) & (f != 0)
		)
		\heuristics ( simplify )
	};

	wd_Conditional_Expr {

		\find (
			wd(\if (a) \then (c) \else (d))
		)
		\replacewith (
			(a & WD(a) & wd(c))
					| (!a & WD(a) & wd(d))
		)
		\heuristics ( simplify )
	};

	wd_Conditional_Form {

		\find (
			WD(\if (a) \then (b) \else (t))
		)
		\replacewith (
			(a & WD(a) & WD(b))
					| (!a & WD(a) & WD(t))
		)
		\heuristics ( simplify )
	};

	wd_Ref_Expr_Int {

		\find (
			wd(Z(n))
		)
		\replacewith (
			true
		)
		\heuristics ( simplify )
	};

	wd_Ref_Expr_Const {

		\find (
			wd(n)
		)
		\replacewith (
			true
		)
		\heuristics ( simplify )
	};

	wd_Ref_Expr_AtomVar {

		\find (
			wd(c)
		)
		\varcond (
			\isAtomic(c)
		)
		\replacewith (
			true
		)
		\heuristics ( simplify )
	};

	wd_Ref_Expr_Empty {

		\find (
			wd( empty )
		)
		\replacewith (
			true
		)
		\heuristics ( simplify )
	};

	wd_Ref_Expr_SeqEmpty {

		\find (
			wd( seqEmpty )
		)
		\replacewith (
			true
		)
		\heuristics ( simplify )
	};

	wd_Ref_Expr_AllLocs {

		\find (
			wd( allLocs )
		)
		\replacewith (
			true
		)
		\heuristics ( simplify )
	};

	wd_Ref_Expr_AllObj {

		\find (
			wd( allObjects(p) )
		)
		\replacewith (
			wd(p)
		)
		\heuristics ( simplify )
	};

	wd_Ref_Expr_FreshLocs {

		\find (
			wd( freshLocs(h) )
		)
		\replacewith (
			wd(h)
		)
		\heuristics ( simplify )
	};

	wd_Ref_Expr_AllFields {

		\find (
			wd( allFields(o) )
		)
		\replacewith (
			wd(o) & o != null
		)
		\heuristics ( simplify )
	};

	wd_Ref_Expr_Union {

		\find (
			wd( union(r,s) )
		)
		\replacewith (
			wd(r) & wd(s)
		)
		\heuristics ( simplify )
	};

	wd_Ref_Expr_Inters {
		\find (
			wd( intersect(r,s) )
		)
		\replacewith (
			wd(r) & wd(s)
		)
		\heuristics ( simplify )
	};

	wd_Ref_Expr_Diff {
		\find (
			wd( setMinus(r,s) )
		)
		\replacewith (
			wd(r) & wd(s)
		)
		\heuristics ( simplify )
	};

	wd_Ref_Expr_Disj {
		\find (
			WD( disjoint(r,s) )
		)
		\replacewith (
			wd(r) & wd(s)
		)
		\heuristics ( simplify )
	};

	wd_Ref_Expr_InfUnion {

		\find (
			wd( infiniteUnion{j;}(r) )
		)
		\varcond (
			\notFreeIn(j, r)
		)
		\replacewith (
			\forall j; wd(r)
		)
		\heuristics ( simplify )
	};

	wd_Ref_Expr_Subset {

		\find (
			WD( subset(r,s) )
		)
		\replacewith (
			wd(r) & wd(s)
		)
		\heuristics ( simplify )
	};

	wd_Ref_Expr_Singleton {

		\find (
			wd( singleton(o,p) )
		)
		\varcond (
			\not \isArray(o),
			\not \isStaticField(p)
		)
		\replacewith (
			wd(o) & wd(p) & o != null
		)
		\heuristics ( simplify )
	};

	wd_Ref_Expr_SingletonStatic {

		\find (
			wd( singleton(o,p) )
		)
		\varcond (
			\not \isArray(o),
			\isStaticField(p)
		)
		\replacewith (
			wd(o) & wd(p) & o = null
		)
		\heuristics ( simplify )
	};

	wd_Ref_Expr_SingletonArr {

		\find (
			wd( singleton(o, arr(e)) )
		)
		\varcond (
			\isArray(o),
			\not \isStaticField(p)
		)
		\replacewith (
			wd(o) & wd(e) & o != null & leq(0,e) & lt(e,length(o))
		)
		\heuristics ( simplify )
	};

	wd_Ref_Expr_SingletonArrStatic {

		\find (
			wd( singleton(o, arr(e)) )
		)
		\varcond (
			\isArray(o),
			\isStaticField(p)
		)
		\replacewith (
			wd(o) & wd(e) & o = null & leq(0,e) & lt(e,length(o))
		)
		\heuristics ( simplify )
	};

	wd_Ref_Expr_Var {

		\find (
			wd( I::select(h, o, p) )
		)
		\varcond (
			\not \isArray(o),
			\not \isStaticField(p)
		)
		\replacewith (
			wd(o) & o != null & wd(h) & wd(p)
			& (p = java.lang.Object::<created> | boolean::select(h, o, java.lang.Object::<created>) = TRUE)
		)
		\heuristics ( simplify )
	};

	wd_Ref_Expr_VarStatic {

		\find (
			wd( I::select(h, o, p) )
		)
		\varcond (
			\not \isArray(o),
			\isStaticField(p)
		)
		\replacewith (
			wd(o) & o = null & wd(h) & wd(p)
		)
		\heuristics ( simplify )
	};

	wd_Ref_Expr_Created {

		\find (
			wd( I::select(h, o, java.lang.Object::<created>) )
		)
		\replacewith (
			wd(o) & o != null & wd(h)
		)
		\heuristics ( simplify )
	};

	wd_Ref_Expr_ArrElem {

		\find (
			wd( I::select(h, o, arr(e)) )
		)
		\varcond (
			\isArray(o)
		)
		\replacewith (
			wd(o) & o != null & boolean::select(h, o, java.lang.Object::<created>) = TRUE
			& wd(h) & wd(e) & leq(0,e) & lt(e,length(o))
		)
		\heuristics ( simplify )
	};

	wd_Seq_Get {

		\find (
			wd( I::seqGet(u, e) )
		)
		\replacewith (
			wd(u) & wd(e) & leq(0,e) & lt(e,seqLen(u))
		)
		\heuristics ( simplify )
	};

	wd_Seq_Def {

		\find (
			wd( seqDef{j;} (e, f, c) )
		)
		\varcond (
			\notFreeIn(j, e),
			\notFreeIn(j, f)
		)
		\replacewith (
			wd(e) & wd(f) & \forall j; ((leq(e,j) & lt(j,f)) -> wd(c))
		)
		\heuristics ( simplify )
	};

	wd_Seq_Out {

		\find (
			wd( seqGetOutside )
		)
		\replacewith (
			true
		)
		\heuristics ( simplify )
	};

	wd_Seq_Rem {

		\find (
			wd( seqRemove(u, e) )
		)
		\replacewith (
			wd(u) & wd(e) & leq(0,e) & lt(e,seqLen(u))
		)
		\heuristics ( simplify )
	};

	wd_Ref_Expr_ArrLength {

		\find (
			wd( length(o) )
		)
		\varcond (
			\isArray(o)
		)
		\replacewith (
			o != null & wd(o)
		)
		\heuristics ( simplify )
	};

	wd_Ref_Expr_SeqLen {

		\find (
			wd( seqLen(u) )
		)
		\replacewith (
			wd(u)
		)
		\heuristics ( simplify )
	};

	wd_Ref_Expr_Null {

		\find (
			wd( null )
		)
		\replacewith (
			true
		)
		\heuristics ( simplify )
	};

	wd_Logical_Quant_All {

		\find (
			WD(\forall i; a)
		)
		\replacewith (
			\forall i; WD(a)
		)
		\heuristics ( simplify )
	};

	wd_Logical_Quant_Exist {

		\find (
			WD(\exists i; a)
		)
		\replacewith (
			\forall i; WD(a)
		)
		\heuristics ( simplify )
	};

	wd_Gen_Quant_Bsum {

		\find (
			wd(bsum{j;} (e,f,g))
		)
		\varcond (
			\notFreeIn(j, e),
			\notFreeIn(j, f)
		)
		\replacewith (
			wd(e) & wd(f) & \forall j; ((leq(e,j) & lt(j,f)) -> wd(g))
		)
		\heuristics ( simplify )
	};

	wd_Gen_Quant_Prod {

		\find (
			wd(bprod{j;} (e,f,g))
		)
		\varcond (
			\notFreeIn(j, e),
			\notFreeIn(j, f)
		)
		\replacewith (
			wd(e) & wd(f) & \forall j; ((leq(e,j) & lt(j,f)) -> wd(g))
		)
		\heuristics ( simplify )
	};

	wd_Type_Pred_Inst {

		\find (
			wd(I::instance(c))
		)
		\replacewith (
			wd(c)
		)
		\heuristics ( simplify )
	};

	wd_Type_Pred_InByte {

		\find (
			WD(inByte(e))
		)
		\replacewith (
			wd(e)
		)
		\heuristics ( simplify )
	};

	wd_Type_Pred_InChar {

		\find (
			WD(inChar(e))
		)
		\replacewith (
			wd(e)
		)
		\heuristics ( simplify )
	};

	wd_Type_Pred_InShort {

		\find (
			WD(inShort(e))
		)
		\replacewith (
			wd(e)
		)
		\heuristics ( simplify )
	};

	wd_Type_Pred_InInt {

		\find (
			WD(inInt(e))
		)
		\replacewith (
			wd(e)
		)
		\heuristics ( simplify )
	};

	wd_Type_Pred_InLong {

		\find (
			WD(inLong(e))
		)
		\replacewith (
			wd(e)
		)
		\heuristics ( simplify )
	};

	wd_Seq_Singleton {

		\find (
			wd(seqSingleton(c))
		)
		\replacewith (
			wd(c)
		)
		\heuristics ( simplify )
	};

	wd_Seq_Concat {

		\find (
			wd(seqConcat(u,v))
		)
		\replacewith (
			wd(u) & wd (v)
		)
		\heuristics ( simplify )
	};

	wd_Seq_Swap {

		\find (
			wd(seqSwap(u,e,f))
		)
		\replacewith (
			wd(u) & wd (e) & wd (f) & leq(0,e) & leq(0,f)
			& lt(e,seqLen(u)) & lt(f,seqLen(u))
		)
		\heuristics ( simplify )
	};

	wd_Seq_Sub {

		\find (
			wd(seqSub(u, e, f))
		)
		\replacewith (
			wd(u) & wd(e) & wd(f) & leq(0,e) & leq(e,f) & lt(e,seqLen(u))
		)
		\heuristics ( simplify )
	};

	wd_Ref_Expr_ArrRan {

		\find (
			wd(arrayRange(o, e, f))
		)
		\varcond (
			\isArray(o)
		)
		\replacewith (
			wd(o) & o != null
			& wd(e) & wd(f) & leq(0,e) & leq(e,f) & lt(e,length(o))
		)
		\heuristics ( simplify )
	};

	wd_Seq_Rev {

		\find (
			wd(seqReverse(u))
		)
		\replacewith (
			wd(u)
		)
		\heuristics ( simplify )
	};

	wd_Seq_Idx {

		\find (
			wd(seqIndexOf(u, c))
		)
		\replacewith (
			wd(u) & wd(c)
		)
		\heuristics ( simplify )
	};

	wd_Ref_Expr_ElemOf {

		\find (
			WD( elementOf(o, p, r) )
		)
		\varcond (
			\not \isStaticField(p)
		)
		\replacewith (
			wd(o) & wd(p) & wd(r) & o != null
		)
		\heuristics ( simplify )
	};

	wd_Ref_Expr_ElemOfStatic {

		\find (
			WD( elementOf(o, p, r) )
		)
		\varcond (
			\isStaticField(p)
		)
		\replacewith (
			wd(o) & wd(p) & wd(r) & o = null
		)
		\heuristics ( simplify )
	};

	wd_Ref_Expr_InHeap {

		\find (
			WD( createdInHeap(r, h) )
		)
		\replacewith (
			wd(r) & wd(h)
		)
		\heuristics ( simplify )
	};

	wd_Ref_Expr_WellFormed {

		\find (
			WD( wellFormed(h) )
		)
		\replacewith (
			wd(h)
		)
		\heuristics ( simplify )
	};

	wd_Type_Pred_Cast {

		\find (
			wd( I::cast(c) )
		)
		\replacewith (
			wd(c)
		)
		\heuristics ( simplify )
	};

	wd_Type_Pred_ExactInst {

		\find (
			wd( I::exactInstance(c) )
		)
		\replacewith (
			wd(c)
		)
		\heuristics ( simplify )
	};

	wd_Type_Pred_Cont {

		\find (
			WD( I::contains(c) )
		)
		\replacewith (
			wd(c)
		)
		\heuristics ( simplify )
	};

// Seq seqNPermInv(Seq);
// Formula seqNPerm(Seq);
// WD(Object::<inv>(h,T::o)) TODO: invariant!
}