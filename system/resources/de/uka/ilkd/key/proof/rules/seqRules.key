// This file is part of KeY - Integrated Deductive Software Design
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2013 Karlsruhe Institute of Technology, Germany
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General
// Public License. See LICENSE.TXT for details.
//


// This file contains only the RULES for the definitional
// extension of the sequence datatype.
// The core theory is contained in file  seqCoreRules.key
// Find the DECLARATIONS in file seq.key.

\rules(sequences:on){
    //--------------------------------------------------------------------------
    //  corePIX theory, extensions by Definitions
    //  These taclets were not part of the original Seq axiomatization by
    //  B.Weiss
    //  These taclets extend the signature of the core theory by indroducing
    //  function  symbols via explicit definition.
    //  Consistency of the extended theory is thus guaranteed by
    //  the Theorem on  conservative extentions.
    //--------------------------------------------------------------------------

   


    defOfEmpty {
	\schemaVar \term any te;
        \schemaVar \variables int uSub;

        \find(seqEmpty)

        \varcond ( \notFreeIn(uSub, te)) 
	\replacewith(seqDef{uSub;}(0, 0, te))
    };
  
    defOfSeqSingleton {
	\schemaVar \term any x;
        \schemaVar \variables int uSub;

	\find(seqSingleton(x))

	\varcond ( \notFreeIn(uSub, x)) 
	\replacewith(seqDef{uSub;}(0,1,x))
    };
    
    
    defOfSeqConcat {
	\schemaVar \term Seq seq1, seq2;
        \schemaVar \variables int uSub;
   
	\find(seqConcat(seq1, seq2))

	\varcond (\notFreeIn(uSub, seq1),
                \notFreeIn(uSub, seq2))
	\replacewith(seqDef{uSub;}(0,seqLen(seq1)+seqLen(seq2),
           \if (uSub < seqLen(seq1))
             \then (any::seqGet(seq1,uSub))
             \else (any::seqGet(seq2, uSub - seqLen(seq1)))))
                     
    };


    
//--------------------------------------------------------------------
//  This definition of "seqSub" differs from the original one.
//  Now seqSub(seq,from,from) is the empty sequence, previously it
//  was the singleton <seq(from)>.
//  The new semantics however is in line with all other definitions
//  involving a lower and and upper bound. The upper bound is always
//  strict. 
//--------------------------------------------------------------------

    defOfSeqSub {
	\schemaVar \term Seq seq;
	\schemaVar \term int from, to;
        \schemaVar \variables int uSub;

	\find(seqSub(seq, from, to))
        \varcond (\notFreeIn(uSub, seq),
               \notFreeIn(uSub, from),  \notFreeIn(uSub, to))
	\replacewith(seqDef{uSub;}(from,to,any::seqGet(seq,uSub)))
                     
    };
    
    
    defOfSeqReverse {
        \schemaVar \term Seq seq;
        \schemaVar \variables int uSub;

	\find(seqReverse(seq))

	\varcond (\notFreeIn(uSub, seq))
	\replacewith(seqDef{uSub;}(0,seqLen(seq),any::seqGet(seq,seqLen(seq)-uSub-1)))
                     
    };
    

    //--------------------------------------------------------------------
    // rule for seqIndexOf
    // This is logically equivalent to a conditional (partial)
    // definition of  seqIndexOf
    // See also  taclet "seqIndexOf2" below
    //--------------------------------------------------------------------


     seqIndexOf {
         \schemaVar \term Seq s;
         \schemaVar \term any t;
         \schemaVar \skolemTerm int jsk;
         \schemaVar \variables int n, m;


         \find(seqIndexOf(s,t))
         \varcond ( \notFreeIn(n, s), \notFreeIn(n, t),
                    \notFreeIn(m, s), \notFreeIn(m, t) )
         \add( (\exists n;(0 <= n & n < seqLen(s) & any::seqGet(s,n) = t))
             ->
               (0<= seqIndexOf(s,t) & seqIndexOf(s,t) < seqLen(s) &
                any::seqGet(s,seqIndexOf(s,t))=t &
                \forall m;((0 <= m & m < seqIndexOf(s,t)) -> any::seqGet(s,m)!=t)) ==> )
    };




    //====================================================================
    //  
    //  Derived taclets
    //  All the following taclets can be derived from the taclets occuring prior
    //  to this point in this file.
    //  The taclets differ from the original axiomatization by
    //   (1) the right hand bound in seqDef is now strict
    //   (2) the default value is explicitely given by  seqGetOutside 
    //       instead of   any::seqGet(seqEmpty, 0)
    //
    //====================================================================


    // proved
    seqSelfDefinition {
        \schemaVar \term Seq seq;
        \schemaVar \variables Seq s;
        \schemaVar \variables int u;
        \find(seq )
        \add(\forall s;(s = seqDef{u;}(0,seqLen(s),any::seqGet(s,u)))   ==>)
    };


    // proved
    seqOutsideValue {
        \schemaVar \variables Seq s;
        \schemaVar \variables int iv;
        \find(seqGetOutside)
        \add( \forall s;(\forall iv;((iv < 0 | seqLen(s)<= iv) 
               -> any::seqGet(s,iv) = seqGetOutside)) ==>)
    };


    //--------------------------------------------------------------------
    // derived rule for generic types
    //--------------------------------------------------------------------

    // proved
    castedGetAny {
        \schemaVar \term Seq seq;
	\schemaVar \term int idx;

	\find((beta)any::seqGet(seq, idx))

	\replacewith(beta::seqGet(seq, idx))

	\heuristics(simplify)
    };


    // proved
    seqGetAlphaCast {
	\schemaVar \term Seq seq;
	\schemaVar \term int at;

        \find( alpha::seqGet(seq,at) )
        \add( (alpha)any::seqGet(seq,at) = alpha::seqGet(seq,at) ==>)
    };

    //--------------------------------------------------------------------
    // derived rule for getOfseqX
    //--------------------------------------------------------------------

    // proved
    getOfSeqSingleton {
	\schemaVar \term any x;
	\schemaVar \term int idx;	
   
	\find(alpha::seqGet(seqSingleton(x), idx))
	
	\replacewith(\if(idx = 0)
                     \then( (alpha)x )
                     \else(  (alpha)seqGetOutside ))
                     
	\heuristics(simplify)
    };
  
    // proved  
    getOfSeqSingletonConcrete {
	\schemaVar \term any x;
	\find(alpha::seqGet(seqSingleton(x), 0))
        \replacewith((alpha)x)
        \heuristics(concrete)
    };

    // proved
    getOfSeqConcat {
	\schemaVar \term Seq seq, seq2;
	\schemaVar \term int idx;
   
	\find(alpha::seqGet(seqConcat(seq, seq2), idx))
	
	\replacewith(\if(idx < seqLen(seq))
                     \then(alpha::seqGet(seq, idx))
                     \else(alpha::seqGet(seq2, idx - seqLen(seq))))
                     
	\heuristics(simplify_enlarging)
    };

    // proved
    getOfSeqSub {
	\schemaVar \term Seq seq;
	\schemaVar \term int idx, from, to;
   
	\find(alpha::seqGet(seqSub(seq, from, to), idx))
	
	\replacewith(\if(0 <= idx & idx < (to - from))
	             \then(alpha::seqGet(seq, idx + from))
	             \else( (alpha)seqGetOutside ))
                     
	\heuristics(simplify_enlarging)
    };
   
    // proved
    getOfSeqReverse {
        \schemaVar \term Seq seq;
	\schemaVar \term int idx;        
   
	\find(alpha::seqGet(seqReverse(seq), idx))
	
	\replacewith(alpha::seqGet(seq, seqLen(seq) - 1 - idx))
                     
	\heuristics(simplify_enlarging)
    };
      
    //--------------------------------------------------------------------
    // derived rule for lenOfX
    //--------------------------------------------------------------------
  
    // proved  
    lenOfSeqEmpty {
	\find(seqLen(seqEmpty))
	
	\replacewith(0)
                     
	\heuristics(concrete)
    };
    
    // proved
    lenOfSeqSingleton {
	\schemaVar \term alpha x;
   
	\find(seqLen(seqSingleton(x)))
	
	\replacewith(1)
                     
	\heuristics(concrete)
    };
    
    
    // proved
    lenOfSeqConcat {
	\schemaVar \term Seq seq, seq2;
   
	\find(seqLen(seqConcat(seq, seq2)))
	
	\replacewith(seqLen(seq) + seqLen(seq2))
                     
      	\heuristics(simplify)
    };
    
    // proved
    lenOfSeqSub {
	\schemaVar \term Seq seq;
	\schemaVar \term int from, to;
   
	\find(seqLen(seqSub(seq, from, to)))
	
	\replacewith(\if(from < to)\then(to - from)\else(0))
                     
	\heuristics(simplify)
    };   
      
    // proved
    lenOfSeqReverse {
	\schemaVar \term Seq seq;
   
	\find(seqLen(seqReverse(seq)))
	
	\replacewith(seqLen(seq))
                     
	\heuristics(simplify)
    };
    
    //--------------------------------------------------------------------------
    // derived EQ versions
    //--------------------------------------------------------------------------

    // proved
    equalityToSeqGetAndSeqLenLeft {
        \schemaVar \term Seq s, s2;
        \schemaVar \variables int iv;    	
    	
        \find(s = s2 ==>)
        \varcond(\notFreeIn(iv, s, s2))
	
        \add(seqLen(s) = seqLen(s2) 
           & \forall iv; (0 <= iv & iv < seqLen(s) 
             -> any::seqGet(s, iv) = any::seqGet(s2, iv)) ==>)
    	
    	\heuristics(inReachableStateImplication)
        //uncertain about heuristics??
    };    

    // proved
    equalityToSeqGetAndSeqLenRight {
        \schemaVar \term Seq s, s2;
        \schemaVar \variables int iv;    	
    	
        \find(==> s = s2)
        \varcond(\notFreeIn(iv, s, s2))
	
        \replacewith(==>     seqLen(s) = seqLen(s2) 
                           & \forall iv; (0 <= iv & iv < seqLen(s) 
                        -> any::seqGet(s, iv) = any::seqGet(s2, iv)))
    	
    	\heuristics(simplify_enlarging)
    }; 

    // proved
    getOfSeqSingletonEQ{
	\schemaVar \term any x;
	\schemaVar \term int idx;
	\schemaVar \term Seq EQ;
   
        \assumes(seqSingleton(x) = EQ ==>)   
	\find(alpha::seqGet(EQ, idx))
        \sameUpdateLevel	
	
	\replacewith(\if(idx = 0)
                     \then( (alpha)x)
                     \else( (alpha)seqGetOutside))
                     
	\heuristics(simplify)
        \displayname "getOfSeqSingleton"
    };


    // proved
    getOfSeqConcatEQ {
	\schemaVar \term Seq seq, seq2;
	\schemaVar \term int idx;
	\schemaVar \term Seq EQ;	
   
        \assumes(seqConcat(seq, seq2) = EQ ==>)      
	\find(alpha::seqGet(EQ, idx))
        \sameUpdateLevel	
	
	\replacewith(\if(idx < seqLen(seq))
                     \then(alpha::seqGet(seq, idx))
                     \else(alpha::seqGet(seq2, idx - seqLen(seq))))
                     
	\heuristics(simplify_enlarging)
	\displayname "getOfSeqConcat"
    };

   
    // proved
    getOfSeqSubEQ {
	\schemaVar \term Seq seq;
	\schemaVar \term int idx, from, to;
	\schemaVar \term Seq EQ;
   
        \assumes(seqSub(seq, from, to) = EQ ==>)
	\find(alpha::seqGet(EQ, idx))
        \sameUpdateLevel
	
	\replacewith(\if(0 <= idx & idx < (to - from))
	             \then(alpha::seqGet(seq, idx + from))
	             \else((alpha)seqGetOutside))
                     
	\heuristics(simplify_enlarging)
	\displayname "getOfSeqSub"
    };

    // proved    
    getOfSeqReverseEQ {
        \schemaVar \term Seq seq;
	\schemaVar \term int idx;        
	\schemaVar \term Seq EQ;        
   
        \assumes(seqReverse(seq) = EQ ==>)   
	\find(alpha::seqGet(EQ, idx))
        \sameUpdateLevel	
	
	\replacewith(alpha::seqGet(seq, seqLen(seq) - 1 - idx))
                     
	\heuristics(simplify_enlarging)
	\displayname "getOfSeqReverse"
    };

    
    // proved
    lenOfSeqEmptyEQ {
	\schemaVar \term alpha x;
	\schemaVar \term Seq EQ;	
   
        \assumes(seqEmpty = EQ ==>)
	\find(seqLen(EQ))
        \sameUpdateLevel	
	\replacewith(0)

      	\heuristics(concrete)
        \displayname "lenOfSeqEmpty"
    };    
    
    // proved
    lenOfSeqSingletonEQ {
	\schemaVar \term alpha x;
	\schemaVar \term Seq EQ;	
   
        \assumes(seqSingleton(x) = EQ ==>)   
	\find(seqLen(EQ))
        \sameUpdateLevel
	\replacewith(1)
                     
      	\heuristics(concrete)
        \displayname "lenOfSeqSingleton"
    };
    
    // proved
    lenOfSeqConcatEQ {
	\schemaVar \term Seq seq, seq2;
	\schemaVar \term Seq EQ;	
   
        \assumes(seqConcat(seq, seq2) = EQ ==>)
	\find(seqLen(EQ))
        \sameUpdateLevel
	
	\replacewith(seqLen(seq) + seqLen(seq2))
                     
      	\heuristics(simplify)
        \displayname "lenOfSeqConcat"
    };
    
    // proved
    lenOfSeqSubEQ {
	\schemaVar \term Seq seq;
	\schemaVar \term int from, to;
	\schemaVar \term Seq EQ;

        \assumes(seqSub(seq, from, to) = EQ ==>)
	\find(seqLen(EQ))
        \sameUpdateLevel	

	\replacewith(\if(from < to)\then(to - from)\else(0))

	\heuristics(simplify_enlarging, apply_equations)
        \displayname "lenOfSeqSub"
    };  

    
    // proved
    lenOfSeqReverseEQ {
	\schemaVar \term Seq seq;
	\schemaVar \term Seq EQ;
   
  	\assumes(seqReverse(seq) = EQ ==>)
	\find(seqLen(EQ))
	\sameUpdateLevel
	
	\replacewith(seqLen(seq))
                     
      	\heuristics(simplify)    
        \displayname "lenOfSeqReverse"
    };
    
    // proved
    getOfSeqDefEQ {
	\schemaVar \term int idx, from, to;
        \schemaVar \term Seq EQ;
        \schemaVar \term any t;
        \schemaVar \variables int uSub, uSub1, uSub2;

   
        \assumes(seqDef{uSub;} (from, to, t) = EQ ==>)
	\find(alpha::seqGet(EQ, idx))
	\varcond ( \notFreeIn(uSub, from), 
                   \notFreeIn(uSub, to))
	\replacewith(\if(0 <= idx & idx < (to - from))
	             \then((alpha){\subst uSub; (idx + from)}t)
	             \else ( (alpha)seqGetOutside))
                     
	\heuristics(simplify_enlarging)
        \displayname "getOfSeqDef"
    };



    // proved
    lenOfSeqDefEQ {
	\schemaVar \term int from, to;
        \schemaVar \term Seq EQ;
        \schemaVar \term any t;
        \schemaVar \variables int uSub, uSub1, uSub2;

   
        \assumes(seqDef{uSub;} (from, to, t) = EQ ==>)
	\find(seqLen(EQ))
        
	\replacewith(\if(from <= to)\then((to - from))\else(0))
                     
      	\heuristics(simplify_enlarging)
        \displayname "lenOfSeqDef"
    };

     
    //--------------------------------------------------------------------------
    // derived taclets involving  seqEmpty
    //--------------------------------------------------------------------------
    
    // proved
    seqConcatWithSeqEmpty1 {
        \schemaVar \term Seq seq;
        
        \find(seqConcat(seq, seqEmpty))
        
        \replacewith(seq)
        
        \heuristics(concrete)
        \displayname "seqConcatWithEmpty"
    };
    
    // proved
    seqConcatWithSeqEmpty2 {
        \schemaVar \term Seq seq;
        
        \find(seqConcat(seqEmpty, seq))
        
        \replacewith(seq)
        
        \heuristics(concrete)
        \displayname "seqConcatWithEmpty"
    };
    
    // proved
    seqReverseOfSeqEmpty {
        \find(seqReverse(seqEmpty))
        
        \replacewith(seqEmpty)
        
        \heuristics(concrete)
    };
    
    
    
    //--------------------------------------------------------------------------
    // derived taclets for special instantiations
    //--------------------------------------------------------------------------

    // proved
    subSeqComplete {
	\schemaVar \term Seq seq;
   
	\find(seqSub(seq, 0, seqLen(seq)))
	
	\replacewith(seq)
                     
      	\heuristics(concrete)
    };   


    // proved
    subSeqTailR {
	\schemaVar \term Seq seq;
	\schemaVar \term any x;	
   
	\find(seqSub(seqConcat(seqSingleton(x), seq), 1, seqLen(seq)+1))
	
	\replacewith(seq)
                     
      	\heuristics(concrete)
        \displayname "subSeqTail"
    };

    // proved
    subSeqTailL {
	\schemaVar \term Seq seq;
	\schemaVar \term any x;	
   
	\find(seqSub(seqConcat(seqSingleton(x), seq), 1, 1 + seqLen(seq)))
	
	\replacewith(seq)
                     
      	\heuristics(concrete)
        \displayname "subSeqTail"
    };
    

    // proved  
    subSeqTailEQR {
	\schemaVar \term Seq seq;
	\schemaVar \term any x;
	\schemaVar \term int EQ;
   
   	\assumes(seqLen(seq) = EQ ==>)
	\find(seqSub(seqConcat(seqSingleton(x), seq), 1, EQ+1))
	\sameUpdateLevel
	
	\replacewith(seq)
                     
      	\heuristics(concrete)
        \displayname "subSeqTail"
    }; 

    // proved
    subSeqTailEQL {
	\schemaVar \term Seq seq;
	\schemaVar \term any x;
	\schemaVar \term int EQ;
   
   	\assumes(seqLen(seq) = EQ ==>)
	\find(seqSub(seqConcat(seqSingleton(x), seq), 1, 1+EQ))
	\sameUpdateLevel
	
	\replacewith(seq)
                     
      	\heuristics(concrete)
        \displayname "subSeqTail"
    }; 
    
   
    //--------------------------------------------------------------------------
    // other derived taclets 
    //--------------------------------------------------------------------------

    // proved
    seqDef_split {
        \schemaVar \term int idx, from, to;
        \schemaVar \term any t;
        \schemaVar \variables int uSub, uSub1, uSub2;

        \find(seqDef{uSub;} (from, to, t))
        \varcond ( \notFreeIn(uSub1, from), 
                \notFreeIn(uSub1, idx),
                \notFreeIn(uSub1, to),
                \notFreeIn(uSub, from), 
                \notFreeIn(uSub, idx),
                \notFreeIn(uSub, to),
                \notFreeIn(uSub1, t) )
        \replacewith(\if(from <=idx & idx < to)
           \then(seqConcat(
                    seqDef{uSub;}(from, idx, t), 
                    seqDef{uSub1;}(idx,to,{\subst uSub; uSub1}t)))
           \else(seqDef{uSub;}(from, to, t)))
    };
   
    // proved
    seqDef_induction_upper {
        \schemaVar \term int idx, from, to;
        \schemaVar \term any t;
        \schemaVar \variables int uSub, uSub1, uSub2;

        \find(seqDef{uSub;} (from, to, t))
        \varcond ( \notFreeIn(uSub, from), 
                \notFreeIn(uSub, to))
        \replacewith(seqConcat(
            seqDef{uSub;} (from, to-1, t), 
            \if(from<to)\then(seqSingleton({\subst uSub; (to-1)}t))
                        \else(seqEmpty)))
    };

    // proved
    seqDef_induction_upper_concrete {
        \schemaVar \term int idx, from, to;
        \schemaVar \term any t;
        \schemaVar \variables int uSub, uSub1, uSub2;

        \find(seqDef{uSub;} (from, 1+to, t))
        \varcond ( \notFreeIn(uSub, from), 
                   \notFreeIn(uSub, to))
        \replacewith(seqConcat(
           seqDef{uSub;} (from, to, t), 
         \if(from<=to)\then(seqSingleton({\subst uSub; (to)}t))
                       \else(seqEmpty)))
        \heuristics(simplify_enlarging)
    };


    // proved
    seqDef_induction_lower {
        \schemaVar \term int idx, from, to;
        \schemaVar \term any t;
        \schemaVar \variables int uSub, uSub1, uSub2;

        \find(seqDef{uSub;} (from, to, t))
        \varcond ( \notFreeIn(uSub, from), 
                   \notFreeIn(uSub, to))
        \replacewith(seqConcat(
             \if(from<to)\then(seqSingleton({\subst uSub; (from)}t))
                         \else(seqEmpty), 
             seqDef{uSub;} (from+1, to, t)))
    };

    // proved
    seqDef_induction_lower_concrete {
        \schemaVar \term int idx, from, to;
        \schemaVar \term any t;
        \schemaVar \variables int uSub, uSub1, uSub2;

        \find(seqDef{uSub;} (-1+from, to, t))
        \varcond ( \notFreeIn(uSub, from), 
                \notFreeIn(uSub, to))
        \replacewith(seqConcat(
            \if(-1+from<to)\then(seqSingleton({\subst uSub; (-1+from)}t))
                           \else(seqEmpty), 
            seqDef{uSub;} (from, to, t)))
        \heuristics(simplify)
    };


    // proved
    seqDef_split_in_three {
        \schemaVar \term int idx, from, to;
        \schemaVar \term any t;
        \schemaVar \variables int uSub, uSub1, uSub2;

        \find(seqDef{uSub;} (from, to, t)) \sameUpdateLevel
        \varcond (\notFreeIn(uSub, idx), 
                  \notFreeIn(uSub1, t),
                  \notFreeIn(uSub1, idx),
                  \notFreeIn(uSub, from),
                  \notFreeIn(uSub1, to))
    "Precondition":    \add(==> (from<=idx & idx<to));
    "Splitted SeqDef": \replacewith(
             seqConcat(seqDef{uSub;} (from, idx, t),
                   seqConcat(seqSingleton({\subst uSub;  idx} t),
                          seqDef{uSub1;} (idx+1, to, {\subst uSub; uSub1}t))))
    };


    // proved
    seqDef_empty {
        \schemaVar \term int idx, from, to;
        \schemaVar \term any t;
        \schemaVar \variables int uSub, uSub1, uSub2;

        \find(seqDef{uSub;} (from, idx, t))\sameUpdateLevel
        \varcond (\notFreeIn(uSub, from),
                  \notFreeIn(uSub, idx))
        "Precondition": \add(==> idx<=from);
        "Empty SeqDef": \replacewith(seqEmpty)
    };

    // proved
    seqDef_one_summand {
        \schemaVar \term int idx, from, to;
        \schemaVar \term any t;
        \schemaVar \variables int uSub, uSub1, uSub2;

        \find(seqDef{uSub;} (from, idx, t))\sameUpdateLevel
        \varcond (\notFreeIn(uSub, from),
                \notFreeIn(uSub, idx))
        \replacewith(\if(from+1=idx)
                       \then(seqSingleton({\subst uSub;  from}t))
                       \else(seqDef{uSub;} (from, idx, t)))
    };

    // proved
    seqDef_lower_equals_upper {
        \schemaVar \term int idx, from, to;
        \schemaVar \term any t;
        \schemaVar \variables int uSub, uSub1, uSub2;

        \find(seqDef{uSub;} (idx, idx, t))\sameUpdateLevel
        \varcond (\notFreeIn(uSub, idx))
        \replacewith(seqEmpty)
        \heuristics(simplify)
    };



    // proved in KeY -- DB 29/10/2013
    seqDefOfSeq {
        \schemaVar \term int x;
        \schemaVar \term Seq s;
        \schemaVar \variables int u, v;
//    \find(seqDef{u;}(0,x,alpha::seqGet(s,u)))  
// changed by PHS 17.12.2013
// original version caused inconsistency
// proof by DB 29.10.2013 was based on
// another incorrect taclet that has in the
// meantime been removed.
        \find(seqDef{u;}(0,x,any::seqGet(s,u)))
        \varcond(\notFreeIn(u,x,s),\notFreeIn(v,x,s))
        \replacewith( \if (seqLen(s)=x)
                      \then(s)
                      \else(\if(seqLen(s) > x)
                            \then(seqSub(s,0,x))
                            \else(seqConcat(s,
                                    seqDef{v;}(seqLen(s),x,seqGetOutside))
                  )))
        \heuristics(simplify_enlarging)
    };

    // proved in KeY -- DB 29/10/2013
    seqSelfDefinitionEQ2 {
        \schemaVar \term Seq s;
        \schemaVar \term int x;
        \schemaVar \variables int u;
        \assumes(seqLen(s)=x ==>)
        \find(seqDef{u;}(0,x,any::seqGet(s,u)))
        \varcond(\notFreeIn(u,x,s))
        \replacewith(s)
        \heuristics(simplify)
        \displayname "seqSelfDefinition"
    };

 
    //--------------------------------------------------------------------------
    // derived taclets for seqIndexOf
    //--------------------------------------------------------------------------   

// The following rule has been removed since we agreed
// to longer support \ifEx.


//  seqIndexOf2 {
//  \schemaVar \term Seq s;
//  \schemaVar \term any t;
//  \schemaVar \variables int n;
//  \find( seqIndexOf(s,t) )
//  \varcond ( \notFreeIn(n, s), \notFreeIn(n, t) )
//  \replacewith( \ifEx n;
//                (0 <= n & n < seqLen(s) & any::seqGet(s,n)=t)
//                \then (n)
//                \else (seqIndexOf(s,t)) )
//};

    // proved
    indexOfSeqSingleton {
    	\schemaVar \term any x;
    	\find(seqIndexOf(seqSingleton(x),x))
    	\sameUpdateLevel
    	\replacewith(0)
    	\heuristics(concrete)
    };

    // proved
    indexOfSeqConcatFirst {
    	\schemaVar \term Seq s1, s2;
    	\schemaVar \term any x;
    	\schemaVar \variables int idx;
    	\find(seqIndexOf(seqConcat(s1,s2),x))
    	\sameUpdateLevel
    	\varcond(\notFreeIn(idx,s1,s2,x))
        \replacewith(seqIndexOf(s1,x));
        \add(==> \exists idx; (0 <= idx & idx < seqLen(s1) & 
                                any::seqGet(s1,idx) = x))
    };

    // proved
    indexOfSeqConcatSecond {
    	\schemaVar \term Seq s1, s2;
    	\schemaVar \term any x;
    	\schemaVar \variables int idx;
    	\find(seqIndexOf(seqConcat(s1,s2),x))
    	\sameUpdateLevel
    	\varcond(\notFreeIn(idx,s1,s2,x))
        \replacewith(add(seqIndexOf(s2,x),seqLen(s1))) ;
        \add(==> (!\exists idx; 
                  (0 <= idx & idx < seqLen(s1) & any::seqGet(s1,idx) = x)
    	       & \exists idx; 
         (0 <= idx & idx < seqLen(s2) & any::seqGet(s2,idx) = x)) )
    };
    
    // proved
    indexOfSeqSub {
    	\schemaVar \term Seq s;
    	\schemaVar \term int from, to, n;
    	\schemaVar \term any x;
	\schemaVar \variables int nx;

    	\find(seqIndexOf(seqSub(s,from,to),x))
	\sameUpdateLevel
        \varcond (\notFreeIn(nx, s),    \notFreeIn(nx, x), 
                  \notFreeIn(nx, from), \notFreeIn(nx, to))
       	\replacewith(sub(seqIndexOf(s,x),from));
    	\add(==> from <= seqIndexOf(s,x) & seqIndexOf(s,x) < to & 0 <= from &
             \exists nx;((0 <= nx & nx < seqLen(s) & any::seqGet(s,nx) = x)))
    };

}
