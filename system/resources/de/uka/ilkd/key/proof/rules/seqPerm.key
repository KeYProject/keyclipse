// This file contains the rule set for permutations in
// the sequence data type
//

   //--------------------------------------------------------------------------
    //  Second Extensions by Definitions 
    //  These taclets were not part of the original Seq axiomatization by
    //  B.Weiss
    //  These taclets extend the signature of corePIX by indroducing 
    //  the relation symbols 
    //            seqPerm(Seq,Seq), seqNPerm(Seq) 
    //  and the function symbols
    //           Seq seqSwap(Seq,int,int)
    //           Seq seqRemove(Seq,int)
    //  by direct definitions.
    //  Consistency of the extended theory is thus guaranteed. 
    //  (Theorem on  conservative extentions)
    //  Note, that the function Seq NPermInv(Seq)
    //  has already been aziomatized in seqCorePIX. It cannot be introduced
    //  by direct definitions (at least as long as epsilon terms are 
    //  not allowed)
    //--------------------------------------------------------------------------



   seqNPermDefLeft{
    \schemaVar \term Seq s1;
    \schemaVar \variables int iv,jv;

    \find(seqNPerm(s1) ==> )
    \varcond (\notFreeIn (iv,s1), \notFreeIn (jv,s1))

    \add(
     (\forall iv; (0 <= iv &  iv <seqLen(s1) ->  
        \exists jv; (0 <= jv &  jv<seqLen(s1) & int::seqGet(s1,jv)=iv))) ==> )
     };

 seqNPermDefReplace{
    \schemaVar \term Seq s1;
    \schemaVar \variables int iv,jv;

    \find(seqNPerm(s1))
    \varcond (\notFreeIn (iv,s1), \notFreeIn (jv,s1))

    \replacewith(
     (\forall iv; (0 <= iv &  iv<seqLen(s1) ->  
           \exists jv; (0 <= jv &  jv<seqLen(s1) & int::seqGet(s1,jv)=iv))))
     };

seqPermDefLeft{
   \schemaVar \term Seq s1, s2, s3;
   \schemaVar \variables int iv;
   \schemaVar \variables Seq s;

   \find(seqPerm(s1,s2) ==> )
  
   \varcond (\notFreeIn (iv,s1,s2), 
             \notFreeIn (s,s1,s2))

   \add(
      seqLen(s1) = seqLen(s2) & 
    (\exists s; (seqLen(s) = seqLen(s1)  & seqNPerm(s) & 

       (\forall iv; (0 <= iv &  iv < seqLen(s) ->  
           any::seqGet(s1,iv) = any::seqGet(s2,int::seqGet(s,iv))))))
        ==> )  
    };

 seqPermDef{
   \schemaVar \term Seq s1, s2, s3;
   \schemaVar \variables int iv;
   \schemaVar \variables Seq s;

   \find(seqPerm(s1,s2))
  
   \varcond (\notFreeIn (iv,s1,s2), 
             \notFreeIn (s,s1,s2))

   \replacewith(
      seqLen(s1) = seqLen(s2) & 
    (\exists s; (seqLen(s) = seqLen(s1)  & seqNPerm(s) & 

       (\forall iv; (0 <= iv &  iv < seqLen(s) ->  
           any::seqGet(s1,iv) = any::seqGet(s2,int::seqGet(s,iv))))))
              )  
    };


    defOfSeqSwap {
	\schemaVar \term Seq s;
	\schemaVar \term int iv,jv;
        \schemaVar \variables int uSub;

	\find(seqSwap(s,iv,jv))

	\varcond ( \notFreeIn(uSub, s),
                   \notFreeIn(uSub, iv),
                   \notFreeIn(uSub, jv) )
	\replacewith(seqDef{uSub;}(0,seqLen(s),
             \if (!(0<= iv & 0<= jv & iv<seqLen(s) & jv < seqLen(s)))
             \then (any::seqGet(s,uSub))
             \else ( \if(uSub = iv)
                     \then(any::seqGet(s,jv))
                     \else(\if(uSub = jv)
                           \then(any::seqGet(s,iv))
                           \else(any::seqGet(s,uSub))))))      
                     
    };

   defOfSeqRemove {
	\schemaVar \term Seq s;
	\schemaVar \term int iv;
        \schemaVar \variables int uSub;

       \find(seqRemove(s,iv))
         \varcond ( \notFreeIn(uSub, s),
                    \notFreeIn(uSub, iv) )
      
       \replacewith( 
            \if (iv < 0 | seqLen(s) <= iv )
            \then (s)
            \else (seqDef{uSub;}(0,seqLen(s)-1,
                  \if (uSub < iv)
                  \then (any::seqGet(s,uSub))
                  \else (any::seqGet(s,uSub+1)))))
     };



    //--------------------------------------------------------------------
    // rule for seqNPermInv
    // These rules are new. They are needed since the inverse
    // of a permutation of integers cannot be defined explicitely,
    // epsilon terms would be needed for this.
    //--------------------------------------------------------------------


 lenOfNPermInv {
    \schemaVar \term Seq s1;
        \find(seqLen(seqNPermInv(s1)))
    \replacewith(seqLen(s1))

    \heuristics(simplify)
  };

   getOfNPermInv {
    \schemaVar \term Seq s1;
    \schemaVar \term int i3;
    \schemaVar \skolemTerm int jsk;
    
    \find(int::seqGet(seqNPermInv(s1), i3))
     \varcond ( \new(jsk, \dependingOn(i3)) )
     \replacewith(jsk)
     \add (int::seqGet(s1,jsk) = i3 & 0 <= jsk & jsk < seqLen(s1) ==> );
     \add ( ==> 0<= i3 & i3 < seqLen(s1))

    \heuristics(simplify)
  };

    //==================================================================
    //  derived taclets involving the functions seqSwap, seqRemove,
    //  and seqNPermInv
    //  
    //==================================================================


    lenOfSwap {
    \schemaVar \term Seq s1;
    \schemaVar \term int iv1, iv2;
    \find(seqLen(seqSwap(s1, iv1, iv2)))
    \replacewith(seqLen(s1))

    \heuristics(simplify)
  };

  getOfSwap {
    \schemaVar \term Object o;
    \schemaVar \term Seq s1;
    \schemaVar \term int iv, jv, idx;
    \schemaVar \term Heap h;

//  Differs from seqOutsideValue in seqStandard-new-verify.key
//

    \find(alpha::seqGet(seqSwap(s1,iv,jv), idx))
    \replacewith( \if (!(0<= iv & 0<= jv & iv <seqLen(s1) & jv < seqLen(s1)))
             \then (alpha::seqGet(s1,idx))
             \else ( \if(idx = iv)
                     \then(alpha::seqGet(s1,jv))
                     \else(\if(idx = jv)
                           \then(alpha::seqGet(s1,iv))
                           \else(alpha::seqGet(s1,idx)))))

    \heuristics(simplify)
  };

 lenOfRemove {
    \schemaVar \term Seq s1;
    \schemaVar \term int iv1;

    \find(seqLen(seqRemove(s1,iv1)))
    \replacewith(
           \if (0<= iv1 & iv1 < seqLen(s1)) 
           \then (seqLen(s1)-1) 
           \else (seqLen(s1)))

    \heuristics(simplify)
  };

//  Differs from seqOutsideValue in seqStandard-new-verify.key
//

  getOfRemoveAny {
    \schemaVar \term Seq s1;
    \schemaVar \term int i3,i2;
    
    \find(alpha::seqGet(seqRemove(s1,i2), i3))
     \replacewith(\if (i2 < 0 | seqLen(s1) <= i2) 
                  \then (alpha::seqGet(s1,i3)) 
                  \else ( \if(i3 < i2)
                          \then (alpha::seqGet(s1,i3)) 
                          \else( \if (i2 <= i3 & i3 <seqLen(s1)-1) 
                                 \then (alpha::seqGet(s1,i3+1))
                                 \else ((alpha)seqGetOutside))))

    \heuristics(simplify)
  };


  getOfRemoveInt {
    \schemaVar \term Seq s1;
    \schemaVar \term int i3,i2;
    
    \find(int::seqGet(seqRemove(s1,i2), i3))
     \replacewith(\if (i2 < 0 | seqLen(s1) <= i2) 
                  \then (int::seqGet(s1,i3)) 
                  \else ( \if(i3 < i2)
                          \then (int::seqGet(s1,i3)) 
                          \else( \if (i2 <= i3 & i3 <seqLen(s1)-1) 
                                 \then (int::seqGet(s1,i3+1))
                                 \else ((int)seqGetOutside))))

    \heuristics(simplify)
  };

 lenOfRemoveConcrete1 {
    \schemaVar \term Seq s1;

    \assumes(seqLen(s1)>= 1 ==>)
    \find(seqLen(seqRemove(s1,seqLen(s1)-1)))
    \replacewith(seqLen(s1)-1)

    \heuristics(simplify)
  };

lenOfRemoveConcrete2 {
    \schemaVar \term Seq s1;

    \assumes(seqLen(s1)>= 1 ==> )
    \find(seqLen(seqRemove(s1,0)))
    \replacewith(seqLen(s1)-1)

    \heuristics(simplify)
  };

//  Differs from seqOutsideValue in seqStandard-new-verify.key
//

  getOfRemoveAnyConcrete1 {
    \schemaVar \term Seq s1;
    \schemaVar \term int i3,i2;
    \assumes(seqLen(s1)>= 1 ==>)
    \find(alpha::seqGet(seqRemove(s1,seqLen(s1)-1), i3))
     \replacewith(\if   (i3 < seqLen(s1)-1)
                  \then (alpha::seqGet(s1,i3)) 
                  \else ((alpha)seqGetOutside))

    \heuristics(simplify)
  };

//  Differs from seqOutsideValue in seqStandard-new-verify.key
//

getOfRemoveAnyConcrete2 {
    \schemaVar \term Seq s1;
    \schemaVar \term int i3,i2;
    \assumes(seqLen(s1) >= 1 ==> )
    \find(alpha::seqGet(seqRemove(s1,0), i3))
     \replacewith(\if   (0 <= i3 & i3 < seqLen(s1)-1)
                  \then (alpha::seqGet(s1,i3+1)) 
                  \else ((alpha)seqGetOutside))

    \heuristics(simplify)
  };



    //--------------------------------------------------------------------------
    //  derived basic properties of permutations on natural
    //  numbers
    //  
    //--------------------------------------------------------------------------



//
//  The following taclet formalizes a kind of pidgeon hole principle
//  It is the only taclet whose derivation requires induction
//

 seqNPermRange {
        \schemaVar \term Seq s;
        \schemaVar \variables int iv;
      \find(seqNPerm(s) ==> )
      \varcond( \notFreeIn (iv,s)  )
      \add(\forall iv;((0 <= iv & iv <  seqLen(s)) 
         ->  (0 <= int::seqGet(s,iv) &  int::seqGet(s,iv) < seqLen(s))) ==>)

    };

//
//  The following taclet formalizes the mathematical fact
//  that every sujective function from a finite set into
//  itself is injective.
//  It can be proved using the previous taclet without induction.
//

 seqNPermInjective {
        \schemaVar \term Seq s;
        \schemaVar \variables int iv,jv;
      \find(seqNPerm(s) ==> )
      \varcond( \notFreeIn (iv,s), \notFreeIn (jv,s)  )
      \add(\forall iv;(\forall jv;(
       (0 <= iv & iv <  seqLen(s) & 0 <= jv & jv <  seqLen(s) 
        & int::seqGet(s,iv) = int::seqGet(s,jv) )
        ->  iv = jv )) ==>)

    };


 seqPermTrans{
    \schemaVar \term Seq s1, s2, s3;

        \assumes( seqPerm(s2,s3) ==>)
        \find(seqPerm(s1,s2) ==> )
        \add(seqPerm(s1,s3) ==>)
   };


 seqPermRefl{
    \schemaVar \term Seq s1;
     \add(seqPerm(s1,s1) ==>)
   };


  
   seqNPermSwapNPerm {
     \schemaVar \term Seq s1;
     \schemaVar \variables int iv,jv;

     \find( seqNPerm(s1) ==>)
     \varcond( \notFreeIn(iv, s1), \notFreeIn(jv, s1)   )   

     \add(\forall iv;(\forall jv;(
      ( 0 <= iv & 0 <= jv & iv < seqLen(s1) & jv < seqLen(s1) )
        -> seqNPerm(seqSwap(s1,iv,jv)))) ==>)

    };

   
    seqNPermEmpty {

    \find( ==> seqNPerm(seqEmpty))
    \replacewith ( ==>  true )

    \heuristics(simplify)
    };

  seqNPermSingletonConrete {

    \find( ==> seqNPerm(seqSingleton(0)))
    \replacewith ( ==>  true )

    \heuristics(simplify)
    };

 seqNPermSingleton {
   \schemaVar \term int si;

    \find( ==> seqNPerm(seqSingleton(si)))
    \replacewith ( ==> si=0 )

    \heuristics(simplify)
    };



   seqNPermComp {
    \schemaVar \term Seq s1,s2;
    \schemaVar \variables int u;
      \assumes(seqNPerm(s2) & seqLen(s1) = seqLen(s2) ==> )
      \find( seqNPerm(s1) ==>)
      \varcond( \notFreeIn(u, s1), \notFreeIn(u, s2)   ) 

      \add(seqNPerm(seqDef{u;}(0,seqLen(s1),
                          int::seqGet(s1,int::seqGet(s2,u)))) ==>)

   };

 seqGetSInvS {
      \schemaVar \term Seq s;
      \schemaVar \term int t;

  \find( int::seqGet(s,int::seqGet(seqNPermInv(s),t)))
  \replacewith ( t  );
  \add( ==> seqNPerm(s) & 0 <= t & t < seqLen(s))

  \heuristics(simplify)

  };

  seqNPermInvNPermLeft{
    \schemaVar \term Seq s1;

        \find(seqNPerm(s1) ==> )
        \add(seqNPerm(seqNPermInv(s1)) ==> )
   };


 seqPermSym{
    \schemaVar \term Seq s1,s2;

     \find(seqPerm(s1,s2) ==> )
     \add(seqPerm(s2,s1) ==>)
   };

 seqNPermInvNPermReplace{
    \schemaVar \term Seq s1;

        \find(seqNPerm(seqNPermInv(s1)))
        \replacewith(seqNPerm(s1))
   };


  seqPermConcatFW {
      \schemaVar \term Seq s1,s2,t1,t2;

      \assumes(seqPerm(s1,t1) ==> )
      \find(seqPerm(s2,t2) ==> )
      \add(seqPerm(seqConcat(s1,s2),seqConcat(t1,t2)) ==> )
   };

  seqPermConcatBW {
    \schemaVar \term Seq s1,s2,t1,t2;
 
    \assumes(seqPerm(s1,t1) ==> )
   \find(  ==> seqPerm(seqConcat(s1,s2),seqConcat(t1,t2)))
   \replacewith( ==> seqPerm(s2,t2))

    \heuristics(simplify)
   };


 seqnormalizeDef{
     \schemaVar \term Seq s1;
     \schemaVar \term int le,ri;
     \schemaVar \term any t;
     \schemaVar \variables int u;

    \find(seqDef{u;}(le,ri,t))
     \varcond( \notFreeIn(u, le), \notFreeIn(u, ri)) 
    \replacewith(\if   (le < ri )
                  \then (seqDef{u;}(0,(ri-le),({\subst u; (u + le)}t))) 
                  \else (seqEmpty ))  

  };
 
}
