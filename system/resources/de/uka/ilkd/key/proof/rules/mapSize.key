// This file is part of KeY - Integrated Deductive Software Design 
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany 
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2013 Karlsruhe Institute of Technology, Germany 
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General 
// Public License. See LICENSE.TXT for details.
// 


/** Additional rules for the size of maps.
 * @author Kai Wallisch
 */

\sorts {
    Free;
}

\schemaVariables {
	\term Free m, m0, m1;
	\term any key, value, x;
	\term Seq s;
	\variables any vy;
}

\functions{
    int mapSize(Free); 
}

\predicates {
    isFinite(Free);
}

\rules {

    //--------------------------------------------------------------------------
    // axioms
    //--------------------------------------------------------------------------
    
    isFiniteOfMapEmpty {
        \find(isFinite(mapEmpty))
        \sameUpdateLevel
        \replacewith(true)
        \heuristics(simplify)
    };
    
    sizeOfMapEmpty {
        \find(mapSize(mapEmpty))
        \sameUpdateLevel
        \replacewith(0)
        \heuristics(simplify)
    };
    
	isFiniteOfMapRemove {
        \find(isFinite(mapRemove(m,key)))
        \sameUpdateLevel
        \replacewith(isFinite(m))
        \heuristics(simplify)
    };
    
    sizeOfMapRemove {
    	\assumes(isFinite(m) ==> )
        \find(mapSize(mapRemove(m,key)))
        \sameUpdateLevel
        \replacewith(\if(inDomain(m,key))\then(mapSize(m) - 1)\else(mapSize(m)))
        \heuristics(simplify_enlarging)
    };

    
	//--------------------------------------------------------------------------
    // derived isFinite rules (proven sound in KeY)
    //--------------------------------------------------------------------------
    
    isFiniteOfMapSingleton {
        \find(isFinite(mapSingleton(key,value)))
        \sameUpdateLevel
        \replacewith(true)
        \heuristics(simplify)
    };
    
    isFiniteOfSeq2Map {
        \find(isFinite(seq2map(s)))
        \sameUpdateLevel
        \replacewith(true)
        \heuristics(simplify)
    };
    
    isfiniteOfMapOverride {
        \find(isFinite(mapOverride(m0,m1)))
        \sameUpdateLevel
        \replacewith(isFinite(m0) & isFinite(m1))
        \heuristics(simplify)
    };
    
    isFiniteOfMapUpdate {
        \find(isFinite(mapUpdate(m,key,value)))
        \sameUpdateLevel
        \replacewith(isFinite(m))
        \heuristics(simplify)
    };
    
    //--------------------------------------------------------------------------
    //mapSize taclets
    //--------------------------------------------------------------------------

    sizeOfMapSingleton {
        \find(mapSize(mapSingleton(key,value)))
        \sameUpdateLevel
        \replacewith(1)
        \heuristics(simplify)
    };
    
    sizeOfSeq2Map {
        \find(mapSize(seq2map(s)))
        \sameUpdateLevel
        \replacewith(seqLen(s))
        \heuristics(simplify)
    };
    
    sizeOfMapUpdate {
    	\assumes(isFinite(m) ==> )
        \find(mapSize(mapUpdate(m,key,value)))
        \sameUpdateLevel
        \replacewith(\if(inDomain(m,key))\then(mapSize(m))\else(mapSize(m) + 1))
        \heuristics(simplify_enlarging)
    };
    
	sizeZeroImpliesMapEmpty{
		\find(mapSize(m) = 0)
		\replacewith(m = mapEmpty)
        \heuristics(simplify_enlarging)
	};
	
	mapSizeNotNegativeForFiniteMaps{
    	\assumes(isFinite(m) ==> )
		\find(mapSize(m))
		\add(mapSize(m) >= 0 ==> )
        \heuristics(inReachableStateImplication)
	};
   
}
