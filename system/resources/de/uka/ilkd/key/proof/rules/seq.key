// This file contains the new rule set for the sequence data type
// In case a new taclet is a modification of an old taclet
// the old taclet is contained as a comment.
//
// 
// This file is the union of previous files
//  seqCore0.key
//  seqCore.key
//  seqCorePI.key
//  seqCorePIX.key
//  seqCoreP.key


// This file contains only the DECLARATIONS and DEFINITION for the
// sequence datatype. Find the RULES in files seqRules.key and seqPerm.key.


\sorts {
    Seq;
}

\predicates {
     seqPerm(Seq,Seq);
     seqNPerm(Seq);
}

\functions {
    //getters      
    alpha alpha::seqGet(Seq, int);
    int seqLen(Seq);
    int seqIndexOf(Seq, any);
    any seqGetOutside;
    
    //constructors
    Seq seqEmpty;
    Seq seqSingleton(any);
    Seq seqConcat(Seq, Seq);
    Seq seqSub(Seq, int, int);
    Seq seqReverse(Seq);
    Seq seqDef{false,false,true}(int, int, any);

    Seq seqSwap(Seq,int,int);
    Seq seqRemove(Seq,int);
    Seq seqNPermInv(Seq);

    
    // placeholder for values in enhanced for loop
    Seq values;
}


\rules(sequences:on){

    //===============================================================
    //  Core axioms
    //  (4 in total)
    //===============================================================

    //--------------------------------------------------------------------
    // Core axiom for length of sequences
    //--------------------------------------------------------------------

    lenNonNegative {
	\schemaVar \term Seq seq;
   
	\find(seqLen(seq)) \sameUpdateLevel
	
	\add(0 <= seqLen(seq) ==>)
                     
      	\heuristics(inReachableStateImplication)
    };     

    //--------------------------------------------------------------------
    // Core axiom for equality of sequences
    //--------------------------------------------------------------------

    equalityToSeqGetAndSeqLen {
        \schemaVar \term Seq s, s2;
        \schemaVar \variables int iv;    	
    	
        \find(s = s2)
        \varcond(\notFreeIn(iv, s, s2))
	
        \replacewith(seqLen(s) = seqLen(s2) 
                      & \forall iv; (0 <= iv & iv < seqLen(s) 
           -> any::seqGet(s, iv) = any::seqGet(s2, iv)))

    };    

     
    //--------------------------------------------------------------------
    // Core axiom for sequence definition
    //--------------------------------------------------------------------

    getOfSeqDef {
	\schemaVar \term int idx, from, to;
        \schemaVar \term any t;
        \schemaVar \variables int uSub, uSub1, uSub2;
   
	\find(alpha::seqGet(seqDef{uSub;} (from, to, t), idx))
	\varcond ( \notFreeIn(uSub, from), 
                   \notFreeIn(uSub, to))
	\replacewith(\if(0 <= idx & idx < (to - from))
	             \then((alpha) {\subst uSub; (idx + from)}t)
	             \else((alpha) seqGetOutside))
                     
        \heuristics(simplify)
    };

//    getOfSeqDef {
//	\schemaVar \term int idx, from, to;
//        \schemaVar \term any t;
//        \schemaVar \variables int uSub, uSub1, uSub2;
//   
//	\find(beta::seqGet(seqDef{uSub;} (from, to, t), idx))
//	\varcond ( \notFreeIn(uSub, from), 
//                   \notFreeIn(uSub, to))
//	\replacewith(\if(0 <= idx & idx < (to - from))
//	             \then((beta) {\subst uSub; (idx + from)}t)
//	             \else(beta::seqGet(seqEmpty, 0)))
//                     
//      	\heuristics(simplify)
//    };


    lenOfSeqDef {
        \schemaVar \term int from, to;
        \schemaVar \term any t;
        \schemaVar \variables int uSub, uSub1, uSub2;

   
        \find(seqLen(seqDef{uSub;} (from, to, t)))
	
        \replacewith(\if(from < to)\then((to - from))\else(0))
                     
        \heuristics(simplify_enlarging)
    };


//   lenOfSeqDef {
//	\schemaVar \term int from, to;
//        \schemaVar \term any t;
//        \schemaVar \variables int uSub, uSub1, uSub2;
//
//   
//	\find(seqLen(seqDef{uSub;} (from, to, t)))
//	
//	\replacewith(\if(from <= to)\then((to - from))\else(0))
//                     
//      	\heuristics(simplify_enlarging)
//    };




    //--------------------------------------------------------------------
    // The core taclets for Seq end here.
    // Consistency of the core theory has to be guaranteed by external means,
    //  e.g. by presenting a model for it.
    //--------------------------------------------------------------------
}

