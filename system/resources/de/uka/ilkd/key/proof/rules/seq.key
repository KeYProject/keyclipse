\sorts {
    Seq;
}


\functions {
    //getters
    alpha alpha::seqGet(Seq, int);
    int seqLen(Seq);
    int seqIndexOf(Seq, any);
    
    //constructors
    Seq seqEmpty;
    Seq seqSingleton(any);
    Seq seqConcat(Seq, Seq);
    Seq seqSub(Seq, int, int);
    Seq seqReverse(Seq);
}


\rules {

    //--------------------------------------------------------------------------
    //axioms
    //--------------------------------------------------------------------------
    
    getOfSeqSingleton {
	\schemaVar \term alpha x;
	\schemaVar \term int idx;	
   
	\find(beta::seqGet(seqSingleton(x), idx))
	
	\replacewith(\if(idx = 0)
                     \then((beta)x)
                     \else(beta::seqGet(seqEmpty, 0)))
                     
      	\heuristics(simplify)
    };
    
    
    getOfSeqConcat {
	\schemaVar \term Seq seq, seq2;
	\schemaVar \term int idx;
   
	\find(beta::seqGet(seqConcat(seq, seq2), idx))
	
	\replacewith(\if(idx < seqLen(seq))
                     \then(beta::seqGet(seq, idx))
                     \else(beta::seqGet(seq2, idx - seqLen(seq))))
                     
      	\heuristics(simplify_enlarging)
    };
    
    
    getOfSeqSub {
	\schemaVar \term Seq seq;
	\schemaVar \term int idx, from, to;
   
	\find(beta::seqGet(seqSub(seq, from, to), idx))
	
	\replacewith(\if(0 <= idx & idx < (to - from) + 1)
	             \then(beta::seqGet(seq, idx + from))
	             \else(beta::seqGet(seqEmpty, 0)))
                     
      	\heuristics(simplify)
    };
    
    
    getOfSeqReverse {
        \schemaVar \term Seq seq;
	\schemaVar \term int idx;        
   
	\find(beta::seqGet(seqReverse(seq), idx))
	
	\replacewith(beta::seqGet(seq, seqLen(seq) - 1 - idx))
                     
      	\heuristics(simplify_enlarging)
    };
    
    
    lenNonNegative {
	\schemaVar \term Seq seq;
   
	\find(seqLen(seq)) \sameUpdateLevel
	
	\add(0 <= seqLen(seq) ==>)
                     
      	\heuristics(inReachableStateImplication)
    };    
    
    
    lenOfSeqEmpty {
	\find(seqLen(seqEmpty))
	
	\replacewith(0)
                     
      	\heuristics(concrete)
    };
    
    
    lenOfSeqSingleton {
	\schemaVar \term alpha x;
   
	\find(seqLen(seqSingleton(x)))
	
	\replacewith(1)
                     
      	\heuristics(concrete)
    };
    
    
    lenOfSeqConcat {
	\schemaVar \term Seq seq, seq2;
   
	\find(seqLen(seqConcat(seq, seq2)))
	
	\replacewith(seqLen(seq) + seqLen(seq2))
                     
      	\heuristics(simplify)
    };
    
    
    lenOfSeqSub {
	\schemaVar \term Seq seq;
	\schemaVar \term int from, to;
   
	\find(seqLen(seqSub(seq, from, to)))
	
	\replacewith(\if(from <= to)\then((to - from) + 1)\else(0))
                     
      	\heuristics(simplify_enlarging)
    };
    
    
    lenOfSeqReverse {
	\schemaVar \term Seq seq;
   
	\find(seqLen(seqReverse(seq)))
	
	\replacewith(seqLen(seq))
                     
      	\heuristics(simplify)    
    };
    
    
    equalityToSeqGetAndSeqLen {
    	\schemaVar \term Seq s, s2;
	\schemaVar \variables int iv;    	
    	
    	\find(s = s2)
	\varcond(\notFreeIn(iv, s, s2))
	
    	\replacewith(seqLen(s) = seqLen(s2) 
    	             & \forall iv; (0 <= iv & iv < seqLen(s) -> any::seqGet(s, iv) = any::seqGet(s2, iv)))
    };    
    
    
    equalityToSeqGetAndSeqLenLeft {
    	\schemaVar \term Seq s, s2;
	\schemaVar \variables int iv;    	
    	
    	\find(s = s2 ==>)
	\varcond(\notFreeIn(iv, s, s2))
	
    	\add(seqLen(s) = seqLen(s2) 
    	     & \forall iv; (0 <= iv & iv < seqLen(s) -> any::seqGet(s, iv) = any::seqGet(s2, iv)) ==>)
    	
    	\heuristics(inReachableStateImplication)
    };    


    equalityToSeqGetAndSeqLenRight {
    	\schemaVar \term Seq s, s2;
	\schemaVar \variables int iv;    	
    	
    	\find(==> s = s2)
	\varcond(\notFreeIn(iv, s, s2))
	
    	\replacewith(==> seqLen(s) = seqLen(s2) 
    	                 & \forall iv; (0 <= iv & iv < seqLen(s) -> any::seqGet(s, iv) = any::seqGet(s2, iv)))
    	
    	\heuristics(simplify_enlarging)
    };

    indexOfSeqSingleton {
    	\schemaVar \term any x,y;
    	\assumes(x = y ==>)
    	\find(seqIndexOf(seqSingleton(y),x))
    	\sameUpdateLevel
    	\replacewith(0)
    	\heuristics(simplify)
    };
    
    /*
    indexOfSeqConcat {
    	\schemaVar \term Seq s1, s2;
    	\schemaVar \term any x;
    	\schemaVar \variables int idx;
    	\find(seqIndexOf(seqConcat(s1,s2),x))
    	\replacewith(\if(\exists idx; (any::seqGet(s1, idx) = x))\then(seqIndexOf(s1,x))\else(add(seqIndexOf(s2,x),seqLen(s1))))
    	\heuristics(simplify_enlarging)
    };
    */
    indexOfSeqSub {
    	\schemaVar \term Seq s;
    	\schemaVar \term int from, to;
    	\schemaVar \term any x;
    	\find(seqIndexOf(seqSub(s,from,to),x))
    	\sameUpdateLevel
    	\replacewith(sub(seqIndexOf(s,x),from))
    	\add(==> from <= seqIndexOf(s,x) & seqIndexOf(s,x) <= to)
    	\heuristics(simplify_enlarging)
    };
    
    indexOfSeqReverse {
    	\schemaVar \term Seq s;
    	\schemaVar \term any x;
    	\find(seqIndexOf(seqReverse(s),x))
    	\replacewith(sub(seqLen(s),seqIndexOf(s,x)))
    	\heuristics(simplify_enlarging)
    };
    
    

    //--------------------------------------------------------------------------
    //EQ versions of axioms (these are lemmata)
    //--------------------------------------------------------------------------
    
    getOfSeqSingletonEQ {
	\schemaVar \term alpha x;
	\schemaVar \term int idx;
	\schemaVar \term Seq EQ;
   
        \assumes(seqSingleton(x) = EQ ==>)   
	\find(beta::seqGet(EQ, idx))
        \sameUpdateLevel	
	
	\replacewith(\if(idx = 0)
                     \then((beta)x)
                     \else(beta::seqGet(seqEmpty, 0)))
                     
      	\heuristics(simplify)
    };
    
    
    getOfSeqConcatEQ {
	\schemaVar \term Seq seq, seq2;
	\schemaVar \term int idx;
	\schemaVar \term Seq EQ;	
   
        \assumes(seqConcat(seq, seq2) = EQ ==>)      
	\find(beta::seqGet(EQ, idx))
        \sameUpdateLevel	
	
	\replacewith(\if(idx < seqLen(seq))
                     \then(beta::seqGet(seq, idx))
                     \else(beta::seqGet(seq2, idx - seqLen(seq))))
                     
      	\heuristics(simplify_enlarging)
    };
    
    
    getOfSeqSubEQ {
	\schemaVar \term Seq seq;
	\schemaVar \term int idx, from, to;
	\schemaVar \term Seq EQ;
   
        \assumes(seqSub(seq, from, to) = EQ ==>)
	\find(beta::seqGet(EQ, idx))
        \sameUpdateLevel
	
	\replacewith(\if(0 <= idx & idx < (to - from) + 1)
	             \then(beta::seqGet(seq, idx + from))
	             \else(beta::seqGet(seqEmpty, 0)))
                     
      	\heuristics(simplify)
    };
    
    
    getOfSeqReverseEQ {
        \schemaVar \term Seq seq;
	\schemaVar \term int idx;        
	\schemaVar \term Seq EQ;        
   
        \assumes(seqReverse(seq) = EQ ==>)   
	\find(beta::seqGet(EQ, idx))
        \sameUpdateLevel	
	
	\replacewith(beta::seqGet(seq, seqLen(seq) - 1 - idx))
                     
      	\heuristics(simplify_enlarging)
    };
    
    
    lenOfSeqEmptyEQ {
	\schemaVar \term alpha x;
	\schemaVar \term Seq EQ;	
   
        \assumes(seqEmpty = EQ ==>)
	\find(seqLen(EQ))
        \sameUpdateLevel	
	
	\replacewith(0)

      	\heuristics(concrete)
    };    
    
    
    lenOfSeqSingletonEQ {
	\schemaVar \term alpha x;
	\schemaVar \term Seq EQ;	
   
        \assumes(seqSingleton(x) = EQ ==>)   
	\find(seqLen(EQ))
        \sameUpdateLevel
	
	\replacewith(1)
                     
      	\heuristics(concrete)
    };
    
    
    lenOfSeqConcatEQ {
	\schemaVar \term Seq seq, seq2;
	\schemaVar \term Seq EQ;	
   
        \assumes(seqConcat(seq, seq2) = EQ ==>)
	\find(seqLen(EQ))
        \sameUpdateLevel
	
	\replacewith(seqLen(seq) + seqLen(seq2))
                     
      	\heuristics(simplify)
    };
    
    
    lenOfSeqSubEQ {
	\schemaVar \term Seq seq;
	\schemaVar \term int from, to;
	\schemaVar \term Seq EQ;
   
        \assumes(seqSub(seq, from, to) = EQ ==>)
	\find(seqLen(EQ))
        \sameUpdateLevel	
	
	\replacewith(\if(from <= to)\then((to - from) + 1)\else(0))
                     
      	\heuristics(simplify_enlarging)
    };    
    
    
    lenOfSeqReverseEQ {
	\schemaVar \term Seq seq;
	\schemaVar \term Seq EQ;
   
  	\assumes(seqReverse(seq) = EQ ==>)
	\find(seqLen(EQ))
	\sameUpdateLevel
	
	\replacewith(seqLen(seq))
                     
      	\heuristics(simplify)    
    };
    
    
    
    
    //--------------------------------------------------------------------------
    //lemmata for seqEmpty
    //--------------------------------------------------------------------------
    
    seqConcatWithSeqEmpty1 {
        \schemaVar \term Seq seq;
        
        \find(seqConcat(seq, seqEmpty))
        
        \replacewith(seq)
        
        \heuristics(concrete)
    };
    
    
    seqConcatWithSeqEmpty2 {
        \schemaVar \term Seq seq;
        
        \find(seqConcat(seqEmpty, seq))
        
        \replacewith(seq)
        
        \heuristics(concrete)
    };
    

    seqReverseOfSeqEmpty {
        \find(seqReverse(seqEmpty))
        
        \replacewith(seqEmpty)
        
        \heuristics(concrete)
    };
    
    
    
    //--------------------------------------------------------------------------
    //other lemmata
    //--------------------------------------------------------------------------
    
    subSeqComplete {
	\schemaVar \term Seq seq;
   
	\find(seqSub(seq, 0, seqLen(seq) - 1))
	
	\replacewith(seq)
                     
      	\heuristics(concrete)
    };    
    
    
    subSeqTail {
	\schemaVar \term Seq seq;
	\schemaVar \term any x;	
   
	\find(seqSub(seqConcat(seqSingleton(x), seq), 1, seqLen(seq)))
	
	\replacewith(seq)
                     
      	\heuristics(concrete)
    };
    
    
    subSeqTailEQ {
	\schemaVar \term Seq seq;
	\schemaVar \term any x;
	\schemaVar \term int EQ;
   
   	\assumes(seqLen(seq) = EQ ==>)
	\find(seqSub(seqConcat(seqSingleton(x), seq), 1, EQ))
	\sameUpdateLevel
	
	\replacewith(seq)
                     
      	\heuristics(concrete)
    };      
    
    
    castedGetAny {
	\schemaVar \term Seq seq;    
	\schemaVar \term int idx;	
   
	\find((beta)any::seqGet(seq, idx))
	
	\replacewith(beta::seqGet(seq, idx))
                     
      	\heuristics(simplify)
    }; 
    
}
