\sorts {
    \generic G;
}


\rules {
   
    //--------------------------------------------------------------------------
    //converting sequential updates to parallel ones
    //--------------------------------------------------------------------------

    sequentialToParallel1{
	\schemaVar \update u, u2;
	\schemaVar \term any t;	
	
	\find({u}{u2}t)
	
	\replacewith({u || {u} u2}t)
	
	\heuristics(simplify)
    };

    sequentialToParallel2 {
	\schemaVar \update u, u2;
	\schemaVar \formula phi;	
	
	\find({u}{u2}phi)
	
	\replacewith({u || {u} u2}phi)
	
	\heuristics(simplify)
    };
    
    sequentialToParallel3 {
	\schemaVar \update u, u2, u3;
	
	\find({u}{u2}u3)
	
	\replacewith({u || {u} u2}u3)
	
	\heuristics(simplify)
    };
    
    
    //--------------------------------------------------------------------------
    //dropping overwritten and ignored update parts
    //--------------------------------------------------------------------------
    
    simplifyUpdate1 {
	\schemaVar \update u, u2;
	\schemaVar \term any t;	
	
	\find({u}t)
	\varcond(\dropEffectlessElementaries(u, t, u2))
	
	\replacewith({u2}t)
	
	\heuristics(concrete)
    };
    
    simplifyUpdate2 {
	\schemaVar \update u, u2;
	\schemaVar \formula phi;	
	
	\find({u}phi)
	\varcond(\dropEffectlessElementaries(u, phi, u2))
	
	\replacewith({u2}phi)
	
	\heuristics(concrete)
    };
    
    simplifyUpdate3 {
	\schemaVar \update u, u2;
	\schemaVar \update u3;
	
	\find({u}u3)
	\varcond(\dropEffectlessElementaries(u, u3, u2))
	
	\replacewith({u2}u3)
	
	\heuristics(concrete)
    };    
    
    

        
    //--------------------------------------------------------------------------
    //update application
    //--------------------------------------------------------------------------
    
    applyOnRigidTerm {
	\schemaVar \update u;
	\schemaVar \term any t, t2;	
	
	\find({u}t)
	\varcond(\applyUpdateOnRigid(u, t, t2))
	
	\replacewith(t2)
	
	\heuristics(simplify)    
    };
    
    
    applyOnRigidFormula {
	\schemaVar \update u;
	\schemaVar \formula phi, phi2;	
	
	\find({u}phi)
	\varcond(\applyUpdateOnRigid(u, phi, phi2))
	
	\replacewith(phi2)
	
	\heuristics(simplify)    
    };
    
    
    applyOnElementary {
	\schemaVar \update u;
	\schemaVar \program Variable #pv;
	\schemaVar \term any t;	
	
	\find({u}(#pv := t))
	
	\replacewith(#pv := {u}t)
	
	\heuristics(simplify)
    };
        
    
    applyOnParallel {
	\schemaVar \update u, u2, u3;	
	
	\find({u}(u2 || u3))
	
	\replacewith({u}u2 || {u}u3)
	
	\heuristics(simplify)    
    };
    
        
    applyOnPV {
	\schemaVar \program Variable #pv;
	\schemaVar \term any t;	
	
	\find({#pv := t}#pv)
	
	\replacewith(t)
	
	\heuristics(simplify)
    };    
}