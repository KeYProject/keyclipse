\sorts { Generic; }

\functions {
    \unique Generic atom;
    \unique Generic branch(Generic,Generic);

    int height(Generic);
    Seq seqInc(Seq);
    Seq tree2seq(Generic);
}

\schemaVariables {
    \term Generic x,y;
}

\rules {

  heightBranch {
    \schemaVar \term int hx,hy;
    \find(height(branch(x,y)))
    \replacewith(add(1, \if (hx > hy) \then (hx) \else (hy)))
    \add(hx = height(x) & hy = height(y) ==>)
    \heuristics(simplify)
  };

  heightAtom {
    \find(height(atom))
    \replacewith(0)
    \heuristics(concrete)
  };

  branch2seq {
    \find(tree2seq(branch(x,y)))
    \replacewith(seqInc(seqConcat(tree2seq(x),tree2seq(y))))
    \heuristics(simplify)
  };

  atom2seq {
    \find(tree2seq(atom))
    \replacewith(seqSingleton(0))
    \heuristics(concrete)
  };


  getOfSeqInc {
    \schemaVar \term Seq z;
    \schemaVar \term int idx;
    \find(beta::seqGet(seqInc(z),idx))
    \replacewith(((int)beta::seqGet(z,idx))+1)
    \heuristics(simplify)
  };

/*
  getOfSeqIncEQ {
    \schemaVar \term Seq z, EQ;
    \schemaVar \term int idx;
    \assumes (seqInc(z) = EQ ==>)
    \find(beta::seqGet(EQ, idx)) \sameUpdateLevel
    \replacewith(((int)beta::seqGet(z, idx))+1)
    \heuristics(simplify)
  };
*/
  
  lenOfSeqInc {
    \schemaVar \term Seq z;
    \schemaVar \term int idx;
    \find(seqLen(seqInc(z)))
    \replacewith(seqLen(z))
    \heuristics(simplify)
  };

/*
  lenOfSeqIncEQ {
    \schemaVar \term Seq z, EQ;
    \schemaVar \term int idx;
    
    \assumes (seqInc(z) = EQ ==>)
    \find(seqLen(EQ)) \sameUpdateLevel
    \replacewith(seqLen(z))
    \heuristics(simplify)
  };
*/
   
}
