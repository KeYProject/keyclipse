\sorts {
    Field;
    Heap;
}


\functions {
    //select/store
    alpha alpha::select(Heap, Object, Field);
    Heap store(Heap, Object, Field, any);
    Heap anon(Heap, LocSet, Heap);
    Heap memset(Heap, LocSet, any);    
    
    //fields
    \unique Field arr(int);
    \unique Field length;
    \unique Field java.lang.Object::<created>;
    \unique Field java.lang.Object::<initialized>;        
    \unique Field alpha::<classPrepared>;    			//static
    \unique Field alpha::<classInitialized>;			//static
    \unique Field alpha::<classInitializationInProgress>;	//static
    \unique Field alpha::<classErroneous>;			//static
    
    //null
    Null null;
}


\predicates {
    wellFormed(Heap);
}


\programVariables {
    Heap heap;
}


   

\rules {

    //--------------------------------------------------------------------------
    //axioms
    //--------------------------------------------------------------------------
    
    selectOfStore {
	\schemaVar \term Heap h;
	\schemaVar \term Object o, o2;
	\schemaVar \term Field f, f2;
	\schemaVar \term alpha x;
   
	\find(beta::select(store(h, o, f, x), o2, f2))
	
	\replacewith(\if(o = o2 & f = f2)
                     \then((beta)x)
                     \else(beta::select(h, o2, f2)))
                     
      	\heuristics(simplify)
    };
    
    
    selectOfAnon {
        \schemaVar \term Heap h, h2;
        \schemaVar \term LocSet s;
	\schemaVar \term Object o;
	\schemaVar \term Field f; 
	
        \find(beta::select(anon(h, s, h2), o, f))
        
        \replacewith(\if(elementOf(o, f, s) & f != java.lang.Object::<created> 
                         | elementOf(o, f, freshLocs(h)))
                     \then(beta::select(h2, o, f))
                     \else(beta::select(h, o, f)))
                     
        \heuristics(simplify)
    };
    
    
    selectOfMemset {
        \schemaVar \term Heap h;
        \schemaVar \term LocSet s;
        \schemaVar \term any x;
	\schemaVar \term Object o;
	\schemaVar \term Field f; 
	
        \find(beta::select(memset(h, s, x), o, f))
        
        \replacewith(\if(elementOf(o, f, s))
                     \then(x)
                     \else(beta::select(h, o, f)))
                     
        \heuristics(simplify)
    };
    
    
    selectToAnySelect { //partially hardcoded in DependencyContractPO
	\schemaVar \term Heap h;
	\schemaVar \term Object o;
	\schemaVar \term Field f;
   
	\find(beta::select(h, o, f))
	\varcond(\strict\sub(beta, any))
	
	\add(beta::select(h, o, f) = any::select(h, o, f) ==>)	
    };    
    
    
    
    //--------------------------------------------------------------------------
    //EQ versions of axioms (these are lemmata)
    //--------------------------------------------------------------------------
    
    selectOfStoreEQ {
	\schemaVar \term Heap h;
	\schemaVar \term Object o, o2;
	\schemaVar \term Field f, f2;
	\schemaVar \term alpha x;
	\schemaVar \term Heap EQ;
   
        \assumes(store(h, o, f, x) = EQ ==>)
	\find(beta::select(EQ, o2, f2))
        \sameUpdateLevel
	
	\replacewith(\if(o = o2 & f = f2)
                     \then((beta)x)
                     \else(beta::select(h, o2, f2)))
      	\heuristics(simplify)
    };
    
    
    selectOfAnonEQ {
        \schemaVar \term Heap h, h2;
        \schemaVar \term LocSet s;
	\schemaVar \term Object o;
	\schemaVar \term Field f;
	\schemaVar \term Heap EQ; 
	
	\assumes(anon(h, s, h2) = EQ ==>)
        \find(beta::select(EQ, o, f))
        \sameUpdateLevel
        
        \replacewith(\if(elementOf(o, f, s) & f != java.lang.Object::<created> 
                         | elementOf(o, f, freshLocs(h)))
                     \then(beta::select(h2, o, f))
                     \else(beta::select(h, o, f)))
                     
        \heuristics(simplify)
    };    
    
    
    selectOfMemsetEQ {
        \schemaVar \term Heap h;
        \schemaVar \term LocSet s;
        \schemaVar \term any x;
	\schemaVar \term Object o;
	\schemaVar \term Field f;
	\schemaVar \term Heap EQ; 
	
	\assumes(memset(h, s, x) = EQ ==>)
        \find(beta::select(EQ, o, f))
        \sameUpdateLevel
        
        \replacewith(\if(elementOf(o, f, s))
                     \then(x)
                     \else(beta::select(h, o, f)))
                     
        \heuristics(simplify)
    };
        
    
       
    //--------------------------------------------------------------------------
    //lemmata for some common cases
    //--------------------------------------------------------------------------
    
    elementOfGuardedSet {
        \schemaVar \term Object o;
        \schemaVar \term Field f;
        \schemaVar \formula phi;
        \schemaVar \term LocSet s;
        
        \find(elementOf(o, f, \if(phi)\then(s)\else(empty)))
        
        \replacewith(phi & elementOf(o, f, s))
        
        \heuristics(concrete)
    };
        
    
    dropEffectlessStores {
        \schemaVar \term Heap h, result;
        \schemaVar \term Object o;
        \schemaVar \term Field f;
	\schemaVar \term any x;	
	
	\find(store(h, o, f, x))
	\varcond(\dropEffectlessStores(h, o, f, x, result))
	
	\replacewith(result)
	
	\heuristics(concrete)
    };
        
    
    memsetEmpty {
        \schemaVar \term Heap h;
        \schemaVar \term any x;
        
        \find(memset(h, empty, x))
        
        \replacewith(h)
        
        \heuristics(concrete)
    };


    notCreatedAfterAnon {
        \schemaVar \term Object o;
        \schemaVar \term Heap h, h2;
        \schemaVar \term LocSet s;
        
        \find(!o = null & !boolean::select(anon(h, s, h2), o, java.lang.Object::<created>) = TRUE)
        
        \replacewith(!o = null
                     & !boolean::select(h, o, java.lang.Object::<created>) = TRUE
                     & !boolean::select(h2, o, java.lang.Object::<created>) = TRUE)
        
        \heuristics(concrete)
    };    
    
    
    notCreatedAfterAnonEQ {
        \schemaVar \term Object o;
        \schemaVar \term Heap h, h2;
        \schemaVar \term LocSet s;
        \schemaVar \term Heap EQ;
        
        \assumes(anon(h, s, h2) = EQ ==>)
        \find(!o = null & !boolean::select(EQ, o, java.lang.Object::<created>) = TRUE)
        \sameUpdateLevel
        
        \replacewith(!o = null
                     & !boolean::select(h, o, java.lang.Object::<created>) = TRUE
                     & !boolean::select(h2, o, java.lang.Object::<created>) = TRUE)
        
        \heuristics(concrete)
    };    
}
