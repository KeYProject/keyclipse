\sorts {
    Field;
    Heap;
}


\functions {
    //select/store
    alpha alpha::select(Heap, Object, Field);
    Heap store(Heap, Object, Field, any);
    Heap changeHeapAtLocs(Heap, Set, Heap);
    Heap changeHeapAtLocs2(Heap, Set, any);    
    
    //location sets    
    Set allLocs;
    Set allFields(Object);
    
    //fields    
    \unique Field arr(int);
    \unique Field length;
    \unique Field alpha::<classPrepared>;    			//static
    \unique Field alpha::<classInitialized>;			//static
    \unique Field alpha::<classInitializationInProgress>;	//static
    \unique Field alpha::<classErroneous>;			//static
    \unique Field java.lang.Object::<nextToCreate>;		//static
    \unique Field java.lang.Object::<created>;
    \unique Field java.lang.Object::<initialized>;    
        

    //null
    Null null;
}


\predicates {
    wellFormed(Heap);
}


\programVariables {
    Heap heap;
}



   

\rules {

    //--------------------------------------------------------------------------
    //axioms
    //--------------------------------------------------------------------------

    selectOfStore {
	\schemaVar \term Heap h;
	\schemaVar \term Object o, o2;
	\schemaVar \term Field f, f2;
	\schemaVar \term alpha x;
   
	\find(beta::select(store(h, o, f, x), o2, f2))
	
	\replacewith(\if(o = o2 & f = f2)
                     \then((beta)x)
                     \else(beta::select(h, o2, f2)))
      	\heuristics(simplify)
    };
    
    
    selectOfChangeHeapAtLocs {
        \schemaVar \term Heap h, h2;
        \schemaVar \term Set s;
	\schemaVar \term Object o;
	\schemaVar \term Field f; 
	
        \find(beta::select(changeHeapAtLocs(h, s, h2), o, f))
        
        \replacewith(\if(elementOf(pair(o, f), s))
                     \then(beta::select(h2, o, f))
                     \else(beta::select(h, o, f)))
                     
        \heuristics(simplify)
    };
    
    
    selectOfChangeHeapAtLocs2 {
        \schemaVar \term Heap h;
        \schemaVar \term Set s;
        \schemaVar \term any x;
	\schemaVar \term Object o;
	\schemaVar \term Field f; 
	
        \find(beta::select(changeHeapAtLocs2(h, s, x), o, f))
        
        \replacewith(\if(elementOf(pair(o, f), s))
                     \then(x)
                     \else(beta::select(h, o, f)))
                     
        \heuristics(simplify)
    };    
    
    
    elementOfAllLocs {
        \schemaVar \term Object o;
	\schemaVar \term Field f;        
        
        \find(elementOf(pair(o, f), allLocs))
        
        \replacewith(true)
        
        \heuristics(concrete)
    };
    
    
    elementOfAllFields {
        \schemaVar \term Object o, o2;
	\schemaVar \term Field f;        
        
        \find(elementOf(pair(o, f), allFields(o2)))
        
        \replacewith(o = o2)
        
        \heuristics(concrete)
    };    
    

    
    //--------------------------------------------------------------------------
    //EQ versions of axioms (these are lemmata)
    //--------------------------------------------------------------------------
    
    selectOfStoreEQ {
	\schemaVar \term Heap h;
	\schemaVar \term Object o, o2;
	\schemaVar \term Field f, f2;
	\schemaVar \term alpha x;
	\schemaVar \term Heap EQ;
   
        \assumes(store(h, o, f, x) = EQ ==>)
	\find(beta::select(EQ, o2, f2))
        \sameUpdateLevel
	
	\replacewith(\if(o = o2 & f = f2)
                     \then((beta)x)
                     \else(beta::select(h, o2, f2)))
      	\heuristics(simplify)
    };
    
    
    selectOfChangeHeapAtLocsEQ {
        \schemaVar \term Heap h, h2;
        \schemaVar \term Set s;
	\schemaVar \term Object o;
	\schemaVar \term Field f;
	\schemaVar \term Heap EQ; 
	
	\assumes(changeHeapAtLocs(h, s, h2) = EQ ==>)
        \find(beta::select(EQ, o, f))
        \sameUpdateLevel
        
        \replacewith(\if(elementOf(pair(o, f), s))
                     \then(beta::select(h2, o, f))
                     \else(beta::select(h, o, f)))
                     
        \heuristics(simplify)
    };    
    
    
    selectOfChangeHeapAtLocs2EQ {
        \schemaVar \term Heap h;
        \schemaVar \term Set s;
        \schemaVar \term any x;
	\schemaVar \term Object o;
	\schemaVar \term Field f;
	\schemaVar \term Heap EQ; 
	
	\assumes(changeHeapAtLocs2(h, s, x) = EQ ==>)
        \find(beta::select(EQ, o, f))
        \sameUpdateLevel
        
        \replacewith(\if(elementOf(pair(o, f), s))
                     \then(x)
                     \else(beta::select(h, o, f)))
                     
        \heuristics(simplify)
    };        
       
       
    elementOfAllLocsEQ {
        \schemaVar \term Object o;
	\schemaVar \term Field f;
	\schemaVar \term Set EQ;        
        
        \assumes(allLocs = EQ ==>)
        \find(elementOf(pair(o, f), EQ))
        \sameUpdateLevel
                
        \replacewith(true)
        
        \heuristics(concrete)
    };
    
    
    elementOfAllFieldsEQ {
        \schemaVar \term Object o, o2;
	\schemaVar \term Field f;   
	\schemaVar \term Set EQ;     
        
        \assumes(allFields(o2) = EQ ==>)
        \find(elementOf(pair(o, f), EQ))
        \sameUpdateLevel
        
        \replacewith(o = o2)
        
        \heuristics(concrete)
    };
        
    
    
    //--------------------------------------------------------------------------
    //lemmata for changeHeapAtLocs
    //--------------------------------------------------------------------------
       
    changeHeapAtEmpty {
        \schemaVar \term Heap h, h2;
        
        \find(changeHeapAtLocs(h, empty, h2))
        
        \replacewith(h)
        
        \heuristics(concrete)
    };
    
    changeHeapAtAllLocs {
        \schemaVar \term Heap h, h2;
        
        \find(changeHeapAtLocs(h, allLocs, h2))
        
        \replacewith(h2)
        
        \heuristics(concrete)
    };
    
    changeHeapAtEmpty2 {
        \schemaVar \term Heap h;
        \schemaVar \term any x;
        
        \find(changeHeapAtLocs2(h, empty, x))
        
        \replacewith(h)
        
        \heuristics(concrete)
    };
    
    
    
    //--------------------------------------------------------------------------
    //lemmata for some other common cases
    //--------------------------------------------------------------------------

   ifThenPairElse0Equality {
        \schemaVar \formula phi;
        \schemaVar \term Pair p, p2;
        
        \find(\if(phi)\then(p)\else(0) = p2)
        
        \replacewith(phi & p = p2)
        
        \heuristics(concrete)
    };
    
   ifThenPairElse0InAllLocs {
        \schemaVar \formula phi;
        \schemaVar \term Pair p, p2;
        
        \find(elementOf(\if(phi)\then(p)\else(0), allLocs))
        
        \replacewith(phi & elementOf(p, allLocs))
        
        \heuristics(concrete)
    };
}
