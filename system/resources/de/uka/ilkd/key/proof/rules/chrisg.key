// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2009 Universitaet Karlsruhe Germany
//                         Universitaet Koblenz-Landau, Germany
//                         and Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
//
//

\sorts{
  \generic INT, INT2 \extends int;
}

\schemaVariables{

  \term int i,t;
  \term[rigid] int ir;
  \variables int k, nv ;
  \skolemTerm int sk ;


  \term numbers iz;
  \formula b, c ;

  \term int commLeft;

  \variables INT2 uSub, uSub1, uSub2;
  \term INT tInt;
}

// -------------------------------------------------------------------------------------
// Rules by Christoph Gladisch  
// -------------------------------------------------------------------------------------
\rules {

// -------------------------------------------------------------------------------------
// Automatic induction rules
// -------------------------------------------------------------------------------------

  auto_int_induction_gen { 
      \find (==> \forall uSub; b )    \varcond ( \new(sk, \dependingOn(b)) )
      "Base Case": \replacewith ( ==> {\subst uSub; (INT2)0}(b) );
      "Step Case": \replacewith ( ==> ((geq(sk,0) & {\subst uSub; (INT2)sk}b)->
                                                    #ExpandQueries({\subst uSub; (INT2)(sk + 1)}b, true)) )
  };

  auto_int_induction1 { 
      \find (==> \forall uSub; (0<=uSub -> b) )   \varcond ( \new(sk, \dependingOn(b)) )
      "Base Case": \replacewith ( ==> {\subst uSub; (INT2)0}(b) );
      "Step Case": \replacewith ( ==> ((geq(sk,0) & {\subst uSub; (INT2)sk}b)->
                                                    #ExpandQueries({\subst uSub; (INT2)(sk + 1)}b, true)) )
      \heuristics(auto_induction)
  };

  auto_int_induction2 { 
      \find (==> \forall uSub; (0>uSub | b) )   \varcond ( \new(sk, \dependingOn(b)) )
      "Base Case": \replacewith ( ==> {\subst uSub; (INT2)0}(b) );
      "Step Case": \replacewith ( ==> ((geq(sk,0) & {\subst uSub; (INT2)sk}b)->
                                                    #ExpandQueries({\subst uSub; (INT2)(sk + 1)}b, true)) )
      \heuristics(auto_induction)
  };

  auto_int_induction3 { 
      \find (==> \forall uSub; (uSub<0 | b) )   \varcond ( \new(sk, \dependingOn(b)) )
      "Base Case": \replacewith ( ==> {\subst uSub; (INT2)0}(b) );
      "Step Case": \replacewith ( ==> ((geq(sk,0) & {\subst uSub; (INT2)sk}b)->
                                                    #ExpandQueries({\subst uSub; (INT2)(sk + 1)}b, true)) )
      \heuristics(auto_induction)
  };

  auto_int_induction4 { 
      \find (==> \forall uSub; (uSub <= -1 | b) )   \varcond ( \new(sk, \dependingOn(b)) )
      "Base Case": \replacewith ( ==> {\subst uSub; (INT2)0}(b) );
      "Step Case": \replacewith ( ==> ((geq(sk,0) & {\subst uSub; (INT2)sk}b)->
                                                    #ExpandQueries({\subst uSub; (INT2)(sk + 1)}b, true)) )
      \heuristics(auto_induction)
  };

// -------------------------------------------------------------------------------------
// Automatic induction rules and lemma generation rule. The inductively proved formula is 
//  used as a lemma for consecutive formulas in a conjunction.
// -------------------------------------------------------------------------------------

  autoInduct_autoLemma { 
      \find (==> (\forall uSub; b) & c )   \varcond ( \new(sk, \dependingOn(b)) )
      "Base Case": \replacewith ( ==> {\subst uSub; (INT2)0}(b) );
      "Step Case": \replacewith ( ==> ((geq(sk,0) & {\subst uSub; (INT2)sk}b)->{\subst uSub; (INT2)(sk + 1)}b) );
      "Use Case": \replacewith ( \forall uSub;  b ==> c) 
  };

  autoInduct_autoLemma1 { 
      \find (==> (\forall uSub; (0<=uSub -> b)) & c )   \varcond ( \new(sk, \dependingOn(b)) )
      "Base Case": \replacewith ( ==> {\subst uSub; (INT2)0}(b) );
      "Step Case": \replacewith ( ==> ((geq(sk,0) & {\subst uSub; (INT2)sk}b)->{\subst uSub; (INT2)(sk + 1)}b) );
      "Use Case": \replacewith ( \forall uSub; (0<=uSub -> b) ==> c) 
      \heuristics(auto_induction_lemma)
  };

  autoInduct_autoLemma2 { 
      \find (==> \forall uSub; (0>uSub | b) & c)   \varcond ( \new(sk, \dependingOn(b)) )
      "Base Case": \replacewith ( ==> {\subst uSub; (INT2)0}(b) );
      "Step Case": \replacewith ( ==> ((geq(sk,0) & {\subst uSub; (INT2)sk}b)->{\subst uSub; (INT2)(sk + 1)}b) );
      "Use Case": \replacewith ( \forall uSub; (0<=uSub -> b) ==> c) 
      \heuristics(auto_induction_lemma)
  };

  autoInduct_autoLemma3 { 
      \find (==> \forall uSub; (uSub<0 | b) & c)   \varcond ( \new(sk, \dependingOn(b)) )
      "Base Case": \replacewith ( ==> {\subst uSub; (INT2)0}(b) );
      "Step Case": \replacewith ( ==> ((geq(sk,0) & {\subst uSub; (INT2)sk}b)->{\subst uSub; (INT2)(sk + 1)}b) );
      "Use Case": \replacewith ( \forall uSub; (0<=uSub -> b) ==> c) 
      \heuristics(auto_induction_lemma)
  };

  autoInduct_autoLemma4 { 
      \find (==> \forall uSub; (uSub <= -1 | b) & c)   \varcond ( \new(sk, \dependingOn(b)) )
      "Base Case": \replacewith ( ==> {\subst uSub; (INT2)0}(b) );
      "Step Case": \replacewith ( ==> ((geq(sk,0) & {\subst uSub; (INT2)sk}b)->{\subst uSub; (INT2)(sk + 1)}b) );
      "Use Case": \replacewith ( \forall uSub; (0<=uSub -> b) ==> c) 
      \heuristics(auto_induction_lemma)
  };

/*  int_induction_with_less {
    \varcond (int #v0 \new)
    \add (==> {i (0(q))}(b));
    \add (all i (( lt(Z(0(#)), i) & lt(i, #v0)) -> b), lt(Z(0(#)), #v0) ==> {i #v0}(b));
    \add (all i ((lt(#v0, i) & lt(i, Z(0(#)))) -> b), lt(#v0, Z(0(#))) ==> {i #v0}(b));
    \add (all i b ==>)
   };
*/

/* Example rules
  allLeftInt { 
       \find (\forall uSub; b ==>) \varcond(\strict\sub(\typeof(uSub), \typeof(tInt))) 
       \add ({\subst uSub; (INT2) tInt}(b) ==>) 
  };
  
  allRight { \find (==> \forall u; b) \varcond ( \new(sk, \dependingOn(b)) )
      \replacewith (==> {\subst u; sk}b) \heuristics (delta) };

  auto_int_induction1 { 
      \find (==> \forall uSub; b ) 
      "Base Case": \add ( ==> {\subst uSub; (INT2)0}(b) );
      "Step Case": \add ( ==> \forall uSub ; ((geq(uSub,0) & b)->{\subst uSub; (INT2)(uSub + 1)}b) )
      \heuristics(simplify)
  };

  auto_int_induction1 { 
      \find (==> \forall uSub; b ) \varcond(\strict\sub(\typeof(uSub), \typeof(tInt))) 
      "Base Case": \add ( ==> {\subst uSub; 0}(b) );
      "Step Case": \add ( ==> \forall uSub ; ((geq(nv,0) & b)->{\subst nv; (nv + 1)}b) );
      "Use Case":  \add ( \forall uSub; (geq(nv,0) -> b) ==>) 
     
  };
  
 * */

}

