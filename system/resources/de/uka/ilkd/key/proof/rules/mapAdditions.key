// This file is part of KeY - Integrated Deductive Software Design 
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany 
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2013 Karlsruhe Institute of Technology, Germany 
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General 
// Public License. See LICENSE.TXT for details.
// 


/** Additional taclets for abstract data type map.
 * @author Kai Wallisch
 */

\sorts {
    Free;
}

\schemaVariables {
   \term Free m, m0, m1;
   \term boolean b;
   \term any x, y, z;
   \term alpha xa, za;
   \variables alpha v;
   \variables any vy;
}

\functions{
    //getters
    int mapSize(Free); // infinite maps have size -1
    
    //constructors
    Free mapUpdate(Free, any, any);
    Free mapRemove(Free, any);
}

\predicates {
    isFinite(Free);
}

\rules {

    //--------------------------------------------------------------------------
    //definitions (conservative extensions)
    //--------------------------------------------------------------------------
    
    // Added by Kai Wallisch
    defMapUpdate{
	    \schemaVar \skolemTerm Free mapUpdateResult;
	    \schemaVar \term any key,value;
		\find(mapUpdate(m,key,value))
		\varcond(\notFreeIn(vy,m,key,value))
		\replacewith(mapForeach{vy;}(
				( \if(inDomain(m,vy) | vy = key)
					\then(TRUE)
					\else(FALSE) ),
				( \if(vy = key)
					\then(value)
					\else(mapGet(m,vy)) )))
	};
	
    // Added by Kai Wallisch
    defMapRemove{
	    \schemaVar \term any key;
		\find(mapRemove(m,key))
		\varcond(\notFreeIn(vy,m,key))
		\replacewith(mapForeach{vy;}(
				( \if(!inDomain(m,vy) | vy = key)
					\then(FALSE)
					\else(TRUE) ),
				( \if(vy = key)
					\then(mapUndef)
					\else(mapGet(m,vy)) )))
	};
	
    //--------------------------------------------------------------------------
    //inDomain taclets
    //--------------------------------------------------------------------------
    
        
    // Added by Kai Wallisch
    inDomainOfMapUpdate {
    	\schemaVar \term any key, value;
        \find(inDomain(mapUpdate(m,key,value),x))
        \replacewith(inDomain(m,x)|(x=key))
        \heuristics(simplify)
    };
    
    // Added by Kai Wallisch
    inDomainOfMapRemove {
    	\schemaVar \term any key;
        \find(inDomain(mapRemove(m,key),x))
        \replacewith(inDomain(m,x)&!(x=key))
        \heuristics(simplify)
    };
    
	// Added by Kai Wallisch (can be left out maybe)
	notInDomain{
		\find(==> inDomain(m,x))
		\add(mapGet(m,x) = mapUndef ==>)
        \heuristics(inReachableStateImplication)
	};
    
    //--------------------------------------------------------------------------
    //mapGet taclets
    //--------------------------------------------------------------------------
    
    // Added by Kai Wallisch
    getOfMapEmpty {
        \find(mapGet(mapEmpty,x))
        \sameUpdateLevel
        \replacewith(mapUndef)
        \heuristics(simplify)
    };
        
    // Added by Kai Wallisch
    getOfMapUpdate {
    	\schemaVar \term any key, value;
        \find(mapGet(mapUpdate(m,key,value),x))
        \sameUpdateLevel
        \replacewith(\if(x=key)\then(value)\else(mapGet(m,x)))
        \heuristics(simplify)
    };
    
    // Added by Kai Wallisch
    getOfMapRemove {
    	\schemaVar \term any key;
        \find(mapGet(mapRemove(m,key),x))
        \sameUpdateLevel
        \replacewith(\if(x=key)\then(mapUndef)\else(mapGet(m,x)))
        \heuristics(simplify)
    };
    
    // Added by Kai Wallisch
	mapEqualityLeft{
		\find(m0=m1 ==>)
		\varcond(\notFreeIn (vy, m0, m1))
		\add(\forall vy; mapGet(m0, vy) = mapGet(m1, vy) ==>)
        \heuristics(inReachableStateImplication)
	};
	
    // Added by Kai Wallisch
	mapEqualityRight{
		\find(==> m0=m1)
		\varcond(\notFreeIn (vy, m0, m1))
		\add(\exists vy; mapGet(m0, vy) != mapGet(m1, vy) ==>)
        \heuristics(inReachableStateImplication)
	};
    
	//--------------------------------------------------------------------------
    //isFinite taclets
    //--------------------------------------------------------------------------
    
    // Added by Kai Wallisch
    isFiniteOfMapEmpty {
        \find(isFinite(mapEmpty))
        \sameUpdateLevel
        \replacewith(true)
        \heuristics(simplify)
    };

	// Added by Kai Wallisch
    isFiniteOfMapSingleton {
        \find(isFinite(mapSingleton(x,y)))
        \sameUpdateLevel
        \replacewith(true)
        \heuristics(simplify)
    };
    
    // Added by Kai Wallisch
    isFiniteOfMapUpdate {
    	\schemaVar \term any key, value;
        \find(isFinite(mapUpdate(m,key,value)))
        \sameUpdateLevel
        \replacewith(isFinite(m))
        \heuristics(simplify)
    };
    
    // Added by Kai Wallisch
    isFiniteOfMapRemove {
    	\schemaVar \term any key;
        \find(isFinite(mapRemove(m,key)))
        \sameUpdateLevel
        \replacewith(isFinite(m))
        \heuristics(simplify)
    };
    
    //--------------------------------------------------------------------------
    //mapSize taclets
    //--------------------------------------------------------------------------
    
    // Added by Kai Wallisch
    sizeOfMapEmpty {
        \find(mapSize(mapEmpty))
        \sameUpdateLevel
        \replacewith(0)
        \heuristics(simplify)
    };

	// Added by Kai Wallisch
    sizeOfMapSingleton {
        \find(mapSize(mapSingleton(x,y)))
        \sameUpdateLevel
        \replacewith(1)
        \heuristics(simplify)
    };
    
    // Added by Kai Wallisch
    sizeOfMapUpdate {
    	\schemaVar \term any key, value;
        \find(mapSize(mapUpdate(m,key,value)))
        \sameUpdateLevel
        \replacewith(\if(isFinite(m))
        	\then(\if(inDomain(m, key))\then(mapSize(m))\else(mapSize(m) + 1))
        	\else(-1)
        )
        \heuristics(simplify)
    };
    
    // Added by Kai Wallisch
    sizeOfMapRemove {
    	\schemaVar \term any key;
        \find(mapSize(mapRemove(m,key)))
        \sameUpdateLevel
        \replacewith(\if(isFinite(m))
        	\then(\if(inDomain(m, key))\then(mapSize(m) - 1)\else(mapSize(m)))
        	\else(-1)
        )
        \heuristics(simplify)
    };
    
    // Added by Kai Wallisch
	mapEmptyUnique{
		\find(mapSize(m) = 0)
		\add(m = mapEmpty ==> )
        \heuristics(inReachableStateImplication)
	};
	
	// Added by Kai Wallisch
	mapSizeAxioms{
		\find(mapSize(m))
		\add(mapSize(m) >= -1 &  (mapSize(m) = -1 <-> !isFinite(m))
			 ==> )
        \heuristics(inReachableStateImplication)
	};
   
}
