// This file is part of KeY - Integrated Deductive Software Design
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2014 Karlsruhe Institute of Technology, Germany
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General
// Public License. See LICENSE.TXT for details.
//

package de.uka.ilkd.key.proof.mgt;

import java.util.LinkedHashSet;
import java.util.Set;

import de.uka.ilkd.key.collection.ImmutableList;
import de.uka.ilkd.key.collection.ImmutableSet;
import de.uka.ilkd.key.java.Services;
import de.uka.ilkd.key.proof.JavaModel;
import de.uka.ilkd.key.proof.Node;
import de.uka.ilkd.key.proof.Proof;
import de.uka.ilkd.key.proof.ProofAggregate;
import de.uka.ilkd.key.proof.init.InitConfig;
import de.uka.ilkd.key.proof.init.ProofOblInput;
import de.uka.ilkd.key.rule.BuiltInRule;
import de.uka.ilkd.key.rule.Rule;
import de.uka.ilkd.key.rule.RuleApp;
import de.uka.ilkd.key.rule.Taclet;

/** The unique environment a proof is performed in. The environment
 * consists of a java model, specifications, and a set of justified
 * rules. Since the starting point of the proofs contained in the
 * environment is equal, there is an InitConfig contained to be used
 * to start proofs of this environment.
 */
public class ProofEnvironment {

    private JavaModel jModel;
    private RuleJustificationInfo justifInfo = new RuleJustificationInfo();
    private final InitConfig initConfig; 
    private Set<ProofAggregate> proofs = new LinkedHashSet<ProofAggregate>(); //of ProofList
    private int number = 0;

    /** constructs a proof environment with the given initial
     * configuration of the proofs contained in the environment.
     */
    public ProofEnvironment(InitConfig initConfig) {
	this.initConfig = initConfig;
    }


    /** retrieves the java model underlying this environment.
     */
    public JavaModel getJavaModel() {
	return jModel;
    }

    /** sets the java model underlying this environment. Only to be
     * called by the {@link de.uka.ilkd.key.proof.init.ProblemInitializer}.
     */
    public void setJavaModel(JavaModel m) {
       if (jModel != null) {
          throw new IllegalStateException("Java model already set.");
       }
       jModel=m;
    }
        
    public Services getInitialServices() {
        return initConfig.getServices();
    }


    /** returns the object managing the rules in this environment and
     * their justifications. The object is unique to this environment. 
     */
    public RuleJustificationInfo getJustifInfo() {
	return justifInfo;
    }

    /** returns the initial configuration to be used to load proofs in
     * this environment. 
     */
    public InitConfig getInitConfig() {
	return initConfig;
    }

    /** registers a proof loaded with the given {@link 
     * de.uka.ilkd.key.proof.init.ProofOblInput}. The method adds
     * the proof list generated by the input to the suitable contract if one 
     * is found. In all cases the proof is added to the proofs of this 
     * environment and the proofs are marked to belong to this environment.
     */
    public void registerProof(ProofOblInput po, ProofAggregate pl) {
        pl.setProofEnv(this);
        proofs.add(pl);
        for(Proof p : pl.getProofs()) {
            getInitialServices().getSpecificationRepository()
                                .registerProof(po, p);
        }
    }

    /** registers a rule with the given justification at the
     * justification managing {@link RuleJustification} object of this
     * environment. 
     */
    public void registerRule(Rule r, RuleJustification j) {
	justifInfo.addJustification(r, j);
    }

    public void registerRuleIntroducedAtNode(RuleApp r, 
                                             Node node, 
                                             boolean isAxiom) {
        justifInfo.addJustification(r.rule(), 
                                    new RuleJustificationByAddRules(node, 
                                                                    isAxiom));
    }

    /** registers a set of rules with the given justification at the
     * justification managing {@link RuleJustification} object of this
     * environment. All rules of the set are given the same
     * justification. 
     */
    public void registerRules(ImmutableSet<Taclet> s, RuleJustification j) {
       for (Taclet r : s) {
          registerRule(r, j);          
       }
    }

    /** registers a list of rules with the given justification at the
     * justification managing {@link RuleJustification} object of this
     * environment. All rules of the list are given the same
     * justification. 
     */
    public void registerRules(ImmutableList<BuiltInRule> s, RuleJustification j) {
       for (BuiltInRule r : s) {
          registerRule(r, j);          
       }
    }

    /** retrieves all proofs registered at this environment 
     */
    public Set<ProofAggregate> getProofs() {
       return proofs;
    }

    public void removeProofList(ProofAggregate pl) {
	proofs.remove(pl);
        for(Proof p : pl.getProofs()) {
            getInitialServices().getSpecificationRepository()
                                .removeProof(p);
        }
    }


    /** returns true iff the java model equals those of the argument
     * proof environment. TODO: extend to available rules and specs.
     */
    public boolean equals(Object cmp) {
 	if (!(cmp instanceof ProofEnvironment)) {
 	    return false;
 	}
 	ProofEnvironment pe = (ProofEnvironment) cmp;
 	return pe.getJavaModel().equals(getJavaModel()) &&
 	      pe.initConfig.getActivatedChoices().equals(initConfig.getActivatedChoices()) &&
 	      pe.getNumber() == getNumber();
    }

    public int hashCode() {
	int result = 5;
	result = result*17+ getJavaModel().hashCode();
	result = result*17+ initConfig.getActivatedChoices().hashCode();
	result = result*17+ getNumber();
	return result;
    }

    /** returns a short String description of the environment.
     */
    public String description() {
	return "Env. with "+getJavaModel().description()+" #"+getNumber();
    }

    /** sets a number that distinguishes two proof environments
     * with equal java model and rule config from the user perspective
     */
    public void setNumber(int number) {
	this.number = number;
    }

    /** returns a number that distinguishes two proof environments
     * with equal java model and rule config from the user perspective
     */
    public int getNumber() {
	return number;
    }

    public String toString() {
	return description();
    }    
}