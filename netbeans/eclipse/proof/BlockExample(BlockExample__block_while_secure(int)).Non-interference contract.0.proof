\settings {
"#Proof-Settings-Config-File
#Mon Apr 22 15:48:00 CEST 2013
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]RETREAT_MODE_OPTIONS_KEY=RETREAT_MODE_NONE
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=1000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , assertions-assertions\\:on , programRules-programRules\\:Java , intRules-intRules\\:arithmeticSemanticsIgnoringOF , modelFields-modelFields\\:showSatisfiability , initialisation-initialisation\\:disableStaticInitialisation , runtimeExceptions-runtimeExceptions\\:ban
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../../../../../Key-Beispiele/InfFlowBlockContract";



\sorts{
LocSet;
numbers;
Update;
boolean;
Field;
Formula;
java.lang.Exception\extends java.lang.Throwable;
int;
BlockExample\extends java.lang.Object;
Heap;
}

\predicates{
EXECUTION_OF_LOOP_at_line_186_in_block_while_secure_750642318_WITH_INV(Heap,BlockExample,boolean,int,int,Heap,BlockExample,boolean,int,int);
RELATED_BY_LOOP_at_line_186_in_block_while_secure_750642318(Heap,BlockExample,boolean,int,int,Heap,BlockExample,boolean,int,int);
EXECUTION_OF_block_while_secure_750642318_WITH_PRE(Heap,BlockExample,int,java.lang.Exception,int,Heap,BlockExample,java.lang.Exception);
}

\functions{
int _l_0_0_B_0;
Heap anon_heap_LOOP_B_0;
int l1_1_0_B_0;
Heap heap_After_LOOP_0_B_0;
int _l_0_0_A_0;
Heap anon(Heap,LocSet,Heap);
Heap anon_heap_LOOP_A_0;
LocSet empty;
boolean BlockExample::exactInstance(any);
Heap store(Heap,java.lang.Object,Field,any);
int l1_1_0_A_0;
Heap heap_After_LOOP_0_A_0;
int add(int,int);
numbers neglit(numbers);
Null null;
numbers 1(numbers);
Formula geq(int,int);
int Z(numbers);
numbers 0(numbers);
numbers #;
boolean any::exactInstance(any);
boolean boolean::select(Heap,java.lang.Object,Field);
Field java.lang.Object::<created>;
Formula wellFormed(Heap);
boolean FALSE;
boolean TRUE;
Heap heap_After_LOOP_0;
int mbyAtPre_0;
int int::select(Heap,java.lang.Object,Field);
Field BlockExample::$low;
int mbyAtPre_0_B;
int mbyAtPre_0_A;
}

\programVariables{
int _l_0_After_B_0;
int l1_1_After_B_0;
BlockExample self_0_After_LOOP_B_0;
boolean b_0_1_B_0;
boolean b_0_After_B_0;
int l1_1_Before_B_0;
boolean b_0_Before_B_0;
Heap heap_Before_LOOP_B_0;
int _l_0_Before_B_0;
int _l_0_After_A_0;
int l1_1_After_A_0;
BlockExample self_0_After_LOOP_A_0;
boolean b_0_1_A_0;
boolean b_0_After_A_0;
int l1_1_Before_A_0;
boolean b_0_Before_A_0;
Heap heap_Before_LOOP_A_0;
int _l_0_Before_A_0;
boolean b_0_B_0;
boolean b_0_A_0;
int _l_0_After_B;
int l1_1_After_B;
boolean b_0_After_B;
BlockExample self_0_After_LOOP_B;
Heap heap_After_LOOP_0_B;
int _l_0_Before_B;
int l1_1_Before_B;
boolean b_0_Before_B;
BlockExample self_0_B_0;
Heap heap_Before_LOOP_B_0;
int _l_0_After_A;
int l1_1_After_A;
boolean b_0_After_A;
BlockExample self_0_After_LOOP_A;
Heap heap_After_LOOP_0_A;
int _l_0_Before_A;
int l1_1_Before_A;
boolean b_0_Before_A;
BlockExample self_0_A_0;
Heap heap_Before_LOOP_A_0;
int _l_0_After;
int l1_1_After;
boolean b_0_After;
BlockExample self_0_After_LOOP;
int _l_0_Before;
int l1_1_Before;
boolean b_0_Before;
Heap heap_Before_LOOP;
int l1_1;
boolean b_0;
int _l_0;
Heap heapAtPost_0;
BlockExample self_A;
int _l_Before_A;
BlockExample self_B;
int _l_Before_B;
Heap heap_A;
Heap heap_B;
int l1;
java.lang.Exception excAtPost;
int l1_After_B;
BlockExample self_0;
int l1_After_A;
BlockExample self_A_0;
BlockExample selfAtPost_B;
BlockExample selfAtPost_A;
boolean b_After_B;
boolean b_After_A;
BlockExample self_After_LOOP_A;
java.lang.Exception exc_0;
BlockExample selfAtPost_0;
BlockExample self_After_LOOP_B;
int _l_After_B;
int _l_After_A;
Heap heap_After_LOOP_B;
Heap heap_After_LOOP_A;
int l1_Before_B;
int l1_After;
java.lang.Exception exc;
int l1_Before_A;
java.lang.Exception exc_B;
java.lang.Exception exc_A;
Heap heapAtPost;
boolean b_After;
int _l;
BlockExample self;
java.lang.Exception excAtPost_0;
int _l_Before;
int l_0;
Heap savedHeap;
boolean b_Before_B;
boolean b_Before_A;
int l1_Before;
int _l_After;
BlockExample self_B_0;
BlockExample self_After_LOOP;
boolean b;
int l_B;
int l_A;
Heap heap_Before_LOOP_B;
int l;
BlockExample selfAtPost;
Heap heap_Before_LOOP_A;
boolean b_Before;
Heap heap_Before_LOOP;
java.lang.Exception excAtPost_B;
Heap heapAtPost_B;
Heap heapAtPost_A;
java.lang.Exception excAtPost_A;
java.lang.Exception exc;
int l;
BlockExample self;
Heap heap;
java.lang.Exception excAtPost_0_B;
BlockExample selfAtPost_0_B;
Heap heapAtPost_0_B;
java.lang.Exception exc_0_B;
int l_0_B;
BlockExample self_0_B;
Heap heap_B_0;
java.lang.Exception excAtPost_0_A;
BlockExample selfAtPost_0_A;
Heap heapAtPost_0_A;
java.lang.Exception exc_0_A;
int l_0_A;
BlockExample self_0_A;
Heap heap_A_0;
}

\rules{

Class_invariant_axiom_for_BlockExample {
  \schemaVar \term Heap sv_heap;
  \schemaVar \term BlockExample sv_self;
  \schemaVar \skolemFormula sk;
  
  \assumes (BlockExample::exactInstance(sv_self) = TRUE ==>  )
  \find ( java.lang.Object::<inv>(sv_heap, sv_self) )
  \sameUpdateLevel
  \varcond (
     \new( sk, \dependingOn(sv_self) ),
     \new( sk, \dependingOn(sv_heap) )
  )
  "Use Axiom": \replacewith ( true ) ;
  "Show Axiom Satisfiability":
    \replacewith ( sk )
    \add ( ==> (true <-> true) | (false <-> true) )
  
  \heuristics ( split, classAxiom )
};

Split_post_0 {
  
  \find (
      int::select(heapAtPost_0_A, selfAtPost_0_A, BlockExample::$low)
    = int::select(heapAtPost_0_B, selfAtPost_0_B, BlockExample::$low)
  )
  \succedentPolarity
  \replacewith (
      int::select(heapAtPost_0_A, selfAtPost_0_A, BlockExample::$low)
    = int::select(heapAtPost_0_B, selfAtPost_0_B, BlockExample::$low)
  )
  \heuristics ( information_flow_contract_appl )
};

Remove_post_0 {
  
  \find (
      int::select(heapAtPost_0_A, selfAtPost_0_A, BlockExample::$low)
    = int::select(heapAtPost_0_B, selfAtPost_0_B, BlockExample::$low)
  )
  \succedentPolarity
  \replacewith ( false )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_Loop_Invariant_186_block_while_secure_750642318 {
  \schemaVar \term int assumes_l1_1_After#21;
  \schemaVar \term int assumes_l1_1_Before#18;
  \schemaVar \term BlockExample find_self_0#6;
  \schemaVar \term Heap assumes_heap_Before_LOOP#24;
  \schemaVar \term boolean assumes_b_0_After#23;
  \schemaVar \term boolean assumes_b_0_Before#20;
  \schemaVar \term int find_l1_1_Before#8;
  \schemaVar \term boolean find_b_0_After#13;
  \schemaVar \term Heap find_heap_Before_LOOP#14;
  \schemaVar \term boolean find_b_0_Before#10;
  \schemaVar \term BlockExample assumes_self_0_After_LOOP#17;
  \schemaVar \term int find__l_0_Before#9;
  \schemaVar \term int assumes__l_0_After#22;
  \schemaVar \term BlockExample find_self_0_After_LOOP#7;
  \schemaVar \term Heap assumes_heap_After_LOOP_0#25;
  \schemaVar \term int assumes__l_0_Before#19;
  \schemaVar \term Heap find_heap_After_LOOP_0#15;
  \schemaVar \term BlockExample assumes_self_0#16;
  \schemaVar \term int find__l_0_After#12;
  \schemaVar \term int find_l1_1_After#11;
  
  \assumes ( RELATED_BY_LOOP_at_line_186_in_block_while_secure_750642318(assumes_heap_Before_LOOP#24,
                                                                         assumes_self_0#16,
                                                                         assumes_b_0_Before#20,
                                                                         assumes_l1_1_Before#18,
                                                                         assumes__l_0_Before#19,
                                                                         assumes_heap_After_LOOP_0#25,
                                                                         assumes_self_0_After_LOOP#17,
                                                                         assumes_b_0_After#23,
                                                                         assumes_l1_1_After#21,
                                                                         assumes__l_0_After#22)
            ==>
             
  )
  \find (
    RELATED_BY_LOOP_at_line_186_in_block_while_secure_750642318(find_heap_Before_LOOP#14,
                                                                find_self_0#6,
                                                                find_b_0_Before#10,
                                                                find_l1_1_Before#8,
                                                                find__l_0_Before#9,
                                                                find_heap_After_LOOP_0#15,
                                                                find_self_0_After_LOOP#7,
                                                                find_b_0_After#13,
                                                                find_l1_1_After#11,
                                                                find__l_0_After#12)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_LOOP_at_line_186_in_block_while_secure_750642318(find_heap_Before_LOOP#14,
                                                                find_self_0#6,
                                                                find_b_0_Before#10,
                                                                find_l1_1_Before#8,
                                                                find__l_0_Before#9,
                                                                find_heap_After_LOOP_0#15,
                                                                find_self_0_After_LOOP#7,
                                                                find_b_0_After#13,
                                                                find_l1_1_After#11,
                                                                find__l_0_After#12)
  )
  \add (      geq(find__l_0_After#12, Z(0(#)))
            & geq(assumes__l_0_After#22, Z(0(#)))
         ->   find_l1_1_Before#8 = assumes_l1_1_Before#18
            & find__l_0_Before#9 = assumes__l_0_Before#19
            & find_b_0_Before#10 = assumes_b_0_Before#20
         ->   find_l1_1_After#11 = assumes_l1_1_After#21
            & find__l_0_After#12 = assumes__l_0_After#22
            & find_b_0_After#13 = assumes_b_0_After#23
        ==>
         
  )
  \heuristics ( information_flow_contract_appl )
};

unfold_computed_formula_0_of_Loop_Invariant_186_block_while_secure_750642318 {
  
  \find (
      EXECUTION_OF_LOOP_at_line_186_in_block_while_secure_750642318_WITH_INV(heap_Before_LOOP_A_0,
                                                                             self_0_A_0,
                                                                             b_0_Before_A,
                                                                             l1_1_Before_A,
                                                                             _l_0_Before_A,
                                                                             heap_After_LOOP_0_A,
                                                                             self_0_After_LOOP_A,
                                                                             b_0_After_A,
                                                                             l1_1_After_A,
                                                                             _l_0_After_A)
    & EXECUTION_OF_LOOP_at_line_186_in_block_while_secure_750642318_WITH_INV(heap_Before_LOOP_B_0,
                                                                             self_0_B_0,
                                                                             b_0_Before_B,
                                                                             l1_1_Before_B,
                                                                             _l_0_Before_B,
                                                                             heap_After_LOOP_0_B,
                                                                             self_0_After_LOOP_B,
                                                                             b_0_After_B,
                                                                             l1_1_After_B,
                                                                             _l_0_After_B)
  )
  \antecedentPolarity
  \replacewith (
        {heap:=heap_Before_LOOP_A_0}
          (  wellFormed(heap_After_LOOP_0_A)
           &   boolean::select(heap_After_LOOP_0_A,
                               self_0_A_0,
                               java.lang.Object::<created>)
             = TRUE
           & any::exactInstance(self_0_A_0) = TRUE
           & geq(_l_0_After_A, Z(0(#)))
           & self_0_After_LOOP_A = self_0_A_0
           &   \if (geq(_l_0_After_A, Z(1(#))))  \then (TRUE)  \else (FALSE)
             = b_0_After_A
           & l1_1_Before_A = l1_1_After_A
           & _l_0_Before_A = _l_0_After_A
           & heap_Before_LOOP_A_0 = heap_After_LOOP_0_A
           & !{b_0_A_0:=b_0_After_A}(b_0_A_0 = TRUE)
           & !self_0_A_0 = null)
      & {heap:=heap_Before_LOOP_B_0}
          (  wellFormed(heap_After_LOOP_0_B)
           &   boolean::select(heap_After_LOOP_0_B,
                               self_0_B_0,
                               java.lang.Object::<created>)
             = TRUE
           & any::exactInstance(self_0_B_0) = TRUE
           & geq(_l_0_After_B, Z(0(#)))
           & self_0_After_LOOP_B = self_0_B_0
           &   \if (geq(_l_0_After_B, Z(1(#))))  \then (TRUE)  \else (FALSE)
             = b_0_After_B
           & l1_1_Before_B = l1_1_After_B
           & _l_0_Before_B = _l_0_After_B
           & heap_Before_LOOP_B_0 = heap_After_LOOP_0_B
           & !{b_0_B_0:=b_0_After_B}(b_0_B_0 = TRUE)
           & !self_0_B_0 = null)
    | {heap:=heap_Before_LOOP_A_0}
        (  wellFormed(heap_After_LOOP_0_A)
         &   boolean::select(heap_After_LOOP_0_A,
                             self_0_A_0,
                             java.lang.Object::<created>)
           = TRUE
         & any::exactInstance(self_0_A_0) = TRUE
         & geq(_l_0_After_A, Z(0(#)))
         & self_0_After_LOOP_A = self_0_A_0
         &   \if (geq(_l_0_After_A, Z(1(#))))  \then (TRUE)  \else (FALSE)
           = b_0_After_A
         & l1_1_Before_A = l1_1_After_A
         & _l_0_Before_A = _l_0_After_A
         & heap_Before_LOOP_A_0 = heap_After_LOOP_0_A
         & !{b_0_A_0:=b_0_After_A}(b_0_A_0 = TRUE)
         & !self_0_A_0 = null)
    & {heap:=heap_Before_LOOP_B_0}
        (  wellFormed(heap_After_LOOP_0_B)
         &   boolean::select(heap_After_LOOP_0_B,
                             self_0_B_0,
                             java.lang.Object::<created>)
           = TRUE
         & any::exactInstance(self_0_B_0) = TRUE
         & geq(_l_0_After_B, Z(0(#)))
         & self_0_After_LOOP_B = self_0_B_0
         & {b_0_B_0:=\if (geq(_l_0_After_B, Z(1(#))))
                         \then (TRUE)
                         \else (FALSE)}
             (b_0_After_B = b_0_B_0)
         & l1_1_Before_B = add(Z(neglit(1(#))), l1_1_After_B)
         & _l_0_Before_B = add(Z(1(#)), _l_0_After_B)
         & heap_Before_LOOP_B_0 = heap_After_LOOP_0_B
         & !self_0_B_0 = null)
    | {heap:=heap_Before_LOOP_A_0}
        (  wellFormed(heap_After_LOOP_0_A)
         &   boolean::select(heap_After_LOOP_0_A,
                             self_0_A_0,
                             java.lang.Object::<created>)
           = TRUE
         & any::exactInstance(self_0_A_0) = TRUE
         & geq(_l_0_After_A, Z(0(#)))
         & self_0_After_LOOP_A = self_0_A_0
         & {b_0_A_0:=\if (geq(_l_0_After_A, Z(1(#))))
                         \then (TRUE)
                         \else (FALSE)}
             (b_0_After_A = b_0_A_0)
         & l1_1_Before_A = add(Z(neglit(1(#))), l1_1_After_A)
         & _l_0_Before_A = add(Z(1(#)), _l_0_After_A)
         & heap_Before_LOOP_A_0 = heap_After_LOOP_0_A
         & !self_0_A_0 = null)
    & {heap:=heap_Before_LOOP_B_0}
        (  wellFormed(heap_After_LOOP_0_B)
         &   boolean::select(heap_After_LOOP_0_B,
                             self_0_B_0,
                             java.lang.Object::<created>)
           = TRUE
         & any::exactInstance(self_0_B_0) = TRUE
         & geq(_l_0_After_B, Z(0(#)))
         & self_0_After_LOOP_B = self_0_B_0
         & {b_0_B_0:=\if (geq(_l_0_After_B, Z(1(#))))
                         \then (TRUE)
                         \else (FALSE)}
             (b_0_After_B = b_0_B_0)
         & l1_1_Before_B = add(Z(neglit(1(#))), l1_1_After_B)
         & _l_0_Before_B = add(Z(1(#)), _l_0_After_B)
         & heap_Before_LOOP_B_0 = heap_After_LOOP_0_B
         & !self_0_B_0 = null)
  )
  \heuristics ( concrete )
};

unfold_computed_formula_0_of_block_while_secure_750642318 {
  
  \find (
      EXECUTION_OF_block_while_secure_750642318_WITH_PRE(heap_A_0,
                                                         self_0_A,
                                                         l_0_A,
                                                         exc_0_A,
                                                         mbyAtPre_0_A,
                                                         heapAtPost_0_A,
                                                         selfAtPost_0_A,
                                                         excAtPost_0_A)
    & EXECUTION_OF_block_while_secure_750642318_WITH_PRE(heap_B_0,
                                                         self_0_B,
                                                         l_0_B,
                                                         exc_0_B,
                                                         mbyAtPre_0_B,
                                                         heapAtPost_0_B,
                                                         selfAtPost_0_B,
                                                         excAtPost_0_B)
  )
  \antecedentPolarity
  \replacewith (
      {heap:=heap_A_0}
        (  self_0_A = selfAtPost_0_A
         & excAtPost_0_A = null
         &   store(heap_After_LOOP_0_A_0,
                   selfAtPost_0_A,
                   BlockExample::$low,
                   l1_1_0_A_0)
           = heapAtPost_0_A
         & wellFormed(heap)
         &   boolean::select(heap, selfAtPost_0_A, java.lang.Object::<created>)
           = TRUE
         & BlockExample::exactInstance(selfAtPost_0_A) = TRUE
         & geq(_l_0_Before_A_0, Z(1(#)))
         & heap_Before_LOOP_A_0 = heap
         & b_0_Before_A_0 = TRUE
         &   int::select(heap, selfAtPost_0_A, BlockExample::$low)
           = add(Z(neglit(1(#))), l1_1_Before_A_0)
         & l_0_A = _l_0_Before_A_0
         & anon(heap, empty, anon_heap_LOOP_A_0) = heap_After_LOOP_0_A_0
         & {b_0_1_A_0:=FALSE}(b_0_After_A_0 = b_0_1_A_0)
         & self_0_After_LOOP_A_0 = selfAtPost_0_A
         & l1_1_After_A_0 = l1_1_0_A_0
         & _l_0_After_A_0 = Z(0(#))
         & RELATED_BY_LOOP_at_line_186_in_block_while_secure_750642318(heap,
                                                                       selfAtPost_0_A,
                                                                       TRUE,
                                                                       l1_1_Before_A_0,
                                                                       _l_0_Before_A_0,
                                                                       heap_After_LOOP_0_A_0,
                                                                       selfAtPost_0_A,
                                                                       b_0_After_A_0,
                                                                       l1_1_0_A_0,
                                                                       Z(0(#)))
         & wellFormed(anon_heap_LOOP_A_0)
         & _l_0_0_A_0 = Z(0(#))
         & !selfAtPost_0_A = null)
    & {heap:=heap_B_0}
        (  self_0_B = selfAtPost_0_B
         & excAtPost_0_B = null
         &   store(heap_After_LOOP_0_B_0,
                   selfAtPost_0_B,
                   BlockExample::$low,
                   l1_1_0_B_0)
           = heapAtPost_0_B
         & wellFormed(heap)
         &   boolean::select(heap, selfAtPost_0_B, java.lang.Object::<created>)
           = TRUE
         & BlockExample::exactInstance(selfAtPost_0_B) = TRUE
         & geq(_l_0_Before_B_0, Z(1(#)))
         & heap_Before_LOOP_B_0 = heap
         & b_0_Before_B_0 = TRUE
         &   int::select(heap, selfAtPost_0_B, BlockExample::$low)
           = add(Z(neglit(1(#))), l1_1_Before_B_0)
         & l_0_B = _l_0_Before_B_0
         & anon(heap, empty, anon_heap_LOOP_B_0) = heap_After_LOOP_0_B_0
         & {b_0_1_B_0:=FALSE}(b_0_After_B_0 = b_0_1_B_0)
         & self_0_After_LOOP_B_0 = selfAtPost_0_B
         & l1_1_After_B_0 = l1_1_0_B_0
         & _l_0_After_B_0 = Z(0(#))
         & RELATED_BY_LOOP_at_line_186_in_block_while_secure_750642318(heap,
                                                                       selfAtPost_0_B,
                                                                       TRUE,
                                                                       l1_1_Before_B_0,
                                                                       _l_0_Before_B_0,
                                                                       heap_After_LOOP_0_B_0,
                                                                       selfAtPost_0_B,
                                                                       b_0_After_B_0,
                                                                       l1_1_0_B_0,
                                                                       Z(0(#)))
         & wellFormed(anon_heap_LOOP_B_0)
         & _l_0_0_B_0 = Z(0(#))
         & !selfAtPost_0_B = null)
  )
  \heuristics ( concrete )
};
}

\problem {
     EXECUTION_OF_block_while_secure_750642318_WITH_PRE(heap_A_0,
                                                        self_0_A,
                                                        l_0_A,
                                                        exc_0_A,
                                                        mbyAtPre_0_A,
                                                        heapAtPost_0_A,
                                                        selfAtPost_0_A,
                                                        excAtPost_0_A)
   & EXECUTION_OF_block_while_secure_750642318_WITH_PRE(heap_B_0,
                                                        self_0_B,
                                                        l_0_B,
                                                        exc_0_B,
                                                        mbyAtPre_0_B,
                                                        heapAtPost_0_B,
                                                        selfAtPost_0_B,
                                                        excAtPost_0_B)
->     int::select(heap_A_0,
                   self_0_A,
                   BlockExample::$low)
     = int::select(heap_B_0,
                   self_0_B,
                   BlockExample::$low)
   & l_0_A = l_0_B
->   int::select(heapAtPost_0_A,
                 selfAtPost_0_A,
                 BlockExample::$low)
   = int::select(heapAtPost_0_B,
                 selfAtPost_0_B,
                 BlockExample::$low)

}

\proof {
(keyLog "0" (keyUser "christoph" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "192")

(branch "dummy ID"
(rule "unfold_computed_formula_0_of_block_while_secure_750642318" (formula "1") (term "0"))
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "impRight" (formula "3"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "3"))
(rule "notLeft" (formula "6"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "11"))
(rule "andLeft" (formula "3"))
(rule "notLeft" (formula "5"))
(rule "andLeft" (formula "11"))
(rule "notLeft" (formula "13"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "12"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "14"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "16"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "17"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "18"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "19"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "20"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "21"))
(rule "eqSymm" (formula "43"))
(rule "eqSymm" (formula "1"))
(rule "eqSymm" (formula "2"))
(rule "apply_eq_boolean" (formula "36") (term "7") (ifseqformula "39"))
(rule "applyEq" (formula "1") (term "1,0") (ifseqformula "21"))
(rule "applyEq" (formula "1") (term "1,1") (ifseqformula "3"))
(rule "applyEq" (formula "2") (term "0") (ifseqformula "31"))
(rule "eqSymm" (formula "2"))
(rule "apply_eq_boolean" (formula "18") (term "7") (ifseqformula "40"))
(rule "applyEq" (formula "1") (term "0") (ifseqformula "30"))
(rule "eqSymm" (formula "1"))
(rule "applyEq" (formula "2") (term "0") (ifseqformula "13"))
(rule "eqSymm" (formula "2"))
(rule "applyEq" (formula "12") (term "0") (ifseqformula "1"))
(rule "polySimp_homoEq" (formula "12"))
(rule "polySimp_mulComm0" (formula "12") (term "1,0"))
(rule "polySimp_rightDist" (formula "12") (term "1,0"))
(rule "mul_literals" (formula "12") (term "0,1,0"))
(rule "polySimp_addAssoc" (formula "12") (term "0"))
(rule "polySimp_addComm1" (formula "12") (term "0,0"))
(rule "add_literals" (formula "12") (term "0,0,0"))
(rule "add_zero_left" (formula "12") (term "0,0"))
(rule "applyEq" (formula "36") (term "4") (ifseqformula "2"))
(rule "applyEq" (formula "27") (term "0") (ifseqformula "2"))
(rule "applyEq" (formula "30") (term "1") (ifseqformula "2"))
(rule "polySimp_sepNegMonomial" (formula "12"))
(rule "polySimp_mulLiterals" (formula "12") (term "0"))
(rule "polySimp_elimOne" (formula "12") (term "0"))
(rule "applyEq" (formula "35") (term "3") (ifseqformula "12"))
(rule "applyEq" (formula "1") (term "1,1") (ifseqformula "12"))
(rule "applyEq" (formula "29") (term "1,1") (ifseqformula "12"))
(rule "selectOfStoreEQ" (formula "42") (term "0") (ifseqformula "23"))
(builtin "One Step Simplification" (formula "42"))
(rule "castDel" (formula "42") (term "0"))
(rule "eqSymm" (formula "42"))
(rule "selectOfStoreEQ" (formula "42") (term "0") (ifseqformula "5"))
(builtin "One Step Simplification" (formula "42"))
(rule "castDel" (formula "42") (term "0"))
(rule "eqSymm" (formula "42"))
(rule "Use_information_flow_contract_for_Loop_Invariant_186_block_while_secure_750642318" (formula "35") (ifseqformula "18"))
(builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "43")))
(rule "qeq_literals" (formula "35") (term "0"))
(builtin "One Step Simplification" (formula "35"))
(rule "closeFalse" (formula "35"))
)

}
