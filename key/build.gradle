plugins {
    id("ca.coglinc.javacc") version("2.4.0") apply false
    id("idea")
    id("eclipse")
}

idea {
    module {
        //if you love browsing Javadoc
        downloadJavadoc = false
        //and hate reading sources :)
        downloadSources = true
    }
}

subprojects {
    apply plugin: "java"
    apply plugin: "java-library"
    apply plugin: "maven-publish"
    apply plugin: "idea"
    apply plugin: "eclipse"

    group = "org.key_project"
    version = "2.8.0-SNAPSHOT"


    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    repositories {
        mavenCentral()
        flatDir { dirs "lib", "$rootDir/key.core/lib" }
    }

    dependencies {
        testCompile("junit:junit:4.12")
        testCompile project(":key.util")

    }
}

project(":key.util") {
    test {
        systemProperty "test-resources", "src/test/resources"
    }
}

project(":key.core.example") {
    dependencies {
        compile project(":key.core")
    }
}

project(":key.core") {
    apply plugin: "ca.coglinc.javacc"
    apply plugin: "antlr"

    dependencies {
        compile project(":key.util")
        compile name: 'recoderKey'
        //compile name: 'javacc'
        //compile name: 'antlr'
        compile 'net.java.dev.javacc:javacc:4.0'
        compile "org.antlr:antlr-runtime:3.5.2"
        compile group: 'antlr', name: 'antlr', version: '2.7.7'

        //antlr name: 'antlr'
        //javacc name: 'javacc'
        javacc 'net.java.dev.javacc:javacc:4.0'
        antlr "org.antlr:antlr:3.5.2"   // use ANTLR version 3
    }

    def javaCCOutputDir = file("${buildDir}/generated-src/javacc")
    def javaCCOutputDirMain = file("$javaCCOutputDir/main")
    sourceSets.main.java.srcDirs(javaCCOutputDirMain)

    generateGrammarSource {
        maxHeapSize = "64m"
        arguments += ["-visitor", "-listener", "-long-messages"]
    }

    generateTestGrammarSource {
        maxHeapSize = "64m"
        arguments += ["-visitor", "-listener", "-long-messages"]
    }

    compileJavacc {
        outputDirectory = javaCCOutputDirMain
        inputDirectory  = file("src/main/javacc")
        doLast {
            copy {
                from("src/main/javacc/de/uka/ilkd/key/parser/schemajava/Token.java")
                into "$javaCCOutputDirMain/de/uka/ilkd/key/parser/schemajava/"
            }
            copy {
                from("src/main/javacc/de/uka/ilkd/key/parser/proofjava/Token.java")
                into "$javaCCOutputDirMain/de/uka/ilkd/key/parser/proofjava/"
            }
        }
        /*
        "/de/uka/ilkd/key/parser/proofjava/ProofJavaParser.jj"
        outputdirectory="${gen.dir}/de/uka/ilkd/key/parser/proofjava"
        javacchome="${ext.dir}"
        -->*/
    }

    test {
        systemProperty "testcases", "src/test/resources/testcase"

        // set JVM arguments for the test JVM(s)
        jvmArgs '-XX:MaxPermSize=1G'

        // "../${project.name}/resources/testcase"
    }
}

project(":key.core.proof_references") {
    dependencies {
        compile project(":key.core")
    }
}

project(":key.core.symbolic_execution") {
    dependencies {
        compile project(":key.core")
    }
}

project(":key.core.testgen") {
    dependencies {
        compile project(":key.core")
    }

    test {
        systemProperty "testcases", "../${project.name}.test/resources/testcase"
    }
}

project(":key.removegenerics") {
    dependencies {
        compile project(":key.core")
    }
}

project(":key.ui") {
    apply plugin: "application"
    dependencies {
        compile(project(":key.core"))
        compile(project(":key.core.proof_references"))
        compile(project(":key.core.symbolic_execution"))
        compile(project(":key.core.testgen"))
        compile(project(":key.removegenerics"))


        compile group: 'com.atlassian.commonmark', name: 'commonmark', version: '0.12.1'
        compile group: 'com.atlassian.commonmark', name: 'commonmark-ext-gfm-tables', version: '0.12.1'

        //Java 11
        compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.4.0-b180830.0359'

    }

    task createExamplesZip(type: Zip) {
        destinationDirectory = file("$projectDir/resources")
        archiveFileName = "examples.zip"
        from 'examples'
        include '*'
        include '*/*' //*/
    }

    processResources.dependsOn(createExamplesZip)

    application {
        //dependsOn(createExamplesZip)
        mainClassName = "de.uka.ilkd.key.core.Main"
    }

    run {
        systemProperties["key.examples.dir"] = "$projectDir/examples"
    }
}

task start {
    dependsOn project(":key.ui").run
}
