//TODO copy examles.zip into distribution
//TODO example.zip seems to build wrong
//TODO figure out why javacc is always executed

plugins {
    id("ca.coglinc.javacc") version("2.4.0") apply false
    id("idea")
    id("eclipse")
    id "com.jfrog.bintray" version "1.8.4" apply false
    id 'com.github.johnrengelman.shadow' version "5.0.0" apply false
}

idea {
    module {
        downloadJavadoc = false
        downloadSources = true
    }
}

group = "org.key_project"
version = "2.8.0-SNAPSHOT"

static def getDate() {
    return new Date().format('yyyyMMdd')
}

static def getGitRevision() {
    def cmd = "git rev-parse HEAD"
    def process = cmd.execute()
    return process.text
}

ext.dateVersion = getDate()
ext.gitRevision = getGitRevision()

try {
    ext.gitRevision = "git rev-parse HEAD".execute().in.readLines().get(0)
} catch (Exception e) {
    println e.message
    ext.gitRevision = ""
}

subprojects {
    apply plugin: "java"
    apply plugin: "java-library"
    apply plugin: "maven-publish"
    apply plugin: "idea"
    apply plugin: "eclipse"
    apply plugin: "com.jfrog.bintray"

    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'findbugs'

    group = rootProject.group
    version = rootProject.version
    ext.gitRevision = rootProject.ext.gitRevision

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    tasks.withType(Javadoc) {
        //failOnError=false
        options.addBooleanOption 'Xdoclint:none', true
        options.verbose()
    }

 tasks.withType(Test) {//Configure all tests
        systemProperty "testcases", "src/test/resources/testcase"
        systemProperty "TACLET_PROOFS", "tacletProofs"
        systemProperty "EXAMPLES_DIR", new File(project(":key.ui").projectDir, "examples")
        systemProperty "RUNALLPROOFS_DIR", "$buildDir/report/runallproves"


        systemProperty "key.disregardSettings", "true"
        maxHeapSize = "4g"
    }


    findbugs { findbugsTest.enabled = false; ignoreFailures = true }
    pmd { pmdTest.enabled = false; ignoreFailures = true }
    tasks.withType(Checkstyle) {
        configFile file("$rootDir/scripts/tools/checkstyle/key_checks.xml")
    }
    tasks.withType(FindBugs) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }
    tasks.withType(Pmd) {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    repositories {
        mavenCentral()
        flatDir { dirs "lib", "$rootDir/key.core/lib" }
    }

    dependencies {
        testCompile("junit:junit:4.12")
        testCompile project(":key.util")
    }


    task sourcesJar(type: Jar) {
        from sourceSets.main.allJava
        archiveClassifier = 'sources'
    }

    task javadocJar(type: Jar) {
        from javadoc
        archiveClassifier = 'javadoc'
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom {
                    name = projects.name
                    description = project.description
                    url = 'http://key-project.org/'

                    licenses {
                        license {
                            name = "GNU General Public License (GPL), Version 2"
                            url = "http://www.gnu.org/licenses/old-licenses/gpl-2.0.html"
                        }
                    }
                    developers {
                        developer {
                            id = 'key'
                            name = 'KeY Developers'
                            email = 'support@key-project.org'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://git.key-project.org/key/key.git'
                        developerConnection = 'scm:git:git://git.key-project.org/key/key.git'
                        url = 'https://git.key-project.org/'
                    }
                }
            }
        }
        repositories {
            maven {
                name = "bintray-snapshots"
                url = "https://dl.bintray.com/key/stable-snapshots"
            }
        }
    }

    bintray {
        user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
        key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
        publications = ['mavenJava']

        dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
        publish = true //[Default: false] Whether version should be auto published after an upload
        override = false //[Default: false] Whether to override version artifacts already published


        pkg {
            userOrg = "key"
            repo = 'stable-snapshots'
            name = "key"
            licenses = ['GPL-2.0']
            vcsUrl = 'https://git.key-project.org/key/key.git'
        }
    }


    eclipse {
        classpath {
            file {
                whenMerged {
                    def source = entries.find { it.path == 'src/main/java' }
                    source.entryAttributes['ignore_optional_problems'] = 'true'

                    entries.findAll { it.path.endsWith('/resources') }.each { it.excludes = ["**/*.java"] }
                }
            }
        }
    }
}

allprojects {
    tasks.withType(Javadoc) {
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }
}


project(":key.util") {
    test {
        useJUnit()
        systemProperty "test-resources", "src/test/resources"
        filter {
            //https://docs.gradle.org/current/userguide/java_testing.html#test_filtering
            includeTestsMatching '*Tests' // only run the Test suites
        }
    }
}

project(":key.core") {
    apply plugin: "ca.coglinc.javacc"
    apply plugin: "antlr"

    dependencies {
        compile project(":key.util")
        compile name: 'recoderKey'
        //compile name: 'javacc'
        //compile name: 'antlr'
        compile 'net.java.dev.javacc:javacc:4.0'
        compile "org.antlr:antlr-runtime:3.5.2"
        compile group: 'antlr', name: 'antlr', version: '2.7.7'

        //antlr name: 'antlr'
        //javacc name: 'javacc'
        javacc 'net.java.dev.javacc:javacc:4.0'
        antlr "org.antlr:antlr:3.5.2"   // use ANTLR version 3
    }

    def javaCCOutputDir = file("${buildDir}/generated-src/javacc")
    def javaCCOutputDirMain = file("$javaCCOutputDir/main")
    sourceSets.main.java.srcDirs(javaCCOutputDirMain)

    generateGrammarSource {
        maxHeapSize = "64m"
        arguments += ["-visitor", "-listener", "-long-messages"]
    }

    generateTestGrammarSource {
        maxHeapSize = "64m"
        arguments += ["-visitor", "-listener", "-long-messages"]
    }

    compileJavacc {
        outputDirectory = javaCCOutputDirMain
        inputDirectory = file("src/main/javacc")
        doLast {
            copy {
                from("src/main/javacc/de/uka/ilkd/key/parser/schemajava/Token.java")
                into "$javaCCOutputDirMain/de/uka/ilkd/key/parser/schemajava/"
            }
            copy {
                from("src/main/javacc/de/uka/ilkd/key/parser/proofjava/Token.java")
                into "$javaCCOutputDirMain/de/uka/ilkd/key/parser/proofjava/"
            }
        }
    }

    tasks.withType(Test) {//Configure all tests
        systemProperty "testcases", "src/test/resources/testcase"
        systemProperty "TACLET_PROOFS", "tacletProofs"
        systemProperty "EXAMPLES_DIR", new File(project(":key.ui").projectDir, "examples")
        systemProperty "RUNALLPROOFS_DIR", "$buildDir/report/runallproves"


        systemProperty "key.disregardSettings", "true"
        maxHeapSize = "4g"
    }

    test {
        filter {
            includeTestsMatching "JavaTests"
            includeTestsMatching "LogicModelTests"

            includeTestsMatching "ParserTests"
            includeTestsMatching "ProofConstructionTests"
            includeTestsMatching "RuleTests"
            includeTestsMatching "SmtTests"
            includeTestsMatching "SpeclangTests"
            includeTestsMatching "UtilityTests"
        }
    }

    task testProofRules(type: Test) {
        group "verification"
        filter { includeTestsMatching "ProveRulesTest" }
    }

    task testRunAllProofs(type: Test) {
        group "verification"
        filter { includeTestsMatching "RunAllProofsTestSuite" }
        afterTest { desc, result ->
            logger.quiet "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
        }
    }

    //check.dependsOn << testProofRules << testRunAllProofs
}

project(":key.core.example") {
    dependencies {
        compile project(":key.core")
    }
}

project(":key.core.symbolic_execution.example") {
    dependencies {
        compile project(":key.core")
        compile project(":key.core.symbolic_execution")
    }
}

project(":key.core.proof_references") {
    dependencies {
        compile project(":key.core")
    }
    test {
        systemProperty "testcases", "src/test/resources/testcase"
        maxHeapSize = "4g"
        systemProperty "testcases", "src/test/resources/testcase"
        filter { includeTestsMatching "AllProofReferencesTests" }
    }
}

project(":key.core.symbolic_execution") {
    dependencies {
        compile project(":key.core")
    }
    test {
        systemProperty "testcases", "src/test/resources/testcase"
        maxHeapSize = "4g"
        filter { includeTestsMatching "AllSymbolicExecutionTests" }
    }
}

project(":key.core.testgen") {
    dependencies {
        compile project(":key.core")
    }

    test {
        systemProperty "testcases", "src/test/resources/testcase"
        filter { includeTestsMatching "AllTestGenTests" }
    }
}

project(":key.removegenerics") {
    dependencies {
        compile project(":key.core")
    }
}

project(":key.ui") {
    apply plugin: "application"
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        compile project(":key.core")
        compile project(":key.core:rifl")

        compile(project(":key.core.proof_references"))
        compile(project(":key.core.symbolic_execution"))
        compile(project(":key.core.testgen"))
        compile(project(":key.removegenerics"))

        runtimeOnly project(":keyext.interactionlog")
        //runtimeOnly project(":keyext.script.ui")
    }

    task createExamplesZip(type: Zip) {
        destinationDirectory = file("$buildDir/resources/main/")
        archiveFileName = "examples.zip"
        from 'examples'
        include '*'
        include '*/*'
    }

    processResources.dependsOn << createExamplesZip

    shadowJar {
        minimize()
    }

    application {
        //dependsOn(createExamplesZip)
        mainClassName = "de.uka.ilkd.key.core.Main"
    }

    run {
        systemProperties["key.examples.dir"] = "$projectDir/examples"
    }


}

project(":keyext.interactionlog") {
    dependencies {
        compile project(":key.ui")
        compile group: 'com.atlassian.commonmark', name: 'commonmark', version: '0.12.1'
        compile group: 'com.atlassian.commonmark', name: 'commonmark-ext-gfm-tables', version: '0.12.1'
        compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.4.0-b180830.0359'
    }
}

task start {
    dependsOn project(":key.ui").run
}

task alldoc(type: Javadoc) {
    group "documentation"
    def projects = subprojects
    //key.ui javadoc is broken
    source projects.collect { it.sourceSets.main.allJava }
    classpath = files(projects.collect { it.sourceSets.main.compileClasspath })
    destinationDir = file("${buildDir}/docs/javadoc")

    configure(options) {
        //showFromPrivate()
        addBooleanOption 'Xdoclint:none', true
        // overview = new File( projectDir, 'src/javadoc/package.html' )
        //stylesheetFile = new File( projectDir, 'src/javadoc/stylesheet.css' )
        windowTitle = 'KeY API Documentation'
        docTitle = "KeY JavaDoc ($project.version)"
        bottom = "Copyright &copy; 2003-2019 <a href=\"http://key-project.org\">The KeY-Project</a>."
        use = true
        links += 'http://download.oracle.com/javase/8/docs/api/'
        links += "http://www.antlr2.org/javadoc/"
        links += "http://www.antlr3.org/api/Java/"
        links += "http://recoder.sourceforge.net/doc/api/"
    }
}

task fatJar(type: Jar) {
    dependsOn project(":key.ui").jar
    dependsOn project(":keyext.interactionlog").jar
    //dependsOn project(":keyext.script.ui").jar

    def jarFiles = //[project(":key.ui").jar.archivePath] +
            project(":key.ui").configurations.runtimeClasspath
    def names = jarFiles.collect { "./${it.name}" }.join(", ")

    manifest {
        attributes 'Main-Class': "de.uka.ilkd.key.core.Main",
                "Manifest-Version": "1.0",
                "Permissions": "all-permissions",
                "Codebase": "formal.iti.kit.edu",
                "Application-Name": "KeY",
                "Class-Path": names
    }

    archiveName = "key-${project.version}-exec.jar"
    destinationDir(buildDir)
    from jarFiles
    with project(":key.ui").jar
    from "$rootDir/LICENSE.TXT"
}
