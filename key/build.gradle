plugins {
    id("ca.coglinc.javacc") version("2.4.0") apply false
    id("idea")
    id("eclipse")
}

idea{
    module {
        //if you love browsing Javadoc
        downloadJavadoc = false
        //and hate reading sources :)
        downloadSources = true
    }
}

subprojects {
    apply plugin: "java"
    apply plugin: "java-library"
    apply plugin: "maven-publish"
    apply plugin: "idea"
    apply plugin: "eclipse"

    group = "org.key_project"
    version = "2.8.0-SNAPSHOT"


    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    repositories {
        mavenCentral()
        flatDir { dirs "lib", "$rootDir/key.core/lib" }
    }

    dependencies {
        testCompile("junit:junit:4.12")
        testCompile project(":key.util")

    }

    sourceSets {
        main {
            java { srcDirs(file("src/")) }
            resources { srcDirs(file("resources/")) }
        }

        test {
            java { srcDirs(file("../${project.name}.test/src/")) }
            resources { srcDirs(file("../${project.name}.test/resources/")) }
        }
    }
}

project(":key.util") {
    test{
        systemProperty "test-resources", "../${project.name}.test/resources"
    }
}

project(":key.core.example") {
    dependencies {
        compile project(":key.core")
    }
}

project(":key.core") {
    apply plugin: "ca.coglinc.javacc"
    apply plugin: "antlr"

    dependencies {
        compile project(":key.util")
        compile name: 'recoderKey'
        compile name: 'javacc'
        compile name: 'antlr'


        antlr name: 'antlr'
        javacc name: 'javacc' //'net.java.dev.javacc:javacc:[version]'
        //antlr("org.antlr:antlr:3.5.2")   // use ANTLR version 3
    }

    def javaCCOutputDir = file("${buildDir}/generated-src/javacc")

    sourceSets.main.antlr.srcDirs = [file("src")]
    sourceSets.test.antlr.srcDirs = [file("$rootDir/key.core.test/src/")]
    sourceSets.main.java.srcDirs(javaCCOutputDir)

    generateGrammarSource {
        source = fileTree("src/") {
            include("de/uka/ilkd/key/parser/KeYLexer.g",
                    "de/uka/ilkd/key/speclang/jml/pretranslation/KeYJMLPreParser.g",
                    "de/uka/ilkd/key/speclang/jml/translation/KeYJMLLexer.g",
                    "de/uka/ilkd/key/parser/KeYParser.g",
                    "de/uka/ilkd/key/speclang/jml/translation/KeYJMLParser.g",
                    "de/uka/ilkd/key/speclang/jml/pretranslation/KeYJMLPreLexer.g")
        }

        outputDirectory = file("${projectDir}/build/generated-src/antlr/main")
        arguments.add("-visitor")
    }

    generateTestGrammarSource {
        source = fileTree("$rootDir/key.core.test/src/") {
            include("de/uka/ilkd/key/proof/runallproofs/proofcollection/ProofCollection.g")
        }
        outputDirectory = file("${projectDir}/build/generated-src/antlr/test")
        arguments.add("-visitor")
    }

    compileJavacc {
        outputDirectory = javaCCOutputDir
        inputDirectory = file("src/")
        doLast {
            copy {
                from("src/de/uka/ilkd/key/parser/schemajava/Token.java.source") {
                    rename "Token.java.source", "Token.java"
                }
                into file("${buildDir}/generated-src/javacc/de/uka/ilkd/key/parser/schemajava/")
            }
            copy {
                from("src/de/uka/ilkd/key/parser/proofjava/Token.java.source") {
                    rename "Token.java.source", "Token.java"
                }
                into file("${buildDir}/generated-src/javacc/de/uka/ilkd/key/parser/proofjava/")
            }
        }
        /*
        "/de/uka/ilkd/key/parser/proofjava/ProofJavaParser.jj"
        outputdirectory="${gen.dir}/de/uka/ilkd/key/parser/proofjava"
        javacchome="${ext.dir}"
        -->*/
    }

    test{
        systemProperty "testcases", "../${project.name}.test/resources/testcase"
    }
}

project(":key.core.proof_references") {
    dependencies {
        compile project(":key.core")
    }
}

project(":key.core.symbolic_execution") {
    dependencies {
        compile project(":key.core")
    }
}

project(":key.core.testgen") {
    dependencies {
        compile project(":key.core")
    }

    test{
        systemProperty "testcases", "../${project.name}.test/resources/testcase"
    }
}

project(":key.removegenerics") {
    dependencies {
        compile project(":key.core")
    }
}

project(":key.ui") {
    apply plugin: "application"
    dependencies {
        compile(project(":key.core"))
        compile(project(":key.core.proof_references"))
        compile(project(":key.core.symbolic_execution"))
        compile(project(":key.core.testgen"))
        compile(project(":key.removegenerics"))


        compile group: 'com.atlassian.commonmark', name: 'commonmark', version: '0.12.1'
        compile group: 'com.atlassian.commonmark', name: 'commonmark-ext-gfm-tables', version: '0.12.1'

        //Java 11
        compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.4.0-b180830.0359'

    }

    task createExamplesZip(type: Zip) {
        destinationDirectory = file("$projectDir/resources")
        archiveFileName = "examples.zip"
        from 'examples'
        include '*'
        include '*/*' //*/
    }

    processResources.dependsOn(createExamplesZip)

    application {
        //dependsOn(createExamplesZip)
        mainClassName = "de.uka.ilkd.key.core.Main"
    }

    run {
        systemProperties["key.examples.dir"] = "$projectDir/examples"
    }
}

task start {
    dependsOn project(":key.ui").run
}
