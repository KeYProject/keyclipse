\profile "Java Profile for Symbolic Execution";

\settings {
"#Proof-Settings-Config-File
#Thu Feb 05 14:41:03 CET 2015
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_INSTANTIATE
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_EXPAND
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=1000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=Strings-Strings\\:on , reach-reach\\:on , JavaCard-JavaCard\\:off , assertions-assertions\\:on , bigint-bigint\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , modelFields-modelFields\\:showSatisfiability , initialisation-initialisation\\:disableStaticInitialisation , sequences-sequences\\:on , runtimeExceptions-runtimeExceptions\\:allow , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=Symbolic Execution Strategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "";

\proofObligation "#Proof Obligation Settings
#Thu Feb 05 14:41:03 CET 2015
name=SimpleArrayTest[SimpleArrayTest\\:\\:main([I)].JML normal_behavior operation contract.0
addSymbolicExecutionLabel=true
contract=SimpleArrayTest[SimpleArrayTest\\:\\:main([I)].JML normal_behavior operation contract.0
addUninterpretedPredicate=true
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Martin" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "1438")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "heapAtPre"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "6"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "6"))
(builtin "One Step Simplification" (formula "2"))
(rule "arrayLengthNotNegative" (formula "5") (term "0"))
(rule "applyEq" (formula "5") (term "0") (ifseqformula "6"))
(rule "qeq_literals" (formula "5"))
(rule "true_left" (formula "5"))
(rule "arrayLengthIsAnInt" (formula "5") (term "0"))
(builtin "One Step Simplification" (formula "5"))
(rule "true_left" (formula "5"))
(rule "assignment" (formula "7") (term "1"))
(builtin "One Step Simplification" (formula "7"))
(rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_main,savedHeapBefore_main"))
(builtin "One Step Simplification" (formula "7"))
(rule "assignment_to_primitive_array_component" (formula "7") (term "1"))
(branch "Normal Execution (_array != null)"
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
   (builtin "One Step Simplification" (formula "8"))
   (rule "qeq_literals" (formula "1") (term "1"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_ltToLeq" (formula "1"))
   (rule "add_zero_right" (formula "1") (term "0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "6"))
   (rule "mul_literals" (formula "1") (term "1,0"))
   (rule "add_literals" (formula "1") (term "0"))
   (rule "leq_literals" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "assignment_to_primitive_array_component" (formula "7") (term "1"))
   (branch "Normal Execution (_array != null)"
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
      (builtin "One Step Simplification" (formula "8"))
      (rule "qeq_literals" (formula "1") (term "1"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_ltToLeq" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "6"))
      (rule "mul_literals" (formula "1") (term "1,0"))
      (rule "add_literals" (formula "1") (term "0"))
      (rule "leq_literals" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "assignment_to_primitive_array_component" (formula "7") (term "1"))
      (branch "Normal Execution (_array != null)"
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
         (builtin "One Step Simplification" (formula "8"))
         (rule "qeq_literals" (formula "1") (term "1"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "inEqSimp_ltToLeq" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "6"))
         (rule "mul_literals" (formula "1") (term "1,0"))
         (rule "add_literals" (formula "1") (term "0"))
         (rule "leq_literals" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "eval_order_array_access3" (formula "7") (term "1") (inst "#v1=x_1") (inst "#v2=x") (inst "#v0=x_arr"))
         (rule "variableDeclarationAssign" (formula "7") (term "1"))
         (rule "variableDeclaration" (formula "7") (term "1") (newnames "x_arr"))
         (rule "assignment" (formula "7") (term "1"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "variableDeclarationAssign" (formula "7") (term "1"))
         (rule "variableDeclaration" (formula "7") (term "1") (newnames "x"))
         (rule "assignment" (formula "7") (term "1"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "ifUnfold" (formula "7") (term "1") (inst "#boolv=x_2"))
         (rule "variableDeclaration" (formula "7") (term "1") (newnames "x_2"))
         (rule "compound_assignment_5_nonsimple" (formula "7") (term "1"))
         (rule "ifElseUnfold" (formula "7") (term "1") (inst "#boolv=x_3"))
         (rule "variableDeclaration" (formula "7") (term "1") (newnames "x_3"))
         (rule "compound_less_equal_than_comparison_1" (formula "7") (term "1") (inst "#v0=x_4"))
         (rule "variableDeclarationAssign" (formula "7") (term "1"))
         (rule "variableDeclaration" (formula "7") (term "1") (newnames "x_4"))
         (rule "eval_order_array_access6" (formula "7") (term "1") (inst "#v0=x_arr_1"))
         (rule "variableDeclarationAssign" (formula "7") (term "1"))
         (rule "variableDeclaration" (formula "7") (term "1") (newnames "x_arr_1"))
         (rule "remove_parentheses_right" (formula "7") (term "1"))
         (rule "assignment" (formula "7") (term "1"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "assignment_read_length" (formula "7") (term "1"))
         (branch "Normal Execution (x_arr_1 != null)"
            (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "6")))
            (rule "false_right" (formula "7"))
            (builtin "One Step Simplification" (formula "7"))
            (rule "applyEq" (formula "7") (term "0,1,0") (ifseqformula "5"))
            (rule "less_equal_than_comparison_simple" (formula "7") (term "1"))
            (builtin "One Step Simplification" (formula "7"))
            (rule "leq_literals" (formula "7") (term "0,0,1,0"))
            (builtin "One Step Simplification" (formula "7"))
            (rule "ifElseSplit" (formula "7"))
            (branch "if x_3 true"
               (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if x_3 false"
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (builtin "One Step Simplification" (formula "7"))
               (rule "less_than_comparison_simple" (formula "7") (term "1"))
               (builtin "One Step Simplification" (formula "7"))
               (rule "less_literals" (formula "7") (term "0,0,1,0"))
               (builtin "One Step Simplification" (formula "7"))
               (rule "blockEmpty" (formula "7") (term "1"))
               (rule "ifSplit" (formula "7"))
               (branch "if x_2 true"
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if x_2 false"
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (builtin "One Step Simplification" (formula "7"))
                  (rule "variableDeclarationAssign" (formula "7") (term "1"))
                  (rule "variableDeclaration" (formula "7") (term "1") (newnames "x_1"))
                  (rule "compound_addition_2" (formula "7") (term "1") (inst "#v1=x_3") (inst "#v0=x_2"))
                  (rule "variableDeclarationAssign" (formula "7") (term "1"))
                  (rule "variableDeclaration" (formula "7") (term "1") (newnames "x_5"))
                  (rule "assignment_array2" (formula "7") (term "1"))
                  (branch "Normal Execution (_array != null)"
                     (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "6")))
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "less_literals" (formula "7") (term "1"))
                     (builtin "One Step Simplification" (formula "7"))
                     (rule "inEqSimp_leqRight" (formula "7"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "pullOutSelect" (formula "8") (term "0,1,0") (inst "selectSK=arr_0"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "equal_literals" (formula "1") (term "0,0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "equal_literals" (formula "1") (term "0,0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "castDel" (formula "1") (term "0"))
                     (rule "applyEqReverse" (formula "9") (term "0,1,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "6"))
                     (rule "add_literals" (formula "1") (term "0"))
                     (rule "qeq_literals" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "variableDeclarationAssign" (formula "7") (term "1"))
                     (rule "variableDeclaration" (formula "7") (term "1") (newnames "x_6"))
                     (rule "assignment_array2" (formula "7") (term "1"))
                     (branch "Normal Execution (_array != null)"
                        (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "6")))
                        (builtin "One Step Simplification" (formula "8"))
                        (rule "less_literals" (formula "7") (term "1"))
                        (builtin "One Step Simplification" (formula "7"))
                        (rule "inEqSimp_leqRight" (formula "7"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "pullOutSelect" (formula "8") (term "0,1,0") (inst "selectSK=arr_1"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "equal_literals" (formula "1") (term "0,0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "castDel" (formula "1") (term "0"))
                        (rule "applyEqReverse" (formula "9") (term "0,1,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "6"))
                        (rule "add_literals" (formula "1") (term "0"))
                        (rule "qeq_literals" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "assignmentAdditionInt" (formula "7") (term "1"))
                        (rule "translateJavaAddInt" (formula "7") (term "0,0,1"))
                        (builtin "One Step Simplification" (formula "7"))
                        (rule "add_literals" (formula "7") (term "0,1,0"))
                        (rule "assignment_to_primitive_array_component" (formula "7") (term "1"))
                        (branch "Normal Execution (x_arr != null)"
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                           (builtin "One Step Simplification" (formula "8"))
                           (rule "qeq_literals" (formula "1") (term "1"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "inEqSimp_ltToLeq" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "6"))
                           (rule "mul_literals" (formula "1") (term "1,0"))
                           (rule "add_literals" (formula "1") (term "0"))
                           (rule "leq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "returnUnfold" (formula "7") (term "1") (inst "#v0=x"))
                           (rule "variableDeclarationAssign" (formula "7") (term "1"))
                           (rule "variableDeclaration" (formula "7") (term "1") (newnames "x_7"))
                           (rule "assignment_array2" (formula "7") (term "1"))
                           (branch "Normal Execution (_array != null)"
                              (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "6")))
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "less_literals" (formula "7") (term "1"))
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "inEqSimp_leqRight" (formula "7"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "pullOutSelect" (formula "8") (term "0,1,0") (inst "selectSK=arr_2"))
                              (rule "simplifySelectOfStore" (formula "1"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "castDel" (formula "1") (term "0"))
                              (rule "applyEqReverse" (formula "9") (term "0,1,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "6"))
                              (rule "add_literals" (formula "1") (term "0"))
                              (rule "qeq_literals" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "methodCallReturn" (formula "7") (term "1"))
                              (rule "assignment" (formula "7") (term "1"))
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "methodCallEmpty" (formula "7") (term "1"))
                              (rule "tryEmpty" (formula "7") (term "1"))
                              (rule "emptyModality" (formula "7") (term "1"))
                              (builtin "One Step Simplification" (formula "7"))
                              (opengoal " ")
                           )
                           (branch "Null Reference (_array = null)"
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "Index Out of Bounds (_array != null, but 3 Out of Bounds!)"
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                              (rule "less_literals" (formula "1") (term "1"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEq" (formula "1") (term "0") (ifseqformula "6"))
                              (rule "leq_literals" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                        (branch "Null Reference (x_arr = null)"
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "Index Out of Bounds (x_arr != null, but x Out of Bounds!)"
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                           (builtin "One Step Simplification" (formula "8"))
                           (rule "less_literals" (formula "1") (term "1"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "6"))
                           (rule "leq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch "Null Reference (_array = null)"
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "Index Out of Bounds (_array != null, but 1 Out of Bounds!)"
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                        (rule "less_literals" (formula "1") (term "1"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEq" (formula "1") (term "0") (ifseqformula "6"))
                        (rule "leq_literals" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "Null Reference (_array = null)"
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "Index Out of Bounds (_array != null, but 0 Out of Bounds!)"
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                     (rule "less_literals" (formula "1") (term "1"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "6"))
                     (rule "leq_literals" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
            )
         )
         (branch "Null Reference (x_arr_1 = null)"
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "Null Reference (_array = null)"
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
         (rule "closeFalse" (formula "1"))
      )
      (branch "Index Out of Bounds (_array != null, but 2 Out of Bounds!)"
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
         (rule "less_literals" (formula "1") (term "1"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "applyEq" (formula "1") (term "0") (ifseqformula "6"))
         (rule "leq_literals" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Null Reference (_array = null)"
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
      (rule "closeFalse" (formula "1"))
   )
   (branch "Index Out of Bounds (_array != null, but 1 Out of Bounds!)"
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
      (rule "less_literals" (formula "1") (term "1"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "applyEq" (formula "1") (term "0") (ifseqformula "6"))
      (rule "leq_literals" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Null Reference (_array = null)"
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
   (rule "closeFalse" (formula "1"))
)
(branch "Index Out of Bounds (_array != null, but 0 Out of Bounds!)"
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
   (rule "less_literals" (formula "1") (term "1"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "applyEq" (formula "1") (term "0") (ifseqformula "6"))
   (rule "leq_literals" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
)

}
