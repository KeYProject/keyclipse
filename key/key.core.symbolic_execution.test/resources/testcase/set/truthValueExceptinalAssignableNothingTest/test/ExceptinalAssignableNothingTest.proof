\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed May 25 11:33:32 CEST 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=10000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "";

\proofObligation "#Proof Obligation Settings
#Wed May 25 11:33:32 CEST 2016
name=ExceptinalAssignableNothingTest[ExceptinalAssignableNothingTest\\:\\:main()].JML exceptional_behavior operation contract.0
contract=ExceptinalAssignableNothingTest[ExceptinalAssignableNothingTest\\:\\:main()].JML exceptional_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "marti" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "2234")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "exc,heapAtPre,o,f"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "3") (term "1,0,0,1,0,1"))
(rule "assignment" (formula "3") (term "1"))
(rule "sequentialToParallel2" (formula "3"))
(rule "simplifyUpdate3" (formula "3") (term "1,0"))
(rule "methodBodyExpand" (formula "3") (term "1") (newnames "heapBefore_main,savedHeapBefore_main"))
(rule "simplifyUpdate2" (formula "3") (term "1"))
(rule "throwUnfold" (formula "3") (term "1") (inst "#v0=n"))
(rule "variableDeclarationAssign" (formula "3") (term "1"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "n"))
(rule "instanceCreationAssignment" (formula "3") (term "1") (inst "#v0=n_1"))
(rule "variableDeclarationAssign" (formula "3") (term "1"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "n_1"))
(rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "3") (term "1") (inst "#v0=n_2"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "n_2"))
(rule "methodBodyExpand" (formula "3") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
(rule "simplifyUpdate2" (formula "3") (term "1"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "__NEW__"))
(rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "3") (term "1") (inst "#v0=n_3"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "n_3"))
(rule "allocateInstance" (formula "3"))
(rule "false_to_not_true" (formula "1") (term "1,1,0,1"))
(rule "simplifyUpdate2" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "1"))
(rule "replace_known_left" (formula "1") (term "0") (ifseqformula "3"))
(rule "concrete_impl_1" (formula "1"))
(rule "notLeft" (formula "1"))
(rule "sequentialToParallel2" (formula "6"))
(rule "simplifyUpdate3" (formula "6") (term "1,0"))
(rule "blockEmpty" (formula "6") (term "1"))
(rule "assignment" (formula "6") (term "1"))
(rule "sequentialToParallel2" (formula "6"))
(rule "simplifyUpdate3" (formula "6") (term "1,0"))
(rule "methodBodyExpand" (formula "6") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
(rule "simplifyUpdate2" (formula "6") (term "1"))
(rule "assignment_write_attribute_this" (formula "6") (term "1"))
(rule "sequentialToParallel2" (formula "6"))
(rule "simplifyUpdate2" (formula "6"))
(rule "simplifyUpdate3" (formula "6") (term "1,0"))
(rule "applyOnElementary" (formula "6") (term "1,0"))
(rule "applyOnRigidTerm" (formula "6") (term "0,1,0"))
(rule "simplifyUpdate1" (formula "6") (term "0,0,1,0"))
(rule "simplifyUpdate1" (formula "6") (term "1,0,1,0"))
(rule "simplifyUpdate1" (formula "6") (term "3,0,1,0"))
(rule "simplifyUpdate1" (formula "6") (term "2,0,1,0"))
(rule "applyOnPV" (formula "6") (term "0,0,1,0"))
(rule "applyOnPV" (formula "6") (term "1,0,1,0"))
(rule "methodCallWithinClass" (formula "6") (term "1"))
(rule "methodBodyExpand" (formula "6") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
(rule "simplifyUpdate2" (formula "6") (term "1"))
(rule "methodCallSuper" (formula "6") (term "1"))
(rule "methodBodyExpand" (formula "6") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
(rule "simplifyUpdate2" (formula "6") (term "1"))
(rule "methodCallSuper" (formula "6") (term "1"))
(rule "methodBodyExpand" (formula "6") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
(rule "simplifyUpdate2" (formula "6") (term "1"))
(rule "methodCallSuper" (formula "6") (term "1"))
(rule "methodBodyExpand" (formula "6") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>_1"))
(rule "simplifyUpdate2" (formula "6") (term "1"))
(rule "methodCallSuper" (formula "6") (term "1"))
(rule "methodBodyExpand" (formula "6") (term "1") (newnames "heapBefore_<prepare>_2,savedHeapBefore_<prepare>_2"))
(rule "simplifyUpdate2" (formula "6") (term "1"))
(rule "methodCallEmpty" (formula "6") (term "1"))
(rule "blockEmpty" (formula "6") (term "1"))
(rule "assignment_write_attribute_this" (formula "6") (term "1"))
(rule "castDel" (formula "6") (term "1,0,0,1"))
(rule "sequentialToParallel2" (formula "6"))
(rule "simplifyUpdate2" (formula "6"))
(rule "simplifyUpdate3" (formula "6") (term "1,0"))
(rule "applyOnElementary" (formula "6") (term "1,0"))
(rule "applyOnRigidTerm" (formula "6") (term "0,1,0"))
(rule "simplifyUpdate1" (formula "6") (term "3,0,1,0"))
(rule "simplifyUpdate1" (formula "6") (term "0,0,1,0"))
(rule "simplifyUpdate1" (formula "6") (term "1,0,1,0"))
(rule "simplifyUpdate1" (formula "6") (term "2,0,1,0"))
(rule "applyOnPV" (formula "6") (term "0,0,1,0"))
(rule "applyOnPV" (formula "6") (term "1,0,1,0"))
(rule "assignment_write_attribute_this" (formula "6") (term "1"))
(rule "castDel" (formula "6") (term "1,0,0,1"))
(rule "sequentialToParallel2" (formula "6"))
(rule "simplifyUpdate2" (formula "6"))
(rule "simplifyUpdate3" (formula "6") (term "1,0"))
(rule "applyOnElementary" (formula "6") (term "1,0"))
(rule "applyOnRigidTerm" (formula "6") (term "0,1,0"))
(rule "simplifyUpdate1" (formula "6") (term "0,0,1,0"))
(rule "simplifyUpdate1" (formula "6") (term "1,0,1,0"))
(rule "simplifyUpdate1" (formula "6") (term "3,0,1,0"))
(rule "simplifyUpdate1" (formula "6") (term "2,0,1,0"))
(rule "applyOnPV" (formula "6") (term "0,0,1,0"))
(rule "applyOnPV" (formula "6") (term "1,0,1,0"))
(rule "methodCallEmpty" (formula "6") (term "1"))
(rule "methodCallEmpty" (formula "6") (term "1"))
(rule "methodCallEmpty" (formula "6") (term "1"))
(rule "methodCallEmpty" (formula "6") (term "1"))
(rule "blockEmpty" (formula "6") (term "1"))
(rule "methodCallReturnIgnoreResult" (formula "6") (term "1"))
(rule "methodCallReturn" (formula "6") (term "1"))
(rule "assignment" (formula "6") (term "1"))
(rule "sequentialToParallel2" (formula "6"))
(rule "simplifyUpdate2" (formula "6"))
(rule "simplifyUpdate3" (formula "6") (term "1,0"))
(rule "applyOnElementary" (formula "6") (term "1,0"))
(rule "applyOnPV" (formula "6") (term "0,1,0"))
(rule "methodCallEmpty" (formula "6") (term "1"))
(rule "blockEmpty" (formula "6") (term "1"))
(rule "assignment" (formula "6") (term "1"))
(rule "sequentialToParallel2" (formula "6"))
(rule "simplifyUpdate2" (formula "6"))
(rule "simplifyUpdate3" (formula "6") (term "1,0"))
(rule "applyOnElementary" (formula "6") (term "1,0"))
(rule "applyOnPV" (formula "6") (term "0,1,0"))
(rule "methodBodyExpand" (formula "6") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
(rule "simplifyUpdate2" (formula "6") (term "1"))
(rule "methodCallSuper" (formula "6") (term "1"))
(rule "methodBodyExpand" (formula "6") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
(rule "simplifyUpdate2" (formula "6") (term "1"))
(rule "methodCallSuper" (formula "6") (term "1"))
(rule "methodBodyExpand" (formula "6") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>_1"))
(rule "simplifyUpdate2" (formula "6") (term "1"))
(rule "methodCallSuper" (formula "6") (term "1"))
(rule "methodBodyExpand" (formula "6") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>_2"))
(rule "simplifyUpdate2" (formula "6") (term "1"))
(rule "methodCallSuper" (formula "6") (term "1"))
(rule "methodBodyExpand" (formula "6") (term "1") (newnames "heapBefore_<init>_3,savedHeapBefore_<init>_3"))
(rule "simplifyUpdate2" (formula "6") (term "1"))
(rule "methodCallEmpty" (formula "6") (term "1"))
(rule "blockEmpty" (formula "6") (term "1"))
(rule "assignment_write_attribute_this" (formula "6") (term "1"))
(rule "castDel" (formula "6") (term "1,0,0,1"))
(rule "sequentialToParallel2" (formula "6"))
(rule "simplifyUpdate2" (formula "6"))
(rule "simplifyUpdate3" (formula "6") (term "1,0"))
(rule "applyOnElementary" (formula "6") (term "1,0"))
(rule "applyOnRigidTerm" (formula "6") (term "0,1,0"))
(rule "simplifyUpdate1" (formula "6") (term "3,0,1,0"))
(rule "simplifyUpdate1" (formula "6") (term "0,0,1,0"))
(rule "simplifyUpdate1" (formula "6") (term "1,0,1,0"))
(rule "simplifyUpdate1" (formula "6") (term "2,0,1,0"))
(rule "applyOnPV" (formula "6") (term "0,0,1,0"))
(rule "applyOnPV" (formula "6") (term "1,0,1,0"))
(rule "dropEffectlessStores" (formula "6") (term "0,1,0"))
(rule "assignment_write_attribute_this" (formula "6") (term "1"))
(rule "castDel" (formula "6") (term "1,0,0,1"))
(rule "sequentialToParallel2" (formula "6"))
(rule "simplifyUpdate2" (formula "6"))
(rule "simplifyUpdate3" (formula "6") (term "1,0"))
(rule "applyOnElementary" (formula "6") (term "1,0"))
(rule "applyOnRigidTerm" (formula "6") (term "0,1,0"))
(rule "simplifyUpdate1" (formula "6") (term "0,0,1,0"))
(rule "simplifyUpdate1" (formula "6") (term "1,0,1,0"))
(rule "simplifyUpdate1" (formula "6") (term "2,0,1,0"))
(rule "simplifyUpdate1" (formula "6") (term "3,0,1,0"))
(rule "applyOnPV" (formula "6") (term "0,0,1,0"))
(rule "applyOnPV" (formula "6") (term "1,0,1,0"))
(rule "dropEffectlessStores" (formula "6") (term "0,1,0"))
(rule "methodCallEmpty" (formula "6") (term "1"))
(rule "methodCallEmpty" (formula "6") (term "1"))
(rule "methodCallEmpty" (formula "6") (term "1"))
(rule "methodCallEmpty" (formula "6") (term "1"))
(rule "blockEmpty" (formula "6") (term "1"))
(rule "assignment_write_attribute" (formula "6") (term "1"))
(branch "Normal Execution (n_1 != null)"
   (rule "simplifyUpdate2" (formula "6"))
   (rule "sequentialToParallel2" (formula "7"))
   (rule "simplifyUpdate2" (formula "7"))
   (rule "simplifyUpdate3" (formula "7") (term "1,0"))
   (rule "applyOnElementary" (formula "7") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "6"))
   (rule "simplifyUpdate1" (formula "6") (term "1"))
   (rule "applyOnPV" (formula "6") (term "0"))
   (rule "applyOnRigidTerm" (formula "6") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "6") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "6") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "6") (term "2,0,1,0"))
   (rule "simplifyUpdate1" (formula "6") (term "3,0,1,0"))
   (rule "applyOnPV" (formula "6") (term "0,0,1,0"))
   (rule "applyOnPV" (formula "6") (term "1,0,1,0"))
   (rule "dropEffectlessStores" (formula "6") (term "0,1,0"))
   (rule "assignment" (formula "6") (term "1"))
   (rule "sequentialToParallel2" (formula "6"))
   (rule "simplifyUpdate2" (formula "6"))
   (rule "simplifyUpdate3" (formula "6") (term "1,0"))
   (rule "applyOnElementary" (formula "6") (term "1,0"))
   (rule "applyOnPV" (formula "6") (term "0,1,0"))
   (rule "methodCallThrow" (formula "6") (term "1"))
   (rule "tryCatchThrow" (formula "6") (term "1"))
   (rule "ifElseUnfold" (formula "6") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "6") (term "1") (newnames "x"))
   (rule "equality_comparison_simple" (formula "6") (term "1"))
   (rule "sequentialToParallel2" (formula "6"))
   (rule "simplifyUpdate3" (formula "6") (term "1,0"))
   (rule "applyOnElementary" (formula "6") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "6") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "6") (term "2,0,1,0"))
   (rule "simplifyUpdate1" (formula "6") (term "1,0,1,0"))
   (rule "applyOnRigidFormula" (formula "6") (term "0,0,1,0"))
   (rule "applyOnPV" (formula "6") (term "0,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "6") (term "1,0,0,1,0"))
   (rule "replace_known_right" (formula "6") (term "0,0,1,0") (ifseqformula "5"))
   (rule "ifthenelse_false" (formula "6") (term "0,1,0"))
   (rule "ifElseSplit" (formula "6"))
   (branch "if x true"
      (rule "simplifyUpdate2" (formula "1"))
      (rule "simplifyUpdate2" (formula "7"))
      (rule "applyOnRigidFormula" (formula "1"))
      (rule "simplifyUpdate1" (formula "1") (term "1"))
      (rule "applyOnPV" (formula "1") (term "0"))
      (rule "boolean_not_equal_2" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "if x false"
      (rule "false_to_not_true" (formula "1") (term "1"))
      (rule "simplifyUpdate2" (formula "7"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "applyOnRigidFormula" (formula "4"))
      (rule "applyOnPV" (formula "4") (term "0"))
      (rule "simplifyUpdate1" (formula "4") (term "1"))
      (rule "boolean_not_equal_2" (formula "4"))
      (rule "false_right" (formula "4"))
      (rule "ifElseSplit" (formula "6"))
      (branch "if n instanceof java.lang.Throwable true"
         (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
         (rule "ifthenelse_concrete4" (formula "1") (term "1"))
         (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
         (rule "concrete_or_4" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "applyOnRigidFormula" (formula "4"))
         (rule "applyOnPV" (formula "4") (term "0"))
         (rule "simplifyUpdate1" (formula "4") (term "1"))
         (rule "variableDeclaration" (formula "6") (term "1") (newnames "e"))
         (rule "reference_type_cast" (formula "6") (term "1"))
         (branch "Normal Execution (n instanceof java.lang.Throwable)"
            (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
            (rule "boolean_equal" (formula "1") (term "1,1"))
            (rule "concrete_or_3" (formula "1") (term "1"))
            (rule "true_left" (formula "1"))
            (rule "sequentialToParallel2" (formula "6"))
            (rule "simplifyUpdate2" (formula "6"))
            (rule "simplifyUpdate3" (formula "6") (term "1,0"))
            (rule "applyOnElementary" (formula "6") (term "1,0"))
            (rule "applyOnPV" (formula "6") (term "0,1,0"))
            (rule "assignment" (formula "6") (term "1"))
            (rule "sequentialToParallel2" (formula "6"))
            (rule "simplifyUpdate2" (formula "6"))
            (rule "simplifyUpdate3" (formula "6") (term "1,0"))
            (rule "applyOnElementary" (formula "6") (term "1,0"))
            (rule "applyOnPV" (formula "6") (term "0,1,0"))
            (rule "emptyModality" (formula "6") (term "1"))
            (rule "applyOnRigidFormula" (formula "6"))
            (rule "simplifyUpdate2" (formula "6") (term "0"))
            (rule "simplifyUpdate2" (formula "6") (term "1"))
            (rule "applyOnRigidFormula" (formula "6") (term "0"))
            (rule "applyOnRigidFormula" (formula "6") (term "1"))
            (rule "applyOnRigidFormula" (formula "6") (term "0,0"))
            (rule "applyOnRigidFormula" (formula "6") (term "1,0"))
            (rule "applyOnRigidFormula" (formula "6") (term "0,1"))
            (rule "applyOnRigidFormula" (formula "6") (term "0,0,0"))
            (rule "applyOnPV" (formula "6") (term "0,0,0,0"))
            (rule "simplifyUpdate1" (formula "6") (term "1,0,0,0"))
            (rule "replace_known_right" (formula "6") (term "0,0,0") (ifseqformula "5"))
            (rule "concrete_not_2" (formula "6") (term "0,0"))
            (rule "concrete_and_1" (formula "6") (term "0"))
            (rule "applyOnRigidFormula" (formula "6") (term "0,0,1"))
            (rule "simplifyUpdate2" (formula "6") (term "0,0,0,1"))
            (rule "applyOnRigidFormula" (formula "6") (term "1,0"))
            (rule "simplifyUpdate1" (formula "6") (term "1,1,0"))
            (rule "applyOnRigidFormula" (formula "6") (term "0,0"))
            (rule "simplifyUpdate1" (formula "6") (term "1,0,0"))
            (rule "applyOnRigidFormula" (formula "6") (term "1,0,0,1"))
            (rule "simplifyUpdate1" (formula "6") (term "0,1,0,0,1"))
            (rule "simplifyUpdate1" (formula "6") (term "1,1,0,0,1"))
            (rule "applyOnRigidFormula" (formula "6") (term "0,0,0,1"))
            (rule "simplifyUpdate2" (formula "6") (term "0,0,0,0,1"))
            (rule "applyOnRigidTerm" (formula "6") (term "0,1,0"))
            (rule "applyOnPV" (formula "6") (term "0,0,1,0"))
            (rule "instanceof_static_type" (formula "6") (term "0,1,0"))
            (rule "boolean_equal" (formula "6") (term "1,0"))
            (rule "concrete_or_3" (formula "6") (term "0"))
            (rule "concrete_and_1" (formula "6"))
            (rule "allRight" (formula "6") (inst "sk=f_0"))
            (rule "allRight" (formula "6") (inst "sk=o_0"))
            (rule "orRight" (formula "6"))
            (rule "applyOnRigidTerm" (formula "7") (term "0"))
            (rule "simplifyUpdate1" (formula "7") (term "1,0"))
            (rule "applyOnPV" (formula "7") (term "0,0"))
            (rule "simplifyUpdate1" (formula "7") (term "2,0"))
            (rule "eqSymm" (formula "7"))
            (rule "applyOnRigidFormula" (formula "6") (term "1"))
            (rule "applyOnRigidTerm" (formula "7") (term "0"))
            (rule "applyOnPV" (formula "7") (term "0,0"))
            (rule "simplifyUpdate1" (formula "7") (term "1,0"))
            (rule "simplifyUpdate1" (formula "7") (term "2,0"))
            (rule "applyOnRigidFormula" (formula "6") (term "0,1"))
            (rule "simplifyUpdate1" (formula "6") (term "1,0,1"))
            (rule "applyOnRigidTerm" (formula "6") (term "0,0,1"))
            (rule "applyOnPV" (formula "6") (term "0,0,0,1"))
            (rule "simplifyUpdate1" (formula "6") (term "1,0,0,1"))
            (rule "simplifyUpdate1" (formula "6") (term "2,0,0,1"))
            (rule "pullOutSelect" (formula "7") (term "0") (inst "selectSK=f_0_0"))
            (rule "simplifySelectOfStore" (formula "1"))
            (rule "equalUnique" (formula "1") (term "0,1,0,0"))
            (rule "concrete_not_2" (formula "1") (term "1,0,0"))
            (rule "concrete_and_3" (formula "1") (term "0,0"))
            (rule "castDel" (formula "1") (term "1,0"))
            (rule "eqSymm" (formula "8"))
            (rule "eqSymm" (formula "1") (term "0,0,0"))
            (rule "eqSymm" (formula "1") (term "1,0,0"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
            (rule "simplifySelectOfStore" (formula "1"))
            (rule "equalUnique" (formula "1") (term "0,1,0,0"))
            (rule "concrete_not_2" (formula "1") (term "1,0,0"))
            (rule "concrete_and_3" (formula "1") (term "0,0"))
            (rule "castDel" (formula "1") (term "1,0"))
            (rule "eqSymm" (formula "1") (term "0,0,0"))
            (rule "eqSymm" (formula "1") (term "1,0,0"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_2"))
            (rule "simplifySelectOfStore" (formula "1"))
            (rule "equalUnique" (formula "1") (term "0,1,0,0"))
            (rule "concrete_not_2" (formula "1") (term "1,0,0"))
            (rule "concrete_and_3" (formula "1") (term "0,0"))
            (rule "castDel" (formula "1") (term "1,0"))
            (rule "eqSymm" (formula "1") (term "0,0,0"))
            (rule "eqSymm" (formula "1") (term "1,0,0"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
            (rule "simplifySelectOfCreate" (formula "1"))
            (rule "castDel" (formula "1") (term "1,0"))
            (rule "eqSymm" (formula "1") (term "0,0,0,0"))
            (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "9"))
            (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
            (rule "concrete_and_3" (formula "1") (term "0,0,0"))
            (rule "commute_and" (formula "4") (term "0,0"))
            (rule "commute_and" (formula "3") (term "0,0"))
            (rule "commute_and" (formula "2") (term "0,0"))
            (rule "commute_and" (formula "1") (term "0,0"))
            (rule "ifthenelse_split" (formula "1") (term "0"))
            (branch "f_0 = java.lang.Object::<created> & o_0 = n_3 TRUE"
               (rule "andLeft" (formula "1"))
               (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
               (rule "concrete_and_3" (formula "3") (term "0,0"))
               (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "2"))
               (rule "concrete_and_3" (formula "5") (term "0,0"))
               (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
               (rule "concrete_and_3" (formula "4") (term "0,0"))
               (rule "applyEq" (formula "11") (term "1,0,0,1") (ifseqformula "2"))
               (rule "replace_known_right" (formula "11") (term "0,1") (ifseqformula "9"))
               (rule "concrete_not_2" (formula "11") (term "1"))
               (rule "concrete_and_3" (formula "11"))
               (rule "notRight" (formula "11"))
               (rule "applyEq" (formula "12") (term "1,0") (ifseqformula "3"))
               (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
               (rule "equalUnique" (formula "4") (term "0,0"))
               (rule "ifthenelse_false" (formula "4") (term "0"))
               (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
               (rule "hideAuxiliaryEq" (formula "4"))
               (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "2"))
               (rule "equalUnique" (formula "5") (term "0,0"))
               (rule "ifthenelse_false" (formula "5") (term "0"))
               (rule "applyEqReverse" (formula "11") (term "1") (ifseqformula "5"))
               (rule "hideAuxiliaryEq" (formula "5"))
               (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
               (rule "equalUnique" (formula "4") (term "0,0"))
               (rule "ifthenelse_false" (formula "4") (term "0"))
               (rule "applyEqReverse" (formula "10") (term "1") (ifseqformula "4"))
               (rule "hideAuxiliaryEq" (formula "4"))
               (rule "applyEqRigid" (formula "9") (term "2,0") (ifseqformula "2"))
               (rule "narrowSelectType" (formula "9") (term "0") (ifseqformula "5"))
               (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
               (rule "eqSymm" (formula "3"))
               (rule "close" (formula "8") (ifseqformula "3"))
            )
            (branch "f_0 = java.lang.Object::<created> & o_0 = n_3 FALSE"
               (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "ifthenelse_split" (formula "1") (term "0"))
               (branch "f_0 = java.lang.Throwable::$cause & o_0 = n_3 TRUE"
                  (rule "andLeft" (formula "1"))
                  (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                  (rule "ifthenelse_same_branches" (formula "4") (term "0"))
                  (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                  (rule "concrete_and_3" (formula "3") (term "0,0"))
                  (rule "replace_known_left" (formula "7") (term "1") (ifseqformula "2"))
                  (rule "concrete_and_3" (formula "7"))
                  (rule "applyEqRigid" (formula "11") (term "2,0") (ifseqformula "1"))
                  (rule "narrowSelectType" (formula "11") (term "0") (ifseqformula "5"))
                  (rule "eqSymm" (formula "11"))
                  (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "2"))
                  (rule "replace_known_right" (formula "10") (term "0,0") (ifseqformula "9"))
                  (rule "concrete_not_2" (formula "10") (term "0"))
                  (rule "concrete_and_1" (formula "10"))
                  (rule "notRight" (formula "10"))
                  (rule "applyEqRigid" (formula "8") (term "0") (ifseqformula "2"))
                  (rule "equalUnique" (formula "8"))
                  (rule "false_right" (formula "8"))
                  (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                  (rule "equalUnique" (formula "4") (term "0,0"))
                  (rule "ifthenelse_false" (formula "4") (term "0"))
                  (rule "applyEqReverse" (formula "10") (term "0") (ifseqformula "4"))
                  (rule "hideAuxiliaryEq" (formula "4"))
                  (rule "eqSymm" (formula "9"))
                  (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                  (rule "close" (formula "7") (ifseqformula "1"))
               )
               (branch "f_0 = java.lang.Throwable::$cause & o_0 = n_3 FALSE"
                  (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "ifthenelse_split" (formula "1") (term "0"))
                  (branch "f_0 = java.lang.Throwable::$message & o_0 = n_3 TRUE"
                     (rule "andLeft" (formula "1"))
                     (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                     (rule "concrete_and_3" (formula "3") (term "0,0"))
                     (rule "replace_known_left" (formula "7") (term "1") (ifseqformula "2"))
                     (rule "concrete_and_3" (formula "7"))
                     (rule "replace_known_left" (formula "8") (term "1") (ifseqformula "2"))
                     (rule "concrete_and_3" (formula "8"))
                     (rule "applyEq" (formula "12") (term "1,0") (ifseqformula "2"))
                     (rule "applyEqRigid" (formula "12") (term "2,0") (ifseqformula "1"))
                     (rule "narrowSelectType" (formula "12") (term "0") (ifseqformula "5"))
                     (rule "eqSymm" (formula "12"))
                     (rule "applyEq" (formula "11") (term "1,0,0,1") (ifseqformula "2"))
                     (rule "replace_known_right" (formula "11") (term "0,1") (ifseqformula "9"))
                     (rule "concrete_not_2" (formula "11") (term "1"))
                     (rule "concrete_and_3" (formula "11"))
                     (rule "notRight" (formula "11"))
                     (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                     (rule "equalUnique" (formula "4") (term "0,0"))
                     (rule "ifthenelse_false" (formula "4") (term "0"))
                     (rule "applyEqReverse" (formula "12") (term "0") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "eqSymm" (formula "11"))
                     (rule "applyEqRigid" (formula "7") (term "0") (ifseqformula "2"))
                     (rule "equalUnique" (formula "7"))
                     (rule "false_right" (formula "7"))
                     (rule "applyEq" (formula "7") (term "0") (ifseqformula "2"))
                     (rule "equalUnique" (formula "7"))
                     (rule "false_right" (formula "7"))
                     (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "1"))
                     (rule "eqSymm" (formula "3"))
                     (rule "close" (formula "8") (ifseqformula "3"))
                  )
                  (branch "f_0 = java.lang.Throwable::$message & o_0 = n_3 FALSE"
                     (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "ifthenelse_split" (formula "1") (term "0"))
                     (branch "f_0 = java.lang.Object::<initialized> & o_0 = n_3 TRUE"
                        (rule "andLeft" (formula "1"))
                        (rule "applyEqReverse" (formula "13") (term "1") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "replace_known_left" (formula "7") (term "1") (ifseqformula "2"))
                        (rule "concrete_and_3" (formula "7"))
                        (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "2"))
                        (rule "concrete_and_3" (formula "6"))
                        (rule "replace_known_left" (formula "8") (term "1") (ifseqformula "2"))
                        (rule "concrete_and_3" (formula "8"))
                        (rule "applyEq" (formula "12") (term "2,0") (ifseqformula "1"))
                        (rule "narrowSelectType" (formula "12") (term "0") (ifseqformula "4"))
                        (rule "applyEqRigid" (formula "7") (term "0") (ifseqformula "1"))
                        (rule "equalUnique" (formula "7"))
                        (rule "false_right" (formula "7"))
                        (rule "applyEq" (formula "6") (term "0") (ifseqformula "1"))
                        (rule "equalUnique" (formula "6"))
                        (rule "false_right" (formula "6"))
                        (rule "applyEq" (formula "6") (term "0") (ifseqformula "1"))
                        (rule "equalUnique" (formula "6"))
                        (rule "false_right" (formula "6"))
                        (rule "applyEq" (formula "8") (term "0,0,0") (ifseqformula "2"))
                        (rule "replace_known_right" (formula "8") (term "0,0") (ifseqformula "7"))
                        (rule "concrete_not_2" (formula "8") (term "0"))
                        (rule "concrete_and_1" (formula "8"))
                        (rule "notRight" (formula "8"))
                        (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                        (rule "close" (formula "7") (ifseqformula "1"))
                     )
                     (branch "f_0 = java.lang.Object::<initialized> & o_0 = n_3 FALSE"
                        (rule "close" (formula "12") (ifseqformula "1"))
                     )
                  )
               )
            )
         )
         (branch "ClassCastException (!(n instanceof java.lang.Throwable))"
            (rule "instanceof_static_type" (formula "6") (term "0,1,1"))
            (rule "boolean_equal" (formula "6") (term "1,1"))
            (rule "concrete_or_3" (formula "6") (term "1"))
            (rule "closeTrue" (formula "6"))
         )
      )
      (branch "if n instanceof java.lang.Throwable false"
         (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
         (rule "false_to_not_true" (formula "1") (term "1"))
         (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
         (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
         (rule "concrete_or_4" (formula "1") (term "0,1"))
         (rule "double_not" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "close" (formula "6") (ifseqformula "1"))
      )
   )
)
(branch "Null Reference (n_1 = null)"
   (rule "simplifyUpdate2" (formula "1"))
   (rule "applyOnRigidFormula" (formula "1"))
   (rule "simplifyUpdate1" (formula "1") (term "1"))
   (rule "applyOnPV" (formula "1") (term "0"))
   (rule "close" (formula "6") (ifseqformula "1"))
)
)

}
