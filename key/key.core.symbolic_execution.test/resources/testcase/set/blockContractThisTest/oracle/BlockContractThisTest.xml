<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <methodCall name="&lt;call self.main(_a)&gt;" pathCondition="true" pathConditionChanged="false">
      <statement name="return _a.magic();" pathCondition="true" pathConditionChanged="false">
         <callStackEntry path="/0"/>
         <branchCondition name="true" pathCondition="true" pathConditionChanged="true" branchCondition="true" mergedBranchCondition="false" isBranchConditionComputed="true">
            <callStackEntry path="/0"/>
            <methodCall name="&lt;call _a.magic()&gt;" pathCondition="true" pathConditionChanged="false">
               <callStackEntry path="/0"/>
               <statement name="this.x=2;" pathCondition="true" pathConditionChanged="false">
                  <callStackEntry path="/0/0/0/0"/>
                  <callStackEntry path="/0"/>
                  <statement name="this.y=3;" pathCondition="true" pathConditionChanged="false">
                     <callStackEntry path="/0/0/0/0"/>
                     <callStackEntry path="/0"/>
                     <blockContract name="_a#magic()) catch(exc_0)
pre _a.x = 2
post exc_0 = null &amp; _a.x = javaUnaryMinusInt(2)
mod {(_a, BlockContractThisTest::$x)}termination diamond" pathCondition="true" pathConditionChanged="false" preconditionComplied="true">
                        <callStackEntry path="/0/0/0/0"/>
                        <callStackEntry path="/0"/>
                        <branchCondition name="true" pathCondition="true" pathConditionChanged="true" branchCondition="true" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Validity">
                           <callStackEntry path="/0/0/0/0"/>
                           <callStackEntry path="/0"/>
                           <statement name="this.x=-2;" pathCondition="true" pathConditionChanged="false">
                              <callStackEntry path="/0/0/0/0"/>
                              <termination name="&lt;block contract end&gt;" pathCondition="true" pathConditionChanged="false" terminationKind="BLOCK_CONTRACT_NORMAL" branchVerified="true">
                              </termination>
                           </statement>
                        </branchCondition>
                        <branchCondition name="or(not(equals(int::select(anon_heap,a,BlockContractThisTest::$x),BlockContractThisTest_x_4)),and(and(and(wellFormed(anon_heap&lt;&lt;anonHeapFunction&gt;&gt;),equals(exc_0,null)),equals(BlockContractThisTest_x_4,Z(neglit(2(#))))),or(or(equals(boolean::select(anon_heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE),equals(exc_0,null)),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE))))" pathCondition="imp(and(and(equals(boolean::select(anon_heap,exc_0,java.lang.Object::&lt;created&gt;),java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;),equals(int::select(anon_heap,a,BlockContractThisTest::$x),BlockContractThisTest_x_4&lt;&lt;selectSK&gt;&gt;)),equals(add(BlockContractThisTest_x_4,mul(BlockContractThisTest_x_4&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))),and(and(and(wellFormed(anon_heap&lt;&lt;anonHeapFunction&gt;&gt;),equals(exc_0,null)),equals(BlockContractThisTest_x_4,Z(neglit(2(#))))),or(or(equals(java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;,TRUE),equals(exc_0,null)),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE))))" pathConditionChanged="true" branchCondition="or(not(equals(int::select(anon_heap,a,BlockContractThisTest::$x),BlockContractThisTest_x_4)),and(and(and(wellFormed(anon_heap&lt;&lt;anonHeapFunction&gt;&gt;),equals(exc_0,null)),equals(BlockContractThisTest_x_4,Z(neglit(2(#))))),or(or(equals(boolean::select(anon_heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE),equals(exc_0,null)),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE))))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Usage">
                           <callStackEntry path="/0/0/0/0"/>
                           <callStackEntry path="/0"/>
                           <branchCondition name="true" pathCondition="imp(and(and(equals(boolean::select(anon_heap,exc_0,java.lang.Object::&lt;created&gt;),java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;),equals(int::select(anon_heap,a,BlockContractThisTest::$x),BlockContractThisTest_x_4&lt;&lt;selectSK&gt;&gt;)),equals(add(BlockContractThisTest_x_4,mul(BlockContractThisTest_x_4&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))),and(and(and(wellFormed(anon_heap&lt;&lt;anonHeapFunction&gt;&gt;),equals(exc_0,null)),equals(BlockContractThisTest_x_4,Z(neglit(2(#))))),or(or(equals(java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;,TRUE),equals(exc_0,null)),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE))))" pathConditionChanged="true" branchCondition="true" mergedBranchCondition="false" isBranchConditionComputed="true">
                              <callStackEntry path="/0/0/0/0"/>
                              <callStackEntry path="/0"/>
                              <statement name="return this.x;" pathCondition="imp(and(and(equals(boolean::select(anon_heap,exc_0,java.lang.Object::&lt;created&gt;),java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;),equals(int::select(anon_heap,a,BlockContractThisTest::$x),BlockContractThisTest_x_4&lt;&lt;selectSK&gt;&gt;)),equals(add(BlockContractThisTest_x_4,mul(BlockContractThisTest_x_4&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))),and(and(and(wellFormed(anon_heap&lt;&lt;anonHeapFunction&gt;&gt;),equals(exc_0,null)),equals(BlockContractThisTest_x_4,Z(neglit(2(#))))),or(or(equals(java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;,TRUE),equals(exc_0,null)),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE))))" pathConditionChanged="false">
                                 <callStackEntry path="/0/0/0/0"/>
                                 <callStackEntry path="/0"/>
                                 <methodReturn name="&lt;return of magic&gt;" signature="&lt;return of _a.magic()&gt;" pathCondition="imp(and(and(equals(boolean::select(anon_heap,exc_0,java.lang.Object::&lt;created&gt;),java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;),equals(int::select(anon_heap,a,BlockContractThisTest::$x),BlockContractThisTest_x_4&lt;&lt;selectSK&gt;&gt;)),equals(add(BlockContractThisTest_x_4,mul(BlockContractThisTest_x_4&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))),and(and(and(wellFormed(anon_heap&lt;&lt;anonHeapFunction&gt;&gt;),equals(exc_0,null)),equals(BlockContractThisTest_x_4,Z(neglit(2(#))))),or(or(equals(java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;,TRUE),equals(exc_0,null)),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE))))" pathConditionChanged="false" nameIncludingReturnValue="&lt;return Z(neglit(2(#))) as result of magic&gt;" signatureIncludingReturnValue="&lt;return Z(neglit(2(#))) as result of _a.magic()&gt;" isReturnValueComputed="true" methodReturnCondition="imp(and(and(equals(boolean::select(anon_heap,exc_0,java.lang.Object::&lt;created&gt;),java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;),equals(int::select(anon_heap,a,BlockContractThisTest::$x),BlockContractThisTest_x_4&lt;&lt;selectSK&gt;&gt;)),equals(add(BlockContractThisTest_x_4,mul(BlockContractThisTest_x_4&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))),and(and(and(wellFormed(anon_heap&lt;&lt;anonHeapFunction&gt;&gt;),equals(exc_0,null)),equals(BlockContractThisTest_x_4,Z(neglit(2(#))))),or(or(equals(java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;,TRUE),equals(exc_0,null)),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE))))">
                                    <methodReturnValue name="Z(neglit(2(#)))" returnValueString="Z(neglit(2(#)))" hasCondition="false">
                                    </methodReturnValue>
                                    <callStackEntry path="/0/0/0/0"/>
                                    <callStackEntry path="/0"/>
                                    <methodReturn name="&lt;return of main&gt;" signature="&lt;return of self.main(_a)&gt;" pathCondition="imp(and(and(equals(boolean::select(anon_heap,exc_0,java.lang.Object::&lt;created&gt;),java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;),equals(int::select(anon_heap,a,BlockContractThisTest::$x),BlockContractThisTest_x_4&lt;&lt;selectSK&gt;&gt;)),equals(add(BlockContractThisTest_x_4,mul(BlockContractThisTest_x_4&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))),and(and(and(wellFormed(anon_heap&lt;&lt;anonHeapFunction&gt;&gt;),equals(exc_0,null)),equals(BlockContractThisTest_x_4,Z(neglit(2(#))))),or(or(equals(java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;,TRUE),equals(exc_0,null)),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE))))" pathConditionChanged="false" nameIncludingReturnValue="&lt;return Z(neglit(2(#))) as result of main&gt;" signatureIncludingReturnValue="&lt;return Z(neglit(2(#))) as result of self.main(_a)&gt;" isReturnValueComputed="true" methodReturnCondition="imp(and(and(equals(boolean::select(anon_heap,exc_0,java.lang.Object::&lt;created&gt;),java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;),equals(int::select(anon_heap,a,BlockContractThisTest::$x),BlockContractThisTest_x_4&lt;&lt;selectSK&gt;&gt;)),equals(add(BlockContractThisTest_x_4,mul(BlockContractThisTest_x_4&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))),and(and(and(wellFormed(anon_heap&lt;&lt;anonHeapFunction&gt;&gt;),equals(exc_0,null)),equals(BlockContractThisTest_x_4,Z(neglit(2(#))))),or(or(equals(java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;,TRUE),equals(exc_0,null)),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE))))">
                                       <methodReturnValue name="Z(neglit(2(#)))" returnValueString="Z(neglit(2(#)))" hasCondition="false">
                                       </methodReturnValue>
                                       <callStackEntry path="/0"/>
                                       <termination name="&lt;end&gt;" pathCondition="imp(and(and(equals(boolean::select(anon_heap,exc_0,java.lang.Object::&lt;created&gt;),java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;),equals(int::select(anon_heap,a,BlockContractThisTest::$x),BlockContractThisTest_x_4&lt;&lt;selectSK&gt;&gt;)),equals(add(BlockContractThisTest_x_4,mul(BlockContractThisTest_x_4&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))),and(and(and(wellFormed(anon_heap&lt;&lt;anonHeapFunction&gt;&gt;),equals(exc_0,null)),equals(BlockContractThisTest_x_4,Z(neglit(2(#))))),or(or(equals(java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;,TRUE),equals(exc_0,null)),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE))))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                                       </termination>
                                    </methodReturn>
                                 </methodReturn>
                              </statement>
                           </branchCondition>
                        </branchCondition>
                     </blockContract>
                  </statement>
               </statement>
               <methodReturnEntry path="/0/0/0/0/0/0/0/1/0/0/0"/>
            </methodCall>
         </branchCondition>
      </statement>
      <methodReturnEntry path="/0/0/0/0/0/0/0/1/0/0/0/0"/>
   </methodCall>
   <terminationEntry path="/0/0/0/0/0/0/0/0/0/0"/>
   <terminationEntry path="/0/0/0/0/0/0/0/1/0/0/0/0/0"/>
</start>
