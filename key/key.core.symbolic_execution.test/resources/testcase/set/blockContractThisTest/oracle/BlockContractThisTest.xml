<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <methodCall name="&lt;call self.magic()&gt;" pathCondition="true" pathConditionChanged="false">
      <statement name="this.x=2;" pathCondition="true" pathConditionChanged="false">
         <callStackEntry path="/0"/>
         <statement name="this.y=3;" pathCondition="true" pathConditionChanged="false">
            <callStackEntry path="/0"/>
            <blockContract name="self#magic()) catch(exc#1)
pre measuredByEmpty &amp; self.x = 2
post exc#1 = null &amp; self.x = -2
mod {(self, BlockContractThisTest::$x)}termination diamond" pathCondition="true" pathConditionChanged="false" preconditionComplied="true">
               <callStackEntry path="/0"/>
               <branchCondition name="true" pathCondition="true" pathConditionChanged="true" branchCondition="true" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Validity">
                  <callStackEntry path="/0"/>
                  <statement name="this.x=-2;" pathCondition="true" pathConditionChanged="false">
                     <callStackEntry path="/0"/>
                     <termination name="&lt;block contract end&gt;" pathCondition="true" pathConditionChanged="false" terminationKind="BLOCK_CONTRACT_NORMAL" branchVerified="true">
                     </termination>
                  </statement>
               </branchCondition>
               <branchCondition name="and(and(and(wellFormed(anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;),equals(exc#1,null)),equals(int::select(anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;,self,BlockContractThisTest::$x),Z(neglit(2(#))))),or(or(equals(exc#1,null),equals(boolean::select(heap,exc#1,java.lang.Object::&lt;created&gt;),TRUE)),equals(boolean::select(anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;,exc#1,java.lang.Object::&lt;created&gt;),TRUE)))" pathCondition="and(and(and(wellFormed(anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;),equals(exc#1,null)),equals(int::select(anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;,self,BlockContractThisTest::$x),Z(neglit(2(#))))),or(or(equals(exc#1,null),equals(boolean::select(heap,exc#1,java.lang.Object::&lt;created&gt;),TRUE)),equals(boolean::select(anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;,exc#1,java.lang.Object::&lt;created&gt;),TRUE)))" pathConditionChanged="true" branchCondition="and(and(and(wellFormed(anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;),equals(exc#1,null)),equals(int::select(anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;,self,BlockContractThisTest::$x),Z(neglit(2(#))))),or(or(equals(exc#1,null),equals(boolean::select(heap,exc#1,java.lang.Object::&lt;created&gt;),TRUE)),equals(boolean::select(anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;,exc#1,java.lang.Object::&lt;created&gt;),TRUE)))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Usage">
                  <callStackEntry path="/0"/>
                  <branchCondition name="true" pathCondition="and(and(and(wellFormed(anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;),equals(exc#1,null)),equals(int::select(anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;,self,BlockContractThisTest::$x),Z(neglit(2(#))))),or(or(equals(exc#1,null),equals(boolean::select(heap,exc#1,java.lang.Object::&lt;created&gt;),TRUE)),equals(boolean::select(anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;,exc#1,java.lang.Object::&lt;created&gt;),TRUE)))" pathConditionChanged="true" branchCondition="true" mergedBranchCondition="false" isBranchConditionComputed="true">
                     <callStackEntry path="/0"/>
                     <statement name="return this.x;" pathCondition="and(and(and(wellFormed(anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;),equals(exc#1,null)),equals(int::select(anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;,self,BlockContractThisTest::$x),Z(neglit(2(#))))),or(or(equals(exc#1,null),equals(boolean::select(heap,exc#1,java.lang.Object::&lt;created&gt;),TRUE)),equals(boolean::select(anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;,exc#1,java.lang.Object::&lt;created&gt;),TRUE)))" pathConditionChanged="false">
                        <callStackEntry path="/0"/>
                        <methodReturn name="&lt;return of magic&gt;" signature="&lt;return of self.magic()&gt;" pathCondition="and(and(and(wellFormed(anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;),equals(exc#1,null)),equals(int::select(anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;,self,BlockContractThisTest::$x),Z(neglit(2(#))))),or(or(equals(exc#1,null),equals(boolean::select(heap,exc#1,java.lang.Object::&lt;created&gt;),TRUE)),equals(boolean::select(anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;,exc#1,java.lang.Object::&lt;created&gt;),TRUE)))" pathConditionChanged="false" nameIncludingReturnValue="&lt;return Z(neglit(2(#))) as result of magic&gt;" signatureIncludingReturnValue="&lt;return Z(neglit(2(#))) as result of self.magic()&gt;" isReturnValueComputed="true" methodReturnCondition="and(and(and(wellFormed(anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;),equals(exc#1,null)),equals(int::select(anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;,self,BlockContractThisTest::$x),Z(neglit(2(#))))),or(or(equals(exc#1,null),equals(boolean::select(heap,exc#1,java.lang.Object::&lt;created&gt;),TRUE)),equals(boolean::select(anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;,exc#1,java.lang.Object::&lt;created&gt;),TRUE)))">
                           <methodReturnValue name="Z(neglit(2(#)))" returnValueString="Z(neglit(2(#)))" hasCondition="false">
                           </methodReturnValue>
                           <callStackEntry path="/0"/>
                           <termination name="&lt;end&gt;" pathCondition="and(and(and(wellFormed(anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;),equals(exc#1,null)),equals(int::select(anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;,self,BlockContractThisTest::$x),Z(neglit(2(#))))),or(or(equals(exc#1,null),equals(boolean::select(heap,exc#1,java.lang.Object::&lt;created&gt;),TRUE)),equals(boolean::select(anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;,exc#1,java.lang.Object::&lt;created&gt;),TRUE)))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                           </termination>
                        </methodReturn>
                     </statement>
                  </branchCondition>
               </branchCondition>
            </blockContract>
         </statement>
      </statement>
      <methodReturnEntry path="/0/0/0/0/1/0/0/0"/>
   </methodCall>
   <terminationEntry path="/0/0/0/0/0/0/0"/>
   <terminationEntry path="/0/0/0/0/1/0/0/0/0"/>
</start>
