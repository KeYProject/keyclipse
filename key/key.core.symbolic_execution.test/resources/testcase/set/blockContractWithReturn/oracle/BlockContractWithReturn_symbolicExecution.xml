<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <methodCall name="&lt;call BlockContractWithReturn.main(x)&gt;" pathCondition="true" pathConditionChanged="false">
      <statement name="return magic(x);" pathCondition="true" pathConditionChanged="false">
         <methodCall name="&lt;call BlockContractWithReturn.magic(x_3)&gt;" pathCondition="true" pathConditionChanged="false">
            <blockContract name="result_0 = magic()) catch(exc_0)
pre x_3 = 2
post returned = TRUE
&amp; exc_0 = null
&amp; (returned = TRUE -&gt; result_0 = javaUnaryMinusInt(2))
mod {}termination diamond" pathCondition="true" pathConditionChanged="false" preconditionComplied="false">
               <branchCondition name="true" pathCondition="true" pathConditionChanged="true" branchCondition="true" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Validity">
                  <branchStatement name="if (x_3==2)" pathCondition="true" pathConditionChanged="false" blockOpened="true">
                     <statement name="returned=true;" pathCondition="true" pathConditionChanged="false">
                        <statement name="result_0=-2;" pathCondition="true" pathConditionChanged="false">
                           <termination name="&lt;block contract end&gt;" pathCondition="true" pathConditionChanged="false" terminationKind="BLOCK_CONTRACT_NORMAL" branchVerified="true">
                           </termination>
                           <completedBlockEntry path="/0/0/0/0/0/0" conditionString="true"/>
                        </statement>
                     </statement>
                     <blockCompletionEntry path="/0/0/0/0/0/0/0/0"/>
                  </branchStatement>
               </branchCondition>
               <branchCondition name="update-application(parallel-upd(elem-update(exc)(null),elem-update(x_3)(x)),update-application(elem-update(heap_Before_BLOCK)(heap),and(and(and(and(equals(returned,TRUE),equals(exc_0,null)),imp(equals(returned,TRUE),equals(result_0,javaUnaryMinusInt(Z(2(#)))))),and(inInt(result_0),or(equals(exc_0,null),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE)))),or(or(and(equals(returned,FALSE),equals(exc_0,null)),and(not(equals(returned,FALSE)),equals(exc_0,null))),and(not(equals(exc_0,null)),equals(returned,FALSE))))))" pathCondition="update-application(parallel-upd(elem-update(exc)(null),elem-update(x_3)(x)),update-application(elem-update(heap_Before_BLOCK)(heap),and(and(and(and(equals(returned,TRUE),equals(exc_0,null)),imp(equals(returned,TRUE),equals(result_0,javaUnaryMinusInt(Z(2(#)))))),and(inInt(result_0),or(equals(exc_0,null),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE)))),or(or(and(equals(returned,FALSE),equals(exc_0,null)),and(not(equals(returned,FALSE)),equals(exc_0,null))),and(not(equals(exc_0,null)),equals(returned,FALSE))))))" pathConditionChanged="true" branchCondition="update-application(parallel-upd(elem-update(exc)(null),elem-update(x_3)(x)),update-application(elem-update(heap_Before_BLOCK)(heap),and(and(and(and(equals(returned,TRUE),equals(exc_0,null)),imp(equals(returned,TRUE),equals(result_0,javaUnaryMinusInt(Z(2(#)))))),and(inInt(result_0),or(equals(exc_0,null),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE)))),or(or(and(equals(returned,FALSE),equals(exc_0,null)),and(not(equals(returned,FALSE)),equals(exc_0,null))),and(not(equals(exc_0,null)),equals(returned,FALSE))))))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Usage">
                  <methodReturn name="&lt;return of magic&gt;" signature="&lt;return of BlockContractWithReturn.magic(x_3)&gt;" pathCondition="update-application(parallel-upd(elem-update(exc)(null),elem-update(x_3)(x)),update-application(elem-update(heap_Before_BLOCK)(heap),and(and(and(and(equals(returned,TRUE),equals(exc_0,null)),imp(equals(returned,TRUE),equals(result_0,javaUnaryMinusInt(Z(2(#)))))),and(inInt(result_0),or(equals(exc_0,null),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE)))),or(or(and(equals(returned,FALSE),equals(exc_0,null)),and(not(equals(returned,FALSE)),equals(exc_0,null))),and(not(equals(exc_0,null)),equals(returned,FALSE))))))" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="update-application(parallel-upd(elem-update(exc)(null),elem-update(x_3)(x)),update-application(elem-update(heap_Before_BLOCK)(heap),and(and(and(and(equals(returned,TRUE),equals(exc_0,null)),imp(equals(returned,TRUE),equals(result_0,javaUnaryMinusInt(Z(2(#)))))),and(inInt(result_0),or(equals(exc_0,null),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE)))),or(or(and(equals(returned,FALSE),equals(exc_0,null)),and(not(equals(returned,FALSE)),equals(exc_0,null))),and(not(equals(exc_0,null)),equals(returned,FALSE))))))">
                     <methodReturn name="&lt;return of main&gt;" signature="&lt;return of BlockContractWithReturn.main(x)&gt;" pathCondition="update-application(parallel-upd(elem-update(exc)(null),elem-update(x_3)(x)),update-application(elem-update(heap_Before_BLOCK)(heap),and(and(and(and(equals(returned,TRUE),equals(exc_0,null)),imp(equals(returned,TRUE),equals(result_0,javaUnaryMinusInt(Z(2(#)))))),and(inInt(result_0),or(equals(exc_0,null),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE)))),or(or(and(equals(returned,FALSE),equals(exc_0,null)),and(not(equals(returned,FALSE)),equals(exc_0,null))),and(not(equals(exc_0,null)),equals(returned,FALSE))))))" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="update-application(parallel-upd(elem-update(exc)(null),elem-update(x_3)(x)),update-application(elem-update(heap_Before_BLOCK)(heap),and(and(and(and(equals(returned,TRUE),equals(exc_0,null)),imp(equals(returned,TRUE),equals(result_0,javaUnaryMinusInt(Z(2(#)))))),and(inInt(result_0),or(equals(exc_0,null),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE)))),or(or(and(equals(returned,FALSE),equals(exc_0,null)),and(not(equals(returned,FALSE)),equals(exc_0,null))),and(not(equals(exc_0,null)),equals(returned,FALSE))))))">
                        <termination name="&lt;end&gt;" pathCondition="update-application(parallel-upd(elem-update(exc)(null),elem-update(x_3)(x)),update-application(elem-update(heap_Before_BLOCK)(heap),and(and(and(and(equals(returned,TRUE),equals(exc_0,null)),imp(equals(returned,TRUE),equals(result_0,javaUnaryMinusInt(Z(2(#)))))),and(inInt(result_0),or(equals(exc_0,null),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE)))),or(or(and(equals(returned,FALSE),equals(exc_0,null)),and(not(equals(returned,FALSE)),equals(exc_0,null))),and(not(equals(exc_0,null)),equals(returned,FALSE))))))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                        </termination>
                     </methodReturn>
                  </methodReturn>
               </branchCondition>
            </blockContract>
            <methodReturnEntry path="/0/0/0/0/1/0"/>
         </methodCall>
      </statement>
      <methodReturnEntry path="/0/0/0/0/1/0/0"/>
   </methodCall>
   <terminationEntry path="/0/0/0/0/0/0/0/0/0"/>
   <terminationEntry path="/0/0/0/0/1/0/0/0"/>
</start>
