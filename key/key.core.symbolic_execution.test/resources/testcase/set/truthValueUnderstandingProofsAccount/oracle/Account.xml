<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <methodCall name="&lt;call self.checkAndWithdraw(_amount)&gt;" pathCondition="true" pathConditionChanged="false">
      <branchStatement name="if (canWithdraw(_amount))" pathCondition="true" pathConditionChanged="false" blockOpened="false">
         <operationContract name="result_0 = self.canWithdraw(_amount) catch(exc_0)
pre: (_amount &gt;  0 &amp; self.&lt;inv&gt;&lt;&lt;impl&gt;&gt;)&lt;&lt;SC&gt;&gt;
mod: {}
termination: diamond" pathCondition="true" pathConditionChanged="false" resultTerm="result_0" exceptionTerm="exc_0" selfTerm="self" contractParameters="_amount" preconditionComplied="true" hasNotNullCheck="false" notNullCheckComplied="false">
            <branchCondition name="equals(exc_0,null)&lt;&lt;impl&gt;&gt;" pathCondition="equals(exc_0,null)&lt;&lt;impl&gt;&gt;" pathConditionChanged="true" branchCondition="equals(exc_0,null)&lt;&lt;impl&gt;&gt;" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Post (canWithdraw)">
               <branchCondition name="true" pathCondition="equals(exc_0,null)&lt;&lt;impl&gt;&gt;" pathConditionChanged="true" branchCondition="true" mergedBranchCondition="false" isBranchConditionComputed="true">
                  <branchCondition name="equals(result_0,TRUE)" pathCondition="and(equals(result_0,TRUE),equals(exc_0,null)&lt;&lt;impl&gt;&gt;)" pathConditionChanged="true" branchCondition="equals(result_0,TRUE)" mergedBranchCondition="false" isBranchConditionComputed="true">
                     <operationContract name="self.withdraw(_amount) catch(exc_1)
pre: (_amount &gt;  0 &amp; self.&lt;inv&gt;&lt;&lt;impl&gt;&gt;)&lt;&lt;SC&gt;&gt;
mod: {(self, Account::$balance)}
termination: diamond" pathCondition="and(equals(result_0,TRUE),equals(exc_0,null)&lt;&lt;impl&gt;&gt;)" pathConditionChanged="false" exceptionTerm="exc_1" selfTerm="self" contractParameters="_amount" preconditionComplied="true" hasNotNullCheck="false" notNullCheckComplied="false">
                        <branchCondition name="equals(exc_1,null)&lt;&lt;impl&gt;&gt;" pathCondition="and(and(equals(result_0,TRUE),equals(exc_0,null)&lt;&lt;impl&gt;&gt;),equals(exc_1,null)&lt;&lt;impl&gt;&gt;)" pathConditionChanged="true" branchCondition="equals(exc_1,null)&lt;&lt;impl&gt;&gt;" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Post (withdraw)">
                           <branchCondition name="true" pathCondition="and(and(equals(result_0,TRUE),equals(exc_0,null)&lt;&lt;impl&gt;&gt;),equals(exc_1,null)&lt;&lt;impl&gt;&gt;)" pathConditionChanged="true" branchCondition="true" mergedBranchCondition="false" isBranchConditionComputed="true">
                              <statement name="return _amount;" pathCondition="and(and(equals(result_0,TRUE),equals(exc_0,null)&lt;&lt;impl&gt;&gt;),equals(exc_1,null)&lt;&lt;impl&gt;&gt;)" pathConditionChanged="false">
                                 <methodReturn name="&lt;return of checkAndWithdraw&gt;" signature="&lt;return of self.checkAndWithdraw(_amount)&gt;" pathCondition="and(and(equals(result_0,TRUE),equals(exc_0,null)&lt;&lt;impl&gt;&gt;),equals(exc_1,null)&lt;&lt;impl&gt;&gt;)" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="and(and(equals(result_0,TRUE),equals(exc_0,null)&lt;&lt;impl&gt;&gt;),equals(exc_1,null)&lt;&lt;impl&gt;&gt;)">
                                    <termination name="&lt;end&gt;" pathCondition="and(and(equals(result_0,TRUE),equals(exc_0,null)&lt;&lt;impl&gt;&gt;),equals(exc_1,null)&lt;&lt;impl&gt;&gt;)" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                                    </termination>
                                 </methodReturn>
                              </statement>
                           </branchCondition>
                        </branchCondition>
                     </operationContract>
                  </branchCondition>
                  <branchCondition name="not(equals(result_0,TRUE))" pathCondition="and(not(equals(result_0,TRUE)),equals(exc_0,null)&lt;&lt;impl&gt;&gt;)" pathConditionChanged="true" branchCondition="not(equals(result_0,TRUE))" mergedBranchCondition="false" isBranchConditionComputed="true">
                     <statement name="return 0;" pathCondition="and(not(equals(result_0,TRUE)),equals(exc_0,null)&lt;&lt;impl&gt;&gt;)" pathConditionChanged="false">
                        <methodReturn name="&lt;return of checkAndWithdraw&gt;" signature="&lt;return of self.checkAndWithdraw(_amount)&gt;" pathCondition="and(not(equals(result_0,TRUE)),equals(exc_0,null)&lt;&lt;impl&gt;&gt;)" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="and(not(equals(result_0,TRUE)),equals(exc_0,null)&lt;&lt;impl&gt;&gt;)">
                           <termination name="&lt;end&gt;" pathCondition="and(not(equals(result_0,TRUE)),equals(exc_0,null)&lt;&lt;impl&gt;&gt;)" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="false">
                           </termination>
                        </methodReturn>
                     </statement>
                  </branchCondition>
               </branchCondition>
            </branchCondition>
         </operationContract>
      </branchStatement>
      <methodReturnEntry path="/0/0/0/0/0/0/0/0/0/0/0"/>
      <methodReturnEntry path="/0/0/0/0/0/1/0/0"/>
   </methodCall>
   <terminationEntry path="/0/0/0/0/0/0/0/0/0/0/0/0"/>
   <terminationEntry path="/0/0/0/0/0/1/0/0/0"/>
</start>
