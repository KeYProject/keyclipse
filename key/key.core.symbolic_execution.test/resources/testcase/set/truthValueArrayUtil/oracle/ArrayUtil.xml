<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <methodCall name="&lt;call ArrayUtil.indexOf(_array,_filter)&gt;" pathCondition="true" pathConditionChanged="false">
      <statement name="int index = -1;" pathCondition="true" pathConditionChanged="false">
         <statement name="int i = 0;" pathCondition="true" pathConditionChanged="false">
            <loopInvariant name="invariant: i &gt;= 0 &amp; i &lt;= _array.length;
variant: javaSubInt(_array.length, i)
mod: false" pathCondition="true" pathConditionChanged="false" initiallyValid="true">
               <branchCondition name="and(lt(index_1Before_LOOP,Z(0(#))),or(gt(index_1Before_LOOP,Z(neglit(1(#)))),and(geq(iBefore_LOOP,Z(0(#))),gt(length(array),iBefore_LOOP))))" pathCondition="imp(geq(length(array),Z(0(#))),and(and(leq(index_1Before_LOOP,Z(neglit(1(#)))),or(geq(iBefore_LOOP,Z(0(#))),geq(index_1Before_LOOP,Z(0(#))))),or(geq(index_1Before_LOOP,Z(0(#))),gt(length(array),iBefore_LOOP))))" pathConditionChanged="true" branchCondition="and(lt(index_1Before_LOOP,Z(0(#))),or(gt(index_1Before_LOOP,Z(neglit(1(#)))),and(geq(iBefore_LOOP,Z(0(#))),gt(length(array),iBefore_LOOP))))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Body Preserves Invariant">
                  <loopCondition name="index_1&lt;0&amp;&amp;i&lt;_array.length" pathCondition="imp(geq(length(array),Z(0(#))),and(and(leq(index_1Before_LOOP,Z(neglit(1(#)))),or(geq(iBefore_LOOP,Z(0(#))),geq(index_1Before_LOOP,Z(0(#))))),or(geq(index_1Before_LOOP,Z(0(#))),gt(length(array),iBefore_LOOP))))" pathConditionChanged="false" blockOpened="false">
                     <branchStatement name="if (_filter.accept(_array[i]))" pathCondition="imp(geq(length(array),Z(0(#))),and(and(leq(index_1Before_LOOP,Z(neglit(1(#)))),or(geq(iBefore_LOOP,Z(0(#))),geq(index_1Before_LOOP,Z(0(#))))),or(geq(index_1Before_LOOP,Z(0(#))),gt(length(array),iBefore_LOOP))))" pathConditionChanged="false" blockOpened="true">
                     </branchStatement>
                  </loopCondition>
               </branchCondition>
               <branchCondition name="and(or(lt(index_1Before_LOOP,Z(0(#))),and(geq(iBefore_LOOP,Z(0(#))),geq(length(array),iBefore_LOOP))),or(gt(index_1Before_LOOP,Z(neglit(1(#)))),and(geq(iBefore_LOOP,Z(0(#))),equals(length(array),iBefore_LOOP))))" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(or(geq(iBefore_LOOP,Z(0(#))),geq(index_1Before_LOOP,Z(0(#)))),or(geq(iBefore_LOOP,Z(0(#))),leq(index_1Before_LOOP,Z(neglit(1(#)))))),or(geq(index_1Before_LOOP,Z(0(#))),equals(length(array),iBefore_LOOP))),or(leq(index_1Before_LOOP,Z(neglit(1(#)))),geq(length(array),iBefore_LOOP))))" pathConditionChanged="true" branchCondition="and(or(lt(index_1Before_LOOP,Z(0(#))),and(geq(iBefore_LOOP,Z(0(#))),geq(length(array),iBefore_LOOP))),or(gt(index_1Before_LOOP,Z(neglit(1(#)))),and(geq(iBefore_LOOP,Z(0(#))),equals(length(array),iBefore_LOOP))))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Use Case">
                  <statement name="return i;" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(or(geq(iBefore_LOOP,Z(0(#))),geq(index_1Before_LOOP,Z(0(#)))),or(geq(iBefore_LOOP,Z(0(#))),leq(index_1Before_LOOP,Z(neglit(1(#)))))),or(geq(index_1Before_LOOP,Z(0(#))),equals(length(array),iBefore_LOOP))),or(leq(index_1Before_LOOP,Z(neglit(1(#)))),geq(length(array),iBefore_LOOP))))" pathConditionChanged="false">
                     <branchCondition name="gt(index_1Before_LOOP,Z(neglit(1(#))))" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(and(geq(index_1Before_LOOP,Z(0(#))),or(geq(iBefore_LOOP,Z(0(#))),geq(index_1Before_LOOP,Z(0(#))))),or(geq(iBefore_LOOP,Z(0(#))),leq(index_1Before_LOOP,Z(neglit(1(#)))))),or(geq(index_1Before_LOOP,Z(0(#))),equals(length(array),iBefore_LOOP))),or(leq(index_1Before_LOOP,Z(neglit(1(#)))),geq(length(array),iBefore_LOOP))))" pathConditionChanged="true" branchCondition="gt(index_1Before_LOOP,Z(neglit(1(#))))" mergedBranchCondition="false" isBranchConditionComputed="true">
                        <methodReturn name="&lt;return of indexOf&gt;" signature="&lt;return of ArrayUtil.indexOf(_array,_filter)&gt;" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(and(geq(index_1Before_LOOP,Z(0(#))),or(geq(iBefore_LOOP,Z(0(#))),geq(index_1Before_LOOP,Z(0(#))))),or(geq(iBefore_LOOP,Z(0(#))),leq(index_1Before_LOOP,Z(neglit(1(#)))))),or(geq(index_1Before_LOOP,Z(0(#))),equals(length(array),iBefore_LOOP))),or(leq(index_1Before_LOOP,Z(neglit(1(#)))),geq(length(array),iBefore_LOOP))))" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="imp(geq(length(array),Z(0(#))),and(and(and(and(geq(index_1Before_LOOP,Z(0(#))),or(geq(iBefore_LOOP,Z(0(#))),geq(index_1Before_LOOP,Z(0(#))))),or(geq(iBefore_LOOP,Z(0(#))),leq(index_1Before_LOOP,Z(neglit(1(#)))))),or(geq(index_1Before_LOOP,Z(0(#))),equals(length(array),iBefore_LOOP))),or(leq(index_1Before_LOOP,Z(neglit(1(#)))),geq(length(array),iBefore_LOOP))))">
                           <termination name="&lt;end&gt;" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(and(geq(index_1Before_LOOP,Z(0(#))),or(geq(iBefore_LOOP,Z(0(#))),geq(index_1Before_LOOP,Z(0(#))))),or(geq(iBefore_LOOP,Z(0(#))),leq(index_1Before_LOOP,Z(neglit(1(#)))))),or(geq(index_1Before_LOOP,Z(0(#))),equals(length(array),iBefore_LOOP))),or(leq(index_1Before_LOOP,Z(neglit(1(#)))),geq(length(array),iBefore_LOOP))))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                           </termination>
                        </methodReturn>
                     </branchCondition>
                     <branchCondition name="lt(index_1Before_LOOP,Z(0(#)))" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(and(leq(index_1Before_LOOP,Z(neglit(1(#)))),or(geq(iBefore_LOOP,Z(0(#))),geq(index_1Before_LOOP,Z(0(#))))),or(geq(iBefore_LOOP,Z(0(#))),leq(index_1Before_LOOP,Z(neglit(1(#)))))),or(geq(index_1Before_LOOP,Z(0(#))),equals(length(array),iBefore_LOOP))),or(leq(index_1Before_LOOP,Z(neglit(1(#)))),geq(length(array),iBefore_LOOP))))" pathConditionChanged="true" branchCondition="lt(index_1Before_LOOP,Z(0(#)))" mergedBranchCondition="false" isBranchConditionComputed="true">
                        <methodReturn name="&lt;return of indexOf&gt;" signature="&lt;return of ArrayUtil.indexOf(_array,_filter)&gt;" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(and(leq(index_1Before_LOOP,Z(neglit(1(#)))),or(geq(iBefore_LOOP,Z(0(#))),geq(index_1Before_LOOP,Z(0(#))))),or(geq(iBefore_LOOP,Z(0(#))),leq(index_1Before_LOOP,Z(neglit(1(#)))))),or(geq(index_1Before_LOOP,Z(0(#))),equals(length(array),iBefore_LOOP))),or(leq(index_1Before_LOOP,Z(neglit(1(#)))),geq(length(array),iBefore_LOOP))))" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="imp(geq(length(array),Z(0(#))),and(and(and(and(leq(index_1Before_LOOP,Z(neglit(1(#)))),or(geq(iBefore_LOOP,Z(0(#))),geq(index_1Before_LOOP,Z(0(#))))),or(geq(iBefore_LOOP,Z(0(#))),leq(index_1Before_LOOP,Z(neglit(1(#)))))),or(geq(index_1Before_LOOP,Z(0(#))),equals(length(array),iBefore_LOOP))),or(leq(index_1Before_LOOP,Z(neglit(1(#)))),geq(length(array),iBefore_LOOP))))">
                           <termination name="&lt;end&gt;" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(and(leq(index_1Before_LOOP,Z(neglit(1(#)))),or(geq(iBefore_LOOP,Z(0(#))),geq(index_1Before_LOOP,Z(0(#))))),or(geq(iBefore_LOOP,Z(0(#))),leq(index_1Before_LOOP,Z(neglit(1(#)))))),or(geq(index_1Before_LOOP,Z(0(#))),equals(length(array),iBefore_LOOP))),or(leq(index_1Before_LOOP,Z(neglit(1(#)))),geq(length(array),iBefore_LOOP))))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                           </termination>
                        </methodReturn>
                     </branchCondition>
                  </statement>
               </branchCondition>
            </loopInvariant>
         </statement>
      </statement>
      <methodReturnEntry path="/0/0/0/0/1/0/0/0"/>
      <methodReturnEntry path="/0/0/0/0/1/0/1/0"/>
   </methodCall>
   <terminationEntry path="/0/0/0/0/1/0/0/0/0"/>
   <terminationEntry path="/0/0/0/0/1/0/1/0/0"/>
</start>
