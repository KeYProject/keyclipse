\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Apr 14 16:22:23 CEST 2015
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_COMPLETION
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=50000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=wdChecks-wdChecks\\:off , initialisation-initialisation\\:disableStaticInitialisation , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , runtimeExceptions-runtimeExceptions\\:allow , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , modelFields-modelFields\\:treatAsAxiom , assertions-assertions\\:safe , bigint-bigint\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "src";

\proofObligation "#Proof Obligation Settings
#Tue Apr 14 16:22:23 CEST 2015
name=ParallelGcd[ParallelGcd\\:\\:gcd(int,int)].JML model_behavior operation contract.0
contract=ParallelGcd[ParallelGcd\\:\\:gcd(int,int)].JML model_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "kirsten" ) (keyVersion "cff8f4a4a6ee2cb69b3b86a1b1f5c8f0f9d293f4"))

(autoModeTime "2171")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "heapAtPre"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andRight" (formula "6"))
(branch "Case 1"
   (rule "inEqSimp_ltRight" (formula "6"))
   (rule "add_zero_right" (formula "1") (term "0"))
   (rule "polySimp_mulComm0" (formula "1") (term "0"))
   (rule "inEqSimp_ltToLeq" (formula "5"))
   (rule "add_zero_right" (formula "5") (term "0"))
   (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
   (rule "inEqSimp_ltToLeq" (formula "6"))
   (rule "add_zero_right" (formula "6") (term "0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
   (rule "inEqSimp_invertInEq1" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
   (rule "times_zero_2" (formula "1") (term "1"))
   (rule "polySimp_elimOne" (formula "1") (term "0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "5"))
   (rule "polySimp_mulLiterals" (formula "5") (term "0"))
   (rule "polySimp_elimOne" (formula "5") (term "0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "6"))
   (rule "polySimp_mulLiterals" (formula "6") (term "0"))
   (rule "polySimp_elimOne" (formula "6") (term "0"))
   (rule "Contract_axiom_for_gcd_in_ParallelGcd" (formula "1") (term "0") (inst "i=i"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")) (ifInst ""  (formula "4")))
   (rule "translateJavaMod" (formula "1") (term "0,0,1,0,0,0,1,1,1,1"))
   (rule "translateJavaMod" (formula "1") (term "0,0,1,1"))
   (rule "translateJavaMod" (formula "1") (term "0,0,1,1,1"))
   (rule "translateJavaMod" (formula "1") (term "0,1,1,0,0,0,1,1,1,1"))
   (rule "translateJavaSubInt" (formula "1") (term "3,1,1,0,1,1,1,1,1,1"))
   (rule "translateJavaSubInt" (formula "1") (term "2,1,1,1,1,1,1,1,1,1"))
   (rule "eqSymm" (formula "1") (term "0,0,1,1,1,1,1"))
   (rule "eqSymm" (formula "1") (term "1,0,1,1,1,1,1,1"))
   (rule "eqSymm" (formula "1") (term "1,1,1,1,1,1,1,1"))
   (rule "polySimp_elimSub" (formula "1") (term "3,0,1,0,1,1,1,1,1,1"))
   (rule "polySimp_elimSub" (formula "1") (term "2,0,1,1,1,1,1,1,1,1"))
   (rule "polySimp_addComm0" (formula "1") (term "3,0,1,0,1,1,1,1,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "1,1,0,0,0,0,1,1,1,1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,1,0,0,0,0,1,1,1,1"))
   (rule "polySimp_addComm1" (formula "1") (term "0,1,1,0,0,0,0,1,1,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,0,0,0,1,1,1,1"))
   (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0,1,1,1,1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,0,1,1,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0"))
   (rule "add_zero_right" (formula "1") (term "0,1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,1,1,1,1,1,1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,1,1,1,1,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1"))
   (rule "add_zero_right" (formula "1") (term "0,0,1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,1,1,1,1,1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,1,1,1,1,1,1"))
   (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1,1,1,1,1,1"))
   (rule "jmod_axiom" (formula "1") (term "0,0,1,0,0,0,1,1,1,1"))
   (rule "polySimp_mulComm1" (formula "1") (term "1,0,0,1,0,0,0,1,1,1,1"))
   (rule "jmod_axiom" (formula "1") (term "0,0,1,1"))
   (rule "polySimp_mulComm1" (formula "1") (term "1,0,0,1,1"))
   (rule "jmod_axiom" (formula "1") (term "0,0,1,1,1"))
   (rule "polySimp_mulComm1" (formula "1") (term "1,0,0,1,1,1"))
   (rule "jmod_axiom" (formula "1") (term "0,1,1,0,0,0,1,1,1,1"))
   (rule "polySimp_mulComm1" (formula "1") (term "1,0,1,1,0,0,0,1,1,1,1"))
   (rule "polySimp_sepNegMonomial" (formula "1") (term "0,1,0,0,0,1,1,1,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,0,0,0,1,1,1,1"))
   (rule "polySimp_elimOne" (formula "1") (term "0,0,1,0,0,0,1,1,1,1"))
   (rule "polySimp_sepNegMonomial" (formula "1") (term "0,1,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,1"))
   (rule "polySimp_elimOne" (formula "1") (term "0,0,1,1"))
   (rule "polySimp_sepNegMonomial" (formula "1") (term "0,1,1,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,1,1"))
   (rule "polySimp_elimOne" (formula "1") (term "0,0,1,1,1"))
   (rule "polySimp_sepNegMonomial" (formula "1") (term "1,1,0,0,0,1,1,1,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0,1,1,0,0,0,1,1,1,1"))
   (rule "polySimp_elimOne" (formula "1") (term "0,1,1,0,0,0,1,1,1,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "1,1,0,0,0,0,1,1,1,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0,1,1,0,0,0,0,1,1,1,1"))
   (rule "polySimp_elimOne" (formula "1") (term "0,1,1,0,0,0,0,1,1,1,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
   (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "6"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1"))
   (rule "polySimp_elimOne" (formula "1") (term "0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "0,0"))
   (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "7"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "2"))
   (rule "andLeft" (formula "3"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "5"))
   (rule "notLeft" (formula "4"))
   (rule "andLeft" (formula "5"))
   (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,0"))
   (rule "polySimp_elimOne" (formula "13") (term "0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
   (rule "polySimp_rightDist" (formula "6") (term "1,0"))
   (rule "mul_literals" (formula "6") (term "0,1,0"))
   (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0"))
   (rule "polySimp_elimOne" (formula "6") (term "1,1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0"))
   (rule "polySimp_mulLiterals" (formula "5") (term "0,0"))
   (rule "polySimp_elimOne" (formula "5") (term "0,0"))
   (rule "inEqSimp_contradInEq1" (formula "7") (ifseqformula "1"))
   (rule "qeq_literals" (formula "7") (term "0"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "closeFalse" (formula "7"))
)
(branch "Case 2"
   (rule "andRight" (formula "6"))
   (branch "Case 1"
      (rule "translateJavaMod" (formula "6") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "5"))
      (rule "add_zero_right" (formula "5") (term "0"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
      (rule "inEqSimp_ltToLeq" (formula "4"))
      (rule "add_zero_right" (formula "4") (term "0"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
      (rule "jmod_axiom" (formula "6") (term "0"))
      (rule "polySimp_mulComm1" (formula "6") (term "1,0"))
      (rule "polySimp_sepNegMonomial" (formula "6"))
      (rule "polySimp_mulLiterals" (formula "6") (term "0"))
      (rule "polySimp_elimOne" (formula "6") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "5"))
      (rule "polySimp_mulLiterals" (formula "5") (term "0"))
      (rule "polySimp_elimOne" (formula "5") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "4"))
      (rule "polySimp_mulLiterals" (formula "4") (term "0"))
      (rule "polySimp_elimOne" (formula "4") (term "0"))
      (rule "Contract_axiom_for_gcd_in_ParallelGcd" (formula "6") (term "1,0") (inst "i=i"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")) (ifInst ""  (formula "3")))
      (rule "translateJavaMod" (formula "1") (term "0,0,1,1"))
      (rule "translateJavaMod" (formula "1") (term "0,0,1,1,1"))
      (rule "translateJavaMod" (formula "1") (term "0,1,1,0,0,0,1,1,1,1"))
      (rule "translateJavaMod" (formula "1") (term "0,0,1,0,0,0,1,1,1,1"))
      (rule "translateJavaSubInt" (formula "1") (term "2,1,1,1,1,1,1,1,1,1"))
      (rule "translateJavaSubInt" (formula "1") (term "3,1,1,0,1,1,1,1,1,1"))
      (rule "eqSymm" (formula "1") (term "0,0,1,1,1,1,1"))
      (rule "eqSymm" (formula "1") (term "1,1,1,1,1,1,1,1"))
      (rule "eqSymm" (formula "1") (term "1,0,1,1,1,1,1,1"))
      (rule "polySimp_elimSub" (formula "1") (term "2,0,1,1,1,1,1,1,1,1"))
      (rule "polySimp_elimSub" (formula "1") (term "3,0,1,0,1,1,1,1,1,1"))
      (rule "polySimp_addComm0" (formula "1") (term "3,0,1,0,1,1,1,1,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "1,1,0,0,0,0,1,1,1,1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,1,0,0,0,0,1,1,1,1"))
      (rule "polySimp_addComm1" (formula "1") (term "0,1,1,0,0,0,0,1,1,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,0,0,0,1,1,1,1"))
      (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0,1,1,1,1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,0,1,1,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1"))
      (rule "add_zero_right" (formula "1") (term "0,0,1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0"))
      (rule "add_zero_right" (formula "1") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,1,1,1,1,1,1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,1,1,1,1,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,1,1,1,1,1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,1,1,1,1,1,1"))
      (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1,1,1,1,1,1"))
      (rule "jmod_axiom" (formula "1") (term "0,0,1,1"))
      (rule "polySimp_mulComm1" (formula "1") (term "1,0,0,1,1"))
      (rule "jmod_axiom" (formula "1") (term "0,0,1,1,1"))
      (rule "polySimp_mulComm1" (formula "1") (term "1,0,0,1,1,1"))
      (rule "jmod_axiom" (formula "1") (term "0,1,1,0,0,0,1,1,1,1"))
      (rule "polySimp_mulComm1" (formula "1") (term "1,0,1,1,0,0,0,1,1,1,1"))
      (rule "jmod_axiom" (formula "1") (term "0,0,1,0,0,0,1,1,1,1"))
      (rule "polySimp_mulComm1" (formula "1") (term "1,0,0,1,0,0,0,1,1,1,1"))
      (rule "polySimp_sepNegMonomial" (formula "1") (term "0,1,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,1"))
      (rule "polySimp_elimOne" (formula "1") (term "0,0,1,1"))
      (rule "replace_known_right" (formula "1") (term "0,1,1") (ifseqformula "7"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "1"))
      (rule "polySimp_mulLiterals" (formula "6") (term "0,1"))
      (rule "polySimp_elimOne" (formula "6") (term "0,1"))
      (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "5"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "inEqSimp_leqRight" (formula "6"))
      (rule "times_zero_1" (formula "1") (term "1,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_invertInEq1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "times_zero_2" (formula "1") (term "1"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "5"))
      (rule "qeq_literals" (formula "1") (term "0"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "Case 2"
      (rule "andRight" (formula "6"))
      (branch "Case 1"
         (rule "translateJavaMod" (formula "6") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "5"))
         (rule "add_zero_right" (formula "5") (term "0"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
         (rule "inEqSimp_ltToLeq" (formula "4"))
         (rule "add_zero_right" (formula "4") (term "0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
         (rule "jmod_axiom" (formula "6") (term "0"))
         (rule "polySimp_mulComm1" (formula "6") (term "1,0"))
         (rule "polySimp_sepNegMonomial" (formula "6"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0"))
         (rule "polySimp_elimOne" (formula "6") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "5"))
         (rule "polySimp_mulLiterals" (formula "5") (term "0"))
         (rule "polySimp_elimOne" (formula "5") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "4"))
         (rule "polySimp_mulLiterals" (formula "4") (term "0"))
         (rule "polySimp_elimOne" (formula "4") (term "0"))
         (rule "Contract_axiom_for_gcd_in_ParallelGcd" (formula "6") (term "1,0") (inst "i=i"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")) (ifInst ""  (formula "3")))
         (rule "translateJavaMod" (formula "1") (term "0,0,1,1"))
         (rule "translateJavaMod" (formula "1") (term "0,0,1,1,1"))
         (rule "translateJavaMod" (formula "1") (term "0,1,1,0,0,0,1,1,1,1"))
         (rule "translateJavaMod" (formula "1") (term "0,0,1,0,0,0,1,1,1,1"))
         (rule "translateJavaSubInt" (formula "1") (term "2,1,1,1,1,1,1,1,1,1"))
         (rule "translateJavaSubInt" (formula "1") (term "3,1,1,0,1,1,1,1,1,1"))
         (rule "eqSymm" (formula "1") (term "0,0,1,1,1,1,1"))
         (rule "eqSymm" (formula "1") (term "1,1,1,1,1,1,1,1"))
         (rule "eqSymm" (formula "1") (term "1,0,1,1,1,1,1,1"))
         (rule "polySimp_elimSub" (formula "1") (term "2,0,1,1,1,1,1,1,1,1"))
         (rule "polySimp_elimSub" (formula "1") (term "3,0,1,0,1,1,1,1,1,1"))
         (rule "polySimp_addComm0" (formula "1") (term "3,0,1,0,1,1,1,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "1,1,0,0,0,0,1,1,1,1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,1,0,0,0,0,1,1,1,1"))
         (rule "polySimp_addComm1" (formula "1") (term "0,1,1,0,0,0,0,1,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,1,1,1,1,1,1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,1,1,1,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1"))
         (rule "add_zero_right" (formula "1") (term "0,0,1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,0,0,0,1,1,1,1"))
         (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0,1,1,1,1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,0,1,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0"))
         (rule "add_zero_right" (formula "1") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,1,1,1,1,1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,1,1,1,1,1,1"))
         (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1,1,1,1,1,1"))
         (rule "jmod_axiom" (formula "1") (term "0,0,1,1"))
         (rule "polySimp_mulComm1" (formula "1") (term "1,0,0,1,1"))
         (rule "jmod_axiom" (formula "1") (term "0,0,1,1,1"))
         (rule "polySimp_mulComm1" (formula "1") (term "1,0,0,1,1,1"))
         (rule "jmod_axiom" (formula "1") (term "0,1,1,0,0,0,1,1,1,1"))
         (rule "polySimp_mulComm1" (formula "1") (term "1,0,1,1,0,0,0,1,1,1,1"))
         (rule "jmod_axiom" (formula "1") (term "0,0,1,0,0,0,1,1,1,1"))
         (rule "polySimp_mulComm1" (formula "1") (term "1,0,0,1,0,0,0,1,1,1,1"))
         (rule "polySimp_sepNegMonomial" (formula "1") (term "0,1,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "0,0,1,1"))
         (rule "polySimp_sepNegMonomial" (formula "1") (term "0,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "0,0,1,1,1"))
         (rule "replace_known_right" (formula "1") (term "0,1,1,1") (ifseqformula "7"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,0"))
         (rule "polySimp_elimOne" (formula "6") (term "0,0"))
         (rule "replace_known_left" (formula "6") (term "0") (ifseqformula "4"))
         (builtin "One Step Simplification" (formula "6"))
         (rule "inEqSimp_leqRight" (formula "6"))
         (rule "times_zero_1" (formula "1") (term "1,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "inEqSimp_invertInEq1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "times_zero_2" (formula "1") (term "1"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "6"))
         (rule "qeq_literals" (formula "1") (term "0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "Case 2"
         (rule "andRight" (formula "6"))
         (branch "Case 1"
            (rule "notRight" (formula "6"))
            (rule "shift_paren_and" (formula "1") (term "0,0") (userinteraction))
            (rule "shift_paren_and" (formula "1") (term "0") (userinteraction))
            (rule "exLeft" (formula "1") (inst "sk=i_0"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "Contract_axiom_for_gcd_in_ParallelGcd" (formula "3") (term "0") (inst "i=i") (userinteraction))
            (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "10") (userinteraction))
            (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "11")) (ifInst ""  (formula "7")) (ifInst ""  (formula "8")))
            (rule "andLeft" (formula "3"))
            (rule "andLeft" (formula "4"))
            (rule "andLeft" (formula "5"))
            (rule "andLeft" (formula "6"))
            (rule "andLeft" (formula "7"))
            (rule "notLeft" (formula "6"))
            (rule "andLeft" (formula "7"))
            (rule "shift_paren_and" (formula "17") (term "0,0") (userinteraction))
            (rule "shift_paren_and" (formula "17") (term "0") (userinteraction))
            (rule "instEx" (formula "2") (term "0") (ifseqformula "17") (userinteraction))
            (rule "replace_known_left" (formula "17") (term "0,0,0,0") (ifseqformula "1") (userinteraction))
            (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "2")) (ifInst ""  (formula "9")) (ifInst ""  (formula "10")) (ifInst ""  (formula "11")))
            (rule "closeTrue" (formula "17") (userinteraction))
         )
         (branch "Case 2"
            (rule "andRight" (formula "6"))
            (branch "Case 1"
               (rule "impRight" (formula "6"))
               (rule "eqSymm" (formula "1"))
               (rule "inEqSimp_ltToLeq" (formula "6"))
               (rule "add_zero_right" (formula "6") (term "0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
               (rule "inEqSimp_ltToLeq" (formula "5"))
               (rule "add_zero_right" (formula "5") (term "0"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
               (rule "applyEq" (formula "7") (term "3,0") (ifseqformula "1"))
               (rule "applyEq" (formula "6") (term "0,1,0") (ifseqformula "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "5"))
               (rule "polySimp_mulLiterals" (formula "5") (term "0"))
               (rule "polySimp_elimOne" (formula "5") (term "0"))
               (rule "Contract_axiom_for_gcd_in_ParallelGcd" (formula "6") (term "0") (inst "i=i"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "7")))
               (rule "notLeft" (formula "1"))
               (rule "inEqSimp_ltRight" (formula "6"))
               (rule "add_zero_right" (formula "1") (term "0"))
               (rule "polySimp_mulComm0" (formula "1") (term "0"))
               (rule "inEqSimp_invertInEq1" (formula "1"))
               (rule "times_zero_2" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "6"))
               (rule "qeq_literals" (formula "1") (term "0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "Case 2"
               (rule "andRight" (formula "6"))
               (branch "Case 1"
                  (rule "impRight" (formula "6"))
                  (rule "translateJavaSubInt" (formula "7") (term "3,1") (userinteraction))
                  (rule "sub" (formula "7") (term "3,1") (userinteraction))
                  (rule "eqSymm" (formula "7"))
                  (rule "polySimp_elimNeg" (formula "7") (term "1,3,0"))
                  (rule "polySimp_addComm0" (formula "7") (term "3,0"))
                  (rule "inEqSimp_ltToLeq" (formula "5"))
                  (rule "add_zero_right" (formula "5") (term "0"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "6"))
                  (rule "add_zero_right" (formula "6") (term "0"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                  (rule "polySimp_elimOne" (formula "5") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                  (rule "polySimp_elimOne" (formula "6") (term "0"))
                  (rule "Contract_axiom_for_gcd_in_ParallelGcd" (formula "7") (term "1") (inst "i=i"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")) (ifInst ""  (formula "4")))
                  (rule "translateJavaMod" (formula "1") (term "0,0,1,1"))
                  (rule "translateJavaMod" (formula "1") (term "0,0,1,1,1"))
                  (rule "translateJavaMod" (formula "1") (term "0,1,1,0,0,0,1,1,1,1"))
                  (rule "translateJavaMod" (formula "1") (term "0,0,1,0,0,0,1,1,1,1"))
                  (rule "translateJavaSubInt" (formula "1") (term "2,1,1,1,1,1,1,1,1,1"))
                  (rule "translateJavaSubInt" (formula "1") (term "3,1,1,0,1,1,1,1,1,1"))
                  (rule "eqSymm" (formula "1") (term "0,0,1,1,1,1,1"))
                  (rule "eqSymm" (formula "1") (term "1,1,1,1,1,1,1,1"))
                  (rule "eqSymm" (formula "1") (term "1,0,1,1,1,1,1,1"))
                  (rule "polySimp_elimSub" (formula "1") (term "2,0,1,1,1,1,1,1,1,1"))
                  (rule "polySimp_elimSub" (formula "1") (term "3,0,1,0,1,1,1,1,1,1"))
                  (rule "polySimp_addComm0" (formula "1") (term "3,0,1,0,1,1,1,1,1,1"))
                  (rule "replace_known_right" (formula "1") (term "1,0,1,1,1,1,1,1") (ifseqformula "8"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,1,1,1,1,1,1"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1,1,1,1,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0"))
                  (rule "add_zero_right" (formula "1") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1"))
                  (rule "add_zero_right" (formula "1") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "1,1,0,0,0,0,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,1,0,0,0,0,1,1,1,1"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,1,1,0,0,0,0,1,1,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,0,0,0,1,1,1,1"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,0,1,1,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,1,1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,1,1,1,1,1,1"))
                  (rule "jmod_axiom" (formula "1") (term "0,0,1,0,0,0,1,1,1,1"))
                  (rule "polySimp_mulComm1" (formula "1") (term "1,0,0,1,0,0,0,1,1,1,1"))
                  (rule "jmod_axiom" (formula "1") (term "0,0,1,1,1"))
                  (rule "polySimp_mulComm1" (formula "1") (term "1,0,0,1,1,1"))
                  (rule "jmod_axiom" (formula "1") (term "0,1,1,0,0,0,1,1,1,1"))
                  (rule "polySimp_mulComm1" (formula "1") (term "1,0,1,1,0,0,0,1,1,1,1"))
                  (rule "jmod_axiom" (formula "1") (term "0,0,1,1"))
                  (rule "polySimp_mulComm1" (formula "1") (term "1,0,0,1,1"))
                  (rule "polySimp_sepNegMonomial" (formula "1") (term "0,1,0,0,0,1,1,1,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,0,0,0,1,1,1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,0,1,0,0,0,1,1,1,1"))
                  (rule "polySimp_sepNegMonomial" (formula "1") (term "0,1,1,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,0,1,1,1"))
                  (rule "polySimp_sepNegMonomial" (formula "1") (term "1,1,0,0,0,1,1,1,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,1,1,0,0,0,1,1,1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,1,1,0,0,0,1,1,1,1"))
                  (rule "polySimp_sepNegMonomial" (formula "1") (term "0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,0,1,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0,1,1,1,1,1,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,1,1,1,1,1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,0,0,1,1,1,1,1,1"))
                  (rule "replace_known_left" (formula "1") (term "0,0,1,1,1,1,1,1") (ifseqformula "2"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "0,0"))
                  (rule "polySimp_elimOne" (formula "7") (term "0,0"))
                  (rule "replace_known_left" (formula "7") (term "0") (ifseqformula "5"))
                  (builtin "One Step Simplification" (formula "7"))
                  (rule "inEqSimp_leqRight" (formula "7"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_invertInEq1" (formula "1"))
                  (rule "times_zero_2" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "7") (term "0"))
                  (builtin "One Step Simplification" (formula "7"))
                  (rule "closeFalse" (formula "7"))
               )
               (branch "Case 2"
                  (rule "impRight" (formula "6"))
                  (rule "translateJavaSubInt" (formula "7") (term "2,1") (userinteraction))
                  (rule "sub" (formula "7") (term "2,1") (userinteraction))
                  (rule "eqSymm" (formula "7"))
                  (rule "polySimp_elimNeg" (formula "7") (term "1,2,0"))
                  (rule "inEqSimp_ltToLeq" (formula "5"))
                  (rule "add_zero_right" (formula "5") (term "0"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "6"))
                  (rule "add_zero_right" (formula "6") (term "0"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                  (rule "polySimp_elimOne" (formula "5") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                  (rule "polySimp_elimOne" (formula "6") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "1"))
                  (rule "mul_literals" (formula "6") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "6") (term "0"))
                  (rule "add_literals" (formula "6") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                  (rule "mul_literals" (formula "6") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "6"))
                  (rule "leq_literals" (formula "5") (term "0"))
                  (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "Contract_axiom_for_gcd_in_ParallelGcd" (formula "7") (term "1") (inst "i=i"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")) (ifInst ""  (formula "4")))
                  (rule "translateJavaMod" (formula "1") (term "0,0,1,1"))
                  (rule "translateJavaMod" (formula "1") (term "0,0,1,1,1"))
                  (rule "translateJavaMod" (formula "1") (term "0,1,1,0,0,0,1,1,1,1"))
                  (rule "translateJavaMod" (formula "1") (term "0,0,1,0,0,0,1,1,1,1"))
                  (rule "translateJavaSubInt" (formula "1") (term "2,1,1,1,1,1,1,1,1,1"))
                  (rule "translateJavaSubInt" (formula "1") (term "3,1,1,0,1,1,1,1,1,1"))
                  (rule "eqSymm" (formula "1") (term "0,0,1,1,1,1,1"))
                  (rule "eqSymm" (formula "1") (term "1,1,1,1,1,1,1,1"))
                  (rule "eqSymm" (formula "1") (term "1,0,1,1,1,1,1,1"))
                  (rule "polySimp_elimSub" (formula "1") (term "2,0,1,1,1,1,1,1,1,1"))
                  (rule "replace_known_right" (formula "1") (term "1,1,1,1,1,1,1,1") (ifseqformula "8"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "polySimp_elimSub" (formula "1") (term "3,0,1,0,1,1,1,1,1,1"))
                  (rule "polySimp_addComm0" (formula "1") (term "3,0,1,0,1,1,1,1,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "1,1,0,0,0,0,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,1,0,0,0,0,1,1,1,1"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,1,1,0,0,0,0,1,1,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,1,1,1,1,1,1"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1,1,1,1,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,0,0,0,1,1,1,1"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,0,1,1,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1"))
                  (rule "add_zero_right" (formula "1") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,1,1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,1,1,1,1,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0"))
                  (rule "add_zero_right" (formula "1") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0"))
                  (rule "jmod_axiom" (formula "1") (term "0,0,1,1,1"))
                  (rule "polySimp_mulComm1" (formula "1") (term "1,0,0,1,1,1"))
                  (rule "jmod_axiom" (formula "1") (term "0,0,1,0,0,0,1,1,1,1"))
                  (rule "polySimp_mulComm1" (formula "1") (term "1,0,0,1,0,0,0,1,1,1,1"))
                  (rule "jmod_axiom" (formula "1") (term "0,0,1,1"))
                  (rule "polySimp_mulComm1" (formula "1") (term "1,0,0,1,1"))
                  (rule "jmod_axiom" (formula "1") (term "0,1,1,0,0,0,1,1,1,1"))
                  (rule "polySimp_mulComm1" (formula "1") (term "1,0,1,1,0,0,0,1,1,1,1"))
                  (rule "polySimp_sepNegMonomial" (formula "1") (term "0,1,1,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,0,1,1,1"))
                  (rule "polySimp_sepNegMonomial" (formula "1") (term "0,1,0,0,0,1,1,1,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,0,0,0,1,1,1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,0,1,0,0,0,1,1,1,1"))
                  (rule "polySimp_sepNegMonomial" (formula "1") (term "0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,0,1,1"))
                  (rule "polySimp_sepNegMonomial" (formula "1") (term "1,1,0,0,0,1,1,1,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,1,1,0,0,0,1,1,1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,1,1,0,0,0,1,1,1,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "1,1,0,0,0,0,1,1,1,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,1,1,0,0,0,0,1,1,1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,1,1,0,0,0,0,1,1,1,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0,1,1,1,1,1,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,1,1,1,1,1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,0,0,1,1,1,1,1,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0,0,0,0,1,1,1,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,0,0,0,1,1,1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,0,0,0,0,0,1,1,1,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,1,1,1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,1,1,1,1,1,1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,1,1,1,1,1,1,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,1,1,1,1,1,1,1"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,1,1,1,1,1,1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1,0,1,1,1,1,1,1,1"))
                  (rule "replace_known_left" (formula "1") (term "0,1,1,1,1,1,1,1") (ifseqformula "2"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "7") (term "0,1"))
                  (rule "replace_known_left" (formula "7") (term "1") (ifseqformula "6"))
                  (builtin "One Step Simplification" (formula "7"))
                  (rule "inEqSimp_geqRight" (formula "7"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "6") (term "0"))
                  (builtin "One Step Simplification" (formula "6"))
                  (rule "closeFalse" (formula "6"))
               )
            )
         )
      )
   )
)
)

}
