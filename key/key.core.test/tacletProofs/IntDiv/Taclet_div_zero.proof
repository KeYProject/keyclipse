\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Nov 06 10:55:15 CET 2018
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:ban , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:treatAsAxiom , assertions-assertions\\:safe , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_COMPLETION
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_RESTRICTED
[Strategy]MaximumNumberOfAutomaticApplications=2000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[Strategy]Timeout=-1
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_OFF
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\proofObligation "#Proof Obligation Settings
#Tue Nov 06 10:55:15 CET 2018
name=div_zero
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proof {
(keyLog "0" (keyUser "bubel" ) (keyVersion "f1075eb6680025126f4eaec3641a5a45f8ba20a3"))

(autoModeTime "186")

(branch "dummy ID"
(rule "div_literals" (formula "1") (term "2,1") (newnames "f_divDenom"))
(rule "eqSymm" (formula "1"))
(rule "ifthenelse_negated" (formula "1") (term "0"))
(rule "div_axiom" (formula "1") (term "1") (inst "quotient=quotient_0"))
(rule "add_zero_right" (formula "1") (term "0,1,1,1,1"))
(rule "add_zero_right" (formula "1") (term "0,1,2,1,1"))
(rule "polySimp_mulComm0" (formula "1") (term "1,1,1,1,1"))
(rule "polySimp_mulComm0" (formula "1") (term "0,2,1,1"))
(rule "polySimp_mulComm0" (formula "1") (term "0,1,0,1"))
(rule "polySimp_mulComm0" (formula "1") (term "0,1,1,1"))
(rule "ifthenelse_split" (formula "2") (term "0"))
(branch "f_divDenom = 0 TRUE"
   (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "1"))
   (rule "concrete_or_1" (formula "2"))
   (rule "true_left" (formula "2"))
   (rule "applyEqRigid" (formula "2") (term "1,1") (ifseqformula "1"))
   (rule "div_literals" (formula "2") (term "1"))
   (rule "eqClose" (formula "2"))
   (rule "closeTrue" (formula "2"))
)
(branch "f_divDenom = 0 FALSE"
   (rule "eqSymm" (formula "3"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "2"))
   (rule "concrete_or_2" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
   (rule "ifthenelse_split_for" (formula "3"))
   (branch "f_divDenom >= 0 TRUE"
      (rule "inEqSimp_strengthen1" (formula "3") (ifseqformula "5"))
      (rule "add_zero_right" (formula "3") (term "1"))
      (rule "inEqSimp_contradEq7" (formula "5") (ifseqformula "3"))
      (rule "times_zero_1" (formula "5") (term "1,0,0"))
      (rule "add_zero_right" (formula "5") (term "0,0"))
      (rule "leq_literals" (formula "5") (term "0"))
      (rule "concrete_and_2" (formula "5"))
      (rule "false_right" (formula "5"))
      (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "2"))
      (rule "add_zero_right" (formula "4") (term "0"))
      (rule "polySimp_rightDist" (formula "4") (term "0"))
      (rule "mul_literals" (formula "4") (term "0,0"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
      (rule "polySimp_elimOne" (formula "4") (term "1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "4"))
      (rule "mul_literals" (formula "4") (term "1"))
      (rule "divide_inEq0" (formula "2") (inst "divY=quotient_0") (ifseqformula "3"))
      (rule "eqClose" (formula "2") (term "0"))
      (rule "concrete_impl_1" (formula "2"))
      (rule "div_one" (formula "2") (term "1,1,1"))
      (rule "qeq_literals" (formula "2") (term "0"))
      (rule "concrete_impl_1" (formula "2"))
      (rule "qeq_literals" (formula "2") (term "0"))
      (rule "concrete_impl_1" (formula "2"))
      (rule "inEqSimp_strengthen0" (formula "2") (ifseqformula "6"))
      (rule "add_zero_right" (formula "2") (term "1"))
      (rule "inEqSimp_contradEq3" (formula "6") (ifseqformula "2"))
      (rule "times_zero_1" (formula "6") (term "1,0,0"))
      (rule "add_zero_right" (formula "6") (term "0,0"))
      (rule "qeq_literals" (formula "6") (term "0"))
      (rule "concrete_and_2" (formula "6"))
      (rule "false_right" (formula "6"))
      (rule "divide_inEq6" (formula "3") (inst "divY=f_divDenom") (ifseqformula "2"))
      (rule "leq_literals" (formula "3") (term "0,1"))
      (rule "concrete_impl_1" (formula "3") (term "1"))
      (rule "qeq_literals" (formula "3") (term "0,1"))
      (rule "concrete_impl_1" (formula "3") (term "1"))
      (rule "div_literals" (formula "3") (term "1,1"))
      (rule "eqSymm" (formula "3") (term "0"))
      (rule "polySimp_mulComm0" (formula "3") (term "0,0"))
      (rule "eqClose" (formula "3") (term "0"))
      (rule "concrete_impl_1" (formula "3"))
      (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "5"))
      (rule "leq_literals" (formula "3") (term "0"))
      (rule "concrete_or_1" (formula "3"))
      (rule "true_left" (formula "3"))
      (rule "multiply_2_inEq1" (formula "2") (ifseqformula "4"))
      (rule "neg_literal" (formula "2") (term "0,0,0,1"))
      (rule "mul_literals" (formula "2") (term "0,0,1"))
      (rule "polySimp_elimOne" (formula "2") (term "1,1"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,0,1"))
      (rule "polySimp_mulComm0" (formula "2") (term "0"))
      (rule "polySimp_addComm1" (formula "2") (term "1"))
      (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "2"))
      (rule "polySimp_rightDist" (formula "6") (term "0,0"))
      (rule "mul_literals" (formula "6") (term "0,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0"))
      (rule "polySimp_elimOne" (formula "6") (term "1,0,0"))
      (rule "polySimp_addAssoc" (formula "6") (term "0"))
      (rule "polySimp_addComm1" (formula "6") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "6") (term "0"))
      (rule "add_literals" (formula "6") (term "1,1,0"))
      (rule "times_zero_1" (formula "6") (term "1,0"))
      (rule "add_zero_right" (formula "6") (term "0"))
      (rule "polySimp_addAssoc" (formula "6") (term "0"))
      (rule "add_literals" (formula "6") (term "0,0"))
      (rule "add_zero_left" (formula "6") (term "0"))
      (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "6"))
      (rule "qeq_literals" (formula "3") (term "0"))
      (rule "concrete_and_2" (formula "3"))
      (rule "closeFalse" (formula "3"))
   )
   (branch "f_divDenom >= 0 FALSE"
      (rule "inEqSimp_geqRight" (formula "4"))
      (rule "times_zero_1" (formula "1") (term "1,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "inEqSimp_contradEq3" (formula "5") (ifseqformula "1"))
      (rule "times_zero_1" (formula "5") (term "1,0,0"))
      (rule "add_zero_right" (formula "5") (term "0,0"))
      (rule "qeq_literals" (formula "5") (term "0"))
      (rule "concrete_and_2" (formula "5"))
      (rule "false_right" (formula "5"))
      (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "3"))
      (rule "add_zero_right" (formula "4") (term "0"))
      (rule "polySimp_rightDist" (formula "4") (term "0"))
      (rule "mul_literals" (formula "4") (term "0,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "4"))
      (rule "polySimp_mulLiterals" (formula "4") (term "0"))
      (rule "polySimp_elimOne" (formula "4") (term "0"))
      (rule "divide_inEq6" (formula "3") (inst "divY=quotient_0") (ifseqformula "1"))
      (rule "eqClose" (formula "3") (term "0"))
      (rule "concrete_impl_1" (formula "3"))
      (rule "leq_literals" (formula "3") (term "0"))
      (rule "concrete_impl_1" (formula "3"))
      (rule "qeq_literals" (formula "3") (term "0"))
      (rule "concrete_impl_1" (formula "3"))
      (rule "div_literals" (formula "3") (term "1"))
      (rule "inEqSimp_strengthen1" (formula "3") (ifseqformula "6"))
      (rule "add_zero_right" (formula "3") (term "1"))
      (rule "inEqSimp_contradEq7" (formula "6") (ifseqformula "3"))
      (rule "times_zero_1" (formula "6") (term "1,0,0"))
      (rule "add_zero_right" (formula "6") (term "0,0"))
      (rule "leq_literals" (formula "6") (term "0"))
      (rule "concrete_and_2" (formula "6"))
      (rule "false_right" (formula "6"))
      (rule "divide_inEq0" (formula "4") (inst "divY=f_divDenom") (ifseqformula "3"))
      (rule "div_one" (formula "4") (term "1,1,1,1"))
      (rule "qeq_literals" (formula "4") (term "0,1"))
      (rule "concrete_impl_1" (formula "4") (term "1"))
      (rule "qeq_literals" (formula "4") (term "0,1"))
      (rule "concrete_impl_1" (formula "4") (term "1"))
      (rule "eqSymm" (formula "4") (term "0"))
      (rule "polySimp_mulComm0" (formula "4") (term "0,0"))
      (rule "eqClose" (formula "4") (term "0"))
      (rule "concrete_impl_1" (formula "4"))
      (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "1"))
      (rule "leq_literals" (formula "4") (term "0"))
      (rule "concrete_or_1" (formula "4"))
      (rule "true_left" (formula "4"))
      (rule "multiply_2_inEq1" (formula "1") (ifseqformula "3"))
      (rule "neg_literal" (formula "1") (term "0,0,0,1"))
      (rule "mul_literals" (formula "1") (term "0,0,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,1"))
      (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "1"))
      (rule "polySimp_rightDist" (formula "6") (term "0,0"))
      (rule "mul_literals" (formula "6") (term "0,0,0"))
      (rule "polySimp_addAssoc" (formula "6") (term "0"))
      (rule "polySimp_addComm1" (formula "6") (term "0,0"))
      (rule "polySimp_pullOutFactor2b" (formula "6") (term "0"))
      (rule "add_literals" (formula "6") (term "1,1,0"))
      (rule "times_zero_1" (formula "6") (term "1,0"))
      (rule "add_zero_right" (formula "6") (term "0"))
      (rule "polySimp_addAssoc" (formula "6") (term "0"))
      (rule "add_literals" (formula "6") (term "0,0"))
      (rule "add_zero_left" (formula "6") (term "0"))
      (rule "inEqSimp_invertInEq1" (formula "6"))
      (rule "polySimp_mulLiterals" (formula "6") (term "0"))
      (rule "times_zero_2" (formula "6") (term "1"))
      (rule "polySimp_elimOne" (formula "6") (term "0"))
      (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "6"))
      (rule "qeq_literals" (formula "4") (term "0"))
      (rule "concrete_and_2" (formula "4"))
      (rule "closeFalse" (formula "4"))
   )
)
)

}
