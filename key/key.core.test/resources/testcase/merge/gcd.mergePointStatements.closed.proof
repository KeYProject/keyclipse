\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Apr 07 09:03:49 CEST 2017
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=\\#begboolean_equal_2\\#end,\\#begboolean_not_equal_1\\#end,\\#begboolean_not_equal_2\\#end,\\#begtrue_to_not_false\\#end,\\#begfalse_to_not_true\\#end,\\#begboolean_true_commute\\#end,\\#begboolean_false_commute\\#end,\\#begapply_eq_boolean\\#end,\\#begapply_eq_boolean_2\\#end,\\#begapply_eq_boolean_rigid\\#end,\\#begapply_eq_boolean_rigid_2\\#end,\\#begexpand_inByte\\#end,\\#begexpand_inChar\\#end,\\#begexpand_inShort\\#end,\\#begexpand_inInt\\#end,\\#begexpand_inLong\\#end,\\#begreplace_byte_MAX\\#end,\\#begreplace_byte_MIN\\#end,\\#begreplace_char_MAX\\#end,\\#begreplace_char_MIN\\#end,\\#begreplace_short_MAX\\#end,\\#begreplace_short_MIN\\#end,\\#begreplace_int_MAX\\#end,\\#begreplace_int_MIN\\#end,\\#begreplace_long_MAX\\#end,\\#begreplace_long_MIN\\#end,\\#begreplace_byte_RANGE\\#end,\\#begreplace_byte_HALFRANGE\\#end,\\#begreplace_short_RANGE\\#end,\\#begreplace_short_HALFRANGE\\#end,\\#begreplace_char_RANGE\\#end,\\#begreplace_int_RANGE\\#end,\\#begreplace_int_HALFRANGE\\#end,\\#begreplace_long_RANGE\\#end,\\#begreplace_long_HALFRANGE\\#end,\\#begtranslateJavaUnaryMinusInt\\#end,\\#begtranslateJavaUnaryMinusLong\\#end,\\#begtranslateJavaBitwiseNegation\\#end,\\#begtranslateJavaAddInt\\#end,\\#begtranslateJavaAddLong\\#end,\\#begtranslateJavaSubInt\\#end,\\#begtranslateJavaSubLong\\#end,\\#begtranslateJavaMulInt\\#end,\\#begtranslateJavaMulLong\\#end,\\#begtranslateJavaMod\\#end,\\#begtranslateJavaDivInt\\#end,\\#begtranslateJavaDivLong\\#end,\\#begtranslateJavaCastByte\\#end,\\#begtranslateJavaCastShort\\#end,\\#begtranslateJavaCastInt\\#end,\\#begtranslateJavaCastLong\\#end,\\#begtranslateJavaCastChar\\#end,\\#begtranslateJavaShiftRightInt\\#end,\\#begtranslateJavaShiftRightLong\\#end,\\#begtranslateJavaShiftLeftInt\\#end,\\#begtranslateJavaShiftLeftLong\\#end,\\#begtranslateJavaUnsignedShiftRightInt\\#end,\\#begtranslateJavaUnsignedShiftRightLong\\#end,\\#begtranslateJavaBitwiseOrInt\\#end,\\#begtranslateJavaBitwiseOrLong\\#end,\\#begtranslateJavaBitwiseAndInt\\#end,\\#begtranslateJavaBitwiseAndLong\\#end,\\#begtranslateJavaBitwiseXOrInt\\#end,\\#begtranslateJavaBitwiseXOrLong\\#end,\\#begcastDel\\#end,\\#begtypeEq\\#end,\\#begtypeEqDerived\\#end,\\#begtypeEqDerived2\\#end,\\#begtypeStatic\\#end,\\#begcloseType\\#end,\\#begcloseTypeSwitched\\#end,\\#begexact_instance_definition_int\\#end,\\#begexact_instance_definition_boolean\\#end,\\#begexact_instance_definition_null\\#end,\\#begexact_instance_for_interfaces_or_abstract_classes\\#end,\\#begclass_being_initialized_is_prepared\\#end,\\#beginitialized_class_is_prepared\\#end,\\#beginitialized_class_is_not_erroneous\\#end,\\#begclass_initialized_excludes_class_init_in_progress\\#end,\\#begclass_erroneous_excludes_class_in_init\\#end,\\#begerroneous_class_has_no_initialized_sub_class\\#end,\\#begsuperclasses_of_initialized_classes_are_prepared\\#end,\\#begelementOfEmpty\\#end,\\#begelementOfAllLocs\\#end,\\#begelementOfSingleton\\#end,\\#begelementOfUnion\\#end,\\#begelementOfIntersect\\#end,\\#begelementOfSetMinus\\#end,\\#begelementOfAllFields\\#end,\\#begelementOfAllObjects\\#end,\\#begelementOfArrayRange\\#end,\\#begelementOfFreshLocs\\#end,\\#begequalityToElementOf\\#end,\\#begsubsetToElementOf\\#end,\\#begdisjointToElementOf\\#end,\\#begcreatedInHeapToElementOf\\#end,\\#begelementOfEmptyEQ\\#end,\\#begelementOfAllLocsEQ\\#end,\\#begelementOfSingletonEQ\\#end,\\#begelementOfUnionEQ\\#end,\\#begelementOfIntersectEQ\\#end,\\#begelementOfSetMinusEQ\\#end,\\#begelementOfAllFieldsEQ\\#end,\\#begelementOfAllObjectsEQ\\#end,\\#begelementOfArrayRangeEQ\\#end,\\#begelementOfFreshLocsEQ\\#end,\\#begunionWithEmpty1\\#end,\\#begunionWithEmpty2\\#end,\\#begunionWithAllLocs1\\#end,\\#begunionWithAllLocs2\\#end,\\#begintersectWithEmpty1\\#end,\\#begintersectWithEmpty2\\#end,\\#begintersectWithAllLocs1\\#end,\\#begintersectWithAllLocs2\\#end,\\#begsetMinusWithEmpty1\\#end,\\#begsetMinusWithEmpty2\\#end,\\#begsetMinusWithAllLocs\\#end,\\#begsubsetWithEmpty\\#end,\\#begsubsetWithAllLocs\\#end,\\#begdisjointWithEmpty1\\#end,\\#begdisjointWithEmpty2\\#end,\\#begcreatedInHeapWithEmpty\\#end,\\#begcreatedInHeapWithSingleton\\#end,\\#begcreatedInHeapWithUnion\\#end,\\#begcreatedInHeapWithSetMinusFreshLocs\\#end,\\#begcreatedInHeapWithAllFields\\#end,\\#begcreatedInHeapWithArrayRange\\#end,\\#begreferencedObjectIsCreatedRight\\#end,\\#begreferencedObjectIsCreatedRightEQ\\#end,\\#begunionWithItself\\#end,\\#begintersectWithItself\\#end,\\#begsetMinusItself\\#end,\\#begsubsetOfItself\\#end,\\#begselectOfStore\\#end,\\#begselectOfCreate\\#end,\\#begselectOfAnon\\#end,\\#begselectOfMemset\\#end,\\#begonlyCreatedObjectsAreReferenced\\#end,\\#begonlyCreatedObjectsAreInLocSets\\#end,\\#begonlyCreatedObjectsAreInLocSetsEQ\\#end,\\#begarrayLengthNotNegative\\#end,\\#begwellFormedStoreObject\\#end,\\#begwellFormedStoreLocSet\\#end,\\#begwellFormedStorePrimitive\\#end,\\#begwellFormedCreate\\#end,\\#begwellFormedAnon\\#end,\\#begwellFormedMemsetObject\\#end,\\#begwellFormedMemsetLocSet\\#end,\\#begwellFormedMemsetPrimitive\\#end,\\#begselectOfStoreEQ\\#end,\\#begselectOfCreateEQ\\#end,\\#begselectOfAnonEQ\\#end,\\#begselectOfMemsetEQ\\#end,\\#begmemsetEmpty\\#end,\\#begselectCreatedOfAnonEQ\\#end,\\#begwellFormedStoreObjectEQ\\#end,\\#begwellFormedStoreLocSetEQ\\#end,\\#begwellFormedStorePrimitiveEQ\\#end,\\#begwellFormedAnonEQ\\#end,\\#begwellFormedMemsetObjectEQ\\#end,\\#begwellFormedMemsetPrimitiveEQ\\#end,\\#begaccDefinition\\#end,\\#begreachDefinition\\#end,\\#begreachZero\\#end,\\#begreachOne\\#end,\\#begreachNull\\#end,\\#begreachNull2\\#end,\\#begreachAddOne\\#end,\\#begreachAddOne2\\#end,\\#begreachUniquePathSameObject\\#end,\\#begreachDependenciesStoreSimple\\#end,\\#begreachDoesNotDependOnCreatedness\\#end,\\#begreachDependenciesStore\\#end,\\#begreachDependenciesAnon\\#end,\\#begreachDependenciesAnonCoarse\\#end,\\#begonly_created_objects_are_reachable\\#end,\\#begreach_does_not_depend_on_fresh_locs\\#end,\\#begreach_does_not_depend_on_fresh_locs_EQ\\#end
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_NONE
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_EXPAND
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=50000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , intRules-intRules\\:arithmeticSemanticsIgnoringOF , initialisation-initialisation\\:disableStaticInitialisation , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , permissions-permissions\\:off , moreSeqRules-moreSeqRules\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "";

\proofObligation "#Proof Obligation Settings
#Fri Apr 07 09:03:49 CEST 2017
name=Gcd[Gcd\\:\\:gcdMPS(int,int)].JML normal_behavior operation contract.0
contract=Gcd[Gcd\\:\\:gcdMPS(int,int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "dscheurer" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "16404")

(branch "dummy ID"
(rule "inInt" (formula "1") (term "0,1,0,0") (newnames "a,b,result,exc,heapAtPre,o,f"))
(rule "concrete_and_1" (formula "1") (term "1,0,0"))
(rule "inInt" (formula "1") (term "1,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0"))
(rule "elementOfAllLocs" (formula "1") (term "0,0,0,0,1,0,1,1"))
(rule "concrete_or_1" (formula "1") (term "0,0,0,1,0,1,1"))
(rule "concrete_or_1" (formula "1") (term "0,0,1,0,1,1"))
(rule "inInt" (formula "1") (term "1,0,0,1,1,0,0,0,1,1"))
(rule "concrete_and_3" (formula "1") (term "0,0,1,1,0,0,0,1,1"))
(rule "translateJavaMod" (formula "1") (term "0,1,0,1,1,0,0,0,1,1"))
(rule "translateJavaMod" (formula "1") (term "0,1,0,1,0,0,0,1,1"))
(rule "translateJavaMod" (formula "1") (term "0,0,0,1,0,0,0,1,1"))
(rule "translateJavaMod" (formula "1") (term "0,1,0,0,0,1,1,0,0,0,1,1"))
(rule "translateJavaMod" (formula "1") (term "0,1,0,0,1,1,0,0,0,1,1"))
(rule "simplifyUpdate2" (formula "1") (term "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "inEqSimp_gtToGeq" (formula "3") (term "0,0,0,0,1,1,0,0,0,1"))
(rule "times_zero_1" (formula "3") (term "1,0,0,0,0,0,0,1,1,0,0,0,1"))
(rule "add_zero_right" (formula "3") (term "0,0,0,0,0,0,1,1,0,0,0,1"))
(rule "assignment" (formula "3") (term "1"))
(rule "sequentialToParallel2" (formula "3"))
(rule "simplifyUpdate3" (formula "3") (term "1,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "3") (term "0,0,0,0,1,1,0,0,0,1"))
(rule "mul_literals" (formula "3") (term "1,0,0,0,0,1,1,0,0,0,1"))
(rule "all_unused" (formula "3") (term "0,1,0,1"))
(rule "all_unused" (formula "3") (term "1,0,1"))
(rule "concrete_and_3" (formula "3") (term "0,1"))
(rule "nnf_imp2or" (formula "3") (term "0,1,1,0,0,1"))
(rule "nnf_notAnd" (formula "3") (term "0,0,1,1,0,0,1"))
(rule "nnf_notAnd" (formula "3") (term "0,0,0,1,1,0,0,1"))
(rule "inEqSimp_notGeq" (formula "3") (term "0,0,0,0,1,1,0,0,1"))
(rule "mul_literals" (formula "3") (term "1,0,0,0,0,0,0,1,1,0,0,1"))
(rule "add_literals" (formula "3") (term "0,0,0,0,0,0,1,1,0,0,1"))
(rule "add_zero_left" (formula "3") (term "0,0,0,0,0,1,1,0,0,1"))
(rule "methodBodyExpand" (formula "3") (term "1") (newnames "heapBefore_gcdMPS,savedHeapBefore_gcdMPS,_aBefore_gcdMPS,_bBefore_gcdMPS"))
(rule "simplifyUpdate2" (formula "3") (term "1"))
(rule "sequentialToParallel2" (formula "3"))
(rule "simplifyUpdate3" (formula "3") (term "1,0"))
(rule "applyOnElementary" (formula "3") (term "1,0"))
(rule "applyOnPV" (formula "3") (term "0,1,0"))
(rule "ifUnfold" (formula "3") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "x"))
(rule "less_than_comparison_simple" (formula "3") (term "1"))
(rule "sequentialToParallel2" (formula "3"))
(rule "simplifyUpdate3" (formula "3") (term "1,0"))
(rule "applyOnElementary" (formula "3") (term "1,0"))
(rule "applyOnRigidTerm" (formula "3") (term "0,1,0"))
(rule "simplifyUpdate1" (formula "3") (term "1,0,1,0"))
(rule "simplifyUpdate1" (formula "3") (term "2,0,1,0"))
(rule "applyOnRigidFormula" (formula "3") (term "0,0,1,0"))
(rule "applyOnPV" (formula "3") (term "0,0,0,1,0"))
(rule "simplifyUpdate1" (formula "3") (term "1,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,1,0"))
(rule "times_zero_1" (formula "3") (term "1,0,0,0,0,1,0"))
(rule "add_zero_right" (formula "3") (term "0,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,1,0"))
(rule "mul_literals" (formula "3") (term "1,0,0,1,0"))
(rule "ifSplit" (formula "3"))
(branch "if x true"
   (rule "simplifyUpdate2" (formula "1"))
   (rule "simplifyUpdate2" (formula "4"))
   (rule "applyOnRigidFormula" (formula "1"))
   (rule "applyOnPV" (formula "1") (term "0"))
   (rule "simplifyUpdate1" (formula "1") (term "1"))
   (rule "ifthenelse_concrete3" (formula "1"))
   (rule "boolean_not_equal_2" (formula "1") (term "1"))
   (rule "concrete_or_4" (formula "1"))
   (rule "unaryMinusInt" (formula "4") (term "1"))
   (rule "translateJavaUnaryMinusInt" (formula "4") (term "0,0,1"))
   (rule "polySimp_elimNeg" (formula "4") (term "0,0,1"))
   (rule "sequentialToParallel2" (formula "4"))
   (rule "simplifyUpdate2" (formula "4"))
   (rule "simplifyUpdate3" (formula "4") (term "1,0"))
   (rule "applyOnElementary" (formula "4") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "4") (term "0,1,0"))
   (rule "applyOnPV" (formula "4") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "4") (term "1,0,1,0"))
   (builtin "Merge Point Rule" (formula "4"))
   (builtin "MergeRule" (formula "4") (mergeProc "MergeByIfThenElse") (nrMergePartners "1") (mergeId "92"))
   (builtin "Delete Merge Point" (formula "3"))
   (rule "ifUnfold" (formula "3") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "3") (term "1") (newnames "x_1"))
   (rule "less_than_comparison_simple" (formula "3") (term "1"))
   (rule "sequentialToParallel2" (formula "3"))
   (rule "simplifyUpdate3" (formula "3") (term "1,0"))
   (rule "applyOnElementary" (formula "3") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "3") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "3") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "3") (term "2,0,1,0"))
   (rule "applyOnRigidFormula" (formula "3") (term "0,0,1,0"))
   (rule "applyOnPV" (formula "3") (term "0,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "3") (term "1,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,1,0"))
   (rule "times_zero_1" (formula "3") (term "1,0,0,0,0,1,0"))
   (rule "add_zero_right" (formula "3") (term "0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,1,0"))
   (rule "mul_literals" (formula "3") (term "1,0,0,1,0"))
   (rule "ifSplit" (formula "3"))
   (branch "if x_1 true"
      (rule "simplifyUpdate2" (formula "1"))
      (rule "simplifyUpdate2" (formula "4"))
      (rule "applyOnRigidFormula" (formula "1"))
      (rule "applyOnPV" (formula "1") (term "0"))
      (rule "simplifyUpdate1" (formula "1") (term "1"))
      (rule "ifthenelse_concrete3" (formula "1"))
      (rule "boolean_not_equal_2" (formula "1") (term "1"))
      (rule "concrete_or_4" (formula "1"))
      (rule "unaryMinusInt" (formula "4") (term "1"))
      (rule "translateJavaUnaryMinusInt" (formula "4") (term "0,0,1"))
      (rule "polySimp_elimNeg" (formula "4") (term "0,0,1"))
      (rule "sequentialToParallel2" (formula "4"))
      (rule "simplifyUpdate2" (formula "4"))
      (rule "simplifyUpdate3" (formula "4") (term "1,0"))
      (rule "applyOnElementary" (formula "4") (term "1,0"))
      (rule "applyOnRigidTerm" (formula "4") (term "0,1,0"))
      (rule "applyOnPV" (formula "4") (term "0,0,1,0"))
      (rule "simplifyUpdate1" (formula "4") (term "1,0,1,0"))
      (builtin "Merge Point Rule" (formula "4"))
      (builtin "MergeRule" (formula "4") (newnames "abstrPred_geq_AND_abstrPred_or_0") (mergeProc "MergeByPredicateAbstraction") (nrMergePartners "1") (mergeId "147") (abstractionPredicates "('int x', 'x = _bBefore_gcdMPS| x = javaUnaryMinusInt(_bBefore_gcdMPS)'), ('int x', 'geq(x, Z(0(#)))')") (latticeType "de.uka.ilkd.key.axiom_abstraction.predicateabstraction.ConjunctivePredicateAbstractionLattice"))
      (rule "translateJavaUnaryMinusInt" (formula "3") (term "1,1,1,1"))
      (rule "simplifyUpdate2" (formula "3"))
      (rule "andLeft" (formula "3"))
      (rule "simplifyUpdate2" (formula "3"))
      (rule "polySimp_elimNeg" (formula "4") (term "1,1,1"))
      (rule "applyOnRigidFormula" (formula "4"))
      (rule "applyOnRigidFormula" (formula "4") (term "0"))
      (rule "simplifyUpdate1" (formula "4") (term "0,0"))
      (rule "applyOnPV" (formula "4") (term "1,0"))
      (rule "eqSymm" (formula "4") (term "0"))
      (rule "applyOnRigidFormula" (formula "4") (term "1"))
      (rule "simplifyUpdate1" (formula "4") (term "0,1"))
      (rule "eqSymm" (formula "4") (term "1"))
      (rule "applyOnRigidTerm" (formula "4") (term "0,1"))
      (rule "applyOnPV" (formula "4") (term "0,0,1"))
      (rule "simplifyUpdate1" (formula "4") (term "1,0,1"))
      (rule "polySimp_homoEq" (formula "4") (term "1"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1"))
      (rule "polySimp_elimOne" (formula "4") (term "1,0,1"))
      (rule "polySimp_sepPosMonomial" (formula "4") (term "1"))
      (builtin "Delete Merge Point" (formula "5"))
      (rule "simplifyUpdate2" (formula "5"))
      (rule "variableDeclarationMult" (formula "5") (term "1"))
      (rule "variableDeclaration" (formula "5") (term "1") (newnames "big"))
      (rule "variableDeclaration" (formula "5") (term "1") (newnames "small"))
      (rule "blockEmpty" (formula "5") (term "1"))
      (rule "ifElseUnfold" (formula "5") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "5") (term "1") (newnames "x_2"))
      (rule "greater_than_comparison_simple" (formula "5") (term "1"))
      (rule "sequentialToParallel2" (formula "5"))
      (rule "simplifyUpdate3" (formula "5") (term "1,0"))
      (rule "applyOnElementary" (formula "5") (term "1,0"))
      (rule "applyOnRigidTerm" (formula "5") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "5") (term "1,0,1,0"))
      (rule "simplifyUpdate1" (formula "5") (term "2,0,1,0"))
      (rule "applyOnRigidFormula" (formula "5") (term "0,0,1,0"))
      (rule "simplifyUpdate1" (formula "5") (term "0,0,0,1,0"))
      (rule "simplifyUpdate1" (formula "5") (term "1,0,0,1,0"))
      (rule "applyOnPV" (formula "5") (term "0,0,0,1,0"))
      (rule "applyOnPV" (formula "5") (term "1,0,0,1,0"))
      (rule "inEqSimp_gtToGeq" (formula "5") (term "0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0"))
      (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,1,0"))
      (rule "ifElseSplit" (formula "5"))
      (branch "if x_2 true"
         (rule "simplifyUpdate2" (formula "1"))
         (rule "simplifyUpdate2" (formula "6"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "ifthenelse_concrete3" (formula "1"))
         (rule "boolean_not_equal_2" (formula "1") (term "1"))
         (rule "concrete_or_4" (formula "1"))
         (rule "assignment" (formula "6") (term "1"))
         (rule "sequentialToParallel2" (formula "6"))
         (rule "simplifyUpdate2" (formula "6"))
         (rule "simplifyUpdate3" (formula "6") (term "1,0"))
         (rule "applyOnElementary" (formula "6") (term "1,0"))
         (rule "applyOnPV" (formula "6") (term "0,1,0"))
         (rule "assignment" (formula "6") (term "1"))
         (rule "sequentialToParallel2" (formula "6"))
         (rule "simplifyUpdate2" (formula "6"))
         (rule "simplifyUpdate3" (formula "6") (term "1,0"))
         (rule "applyOnElementary" (formula "6") (term "1,0"))
         (rule "applyOnPV" (formula "6") (term "0,1,0"))
         (rule "blockEmpty" (formula "6") (term "1"))
         (rule "returnUnfold" (formula "6") (term "1") (inst "#v0=x"))
         (rule "variableDeclarationAssign" (formula "6") (term "1"))
         (rule "variableDeclaration" (formula "6") (term "1") (newnames "x_6"))
         (builtin "Use Operation Contract" (formula "6") (newnames "heapBefore_gcdHelp_0,result_1,exc_1,heapAfter_gcdHelp_0,anon_heap_gcdHelp_0") (contract "Gcd[Gcd::gcdHelp(int,int)].JML normal_behavior operation contract.0"))
         (branch "Post (gcdHelp)"
            (rule "inInt" (formula "7") (term "1,0,1,1,1,1"))
            (rule "concrete_and_3" (formula "7") (term "0,1,1,1,1"))
            (rule "inInt" (formula "7") (term "1,0,0,1,1,0,1,1,1,1,1"))
            (rule "concrete_and_3" (formula "7") (term "0,0,1,1,0,1,1,1,1,1"))
            (rule "translateJavaMod" (formula "7") (term "0,1,0,1,1,0,1,1,1,1,1"))
            (rule "translateJavaMod" (formula "7") (term "0,0,0,1,0,1,1,1,1,1"))
            (rule "translateJavaMod" (formula "7") (term "0,1,0,1,0,1,1,1,1,1"))
            (rule "translateJavaMod" (formula "7") (term "0,1,0,0,1,1,0,1,1,1,1,1"))
            (rule "translateJavaMod" (formula "7") (term "0,1,0,0,0,1,1,0,1,1,1,1,1"))
            (rule "simplifyUpdate2" (formula "8"))
            (rule "simplifyUpdate2" (formula "7"))
            (rule "simplifyUpdate2" (formula "7") (term "1"))
            (rule "simplifyUpdate2" (formula "7") (term "1,1"))
            (rule "andLeft" (formula "7"))
            (rule "simplifyUpdate2" (formula "7"))
            (rule "andLeft" (formula "8"))
            (rule "simplifyUpdate2" (formula "8"))
            (rule "andLeft" (formula "9"))
            (rule "simplifyUpdate2" (formula "10"))
            (rule "sequentialToParallel2" (formula "10"))
            (rule "simplifyUpdate3" (formula "10") (term "1,0"))
            (rule "applyOnRigidFormula" (formula "9"))
            (rule "simplifyUpdate2" (formula "9") (term "0"))
            (rule "applyOnRigidFormula" (formula "9") (term "1"))
            (rule "applyOnRigidFormula" (formula "9") (term "0"))
            (rule "applyOnRigidFormula" (formula "9") (term "1,1"))
            (rule "applyOnRigidFormula" (formula "9") (term "0,1"))
            (rule "simplifyUpdate2" (formula "9") (term "0,0,1"))
            (rule "simplifyUpdate2" (formula "9") (term "1,0,1"))
            (rule "applyOnRigidFormula" (formula "9") (term "0,0"))
            (rule "applyOnPV" (formula "9") (term "0,0,0"))
            (rule "simplifyUpdate1" (formula "9") (term "1,0,0"))
            (rule "applyOnRigidFormula" (formula "9") (term "0,1,1"))
            (rule "simplifyUpdate2" (formula "9") (term "1,0,1,1"))
            (rule "applyOnRigidFormula" (formula "9") (term "0,0,1"))
            (rule "simplifyUpdate1" (formula "9") (term "1,0,0,1"))
            (rule "applyOnRigidFormula" (formula "9") (term "1,0,1"))
            (rule "simplifyUpdate1" (formula "9") (term "1,1,0,1"))
            (rule "ifEqualsInteger" (formula "9") (term "0,0"))
            (rule "applyOnRigidFormula" (formula "9") (term "0,0,1,1"))
            (rule "simplifyUpdate2" (formula "9") (term "0,0,0,1,1"))
            (rule "simplifyUpdate2" (formula "9") (term "1,0,0,1,1"))
            (rule "applyOnRigidTerm" (formula "9") (term "0,0,0,1"))
            (rule "applyOnPV" (formula "9") (term "0,0,0,0,1"))
            (rule "simplifyUpdate1" (formula "9") (term "1,0,0,0,1"))
            (rule "applyOnRigidTerm" (formula "9") (term "0,1,0,1"))
            (rule "applyOnPV" (formula "9") (term "0,0,1,0,1"))
            (rule "simplifyUpdate1" (formula "9") (term "1,0,1,0,1"))
            (rule "applyOnRigidFormula" (formula "9") (term "0,0,0,1,1"))
            (rule "simplifyUpdate2" (formula "9") (term "0,0,0,0,1,1"))
            (rule "applyOnRigidFormula" (formula "9") (term "1,0,0,1,1"))
            (rule "simplifyUpdate1" (formula "9") (term "1,1,0,0,1,1"))
            (rule "applyOnRigidFormula" (formula "9") (term "1,0,0,0,1,1"))
            (rule "simplifyUpdate1" (formula "9") (term "1,1,0,0,0,1,1"))
            (rule "applyOnRigidTerm" (formula "9") (term "0,1,0,0,1,1"))
            (rule "simplifyUpdate1" (formula "9") (term "1,0,1,0,0,1,1"))
            (rule "applyOnPV" (formula "9") (term "0,0,1,0,0,1,1"))
            (rule "applyOnRigidTerm" (formula "9") (term "0,1,0,0,0,1,1"))
            (rule "applyOnPV" (formula "9") (term "0,0,1,0,0,0,1,1"))
            (rule "simplifyUpdate1" (formula "9") (term "1,0,1,0,0,0,1,1"))
            (rule "inEqSimp_gtToGeq" (formula "9") (term "0,0,0,0,1,1"))
            (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0,0,1,1"))
            (rule "add_zero_right" (formula "9") (term "0,0,0,0,0,0,1,1"))
            (rule "assignment" (formula "10") (term "1"))
            (rule "sequentialToParallel2" (formula "10"))
            (rule "simplifyUpdate3" (formula "10") (term "1,0"))
            (rule "jmod_axiom" (formula "9") (term "0,1,0,1,1"))
            (rule "polySimp_mulComm1" (formula "9") (term "1,0,1,0,1,1"))
            (rule "jmod_axiom" (formula "9") (term "0,0,0,1"))
            (rule "polySimp_mulComm1" (formula "9") (term "1,0,0,0,1"))
            (rule "jmod_axiom" (formula "9") (term "0,1,0,1"))
            (rule "polySimp_mulComm1" (formula "9") (term "1,0,1,0,1"))
            (rule "jmod_axiom" (formula "9") (term "0,1,0,0,1,1"))
            (rule "polySimp_mulComm1" (formula "9") (term "1,0,1,0,0,1,1"))
            (rule "jmod_axiom" (formula "9") (term "0,1,0,0,0,1,1"))
            (rule "polySimp_mulComm1" (formula "9") (term "1,0,1,0,0,0,1,1"))
            (rule "polySimp_invertEq" (formula "9") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0,0"))
            (rule "times_zero_2" (formula "9") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0,0"))
            (rule "polySimp_sepNegMonomial" (formula "9") (term "1,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,1,1"))
            (rule "polySimp_elimOne" (formula "9") (term "0,1,0,1,1"))
            (rule "polySimp_sepNegMonomial" (formula "9") (term "0,0,1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,1"))
            (rule "polySimp_elimOne" (formula "9") (term "0,0,0,1"))
            (rule "polySimp_sepNegMonomial" (formula "9") (term "1,0,1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,1"))
            (rule "polySimp_elimOne" (formula "9") (term "0,1,0,1"))
            (rule "polySimp_sepNegMonomial" (formula "9") (term "1,0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0,1,1"))
            (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0,1,1"))
            (rule "polySimp_sepNegMonomial" (formula "9") (term "1,0,0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0,0,1,1"))
            (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0,0,1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0,0,1,1"))
            (rule "mul_literals" (formula "9") (term "1,0,0,0,0,1,1"))
            (rule "inEqSimp_notLeq" (formula "9") (term "0,1,0,0"))
            (rule "mul_literals" (formula "9") (term "1,0,0,0,1,0,0"))
            (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
            (rule "nnf_imp2or" (formula "9") (term "0,1,1"))
            (rule "nnf_notAnd" (formula "9") (term "0,0,1,1"))
            (rule "nnf_notAnd" (formula "9") (term "0,0,0,1,1"))
            (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,0,1,1"))
            (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0,0,1,1"))
            (rule "add_literals" (formula "9") (term "0,0,0,0,0,0,1,1"))
            (rule "add_zero_left" (formula "9") (term "0,0,0,0,0,1,1"))
            (rule "commute_and" (formula "9") (term "0,1"))
            (rule "applyEq_and_int2" (formula "9") (term "0,0,0"))
            (rule "leq_literals" (formula "9") (term "0,0,0,0"))
            (rule "concrete_and_2" (formula "9") (term "0,0,0"))
            (rule "concrete_or_2" (formula "9") (term "0,0"))
            (rule "commute_or_2" (formula "9") (term "0,0,1,1"))
            (rule "commute_or_2" (formula "9") (term "0,1,1"))
            (rule "applyEq_and_int0" (formula "9") (term "0,0"))
            (rule "qeq_literals" (formula "9") (term "0,0,0"))
            (rule "concrete_and_1" (formula "9") (term "0,0"))
            (rule "methodCallReturn" (formula "10") (term "1"))
            (rule "assignment" (formula "10") (term "1"))
            (rule "sequentialToParallel2" (formula "10"))
            (rule "simplifyUpdate2" (formula "10"))
            (rule "simplifyUpdate3" (formula "10") (term "1,0"))
            (rule "applyOnElementary" (formula "10") (term "1,0"))
            (rule "applyOnPV" (formula "10") (term "0,1,0"))
            (rule "methodCallEmpty" (formula "10") (term "1"))
            (rule "tryEmpty" (formula "10") (term "1"))
            (rule "simplifyUpdate2" (formula "10"))
            (rule "emptyModality" (formula "10") (term "1"))
            (rule "applyOnRigidFormula" (formula "10"))
            (rule "simplifyUpdate2" (formula "10") (term "0"))
            (rule "simplifyUpdate2" (formula "10") (term "1"))
            (rule "applyOnRigidFormula" (formula "10") (term "0"))
            (rule "simplifyUpdate2" (formula "10") (term "0,0"))
            (rule "applyOnRigidFormula" (formula "10") (term "1"))
            (rule "applyOnPV" (formula "10") (term "0,1"))
            (rule "simplifyUpdate1" (formula "10") (term "1,1"))
            (rule "eqClose" (formula "10") (term "1"))
            (rule "concrete_and_3" (formula "10"))
            (rule "impRight" (formula "10"))
            (rule "applyOnRigidFormula" (formula "11"))
            (rule "applyOnRigidFormula" (formula "11") (term "0"))
            (rule "applyOnRigidFormula" (formula "11") (term "1"))
            (rule "applyOnRigidFormula" (formula "11") (term "1,0"))
            (rule "simplifyUpdate1" (formula "11") (term "1,1,0"))
            (rule "applyOnRigidFormula" (formula "11") (term "0,0"))
            (rule "simplifyUpdate1" (formula "11") (term "1,0,0"))
            (rule "applyOnRigidFormula" (formula "11") (term "0,1"))
            (rule "simplifyUpdate2" (formula "11") (term "0,0,1"))
            (rule "applyOnRigidTerm" (formula "11") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "11") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "11") (term "1,0,1,0"))
            (rule "applyOnRigidTerm" (formula "11") (term "0,0,0"))
            (rule "simplifyUpdate1" (formula "11") (term "0,0,0,0"))
            (rule "applyOnPV" (formula "11") (term "1,0,0,0"))
            (rule "applyOnRigidFormula" (formula "11") (term "1,0,1"))
            (rule "simplifyUpdate1" (formula "11") (term "1,1,0,1"))
            (rule "applyOnRigidTerm" (formula "11") (term "0,1,0,1"))
            (rule "applyOnPV" (formula "11") (term "0,0,1,0,1"))
            (rule "simplifyUpdate1" (formula "11") (term "1,0,1,0,1"))
            (rule "jmod_axiom" (formula "11") (term "0,0,1,0,0,0,1"))
            (rule "polySimp_mulComm1" (formula "11") (term "1,0,0,1,0,0,0,1"))
            (rule "jmod_axiom" (formula "11") (term "0,0,1,0,0,1"))
            (rule "polySimp_mulComm1" (formula "11") (term "1,0,0,1,0,0,1"))
            (rule "jmod_axiom" (formula "11") (term "0,1,0"))
            (rule "polySimp_mulComm1" (formula "11") (term "1,0,1,0"))
            (rule "jmod_axiom" (formula "11") (term "0,0,0"))
            (rule "polySimp_mulComm1" (formula "11") (term "1,0,0,0"))
            (rule "jmod_axiom" (formula "11") (term "0,1,0,1"))
            (rule "polySimp_mulComm1" (formula "11") (term "1,0,1,0,1"))
            (rule "polySimp_sepNegMonomial" (formula "11") (term "0,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "11") (term "0,0,1,0,0,0,1"))
            (rule "polySimp_sepNegMonomial" (formula "11") (term "0,1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1,0,0,1"))
            (rule "polySimp_elimOne" (formula "11") (term "0,0,1,0,0,1"))
            (rule "polySimp_sepNegMonomial" (formula "11") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "11") (term "0,1,0"))
            (rule "polySimp_sepNegMonomial" (formula "11") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "0,0,0"))
            (rule "polySimp_sepNegMonomial" (formula "11") (term "1,0,1"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,1"))
            (rule "polySimp_elimOne" (formula "11") (term "0,1,0,1"))
            (rule "cut_direct" (formula "6") (term "0"))
            (branch "CUT: b = abstrPred_geq_AND_abstrPred_or_0 TRUE"
               (rule "concrete_or_1" (formula "7"))
               (rule "true_left" (formula "7"))
               (rule "applyEq" (formula "11") (term "0,0,0,0,1,0,0,1") (ifseqformula "6"))
               (rule "applyEq" (formula "11") (term "0,0,0,1,0") (ifseqformula "6"))
               (rule "applyEq" (formula "1") (term "0,0,1") (ifseqformula "6"))
               (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "6"))
               (rule "applyEq" (formula "11") (term "1,0,1,0,0,1") (ifseqformula "6"))
               (rule "ifthenelse_split" (formula "10") (term "1,1,0,1"))
               (branch "a <= -1 TRUE"
                  (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "10"))
                  (rule "ifthenelse_true" (formula "2") (term "0"))
                  (rule "replace_known_left" (formula "11") (term "0,1,0,1,0,1,1") (ifseqformula "10"))
                  (rule "ifthenelse_true" (formula "11") (term "1,0,1,0,1,1"))
                  (rule "replace_known_left" (formula "11") (term "0,0,0,0,0,1,0,1,1") (ifseqformula "10"))
                  (rule "ifthenelse_true" (formula "11") (term "0,0,0,0,1,0,1,1"))
                  (rule "replace_known_left" (formula "11") (term "0,0,0,0,1,0,1") (ifseqformula "10"))
                  (rule "ifthenelse_true" (formula "11") (term "0,0,0,1,0,1"))
                  (rule "inEqSimp_homoInEq1" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "mul_literals" (formula "2") (term "0,1"))
                  (rule "inEqSimp_contradEq3" (formula "11") (term "0,0") (ifseqformula "10"))
                  (rule "times_zero_1" (formula "11") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "11") (term "0,0,0,0"))
                  (rule "qeq_literals" (formula "11") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "11") (term "0,0"))
                  (rule "concrete_not_2" (formula "11") (term "0"))
                  (rule "concrete_impl_1" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "replace_known_left" (formula "14") (term "1,0") (ifseqformula "11"))
                  (rule "concrete_and_3" (formula "14") (term "0"))
                  (rule "inEqSimp_contradEq3" (formula "1") (term "0,0") (ifseqformula "10"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
                  (rule "qeq_literals" (formula "1") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "1") (term "0,0"))
                  (rule "concrete_not_2" (formula "1") (term "0"))
                  (rule "concrete_or_1" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
                  (rule "times_zero_1" (formula "4") (term "0,0"))
                  (rule "add_zero_left" (formula "4") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                  (rule "polySimp_elimOne" (formula "4") (term "0"))
                  (rule "commute_or_2" (formula "12") (term "0"))
                  (rule "commute_or_2" (formula "12") (term "0,0"))
                  (rule "jdiv_axiom" (formula "10") (term "0,0"))
                  (rule "eqSymm" (formula "10"))
                  (rule "replace_known_left" (formula "10") (term "0,0") (ifseqformula "4"))
                  (rule "ifthenelse_true" (formula "10") (term "0"))
                  (rule "eqSymm" (formula "10"))
                  (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "10"))
                  (rule "jdiv_axiom" (formula "12") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0,0,2,1"))
                  (rule "eqSymm" (formula "12"))
                  (rule "polySimp_elimOne" (formula "12") (term "0,0,2,0"))
                  (rule "inEqSimp_invertInEq1" (formula "12") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0"))
                  (rule "times_zero_2" (formula "12") (term "1,0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "0,0,0"))
                  (rule "inEqSimp_subsumption0" (formula "12") (term "0,0") (ifseqformula "9"))
                  (rule "leq_literals" (formula "12") (term "0,0,0"))
                  (rule "concrete_or_1" (formula "12") (term "0,0"))
                  (rule "ifthenelse_true" (formula "12") (term "0"))
                  (rule "eqSymm" (formula "12"))
                  (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "12"))
                  (rule "jdiv_axiom" (formula "15") (term "0,0,0"))
                  (rule "eqSymm" (formula "1"))
                  (rule "inEqSimp_contradInEq0" (formula "1") (term "0,0") (ifseqformula "10"))
                  (rule "qeq_literals" (formula "1") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "1") (term "0,0"))
                  (rule "ifthenelse_false" (formula "1") (term "0"))
                  (rule "eqSymm" (formula "1"))
                  (rule "applyEq" (formula "16") (term "0,0,0") (ifseqformula "1"))
                  (rule "polySimp_mulComm1" (formula "16") (term "0,0"))
                  (rule "polySimp_homoEq" (formula "16") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,0,0"))
                  (rule "applyEq" (formula "16") (term "1,0,0") (ifseqformula "14"))
                  (rule "polySimp_pullOutFactor1" (formula "16") (term "0,0"))
                  (rule "add_literals" (formula "16") (term "1,0,0"))
                  (rule "times_zero_1" (formula "16") (term "0,0"))
                  (rule "eqClose" (formula "16") (term "0"))
                  (rule "concrete_and_1" (formula "16"))
                  (rule "allRight" (formula "16") (inst "sk=x_10"))
                  (rule "orRight" (formula "16"))
                  (rule "orRight" (formula "16"))
                  (rule "notRight" (formula "17"))
                  (rule "orRight" (formula "17"))
                  (rule "notRight" (formula "18"))
                  (rule "inEqSimp_leqRight" (formula "18"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "div_axiom" (formula "14") (term "1") (inst "quotient=quotient_45"))
                  (rule "polySimp_mulComm0" (formula "14") (term "0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "14") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "14") (term "0,2,1,1"))
                  (rule "commute_and" (formula "14") (term "0,1"))
                  (rule "div_axiom" (formula "17") (term "1") (inst "quotient=quotient_46"))
                  (rule "polySimp_mulComm0" (formula "17") (term "0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "17") (term "0,2,1,1"))
                  (rule "polySimp_mulComm0" (formula "17") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,1,1,1,1"))
                  (rule "commute_and" (formula "17") (term "0,1"))
                  (rule "jdiv_axiom" (formula "21") (term "0,0"))
                  (rule "eqSymm" (formula "1"))
                  (rule "jdiv_axiom" (formula "4") (term "0,0"))
                  (rule "eqSymm" (formula "4"))
                  (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "10"))
                  (rule "ifthenelse_true" (formula "4") (term "0"))
                  (rule "eqSymm" (formula "4"))
                  (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "4"))
                  (rule "jdiv_axiom" (formula "3") (term "0,0"))
                  (rule "eqSymm" (formula "3"))
                  (rule "inEqSimp_contradInEq0" (formula "3") (term "0,0") (ifseqformula "16"))
                  (rule "qeq_literals" (formula "3") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "3") (term "0,0"))
                  (rule "ifthenelse_false" (formula "3") (term "0"))
                  (rule "eqSymm" (formula "3"))
                  (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "3"))
                  (rule "polySimp_mulComm1" (formula "4") (term "0"))
                  (rule "polySimp_homoEq" (formula "4"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,0"))
                  (rule "polySimp_sepPosMonomial" (formula "4"))
                  (rule "polySimp_critPair" (formula "19") (ifseqformula "22"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,1,1,0"))
                  (rule "polySimp_mulAssoc" (formula "19") (term "0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "19") (term "0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "19") (term "0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                  (rule "polySimp_mulComm1" (formula "19") (term "1,1,0"))
                  (rule "polySimp_mulComm1" (formula "19") (term "0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "19") (term "0,0"))
                  (rule "polySimp_mulComm1" (formula "19") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "19") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "19") (term "0"))
                  (rule "polySimp_addComm1" (formula "19") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "19") (term "0"))
                  (rule "add_literals" (formula "19") (term "1,1,0"))
                  (rule "times_zero_1" (formula "19") (term "1,0"))
                  (rule "add_zero_right" (formula "19") (term "0"))
                  (rule "polySimp_addComm0" (formula "19") (term "0"))
                  (rule "polySimp_sepPosMonomial" (formula "19"))
                  (rule "allLeft" (formula "24") (inst "t=x_10"))
                  (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "26"))
                  (rule "concrete_or_4" (formula "24"))
                  (rule "applyEqRigid" (formula "24") (term "0,0,0,1") (ifseqformula "5"))
                  (rule "replace_known_left" (formula "24") (term "0,1") (ifseqformula "6"))
                  (rule "concrete_not_1" (formula "24") (term "1"))
                  (rule "concrete_or_4" (formula "24"))
                  (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "24") (term "0,0"))
                  (rule "concrete_and_2" (formula "24") (term "0"))
                  (rule "concrete_or_2" (formula "24"))
                  (rule "notLeft" (formula "24"))
                  (rule "div_axiom" (formula "1") (term "1,0") (inst "quotient=quotient_47"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,2,1,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,1,1,1,1"))
                  (rule "inEqSimp_contradEq7" (formula "1") (term "0") (ifseqformula "3"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0"))
                  (rule "leq_literals" (formula "1") (term "0,0"))
                  (rule "concrete_and_2" (formula "1") (term "0"))
                  (rule "concrete_or_2" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "1"))
                  (rule "inEqSimp_subsumption1" (formula "3") (term "0") (ifseqformula "5"))
                  (rule "leq_literals" (formula "3") (term "0,0"))
                  (rule "concrete_or_1" (formula "3") (term "0"))
                  (rule "ifthenelse_true_for" (formula "3"))
                  (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "2"))
                  (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                  (rule "polySimp_elimOne" (formula "3") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0"))
                  (rule "polySimp_rightDist" (formula "3") (term "0,0,0"))
                  (rule "mul_literals" (formula "3") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor2b" (formula "3") (term "0,0"))
                  (rule "add_literals" (formula "3") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "3") (term "1,0,0"))
                  (rule "add_zero_right" (formula "3") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                  (rule "mul_literals" (formula "3") (term "1"))
                  (rule "div_axiom" (formula "4") (term "0,2,0") (inst "quotient=quotient_48"))
                  (rule "polySimp_mulComm0" (formula "4") (term "0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "4") (term "0,2,1,1"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1"))
                  (rule "inEqSimp_contradEq7" (formula "4") (term "0") (ifseqformula "6"))
                  (rule "times_zero_1" (formula "4") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "4") (term "0,0,0"))
                  (rule "leq_literals" (formula "4") (term "0,0"))
                  (rule "concrete_and_2" (formula "4") (term "0"))
                  (rule "concrete_or_2" (formula "4"))
                  (rule "andLeft" (formula "4"))
                  (rule "andLeft" (formula "4"))
                  (rule "applyEq" (formula "7") (term "0,2,0") (ifseqformula "4"))
                  (rule "inEqSimp_subsumption1" (formula "6") (term "0") (ifseqformula "8"))
                  (rule "leq_literals" (formula "6") (term "0,0"))
                  (rule "concrete_or_1" (formula "6") (term "0"))
                  (rule "ifthenelse_true_for" (formula "6"))
                  (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "5"))
                  (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0"))
                  (rule "polySimp_elimOne" (formula "6") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0"))
                  (rule "polySimp_rightDist" (formula "6") (term "0,0,0"))
                  (rule "mul_literals" (formula "6") (term "0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0"))
                  (rule "add_literals" (formula "6") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "6") (term "1,0,0"))
                  (rule "add_zero_right" (formula "6") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                  (rule "mul_literals" (formula "6") (term "1"))
                  (rule "div_axiom" (formula "11") (term "1") (inst "quotient=quotient_49"))
                  (rule "polySimp_mulComm0" (formula "11") (term "0,2,1,1"))
                  (rule "polySimp_mulComm0" (formula "11") (term "0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,1,1,1,1"))
                  (rule "inEqSimp_contradEq7" (formula "11") (term "0") (ifseqformula "8"))
                  (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "11") (term "0,0,0"))
                  (rule "leq_literals" (formula "11") (term "0,0"))
                  (rule "concrete_and_2" (formula "11") (term "0"))
                  (rule "concrete_or_2" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "applyEqRigid" (formula "15") (term "0,0") (ifseqformula "11"))
                  (rule "polySimp_mulComm0" (formula "15") (term "0"))
                  (rule "applyEq" (formula "13") (term "0,2") (ifseqformula "15"))
                  (rule "inEqSimp_homoInEq1" (formula "13") (term "2"))
                  (rule "polySimp_addComm1" (formula "13") (term "0,2"))
                  (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,2"))
                  (rule "add_literals" (formula "13") (term "1,1,0,0,2"))
                  (rule "times_zero_1" (formula "13") (term "1,0,0,2"))
                  (rule "add_zero_right" (formula "13") (term "0,0,2"))
                  (rule "applyEq" (formula "12") (term "0") (ifseqformula "15"))
                  (rule "inEqSimp_homoInEq0" (formula "12"))
                  (rule "polySimp_pullOutFactor1" (formula "12") (term "0"))
                  (rule "add_literals" (formula "12") (term "1,0"))
                  (rule "times_zero_1" (formula "12") (term "0"))
                  (rule "qeq_literals" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "applyEq" (formula "12") (term "0,1") (ifseqformula "14"))
                  (rule "inEqSimp_homoInEq1" (formula "12") (term "1"))
                  (rule "polySimp_addComm1" (formula "12") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
                  (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "12") (term "0,0,1"))
                  (rule "applyEqRigid" (formula "13") (term "1") (ifseqformula "11"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "2"))
                  (rule "mul_literals" (formula "12") (term "1,2"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "12") (term "0,1"))
                  (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "8"))
                  (rule "inEqSimp_subsumption1" (formula "12") (term "0") (ifseqformula "8"))
                  (rule "leq_literals" (formula "12") (term "0,0"))
                  (rule "concrete_or_1" (formula "12") (term "0"))
                  (rule "ifthenelse_true_for" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "div_axiom" (formula "9") (term "0,1") (inst "quotient=quotient_50"))
                  (rule "polySimp_mulComm0" (formula "9") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "9") (term "0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "9") (term "0,2,1,1"))
                  (rule "inEqSimp_contradEq7" (formula "9") (term "0") (ifseqformula "8"))
                  (rule "times_zero_1" (formula "9") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "9") (term "0,0,0"))
                  (rule "leq_literals" (formula "9") (term "0,0"))
                  (rule "concrete_and_2" (formula "9") (term "0"))
                  (rule "concrete_or_2" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "9"))
                  (rule "polySimp_mulComm0" (formula "13") (term "0"))
                  (rule "applyEq" (formula "10") (term "0") (ifseqformula "13"))
                  (rule "inEqSimp_homoInEq0" (formula "10"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
                  (rule "polySimp_pullOutFactor0" (formula "10") (term "0"))
                  (rule "add_literals" (formula "10") (term "1,0"))
                  (rule "times_zero_1" (formula "10") (term "0"))
                  (rule "qeq_literals" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "applyEq" (formula "10") (term "0,2") (ifseqformula "12"))
                  (rule "inEqSimp_homoInEq1" (formula "10") (term "2"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,0,2"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,0,2"))
                  (rule "polySimp_addComm1" (formula "10") (term "0,2"))
                  (rule "polySimp_pullOutFactor2b" (formula "10") (term "0,0,2"))
                  (rule "add_literals" (formula "10") (term "1,1,0,0,2"))
                  (rule "times_zero_1" (formula "10") (term "1,0,0,2"))
                  (rule "add_zero_right" (formula "10") (term "0,0,2"))
                  (rule "applyEq" (formula "10") (term "0,1") (ifseqformula "12"))
                  (rule "inEqSimp_homoInEq1" (formula "10") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,0,1"))
                  (rule "polySimp_addComm1" (formula "10") (term "0,1"))
                  (rule "polySimp_pullOutFactor2b" (formula "10") (term "0,0,1"))
                  (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "10") (term "0,0,1"))
                  (rule "applyEq" (formula "11") (term "0,1") (ifseqformula "9"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "2"))
                  (rule "mul_literals" (formula "10") (term "1,2"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "10") (term "0,1"))
                  (rule "replace_known_left" (formula "10") (term "1") (ifseqformula "8"))
                  (rule "inEqSimp_subsumption1" (formula "10") (term "0") (ifseqformula "8"))
                  (rule "leq_literals" (formula "10") (term "0,0"))
                  (rule "concrete_or_1" (formula "10") (term "0"))
                  (rule "ifthenelse_true_for" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "ifthenelse_split_for" (formula "29") (term "1,1"))
                  (branch "result_1 >= 0 TRUE"
                     (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "29"))
                     (rule "ifthenelse_true" (formula "7") (term "0"))
                     (rule "eqSymm" (formula "7"))
                     (rule "replace_known_left" (formula "25") (term "0,1,1") (ifseqformula "29"))
                     (rule "ifthenelse_true_for" (formula "25") (term "1,1"))
                     (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "7"))
                     (rule "polySimp_mulComm0" (formula "35") (term "0"))
                     (rule "inEqSimp_strengthen0" (formula "2") (ifseqformula "35"))
                     (rule "inEqSimp_contradEq3" (formula "35") (ifseqformula "2"))
                     (rule "polySimp_mulComm0" (formula "35") (term "1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0"))
                     (rule "add_literals" (formula "35") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "35") (term "1,0,0"))
                     (rule "add_zero_right" (formula "35") (term "0,0"))
                     (rule "qeq_literals" (formula "35") (term "0"))
                     (rule "concrete_and_2" (formula "35"))
                     (rule "false_right" (formula "35"))
                     (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "2"))
                     (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0"))
                     (rule "polySimp_rightDist" (formula "3") (term "0,0,0"))
                     (rule "mul_literals" (formula "3") (term "0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                     (rule "add_literals" (formula "3") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "3") (term "0,0"))
                     (rule "add_literals" (formula "3") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "3") (term "1,0,0"))
                     (rule "add_zero_right" (formula "3") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                     (rule "mul_literals" (formula "3") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "3"))
                     (rule "leq_literals" (formula "9") (term "0"))
                     (rule "concrete_or_1" (formula "9"))
                     (rule "true_left" (formula "9"))
                     (rule "cnf_rightDist" (formula "30"))
                     (rule "andLeft" (formula "30"))
                     (rule "commute_or" (formula "31"))
                     (rule "cnf_rightDist" (formula "25"))
                     (rule "andLeft" (formula "25"))
                     (rule "commute_or" (formula "26"))
                     (rule "jdiv_axiom" (formula "36") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0,0,2,1"))
                     (rule "eqSymm" (formula "1"))
                     (rule "polySimp_elimOne" (formula "1") (term "0,0,2,0"))
                     (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "10"))
                     (rule "inEqSimp_invertInEq1" (formula "1") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                     (rule "times_zero_2" (formula "1") (term "1,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                     (rule "inEqSimp_subsumption0" (formula "1") (term "0,0") (ifseqformula "25"))
                     (rule "leq_literals" (formula "1") (term "0,0,0"))
                     (rule "concrete_or_1" (formula "1") (term "0,0"))
                     (rule "ifthenelse_true" (formula "1") (term "0"))
                     (rule "eqSymm" (formula "1"))
                     (rule "applyEq" (formula "37") (term "0,0") (ifseqformula "1"))
                     (rule "polySimp_mulComm0" (formula "37") (term "0"))
                     (rule "close" (formula "37") (ifseqformula "12"))
                  )
                  (branch "result_1 >= 0 FALSE"
                     (rule "replace_known_right" (formula "7") (term "0,0") (ifseqformula "33"))
                     (rule "ifthenelse_false" (formula "7") (term "0"))
                     (rule "eqSymm" (formula "7"))
                     (rule "replace_known_right" (formula "25") (term "0,1,1") (ifseqformula "33"))
                     (rule "ifthenelse_false_for" (formula "25") (term "1,1"))
                     (rule "inEqSimp_geqRight" (formula "33"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "8"))
                     (rule "polySimp_mulComm1" (formula "35") (term "0"))
                     (rule "polySimp_homoEq" (formula "35"))
                     (rule "polySimp_mulLiterals" (formula "35") (term "1,0"))
                     (rule "polySimp_elimOne" (formula "35") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "35") (term "1,0"))
                     (rule "polySimp_sepPosMonomial" (formula "35"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "inEqSimp_contradEq3" (formula "26") (term "0") (ifseqformula "1"))
                     (rule "times_zero_1" (formula "26") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "26") (term "0,0,0"))
                     (rule "qeq_literals" (formula "26") (term "0,0"))
                     (rule "concrete_and_2" (formula "26") (term "0"))
                     (rule "concrete_or_2" (formula "26"))
                     (rule "andLeft" (formula "26"))
                     (rule "andLeft" (formula "26"))
                     (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "27"))
                     (rule "eqSymm" (formula "30"))
                     (rule "polySimp_homoEq" (formula "30"))
                     (rule "polySimp_mulLiterals" (formula "30") (term "1,0"))
                     (rule "polySimp_elimOne" (formula "30") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "30") (term "0,0"))
                     (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "27"))
                     (rule "polySimp_mulComm0" (formula "31") (term "0"))
                     (rule "applyEq" (formula "29") (term "1") (ifseqformula "27"))
                     (rule "applyEq" (formula "26") (term "0") (ifseqformula "31"))
                     (rule "inEqSimp_homoInEq0" (formula "26"))
                     (rule "polySimp_pullOutFactor1" (formula "26") (term "0"))
                     (rule "add_literals" (formula "26") (term "1,0"))
                     (rule "times_zero_1" (formula "26") (term "0"))
                     (rule "qeq_literals" (formula "26"))
                     (rule "true_left" (formula "26"))
                     (rule "applyEq" (formula "27") (term "0") (ifseqformula "30"))
                     (rule "inEqSimp_homoInEq1" (formula "27"))
                     (rule "polySimp_addComm1" (formula "27") (term "0"))
                     (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0"))
                     (rule "add_literals" (formula "27") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "27") (term "1,0,0"))
                     (rule "add_zero_right" (formula "27") (term "0,0"))
                     (rule "polySimp_sepPosMonomial" (formula "29"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "27"))
                     (rule "mul_literals" (formula "27") (term "1"))
                     (rule "inEqSimp_contradEq3" (formula "30") (term "0") (ifseqformula "1"))
                     (rule "times_zero_1" (formula "30") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "30") (term "0,0,0"))
                     (rule "qeq_literals" (formula "30") (term "0,0"))
                     (rule "concrete_and_2" (formula "30") (term "0"))
                     (rule "concrete_or_2" (formula "30"))
                     (rule "andLeft" (formula "30"))
                     (rule "andLeft" (formula "30"))
                     (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "31"))
                     (rule "polySimp_mulComm0" (formula "34") (term "0"))
                     (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "31"))
                     (rule "polySimp_mulComm0" (formula "28") (term "0"))
                     (rule "eqSymm" (formula "28"))
                     (rule "polySimp_homoEq" (formula "28"))
                     (rule "polySimp_mulLiterals" (formula "28") (term "1,0"))
                     (rule "polySimp_elimOne" (formula "28") (term "1,0"))
                     (rule "applyEq" (formula "32") (term "0") (ifseqformula "34"))
                     (rule "inEqSimp_homoInEq1" (formula "32"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "1,0"))
                     (rule "polySimp_elimOne" (formula "32") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "32") (term "0"))
                     (rule "polySimp_pullOutFactor2b" (formula "32") (term "0,0"))
                     (rule "add_literals" (formula "32") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "32") (term "1,0,0"))
                     (rule "add_zero_right" (formula "32") (term "0,0"))
                     (rule "applyEq" (formula "30") (term "0") (ifseqformula "34"))
                     (rule "inEqSimp_homoInEq0" (formula "30"))
                     (rule "polySimp_mulLiterals" (formula "30") (term "1,0"))
                     (rule "polySimp_pullOutFactor0" (formula "30") (term "0"))
                     (rule "add_literals" (formula "30") (term "1,0"))
                     (rule "times_zero_1" (formula "30") (term "0"))
                     (rule "qeq_literals" (formula "30"))
                     (rule "true_left" (formula "30"))
                     (rule "applyEq" (formula "16") (term "0,1") (ifseqformula "30"))
                     (rule "applyEq" (formula "32") (term "1") (ifseqformula "30"))
                     (rule "polySimp_sepPosMonomial" (formula "28"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "31"))
                     (rule "mul_literals" (formula "31") (term "1"))
                     (rule "inEqSimp_strengthen0" (formula "6") (ifseqformula "35"))
                     (rule "inEqSimp_contradEq3" (formula "35") (ifseqformula "6"))
                     (rule "polySimp_mulAssoc" (formula "35") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "35") (term "0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "35") (term "1,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "35") (term "0,0"))
                     (rule "add_literals" (formula "35") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "35") (term "1,0,0"))
                     (rule "add_zero_right" (formula "35") (term "0,0"))
                     (rule "qeq_literals" (formula "35") (term "0"))
                     (rule "concrete_and_2" (formula "35"))
                     (rule "false_right" (formula "35"))
                     (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "6"))
                     (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "7") (term "0"))
                     (rule "polySimp_rightDist" (formula "7") (term "0,0,0"))
                     (rule "mul_literals" (formula "7") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
                     (rule "add_literals" (formula "7") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
                     (rule "add_literals" (formula "7") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "7") (term "1,0,0"))
                     (rule "add_zero_right" (formula "7") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                     (rule "mul_literals" (formula "7") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "7"))
                     (rule "leq_literals" (formula "10") (term "0"))
                     (rule "concrete_or_1" (formula "10"))
                     (rule "true_left" (formula "10"))
                     (rule "jdiv_axiom" (formula "34") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0,0,2,1"))
                     (rule "eqSymm" (formula "1"))
                     (rule "polySimp_elimOne" (formula "1") (term "0,0,2,0"))
                     (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "11"))
                     (rule "inEqSimp_invertInEq1" (formula "1") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                     (rule "times_zero_2" (formula "1") (term "1,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                     (rule "inEqSimp_subsumption0" (formula "1") (term "0,0") (ifseqformula "26"))
                     (rule "leq_literals" (formula "1") (term "0,0,0"))
                     (rule "concrete_or_1" (formula "1") (term "0,0"))
                     (rule "ifthenelse_true" (formula "1") (term "0"))
                     (rule "eqSymm" (formula "1"))
                     (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "1"))
                     (rule "polySimp_mulComm0" (formula "35") (term "0"))
                     (rule "close" (formula "35") (ifseqformula "13"))
                  )
               )
               (branch "a <= -1 FALSE"
                  (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "11"))
                  (rule "ifthenelse_false" (formula "2") (term "0"))
                  (rule "replace_known_right" (formula "10") (term "0,1,0,1,0,1,1") (ifseqformula "11"))
                  (rule "ifthenelse_false" (formula "10") (term "1,0,1,0,1,1"))
                  (rule "replace_known_right" (formula "10") (term "0,0,0,0,1,0,1") (ifseqformula "11"))
                  (rule "ifthenelse_false" (formula "10") (term "0,0,0,1,0,1"))
                  (rule "replace_known_right" (formula "10") (term "0,0,0,0,0,1,0,1,1") (ifseqformula "11"))
                  (rule "ifthenelse_false" (formula "10") (term "0,0,0,0,1,0,1,1"))
                  (rule "inEqSimp_leqRight" (formula "11"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_homoInEq1" (formula "3"))
                  (rule "polySimp_addComm1" (formula "3") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1"))
                  (rule "polySimp_rightDist" (formula "3") (term "1"))
                  (rule "mul_literals" (formula "3") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                  (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "3"))
                  (rule "times_zero_1" (formula "6") (term "0,0"))
                  (rule "add_zero_left" (formula "6") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                  (rule "mul_literals" (formula "6") (term "1"))
                  (rule "inEqSimp_contradEq7" (formula "2") (term "0,0") (ifseqformula "6"))
                  (rule "times_zero_1" (formula "2") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "2") (term "0,0,0,0"))
                  (rule "leq_literals" (formula "2") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "2") (term "0,0"))
                  (rule "concrete_not_2" (formula "2") (term "0"))
                  (rule "concrete_or_1" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "inEqSimp_contradEq7" (formula "11") (term "0,0") (ifseqformula "5"))
                  (rule "times_zero_1" (formula "11") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "11") (term "0,0,0,0"))
                  (rule "leq_literals" (formula "11") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "11") (term "0,0"))
                  (rule "concrete_not_2" (formula "11") (term "0"))
                  (rule "concrete_impl_1" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "12"))
                  (rule "concrete_and_1" (formula "14") (term "0"))
                  (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "11"))
                  (rule "concrete_and_1" (formula "14"))
                  (rule "allRight" (formula "14") (inst "sk=x_9"))
                  (rule "orRight" (formula "14"))
                  (rule "orRight" (formula "14"))
                  (rule "notRight" (formula "15"))
                  (rule "orRight" (formula "15"))
                  (rule "notRight" (formula "16"))
                  (rule "inEqSimp_leqRight" (formula "16"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "8"))
                  (rule "leq_literals" (formula "4") (term "0"))
                  (rule "concrete_or_1" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "commute_or_2" (formula "15") (term "0"))
                  (rule "commute_or_2" (formula "15") (term "0,0"))
                  (rule "jdiv_axiom" (formula "13") (term "0,0"))
                  (rule "eqSymm" (formula "13"))
                  (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "8"))
                  (rule "ifthenelse_true" (formula "13") (term "0"))
                  (rule "eqSymm" (formula "13"))
                  (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "13"))
                  (rule "jdiv_axiom" (formula "15") (term "0,0"))
                  (rule "eqSymm" (formula "15"))
                  (rule "inEqSimp_subsumption1" (formula "15") (term "0,0") (ifseqformula "7"))
                  (rule "leq_literals" (formula "15") (term "0,0,0"))
                  (rule "concrete_or_1" (formula "15") (term "0,0"))
                  (rule "ifthenelse_true" (formula "15") (term "0"))
                  (rule "eqSymm" (formula "15"))
                  (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "15"))
                  (rule "jdiv_axiom" (formula "18") (term "0,0"))
                  (rule "eqSymm" (formula "1"))
                  (rule "jdiv_axiom" (formula "4") (term "0,0"))
                  (rule "eqSymm" (formula "4"))
                  (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "10"))
                  (rule "ifthenelse_true" (formula "4") (term "0"))
                  (rule "eqSymm" (formula "4"))
                  (rule "applyEqRigid" (formula "5") (term "0,0") (ifseqformula "4"))
                  (rule "jdiv_axiom" (formula "3") (term "0,0"))
                  (rule "eqSymm" (formula "3"))
                  (rule "inEqSimp_subsumption1" (formula "3") (term "0,0") (ifseqformula "10"))
                  (rule "leq_literals" (formula "3") (term "0,0,0"))
                  (rule "concrete_or_1" (formula "3") (term "0,0"))
                  (rule "ifthenelse_true" (formula "3") (term "0"))
                  (rule "eqSymm" (formula "3"))
                  (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "3"))
                  (rule "div_axiom" (formula "16") (term "1") (inst "quotient=quotient_39"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "16") (term "0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "16") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "16") (term "0,2,1,1"))
                  (rule "commute_and" (formula "16") (term "0,1"))
                  (rule "div_axiom" (formula "19") (term "1") (inst "quotient=quotient_40"))
                  (rule "polySimp_mulComm0" (formula "19") (term "0,2,1,1"))
                  (rule "polySimp_mulComm0" (formula "19") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "19") (term "0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,1,1,1,1"))
                  (rule "commute_and" (formula "19") (term "0,1"))
                  (rule "div_axiom" (formula "1") (term "1,0") (inst "quotient=quotient_41"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,2,1,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,1,1,1"))
                  (rule "inEqSimp_contradEq7" (formula "1") (term "0") (ifseqformula "3"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0"))
                  (rule "leq_literals" (formula "1") (term "0,0"))
                  (rule "concrete_and_2" (formula "1") (term "0"))
                  (rule "concrete_or_2" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "1"))
                  (rule "inEqSimp_subsumption1" (formula "3") (term "0") (ifseqformula "5"))
                  (rule "leq_literals" (formula "3") (term "0,0"))
                  (rule "concrete_or_1" (formula "3") (term "0"))
                  (rule "ifthenelse_true_for" (formula "3"))
                  (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "2"))
                  (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                  (rule "polySimp_elimOne" (formula "3") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0"))
                  (rule "polySimp_rightDist" (formula "3") (term "0,0,0"))
                  (rule "mul_literals" (formula "3") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor2b" (formula "3") (term "0,0"))
                  (rule "add_literals" (formula "3") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "3") (term "1,0,0"))
                  (rule "add_zero_right" (formula "3") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                  (rule "mul_literals" (formula "3") (term "1"))
                  (rule "div_axiom" (formula "4") (term "0,2,0") (inst "quotient=quotient_42"))
                  (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "4") (term "0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "4") (term "0,2,1,1"))
                  (rule "inEqSimp_contradEq7" (formula "4") (term "0") (ifseqformula "6"))
                  (rule "times_zero_1" (formula "4") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "4") (term "0,0,0"))
                  (rule "leq_literals" (formula "4") (term "0,0"))
                  (rule "concrete_and_2" (formula "4") (term "0"))
                  (rule "concrete_or_2" (formula "4"))
                  (rule "andLeft" (formula "4"))
                  (rule "andLeft" (formula "4"))
                  (rule "applyEq" (formula "7") (term "0,2,0") (ifseqformula "4"))
                  (rule "inEqSimp_subsumption1" (formula "6") (term "0") (ifseqformula "8"))
                  (rule "leq_literals" (formula "6") (term "0,0"))
                  (rule "concrete_or_1" (formula "6") (term "0"))
                  (rule "ifthenelse_true_for" (formula "6"))
                  (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "5"))
                  (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0"))
                  (rule "polySimp_elimOne" (formula "6") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0"))
                  (rule "polySimp_rightDist" (formula "6") (term "0,0,0"))
                  (rule "mul_literals" (formula "6") (term "0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0"))
                  (rule "add_literals" (formula "6") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "6") (term "1,0,0"))
                  (rule "add_zero_right" (formula "6") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                  (rule "mul_literals" (formula "6") (term "1"))
                  (rule "div_axiom" (formula "11") (term "1") (inst "quotient=quotient_43"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "11") (term "0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "11") (term "0,2,1,1"))
                  (rule "inEqSimp_contradEq7" (formula "11") (term "0") (ifseqformula "8"))
                  (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "11") (term "0,0,0"))
                  (rule "leq_literals" (formula "11") (term "0,0"))
                  (rule "concrete_and_2" (formula "11") (term "0"))
                  (rule "concrete_or_2" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "11"))
                  (rule "polySimp_mulComm0" (formula "15") (term "0"))
                  (rule "applyEqRigid" (formula "13") (term "0,2") (ifseqformula "15"))
                  (rule "inEqSimp_homoInEq1" (formula "13") (term "2"))
                  (rule "polySimp_addComm1" (formula "13") (term "0,2"))
                  (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,2"))
                  (rule "add_literals" (formula "13") (term "1,1,0,0,2"))
                  (rule "times_zero_1" (formula "13") (term "1,0,0,2"))
                  (rule "add_zero_right" (formula "13") (term "0,0,2"))
                  (rule "applyEq" (formula "13") (term "0,1") (ifseqformula "15"))
                  (rule "inEqSimp_homoInEq1" (formula "13") (term "1"))
                  (rule "polySimp_addComm1" (formula "13") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1"))
                  (rule "add_literals" (formula "13") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "13") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "13") (term "0,0,1"))
                  (rule "applyEq" (formula "12") (term "0") (ifseqformula "15"))
                  (rule "inEqSimp_homoInEq0" (formula "12"))
                  (rule "polySimp_pullOutFactor1" (formula "12") (term "0"))
                  (rule "add_literals" (formula "12") (term "1,0"))
                  (rule "times_zero_1" (formula "12") (term "0"))
                  (rule "qeq_literals" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "applyEqRigid" (formula "13") (term "1") (ifseqformula "11"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "2"))
                  (rule "mul_literals" (formula "12") (term "1,2"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "12") (term "0,1"))
                  (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "8"))
                  (rule "inEqSimp_subsumption1" (formula "12") (term "0") (ifseqformula "8"))
                  (rule "leq_literals" (formula "12") (term "0,0"))
                  (rule "concrete_or_1" (formula "12") (term "0"))
                  (rule "ifthenelse_true_for" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "div_axiom" (formula "9") (term "1") (inst "quotient=quotient_44"))
                  (rule "polySimp_mulComm0" (formula "9") (term "0,2,1,1"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "9") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "9") (term "0,1,1,1"))
                  (rule "inEqSimp_contradEq7" (formula "9") (term "0") (ifseqformula "8"))
                  (rule "times_zero_1" (formula "9") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "9") (term "0,0,0"))
                  (rule "leq_literals" (formula "9") (term "0,0"))
                  (rule "concrete_and_2" (formula "9") (term "0"))
                  (rule "concrete_or_2" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "9"))
                  (rule "polySimp_mulComm0" (formula "13") (term "0"))
                  (rule "applyEq" (formula "11") (term "0,2") (ifseqformula "13"))
                  (rule "inEqSimp_homoInEq1" (formula "11") (term "2"))
                  (rule "polySimp_addComm1" (formula "11") (term "0,2"))
                  (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,2"))
                  (rule "add_literals" (formula "11") (term "1,1,0,0,2"))
                  (rule "times_zero_1" (formula "11") (term "1,0,0,2"))
                  (rule "add_zero_right" (formula "11") (term "0,0,2"))
                  (rule "applyEq" (formula "11") (term "0,1") (ifseqformula "13"))
                  (rule "inEqSimp_homoInEq1" (formula "11") (term "1"))
                  (rule "polySimp_addComm1" (formula "11") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
                  (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "11") (term "0,0,1"))
                  (rule "applyEq" (formula "10") (term "0") (ifseqformula "13"))
                  (rule "inEqSimp_homoInEq0" (formula "10"))
                  (rule "polySimp_pullOutFactor1" (formula "10") (term "0"))
                  (rule "add_literals" (formula "10") (term "1,0"))
                  (rule "times_zero_1" (formula "10") (term "0"))
                  (rule "qeq_literals" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "applyEq" (formula "11") (term "1") (ifseqformula "9"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "2"))
                  (rule "mul_literals" (formula "10") (term "1,2"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "10") (term "0,1"))
                  (rule "replace_known_left" (formula "10") (term "1") (ifseqformula "8"))
                  (rule "inEqSimp_subsumption1" (formula "10") (term "0") (ifseqformula "8"))
                  (rule "leq_literals" (formula "10") (term "0,0"))
                  (rule "concrete_or_1" (formula "10") (term "0"))
                  (rule "ifthenelse_true_for" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "polySimp_critPair" (formula "26") (ifseqformula "29"))
                  (rule "polySimp_mulComm0" (formula "26") (term "0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,1,1,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "0,0"))
                  (rule "polySimp_mulComm1" (formula "26") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "0,1,0,0"))
                  (rule "polySimp_mulAssoc" (formula "26") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,0"))
                  (rule "polySimp_mulComm1" (formula "26") (term "1,1,0"))
                  (rule "polySimp_mulComm1" (formula "26") (term "0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "26") (term "0"))
                  (rule "polySimp_addComm1" (formula "26") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "26") (term "0"))
                  (rule "add_literals" (formula "26") (term "1,1,0"))
                  (rule "times_zero_1" (formula "26") (term "1,0"))
                  (rule "add_zero_right" (formula "26") (term "0"))
                  (rule "polySimp_addComm0" (formula "26") (term "0"))
                  (rule "polySimp_sepNegMonomial" (formula "26"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "0"))
                  (rule "polySimp_elimOne" (formula "26") (term "0"))
                  (rule "ifthenelse_split_for" (formula "28") (term "1,1"))
                  (branch "result_1 >= 0 TRUE"
                     (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "28"))
                     (rule "ifthenelse_true" (formula "7") (term "0"))
                     (rule "eqSymm" (formula "7"))
                     (rule "replace_known_left" (formula "24") (term "0,1,1") (ifseqformula "28"))
                     (rule "ifthenelse_true_for" (formula "24") (term "1,1"))
                     (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "7"))
                     (rule "polySimp_mulComm0" (formula "33") (term "0"))
                     (rule "inEqSimp_strengthen0" (formula "2") (ifseqformula "33"))
                     (rule "inEqSimp_contradEq3" (formula "33") (ifseqformula "2"))
                     (rule "polySimp_mulComm0" (formula "33") (term "1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0"))
                     (rule "add_literals" (formula "33") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "33") (term "1,0,0"))
                     (rule "add_zero_right" (formula "33") (term "0,0"))
                     (rule "qeq_literals" (formula "33") (term "0"))
                     (rule "concrete_and_2" (formula "33"))
                     (rule "false_right" (formula "33"))
                     (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "2"))
                     (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0"))
                     (rule "polySimp_rightDist" (formula "3") (term "0,0,0"))
                     (rule "mul_literals" (formula "3") (term "0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                     (rule "add_literals" (formula "3") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "3") (term "0,0"))
                     (rule "add_literals" (formula "3") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "3") (term "1,0,0"))
                     (rule "add_zero_right" (formula "3") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                     (rule "mul_literals" (formula "3") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "3"))
                     (rule "leq_literals" (formula "9") (term "0"))
                     (rule "concrete_or_1" (formula "9"))
                     (rule "true_left" (formula "9"))
                     (rule "cnf_rightDist" (formula "29"))
                     (rule "andLeft" (formula "29"))
                     (rule "commute_or" (formula "30"))
                     (rule "cnf_rightDist" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "commute_or" (formula "25"))
                     (rule "cnf_rightDist" (formula "30"))
                     (rule "andLeft" (formula "30"))
                     (rule "commute_or" (formula "31"))
                     (rule "cnf_rightDist" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "commute_or" (formula "25"))
                     (rule "polyDiv_pullOut" (formula "12") (term "0") (inst "polyDivCoeff=quotient_43"))
                     (rule "polySimp_mulComm1" (formula "12") (term "1,0,0,2,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0,2,0"))
                     (rule "polySimp_addComm0" (formula "12") (term "2,0"))
                     (rule "applyEq" (formula "12") (term "0,1,0,1,2,0") (ifseqformula "14"))
                     (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,2,0"))
                     (rule "add_literals" (formula "12") (term "1,0,1,2,0"))
                     (rule "times_zero_1" (formula "12") (term "0,1,2,0"))
                     (rule "inEqSimp_contradEq7" (formula "12") (term "0,0") (ifseqformula "3"))
                     (rule "times_zero_1" (formula "12") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "12") (term "0,0,0,0"))
                     (rule "leq_literals" (formula "12") (term "0,0,0"))
                     (rule "concrete_and_2" (formula "12") (term "0,0"))
                     (rule "ifthenelse_false" (formula "12") (term "0"))
                     (rule "polySimp_homoEq" (formula "12"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0"))
                     (rule "polySimp_pullOutFactor1" (formula "12") (term "0,0"))
                     (rule "add_literals" (formula "12") (term "1,0,0"))
                     (rule "times_zero_1" (formula "12") (term "0,0"))
                     (rule "add_zero_left" (formula "12") (term "0"))
                     (rule "polySimp_invertEq" (formula "12"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                     (rule "times_zero_2" (formula "12") (term "1"))
                     (rule "polySimp_elimOne" (formula "12") (term "0"))
                     (rule "polyDiv_zero" (formula "12") (term "0"))
                     (rule "ifthenelse_concrete4" (formula "12"))
                     (rule "div_literals" (formula "12") (term "0,1"))
                     (rule "inEqSimp_contradEq7" (formula "12") (term "0,0") (ifseqformula "3"))
                     (rule "times_zero_1" (formula "12") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "12") (term "0,0,0,0"))
                     (rule "leq_literals" (formula "12") (term "0,0,0"))
                     (rule "concrete_and_2" (formula "12") (term "0,0"))
                     (rule "concrete_not_2" (formula "12") (term "0"))
                     (rule "concrete_or_1" (formula "12"))
                     (rule "true_left" (formula "12"))
                     (rule "allLeft" (formula "35") (inst "t=x_9"))
                     (rule "applyEq" (formula "35") (term "0,0,1") (ifseqformula "8"))
                     (rule "polySimp_mulComm0" (formula "35") (term "0,1"))
                     (rule "applyEq" (formula "35") (term "0,0,0,1,0,0") (ifseqformula "10"))
                     (rule "polySimp_mulComm0" (formula "35") (term "0,0,1,0,0"))
                     (rule "replace_known_left" (formula "35") (term "0,1,0,0") (ifseqformula "11"))
                     (rule "concrete_not_1" (formula "35") (term "1,0,0"))
                     (rule "concrete_or_4" (formula "35") (term "0,0"))
                     (rule "applyEq" (formula "35") (term "0,0,0,1,0") (ifseqformula "12"))
                     (rule "polySimp_mulComm0" (formula "35") (term "0,0,1,0"))
                     (rule "replace_known_left" (formula "35") (term "0,1,0") (ifseqformula "13"))
                     (rule "concrete_not_1" (formula "35") (term "1,0"))
                     (rule "concrete_or_4" (formula "35") (term "0"))
                     (rule "inEqSimp_contradEq3" (formula "35") (term "1") (ifseqformula "2"))
                     (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                     (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "35") (term "0,0,1"))
                     (rule "qeq_literals" (formula "35") (term "0,1"))
                     (rule "concrete_and_2" (formula "35") (term "1"))
                     (rule "concrete_or_4" (formula "35"))
                     (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "35") (term "0"))
                     (rule "concrete_and_2" (formula "35"))
                     (rule "closeFalse" (formula "35"))
                  )
                  (branch "result_1 >= 0 FALSE"
                     (rule "replace_known_right" (formula "7") (term "0,0") (ifseqformula "32"))
                     (rule "ifthenelse_false" (formula "7") (term "0"))
                     (rule "eqSymm" (formula "7"))
                     (rule "replace_known_right" (formula "24") (term "0,1,1") (ifseqformula "32"))
                     (rule "ifthenelse_false_for" (formula "24") (term "1,1"))
                     (rule "inEqSimp_geqRight" (formula "32"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "8"))
                     (rule "polySimp_mulComm1" (formula "33") (term "0"))
                     (rule "polySimp_homoEq" (formula "33"))
                     (rule "polySimp_mulLiterals" (formula "33") (term "1,0"))
                     (rule "polySimp_elimOne" (formula "33") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "33") (term "1,0"))
                     (rule "polySimp_sepPosMonomial" (formula "33"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "inEqSimp_contradEq3" (formula "25") (term "0") (ifseqformula "1"))
                     (rule "times_zero_1" (formula "25") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "25") (term "0,0,0"))
                     (rule "qeq_literals" (formula "25") (term "0,0"))
                     (rule "concrete_and_2" (formula "25") (term "0"))
                     (rule "concrete_or_2" (formula "25"))
                     (rule "andLeft" (formula "25"))
                     (rule "andLeft" (formula "25"))
                     (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "26"))
                     (rule "polySimp_mulComm0" (formula "30") (term "0"))
                     (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "26"))
                     (rule "eqSymm" (formula "29"))
                     (rule "polySimp_mulComm0" (formula "29") (term "1"))
                     (rule "applyEq" (formula "27") (term "0") (ifseqformula "30"))
                     (rule "inEqSimp_homoInEq1" (formula "27"))
                     (rule "polySimp_addComm1" (formula "27") (term "0"))
                     (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0"))
                     (rule "add_literals" (formula "27") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "27") (term "1,0,0"))
                     (rule "add_zero_right" (formula "27") (term "0,0"))
                     (rule "applyEq" (formula "25") (term "0") (ifseqformula "30"))
                     (rule "inEqSimp_homoInEq0" (formula "25"))
                     (rule "polySimp_pullOutFactor1" (formula "25") (term "0"))
                     (rule "add_literals" (formula "25") (term "1,0"))
                     (rule "times_zero_1" (formula "25") (term "0"))
                     (rule "qeq_literals" (formula "25"))
                     (rule "true_left" (formula "25"))
                     (rule "applyEq" (formula "27") (term "1") (ifseqformula "25"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "26"))
                     (rule "mul_literals" (formula "26") (term "1"))
                     (rule "inEqSimp_contradEq3" (formula "29") (term "0") (ifseqformula "1"))
                     (rule "times_zero_1" (formula "29") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "29") (term "0,0,0"))
                     (rule "qeq_literals" (formula "29") (term "0,0"))
                     (rule "concrete_and_2" (formula "29") (term "0"))
                     (rule "concrete_or_2" (formula "29"))
                     (rule "andLeft" (formula "29"))
                     (rule "andLeft" (formula "29"))
                     (rule "applyEq" (formula "27") (term "0,0") (ifseqformula "30"))
                     (rule "polySimp_mulComm0" (formula "27") (term "0"))
                     (rule "eqSymm" (formula "27"))
                     (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "30"))
                     (rule "polySimp_mulComm0" (formula "33") (term "0"))
                     (rule "applyEq" (formula "32") (term "1") (ifseqformula "30"))
                     (rule "applyEq" (formula "31") (term "0") (ifseqformula "33"))
                     (rule "inEqSimp_homoInEq1" (formula "31"))
                     (rule "polySimp_addComm1" (formula "31") (term "0"))
                     (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0"))
                     (rule "add_literals" (formula "31") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "31") (term "1,0,0"))
                     (rule "add_zero_right" (formula "31") (term "0,0"))
                     (rule "applyEq" (formula "29") (term "0") (ifseqformula "33"))
                     (rule "inEqSimp_homoInEq0" (formula "29"))
                     (rule "polySimp_pullOutFactor1" (formula "29") (term "0"))
                     (rule "add_literals" (formula "29") (term "1,0"))
                     (rule "times_zero_1" (formula "29") (term "0"))
                     (rule "qeq_literals" (formula "29"))
                     (rule "true_left" (formula "29"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "30"))
                     (rule "mul_literals" (formula "30") (term "1"))
                     (rule "inEqSimp_strengthen0" (formula "6") (ifseqformula "33"))
                     (rule "inEqSimp_contradEq3" (formula "33") (ifseqformula "6"))
                     (rule "polySimp_mulAssoc" (formula "33") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "33") (term "0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "33") (term "1,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "33") (term "0,0"))
                     (rule "add_literals" (formula "33") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "33") (term "1,0,0"))
                     (rule "add_zero_right" (formula "33") (term "0,0"))
                     (rule "qeq_literals" (formula "33") (term "0"))
                     (rule "concrete_and_2" (formula "33"))
                     (rule "false_right" (formula "33"))
                     (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "6"))
                     (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "7") (term "0"))
                     (rule "polySimp_rightDist" (formula "7") (term "0,0,0"))
                     (rule "mul_literals" (formula "7") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
                     (rule "add_literals" (formula "7") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
                     (rule "add_literals" (formula "7") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "7") (term "1,0,0"))
                     (rule "add_zero_right" (formula "7") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                     (rule "mul_literals" (formula "7") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "7"))
                     (rule "leq_literals" (formula "10") (term "0"))
                     (rule "concrete_or_1" (formula "10"))
                     (rule "true_left" (formula "10"))
                     (rule "polyDiv_pullOut" (formula "13") (term "0") (inst "polyDivCoeff=quotient_43"))
                     (rule "polySimp_mulComm1" (formula "13") (term "1,0,0,2,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "0,1,0,0,2,0"))
                     (rule "polySimp_addComm0" (formula "13") (term "2,0"))
                     (rule "applyEqRigid" (formula "13") (term "0,1,0,1,2,0") (ifseqformula "15"))
                     (rule "polySimp_pullOutFactor1" (formula "13") (term "0,1,2,0"))
                     (rule "add_literals" (formula "13") (term "1,0,1,2,0"))
                     (rule "times_zero_1" (formula "13") (term "0,1,2,0"))
                     (rule "inEqSimp_contradEq7" (formula "13") (term "0,0") (ifseqformula "7"))
                     (rule "times_zero_1" (formula "13") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "13") (term "0,0,0,0"))
                     (rule "leq_literals" (formula "13") (term "0,0,0"))
                     (rule "concrete_and_2" (formula "13") (term "0,0"))
                     (rule "ifthenelse_false" (formula "13") (term "0"))
                     (rule "polySimp_homoEq" (formula "13"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0"))
                     (rule "polySimp_pullOutFactor1" (formula "13") (term "0,0"))
                     (rule "add_literals" (formula "13") (term "1,0,0"))
                     (rule "times_zero_1" (formula "13") (term "0,0"))
                     (rule "add_zero_left" (formula "13") (term "0"))
                     (rule "polySimp_invertEq" (formula "13"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                     (rule "times_zero_2" (formula "13") (term "1"))
                     (rule "polySimp_elimOne" (formula "13") (term "0"))
                     (rule "polyDiv_zero" (formula "13") (term "0"))
                     (rule "ifthenelse_concrete4" (formula "13"))
                     (rule "div_literals" (formula "13") (term "0,1"))
                     (rule "inEqSimp_contradEq7" (formula "13") (term "0,0") (ifseqformula "7"))
                     (rule "times_zero_1" (formula "13") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "13") (term "0,0,0,0"))
                     (rule "leq_literals" (formula "13") (term "0,0,0"))
                     (rule "concrete_and_2" (formula "13") (term "0,0"))
                     (rule "concrete_not_2" (formula "13") (term "0"))
                     (rule "concrete_or_1" (formula "13"))
                     (rule "true_left" (formula "13"))
                     (rule "allLeft" (formula "31") (inst "t=x_9"))
                     (rule "applyEqRigid" (formula "31") (term "0,0,0,1,0") (ifseqformula "13"))
                     (rule "polySimp_mulComm0" (formula "31") (term "0,0,1,0"))
                     (rule "replace_known_left" (formula "31") (term "0,1,0") (ifseqformula "14"))
                     (rule "concrete_not_1" (formula "31") (term "1,0"))
                     (rule "concrete_or_4" (formula "31") (term "0"))
                     (rule "applyEq" (formula "31") (term "0,0,1") (ifseqformula "9"))
                     (rule "polySimp_mulComm1" (formula "31") (term "0,1"))
                     (rule "polySimp_homoEq" (formula "31") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "31") (term "1,0,1"))
                     (rule "polySimp_elimOne" (formula "31") (term "1,0,1"))
                     (rule "polySimp_mulComm0" (formula "31") (term "1,0,1"))
                     (rule "applyEq" (formula "31") (term "0,0,0,1,0") (ifseqformula "11"))
                     (rule "polySimp_mulComm0" (formula "31") (term "0,0,1,0"))
                     (rule "replace_known_left" (formula "31") (term "0,1,0") (ifseqformula "12"))
                     (rule "concrete_not_1" (formula "31") (term "1,0"))
                     (rule "concrete_or_4" (formula "31") (term "0"))
                     (rule "polySimp_sepPosMonomial" (formula "31") (term "1"))
                     (rule "inEqSimp_contradEq3" (formula "31") (term "1") (ifseqformula "6"))
                     (rule "polySimp_mulAssoc" (formula "31") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "31") (term "0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "31") (term "1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "31") (term "1,0,0,1"))
                     (rule "polySimp_pullOutFactor2b" (formula "31") (term "0,0,1"))
                     (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "31") (term "0,0,1"))
                     (rule "qeq_literals" (formula "31") (term "0,1"))
                     (rule "concrete_and_2" (formula "31") (term "1"))
                     (rule "concrete_or_4" (formula "31"))
                     (rule "inEqSimp_contradInEq1" (formula "31") (ifseqformula "7"))
                     (rule "qeq_literals" (formula "31") (term "0"))
                     (rule "concrete_and_2" (formula "31"))
                     (rule "closeFalse" (formula "31"))
                  )
               )
            )
            (branch "CUT: b = abstrPred_geq_AND_abstrPred_or_0 FALSE"
               (rule "concrete_or_2" (formula "6"))
               (rule "applyEq" (formula "12") (term "0,0,0,0,1,0,0,1") (ifseqformula "6"))
               (rule "applyEq" (formula "1") (term "0,0,1") (ifseqformula "6"))
               (rule "applyEq" (formula "11") (term "0") (ifseqformula "6"))
               (rule "polySimp_homoEq" (formula "11"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,0"))
               (rule "polySimp_pullOutFactor1" (formula "11") (term "0"))
               (rule "add_literals" (formula "11") (term "1,0"))
               (rule "applyEq" (formula "12") (term "0,0,0,1,0") (ifseqformula "6"))
               (rule "applyEq" (formula "12") (term "1,0,1,0,0,1") (ifseqformula "6"))
               (rule "applyEq" (formula "12") (term "1,1,0") (ifseqformula "6"))
               (rule "polySimp_invertEq" (formula "1") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1"))
               (rule "times_zero_2" (formula "1") (term "1,0,1"))
               (rule "polySimp_elimOne" (formula "1") (term "0,0,1"))
               (rule "elimGcdEq" (formula "11") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=abstrPred_geq_AND_abstrPred_or_0") (inst "elimGcd=Z(2(#))"))
               (rule "eqClose" (formula "11") (term "0,0,0"))
               (rule "concrete_and_1" (formula "11") (term "0,0"))
               (rule "add_zero_left" (formula "11") (term "0,1,0"))
               (rule "add_zero_left" (formula "11") (term "0,0,1"))
               (rule "add_literals" (formula "11") (term "1,0,0"))
               (rule "add_zero_left" (formula "11") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0"))
               (rule "times_zero_1" (formula "11") (term "0,0,1"))
               (rule "eqClose" (formula "11") (term "0,1"))
               (rule "concrete_and_1" (formula "11") (term "1"))
               (rule "times_zero_1" (formula "11") (term "0,0,0"))
               (rule "times_zero_1" (formula "11") (term "0,1,0"))
               (rule "leq_literals" (formula "11") (term "0,0"))
               (rule "concrete_and_1" (formula "11") (term "0"))
               (rule "qeq_literals" (formula "11") (term "0"))
               (rule "ifthenelse_true_for" (formula "11"))
               (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "11"))
               (rule "concrete_not_2" (formula "1") (term "1"))
               (rule "concrete_or_3" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "inEqSimp_strengthen1" (formula "4") (ifseqformula "10"))
               (rule "add_zero_right" (formula "4") (term "1"))
               (rule "inEqSimp_contradEq7" (formula "10") (ifseqformula "4"))
               (rule "times_zero_1" (formula "10") (term "1,0,0"))
               (rule "add_zero_right" (formula "10") (term "0,0"))
               (rule "leq_literals" (formula "10") (term "0"))
               (rule "concrete_and_2" (formula "10"))
               (rule "false_right" (formula "10"))
               (rule "ifthenelse_split" (formula "9") (term "1,1,0,1"))
               (branch "a <= -1 TRUE"
                  (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "9"))
                  (rule "ifthenelse_true" (formula "1") (term "0"))
                  (rule "replace_known_left" (formula "10") (term "0,0,0,0,1,0,1") (ifseqformula "9"))
                  (rule "ifthenelse_true" (formula "10") (term "0,0,0,1,0,1"))
                  (rule "replace_known_left" (formula "10") (term "0,0,0,0,0,1,0,1,1") (ifseqformula "9"))
                  (rule "ifthenelse_true" (formula "10") (term "0,0,0,0,1,0,1,1"))
                  (rule "replace_known_left" (formula "10") (term "0,1,0,1,0,1,1") (ifseqformula "9"))
                  (rule "ifthenelse_true" (formula "10") (term "1,0,1,0,1,1"))
                  (rule "inEqSimp_homoInEq1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "inEqSimp_contradEq3" (formula "10") (term "0,0") (ifseqformula "9"))
                  (rule "times_zero_1" (formula "10") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "10") (term "0,0,0,0"))
                  (rule "qeq_literals" (formula "10") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "10") (term "0,0"))
                  (rule "concrete_not_2" (formula "10") (term "0"))
                  (rule "concrete_impl_1" (formula "10"))
                  (rule "andLeft" (formula "10"))
                  (rule "andLeft" (formula "10"))
                  (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
                  (rule "mul_literals" (formula "4") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0"))
                  (rule "add_literals" (formula "4") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                  (rule "polySimp_elimOne" (formula "4") (term "0"))
                  (rule "inEqSimp_subsumption0" (formula "10") (ifseqformula "4"))
                  (rule "leq_literals" (formula "10") (term "0"))
                  (rule "concrete_or_1" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "commute_or_2" (formula "12") (term "0"))
                  (rule "commute_or_2" (formula "12") (term "0,0"))
                  (rule "jdiv_axiom" (formula "13") (term "0,0,0,0"))
                  (rule "eqSymm" (formula "1"))
                  (rule "inEqSimp_contradInEq0" (formula "1") (term "0,0") (ifseqformula "5"))
                  (rule "qeq_literals" (formula "1") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "1") (term "0,0"))
                  (rule "ifthenelse_false" (formula "1") (term "0"))
                  (rule "eqSymm" (formula "1"))
                  (rule "applyEq" (formula "14") (term "0,0,0,0") (ifseqformula "1"))
                  (rule "polySimp_mulComm1" (formula "14") (term "0,0,0"))
                  (rule "polySimp_homoEq" (formula "14") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0"))
                  (rule "polySimp_sepPosMonomial" (formula "14") (term "0,0"))
                  (rule "polyDiv_pullOut" (formula "14") (term "0,0,0,0") (inst "polyDivCoeff=jdiv(mul(a, Z(neglit(1(#)))), result_1)"))
                  (rule "polySimp_mulComm1" (formula "14") (term "1,0,0,2,0,0,0,0"))
                  (rule "polySimp_addComm0" (formula "14") (term "2,0,0,0,0"))
                  (rule "applyEq" (formula "14") (term "0,1,0,1,2,0,0,0,0") (ifseqformula "12"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,2,0,0,0,0"))
                  (rule "polySimp_pullOutFactor0" (formula "14") (term "0,1,2,0,0,0,0"))
                  (rule "add_literals" (formula "14") (term "1,0,1,2,0,0,0,0"))
                  (rule "times_zero_1" (formula "14") (term "0,1,2,0,0,0,0"))
                  (rule "polySimp_addComm0" (formula "14") (term "2,0,0,0,0"))
                  (rule "polyDiv_zero" (formula "14") (term "0,2,0,0,0,0"))
                  (rule "div_literals" (formula "14") (term "1,0,2,0,0,0,0"))
                  (rule "polySimp_addComm0" (formula "14") (term "2,0,0,0,0"))
                  (rule "polyDiv_pullOut" (formula "1") (term "0,1") (inst "polyDivCoeff=jdiv(mul(a, Z(neglit(1(#)))), result_1)"))
                  (rule "eqSymm" (formula "1"))
                  (rule "polySimp_homoEq" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,0"))
                  (rule "polySimp_mulComm1" (formula "1") (term "1,0,0,2,1,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "2,1,0"))
                  (rule "applyEq" (formula "1") (term "0,1,0,1,2,1,0") (ifseqformula "12"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,2,1,0"))
                  (rule "polySimp_pullOutFactor0" (formula "1") (term "0,1,2,1,0"))
                  (rule "add_literals" (formula "1") (term "1,0,1,2,1,0"))
                  (rule "times_zero_1" (formula "1") (term "0,1,2,1,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "2,1,0"))
                  (rule "polySimp_sepPosMonomial" (formula "1"))
                  (rule "polyDiv_zero" (formula "1") (term "0,2,0"))
                  (rule "div_literals" (formula "1") (term "1,0,2,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "2,0"))
                  (rule "applyEq" (formula "14") (term "0,0,0,0") (ifseqformula "1"))
                  (rule "polySimp_mulComm1" (formula "14") (term "0,0,0"))
                  (rule "polySimp_homoEq" (formula "14") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0"))
                  (rule "polySimp_sepPosMonomial" (formula "14") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "1,0,0"))
                  (rule "jdiv_axiom" (formula "14") (term "0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,0,2,1"))
                  (rule "eqSymm" (formula "1"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,0,2,0"))
                  (rule "inEqSimp_invertInEq1" (formula "1") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                  (rule "times_zero_2" (formula "1") (term "1,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (term "0,0") (ifseqformula "7"))
                  (rule "qeq_literals" (formula "1") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "1") (term "0,0"))
                  (rule "ifthenelse_false" (formula "1") (term "0"))
                  (rule "eqSymm" (formula "1"))
                  (rule "applyEq" (formula "15") (term "0,0,1,0") (ifseqformula "1"))
                  (rule "polySimp_mulComm1" (formula "15") (term "0,1,0"))
                  (rule "polySimp_homoEq" (formula "15") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,0,1,0"))
                  (rule "polySimp_sepPosMonomial" (formula "15") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,1,0"))
                  (rule "polyDiv_pullOut" (formula "15") (term "0,0,1,0") (inst "polyDivCoeff=jdiv(abstrPred_geq_AND_abstrPred_or_0, result_1)"))
                  (rule "polySimp_mulComm1" (formula "15") (term "1,0,0,2,0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "15") (term "2,0,0,1,0"))
                  (rule "applyEq" (formula "15") (term "0,1,0,1,2,0,0,1,0") (ifseqformula "12"))
                  (rule "polySimp_pullOutFactor1" (formula "15") (term "0,1,2,0,0,1,0"))
                  (rule "add_literals" (formula "15") (term "1,0,1,2,0,0,1,0"))
                  (rule "times_zero_1" (formula "15") (term "0,1,2,0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "15") (term "2,0,0,1,0"))
                  (rule "polyDiv_zero" (formula "15") (term "0,2,0,0,1,0"))
                  (rule "div_literals" (formula "15") (term "1,0,2,0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "15") (term "2,0,0,1,0"))
                  (rule "polyDiv_pullOut" (formula "1") (term "0,1") (inst "polyDivCoeff=jdiv(abstrPred_geq_AND_abstrPred_or_0, result_1)"))
                  (rule "eqSymm" (formula "1"))
                  (rule "polySimp_homoEq" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,0"))
                  (rule "polySimp_mulComm1" (formula "1") (term "1,0,0,2,1,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "2,1,0"))
                  (rule "applyEq" (formula "1") (term "0,1,0,1,2,1,0") (ifseqformula "12"))
                  (rule "polySimp_pullOutFactor1" (formula "1") (term "0,1,2,1,0"))
                  (rule "add_literals" (formula "1") (term "1,0,1,2,1,0"))
                  (rule "times_zero_1" (formula "1") (term "0,1,2,1,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "2,1,0"))
                  (rule "polySimp_sepPosMonomial" (formula "1"))
                  (rule "polyDiv_zero" (formula "1") (term "0,2,0"))
                  (rule "div_literals" (formula "1") (term "1,0,2,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "2,0"))
                  (rule "applyEq" (formula "15") (term "0,0,1,0") (ifseqformula "1"))
                  (rule "polySimp_mulComm1" (formula "15") (term "0,1,0"))
                  (rule "polySimp_homoEq" (formula "15") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,0,1,0"))
                  (rule "polySimp_sepPosMonomial" (formula "15") (term "1,0"))
                  (rule "jdiv_axiom" (formula "12") (term "0,0"))
                  (rule "eqSymm" (formula "12"))
                  (rule "inEqSimp_subsumption1" (formula "12") (term "0,0") (ifseqformula "7"))
                  (rule "leq_literals" (formula "12") (term "0,0,0"))
                  (rule "concrete_or_1" (formula "12") (term "0,0"))
                  (rule "ifthenelse_true" (formula "12") (term "0"))
                  (rule "eqSymm" (formula "12"))
                  (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "12"))
                  (rule "applyEq" (formula "1") (term "0,2,0") (ifseqformula "12"))
                  (rule "jdiv_axiom" (formula "14") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "0,0,2,1"))
                  (rule "eqSymm" (formula "14"))
                  (rule "polySimp_elimOne" (formula "14") (term "0,0,2,0"))
                  (rule "inEqSimp_invertInEq1" (formula "14") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0"))
                  (rule "times_zero_2" (formula "14") (term "1,0,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "0,0,0"))
                  (rule "inEqSimp_subsumption0" (formula "14") (term "0,0") (ifseqformula "6"))
                  (rule "leq_literals" (formula "14") (term "0,0,0"))
                  (rule "concrete_or_1" (formula "14") (term "0,0"))
                  (rule "ifthenelse_true" (formula "14") (term "0"))
                  (rule "eqSymm" (formula "14"))
                  (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "14"))
                  (rule "applyEq" (formula "2") (term "0,2,0") (ifseqformula "14"))
                  (rule "div_axiom" (formula "2") (term "1,0") (inst "quotient=quotient_30"))
                  (rule "eqClose" (formula "2") (term "0"))
                  (rule "concrete_or_1" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "ifthenelse_split" (formula "2") (term "1,2,0"))
                  (branch "result_1 = 0 TRUE"
                     (rule "replace_known_left" (formula "1") (term "0,1,2,0") (ifseqformula "2"))
                     (rule "ifthenelse_true" (formula "1") (term "1,2,0"))
                     (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "2"))
                     (rule "ifthenelse_true" (formula "3") (term "0"))
                     (rule "eqSymm" (formula "3"))
                     (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "2"))
                     (rule "ifthenelse_true" (formula "1") (term "0"))
                     (rule "eqSymm" (formula "1"))
                     (rule "polySimp_homoEq" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                     (rule "polySimp_homoEq" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,0"))
                     (rule "applyEq" (formula "18") (term "1,0,0,1,0") (ifseqformula "2"))
                     (rule "polySimp_mulComm0" (formula "18") (term "0,1,0"))
                     (rule "applyEq" (formula "18") (term "1,0,0,0,0") (ifseqformula "2"))
                     (rule "polySimp_mulComm0" (formula "18") (term "0,0,0"))
                     (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "2"))
                     (rule "times_zero_1" (formula "14") (term "0"))
                     (rule "eqSymm" (formula "14"))
                     (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "2"))
                     (rule "eqSymm" (formula "15"))
                     (rule "applyEq" (formula "17") (term "0,0,0,1,0") (ifseqformula "2"))
                     (rule "jdiv_axiom_inline" (formula "17") (term "0,0,1,0"))
                     (rule "qeq_literals" (formula "17") (term "0,0,0,1,0"))
                     (rule "ifthenelse_true" (formula "17") (term "0,0,1,0"))
                     (rule "applyEq" (formula "16") (term "1,0,0") (ifseqformula "2"))
                     (rule "polySimp_mulComm0" (formula "16") (term "0"))
                     (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "2"))
                     (rule "eqSymm" (formula "13"))
                     (rule "applyEq" (formula "18") (term "0,0,0,1,0,1") (ifseqformula "2"))
                     (rule "jdiv_axiom_inline" (formula "18") (term "0,0,1,0,1"))
                     (rule "qeq_literals" (formula "18") (term "0,0,0,1,0,1"))
                     (rule "ifthenelse_true" (formula "18") (term "0,0,1,0,1"))
                     (rule "applyEq" (formula "1") (term "1,1,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "3") (term "1,1,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "17") (term "1,1,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "18") (term "1,1,0,1") (ifseqformula "2"))
                     (rule "apply_eq_monomials" (formula "18") (term "0,0,0,0,1,0,0,1") (ifseqformula "14"))
                     (rule "add_zero_left" (formula "18") (term "1,0,0,0,0,0,1,0,0,1"))
                     (rule "polySimp_mulAssoc" (formula "18") (term "0,0,0,0,0,1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "18") (term "0,0,0,0,0,0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0,0,0,1,0,0,1"))
                     (rule "polySimp_pullOutFactor0" (formula "18") (term "0,0,0,0,1,0,0,1"))
                     (rule "add_literals" (formula "18") (term "1,0,0,0,0,1,0,0,1"))
                     (rule "times_zero_1" (formula "18") (term "0,0,0,0,1,0,0,1"))
                     (rule "jdiv_axiom_inline" (formula "18") (term "0,0,0,1,0,0,1"))
                     (rule "qeq_literals" (formula "18") (term "0,0,0,0,1,0,0,1"))
                     (rule "ifthenelse_true" (formula "18") (term "0,0,0,1,0,0,1"))
                     (rule "applyEqRigid" (formula "17") (term "0,0,0,0,1,0,0") (ifseqformula "14"))
                     (rule "jdiv_axiom_inline" (formula "17") (term "0,0,0,1,0,0"))
                     (rule "qeq_literals" (formula "17") (term "0,0,0,0,1,0,0"))
                     (rule "ifthenelse_true" (formula "17") (term "0,0,0,1,0,0"))
                     (rule "applyEqRigid" (formula "18") (term "0,0,1,0,1,0") (ifseqformula "14"))
                     (rule "times_zero_2" (formula "18") (term "0,1,0,1,0"))
                     (rule "jdiv_axiom_inline" (formula "18") (term "1,0,1,0"))
                     (rule "qeq_literals" (formula "18") (term "0,1,0,1,0"))
                     (rule "ifthenelse_true" (formula "18") (term "1,0,1,0"))
                     (rule "div_literals" (formula "18") (term "1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "0,1,0"))
                     (rule "applyEq" (formula "8") (term "0") (ifseqformula "14"))
                     (rule "qeq_literals" (formula "8"))
                     (rule "closeFalse" (formula "8"))
                  )
                  (branch "result_1 = 0 FALSE"
                     (rule "add_zero_right" (formula "2") (term "2,0"))
                     (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "17"))
                     (rule "ifthenelse_false" (formula "1") (term "0"))
                     (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "17"))
                     (rule "ifthenelse_false" (formula "2") (term "0"))
                     (rule "eqSymm" (formula "2"))
                     (rule "replace_known_right" (formula "1") (term "0,1,0") (ifseqformula "17"))
                     (rule "ifthenelse_false" (formula "1") (term "1,0"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "eqSymm" (formula "1"))
                     (rule "polySimp_homoEq" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                     (rule "polySimp_homoEq" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,0"))
                     (rule "polySimp_sepPosMonomial" (formula "2"))
                     (rule "applyEq" (formula "18") (term "0,0,0,0") (ifseqformula "2"))
                     (rule "polySimp_mulComm1" (formula "18") (term "0,0,0"))
                     (rule "polySimp_homoEq" (formula "18") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "18") (term "1,0,0,0"))
                     (rule "applyEq" (formula "18") (term "1,0,0,0") (ifseqformula "15"))
                     (rule "polySimp_pullOutFactor1" (formula "18") (term "0,0,0"))
                     (rule "add_literals" (formula "18") (term "1,0,0,0"))
                     (rule "times_zero_1" (formula "18") (term "0,0,0"))
                     (rule "eqClose" (formula "18") (term "0,0"))
                     (rule "concrete_and_1" (formula "18") (term "0"))
                     (rule "polySimp_sepPosMonomial" (formula "1"))
                     (rule "applyEq" (formula "18") (term "0,0,0") (ifseqformula "1"))
                     (rule "polySimp_mulComm1" (formula "18") (term "0,0"))
                     (rule "polySimp_homoEq" (formula "18") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0"))
                     (rule "polySimp_elimOne" (formula "18") (term "1,0,0"))
                     (rule "applyEq" (formula "18") (term "1,0,0") (ifseqformula "13"))
                     (rule "polySimp_pullOutFactor2" (formula "18") (term "0,0"))
                     (rule "add_literals" (formula "18") (term "1,0,0"))
                     (rule "times_zero_1" (formula "18") (term "0,0"))
                     (rule "eqClose" (formula "18") (term "0"))
                     (rule "concrete_and_1" (formula "18"))
                     (rule "allRight" (formula "18") (inst "sk=x_8"))
                     (rule "orRight" (formula "18"))
                     (rule "orRight" (formula "18"))
                     (rule "notRight" (formula "19"))
                     (rule "orRight" (formula "19"))
                     (rule "notRight" (formula "20"))
                     (rule "inEqSimp_leqRight" (formula "20"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "div_axiom" (formula "15") (term "1") (inst "quotient=quotient_31"))
                     (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "21"))
                     (rule "concrete_or_2" (formula "15"))
                     (rule "andLeft" (formula "15"))
                     (rule "andLeft" (formula "15"))
                     (rule "polySimp_mulComm0" (formula "17") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,1,1"))
                     (rule "polySimp_mulComm0" (formula "17") (term "0,2"))
                     (rule "polySimp_mulComm0" (formula "16") (term "0"))
                     (rule "applyEq" (formula "19") (term "0,0") (ifseqformula "15"))
                     (rule "polySimp_mulComm0" (formula "19") (term "0"))
                     (rule "applyEq" (formula "16") (term "0") (ifseqformula "19"))
                     (rule "inEqSimp_homoInEq0" (formula "16"))
                     (rule "polySimp_pullOutFactor1" (formula "16") (term "0"))
                     (rule "add_literals" (formula "16") (term "1,0"))
                     (rule "times_zero_1" (formula "16") (term "0"))
                     (rule "qeq_literals" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "applyEq" (formula "16") (term "0,1") (ifseqformula "18"))
                     (rule "inEqSimp_homoInEq1" (formula "16") (term "1"))
                     (rule "polySimp_addComm1" (formula "16") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                     (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "16") (term "0,0,1"))
                     (rule "applyEq" (formula "16") (term "0,2") (ifseqformula "18"))
                     (rule "inEqSimp_homoInEq1" (formula "16") (term "2"))
                     (rule "polySimp_addComm1" (formula "16") (term "0,2"))
                     (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,2"))
                     (rule "add_literals" (formula "16") (term "1,1,0,0,2"))
                     (rule "times_zero_1" (formula "16") (term "1,0,0,2"))
                     (rule "add_zero_right" (formula "16") (term "0,0,2"))
                     (rule "applyEq" (formula "17") (term "1") (ifseqformula "15"))
                     (rule "applyEq" (formula "4") (term "0,1") (ifseqformula "15"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "16") (term "0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "2"))
                     (rule "mul_literals" (formula "16") (term "1,2"))
                     (rule "div_axiom" (formula "19") (term "1") (inst "quotient=quotient_32"))
                     (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "23"))
                     (rule "concrete_or_2" (formula "19"))
                     (rule "andLeft" (formula "19"))
                     (rule "andLeft" (formula "19"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,1,1"))
                     (rule "polySimp_mulComm0" (formula "21") (term "0,2"))
                     (rule "polySimp_mulComm0" (formula "21") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "20") (term "0"))
                     (rule "applyEq" (formula "23") (term "0,0") (ifseqformula "19"))
                     (rule "polySimp_mulComm0" (formula "23") (term "0"))
                     (rule "applyEq" (formula "21") (term "0,2") (ifseqformula "23"))
                     (rule "inEqSimp_homoInEq1" (formula "21") (term "2"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,0,2"))
                     (rule "polySimp_elimOne" (formula "21") (term "1,0,2"))
                     (rule "polySimp_addComm1" (formula "21") (term "0,2"))
                     (rule "polySimp_pullOutFactor2b" (formula "21") (term "0,0,2"))
                     (rule "add_literals" (formula "21") (term "1,1,0,0,2"))
                     (rule "times_zero_1" (formula "21") (term "1,0,0,2"))
                     (rule "add_zero_right" (formula "21") (term "0,0,2"))
                     (rule "applyEq" (formula "20") (term "0") (ifseqformula "23"))
                     (rule "inEqSimp_homoInEq0" (formula "20"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "1,0"))
                     (rule "polySimp_pullOutFactor0" (formula "20") (term "0"))
                     (rule "add_literals" (formula "20") (term "1,0"))
                     (rule "times_zero_1" (formula "20") (term "0"))
                     (rule "qeq_literals" (formula "20"))
                     (rule "true_left" (formula "20"))
                     (rule "applyEq" (formula "20") (term "0,1") (ifseqformula "22"))
                     (rule "inEqSimp_homoInEq1" (formula "20") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1"))
                     (rule "polySimp_elimOne" (formula "20") (term "1,0,1"))
                     (rule "polySimp_addComm1" (formula "20") (term "0,1"))
                     (rule "polySimp_pullOutFactor2b" (formula "20") (term "0,0,1"))
                     (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "20") (term "0,0,1"))
                     (rule "applyEq" (formula "5") (term "0,1") (ifseqformula "19"))
                     (rule "applyEq" (formula "21") (term "1") (ifseqformula "19"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "2"))
                     (rule "mul_literals" (formula "20") (term "1,2"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "20") (term "0,1"))
                     (rule "jdiv_axiom" (formula "24") (term "0,0"))
                     (rule "eqSymm" (formula "1"))
                     (rule "jdiv_axiom" (formula "4") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "0,0,2,1"))
                     (rule "eqSymm" (formula "4"))
                     (rule "polySimp_elimOne" (formula "4") (term "0,0,2,0"))
                     (rule "inEqSimp_invertInEq1" (formula "4") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0"))
                     (rule "times_zero_2" (formula "4") (term "1,0,0"))
                     (rule "polySimp_elimOne" (formula "4") (term "0,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "4") (term "0,0") (ifseqformula "12"))
                     (rule "qeq_literals" (formula "4") (term "0,0,0"))
                     (rule "concrete_and_2" (formula "4") (term "0,0"))
                     (rule "ifthenelse_false" (formula "4") (term "0"))
                     (rule "eqSymm" (formula "4"))
                     (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "4"))
                     (rule "polySimp_mulComm1" (formula "5") (term "0"))
                     (rule "polySimp_homoEq" (formula "5"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                     (rule "polySimp_elimOne" (formula "5") (term "1,0"))
                     (rule "polySimp_sepPosMonomial" (formula "5"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "1"))
                     (rule "polySimp_elimOne" (formula "5") (term "1"))
                     (rule "jdiv_axiom" (formula "3") (term "0,0"))
                     (rule "eqSymm" (formula "3"))
                     (rule "inEqSimp_contradInEq0" (formula "3") (term "0,0") (ifseqformula "12"))
                     (rule "qeq_literals" (formula "3") (term "0,0,0"))
                     (rule "concrete_and_2" (formula "3") (term "0,0"))
                     (rule "ifthenelse_false" (formula "3") (term "0"))
                     (rule "eqSymm" (formula "3"))
                     (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "3"))
                     (rule "polySimp_mulComm1" (formula "4") (term "0"))
                     (rule "polySimp_homoEq" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                     (rule "polySimp_elimOne" (formula "4") (term "1,0"))
                     (rule "polySimp_sepPosMonomial" (formula "4"))
                     (rule "ifthenelse_split_for" (formula "19"))
                     (branch "result_1 >= 0 TRUE"
                        (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "19"))
                        (rule "ifthenelse_true" (formula "1") (term "0"))
                        (rule "eqSymm" (formula "1"))
                        (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "1"))
                        (rule "inEqSimp_contradEq7" (formula "27") (ifseqformula "20"))
                        (rule "times_zero_1" (formula "27") (term "1,0,0"))
                        (rule "add_zero_right" (formula "27") (term "0,0"))
                        (rule "leq_literals" (formula "27") (term "0"))
                        (rule "concrete_and_2" (formula "27"))
                        (rule "false_right" (formula "27"))
                        (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "20"))
                        (rule "leq_literals" (formula "19") (term "0"))
                        (rule "concrete_or_1" (formula "19"))
                        (rule "true_left" (formula "19"))
                        (rule "div_axiom" (formula "5") (term "0,1") (inst "quotient=quotient_36"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,1,1,1,1"))
                        (rule "polySimp_mulComm0" (formula "5") (term "0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "5") (term "0,2,1,1"))
                        (rule "polySimp_mulComm0" (formula "5") (term "0,1,1,1"))
                        (rule "inEqSimp_contradEq7" (formula "5") (term "0") (ifseqformula "2"))
                        (rule "times_zero_1" (formula "5") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "5") (term "0,0,0"))
                        (rule "leq_literals" (formula "5") (term "0,0"))
                        (rule "concrete_and_2" (formula "5") (term "0"))
                        (rule "concrete_or_2" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "5"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0"))
                        (rule "applyEq" (formula "7") (term "0,2") (ifseqformula "9"))
                        (rule "inEqSimp_homoInEq1" (formula "7") (term "2"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,2"))
                        (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,2"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0,2"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0,2"))
                        (rule "add_zero_right" (formula "7") (term "0,0,2"))
                        (rule "applyEqRigid" (formula "6") (term "0") (ifseqformula "9"))
                        (rule "inEqSimp_homoInEq0" (formula "6"))
                        (rule "polySimp_pullOutFactor1" (formula "6") (term "0"))
                        (rule "add_literals" (formula "6") (term "1,0"))
                        (rule "times_zero_1" (formula "6") (term "0"))
                        (rule "qeq_literals" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "applyEqRigid" (formula "6") (term "0,1") (ifseqformula "8"))
                        (rule "inEqSimp_homoInEq1" (formula "6") (term "1"))
                        (rule "polySimp_addComm1" (formula "6") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1"))
                        (rule "add_literals" (formula "6") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "6") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "6") (term "0,0,1"))
                        (rule "applyEq" (formula "7") (term "0,1") (ifseqformula "5"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "2"))
                        (rule "mul_literals" (formula "6") (term "1,2"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "6") (term "0,1"))
                        (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "2"))
                        (rule "inEqSimp_contradInEq1" (formula "6") (term "2") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "6") (term "0,2"))
                        (rule "concrete_and_2" (formula "6") (term "2"))
                        (rule "ifthenelse_concrete" (formula "6"))
                        (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "2"))
                        (rule "leq_literals" (formula "6") (term "0"))
                        (rule "concrete_or_1" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "polyDiv_pullOut" (formula "19") (term "0") (inst "polyDivCoeff=quotient_31"))
                        (rule "polySimp_mulComm1" (formula "19") (term "1,0,0,2,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "0,1,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "19") (term "2,0"))
                        (rule "applyEq" (formula "19") (term "0,1,0,1,2,0") (ifseqformula "22"))
                        (rule "polySimp_pullOutFactor1" (formula "19") (term "0,1,2,0"))
                        (rule "add_literals" (formula "19") (term "1,0,1,2,0"))
                        (rule "times_zero_1" (formula "19") (term "0,1,2,0"))
                        (rule "inEqSimp_contradEq7" (formula "19") (term "0,0") (ifseqformula "20"))
                        (rule "times_zero_1" (formula "19") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "19") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "19") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "19") (term "0,0"))
                        (rule "ifthenelse_false" (formula "19") (term "0"))
                        (rule "polySimp_homoEq" (formula "19"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "polySimp_pullOutFactor1" (formula "19") (term "0,0"))
                        (rule "add_literals" (formula "19") (term "1,0,0"))
                        (rule "times_zero_1" (formula "19") (term "0,0"))
                        (rule "add_zero_left" (formula "19") (term "0"))
                        (rule "polySimp_invertEq" (formula "19"))
                        (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                        (rule "times_zero_2" (formula "19") (term "1"))
                        (rule "polySimp_elimOne" (formula "19") (term "0"))
                        (rule "polyDiv_zero" (formula "19") (term "0"))
                        (rule "ifthenelse_concrete4" (formula "19"))
                        (rule "div_literals" (formula "19") (term "0,1"))
                        (rule "inEqSimp_contradEq7" (formula "19") (term "0,0") (ifseqformula "20"))
                        (rule "times_zero_1" (formula "19") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "19") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "19") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "19") (term "0,0"))
                        (rule "concrete_not_2" (formula "19") (term "0"))
                        (rule "concrete_or_1" (formula "19"))
                        (rule "true_left" (formula "19"))
                        (rule "div_axiom" (formula "3") (term "0,1") (inst "quotient=quotient_37"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,1,1,1,1"))
                        (rule "polySimp_mulComm0" (formula "3") (term "0,1,1,1"))
                        (rule "polySimp_mulComm0" (formula "3") (term "0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "3") (term "0,2,1,1"))
                        (rule "inEqSimp_contradEq7" (formula "3") (term "0") (ifseqformula "2"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0,0"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_and_2" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "3"))
                        (rule "polySimp_mulComm0" (formula "7") (term "0"))
                        (rule "applyEq" (formula "5") (term "0,2") (ifseqformula "7"))
                        (rule "inEqSimp_homoInEq1" (formula "5") (term "2"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,2"))
                        (rule "polySimp_elimOne" (formula "5") (term "1,0,2"))
                        (rule "polySimp_addComm1" (formula "5") (term "0,2"))
                        (rule "polySimp_pullOutFactor2b" (formula "5") (term "0,0,2"))
                        (rule "add_literals" (formula "5") (term "1,1,0,0,2"))
                        (rule "times_zero_1" (formula "5") (term "1,0,0,2"))
                        (rule "add_zero_right" (formula "5") (term "0,0,2"))
                        (rule "applyEq" (formula "4") (term "0") (ifseqformula "7"))
                        (rule "inEqSimp_homoInEq0" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                        (rule "polySimp_pullOutFactor0" (formula "4") (term "0"))
                        (rule "add_literals" (formula "4") (term "1,0"))
                        (rule "times_zero_1" (formula "4") (term "0"))
                        (rule "qeq_literals" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "applyEq" (formula "4") (term "0,1") (ifseqformula "6"))
                        (rule "inEqSimp_homoInEq1" (formula "4") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1"))
                        (rule "polySimp_elimOne" (formula "4") (term "1,0,1"))
                        (rule "polySimp_addComm1" (formula "4") (term "0,1"))
                        (rule "polySimp_pullOutFactor2b" (formula "4") (term "0,0,1"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "4") (term "0,0,1"))
                        (rule "applyEq" (formula "5") (term "0,1") (ifseqformula "3"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "2"))
                        (rule "mul_literals" (formula "4") (term "1,2"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "4") (term "0,1"))
                        (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "2"))
                        (rule "inEqSimp_subsumption1" (formula "4") (term "0") (ifseqformula "2"))
                        (rule "leq_literals" (formula "4") (term "0,0"))
                        (rule "concrete_or_1" (formula "4") (term "0"))
                        (rule "ifthenelse_true_for" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "polySimp_critPair" (formula "22") (ifseqformula "25"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,1,1,0"))
                        (rule "polySimp_mulAssoc" (formula "22") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "0,1,0"))
                        (rule "polySimp_mulComm1" (formula "22") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "0,0,0"))
                        (rule "polySimp_mulComm1" (formula "22") (term "1,0,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0"))
                        (rule "polySimp_addComm1" (formula "22") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "22") (term "0"))
                        (rule "add_literals" (formula "22") (term "1,1,0"))
                        (rule "times_zero_1" (formula "22") (term "1,0"))
                        (rule "add_zero_right" (formula "22") (term "0"))
                        (rule "polySimp_addComm0" (formula "22") (term "0"))
                        (rule "polySimp_sepPosMonomial" (formula "22"))
                        (rule "div_axiom" (formula "1") (term "1") (inst "quotient=quotient_38"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,1,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,1,1,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,2,1,1"))
                        (rule "inEqSimp_contradEq7" (formula "1") (term "0") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0"))
                        (rule "leq_literals" (formula "1") (term "0,0"))
                        (rule "concrete_and_2" (formula "1") (term "0"))
                        (rule "concrete_or_2" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "1"))
                        (rule "polySimp_mulComm0" (formula "31") (term "0"))
                        (rule "applyEq" (formula "4") (term "1") (ifseqformula "1"))
                        (rule "inEqSimp_strengthen0" (formula "2") (ifseqformula "31"))
                        (rule "inEqSimp_contradEq3" (formula "31") (ifseqformula "2"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0"))
                        (rule "add_literals" (formula "31") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "31") (term "1,0,0"))
                        (rule "add_zero_right" (formula "31") (term "0,0"))
                        (rule "qeq_literals" (formula "31") (term "0"))
                        (rule "concrete_and_2" (formula "31"))
                        (rule "false_right" (formula "31"))
                        (rule "inEqSimp_subsumption1" (formula "3") (term "0") (ifseqformula "5"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_1" (formula "3") (term "0"))
                        (rule "ifthenelse_true_for" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "2"))
                        (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "polySimp_rightDist" (formula "3") (term "0,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "mul_literals" (formula "3") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "3"))
                        (rule "leq_literals" (formula "6") (term "0"))
                        (rule "concrete_or_1" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "polyDiv_pullOut" (formula "27") (term "0") (inst "polyDivCoeff=quotient_32"))
                        (rule "polySimp_mulComm1" (formula "27") (term "1,0,0,2,0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "0,1,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "27") (term "2,0"))
                        (rule "applyEq" (formula "27") (term "0,1,0,1,2,0") (ifseqformula "29"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,2,0"))
                        (rule "polySimp_pullOutFactor0" (formula "27") (term "0,1,2,0"))
                        (rule "add_literals" (formula "27") (term "1,0,1,2,0"))
                        (rule "times_zero_1" (formula "27") (term "0,1,2,0"))
                        (rule "inEqSimp_contradEq7" (formula "27") (term "0,0") (ifseqformula "23"))
                        (rule "times_zero_1" (formula "27") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "27") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "27") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "27") (term "0,0"))
                        (rule "ifthenelse_false" (formula "27") (term "0"))
                        (rule "polySimp_homoEq" (formula "27"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "27") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "27") (term "0"))
                        (rule "polySimp_pullOutFactor1" (formula "27") (term "0,0"))
                        (rule "add_literals" (formula "27") (term "1,0,0"))
                        (rule "times_zero_1" (formula "27") (term "0,0"))
                        (rule "add_zero_left" (formula "27") (term "0"))
                        (rule "polySimp_invertEq" (formula "27"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "0"))
                        (rule "times_zero_2" (formula "27") (term "1"))
                        (rule "polySimp_elimOne" (formula "27") (term "0"))
                        (rule "polyDiv_zero" (formula "27") (term "0"))
                        (rule "ifthenelse_concrete4" (formula "27"))
                        (rule "div_literals" (formula "27") (term "0,1"))
                        (rule "inEqSimp_contradEq7" (formula "27") (term "0,0") (ifseqformula "23"))
                        (rule "times_zero_1" (formula "27") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "27") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "27") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "27") (term "0,0"))
                        (rule "concrete_not_2" (formula "27") (term "0"))
                        (rule "concrete_or_1" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "allLeft" (formula "29") (inst "t=result_1"))
                        (rule "applyEq" (formula "29") (term "0,0,0,1,0,0") (ifseqformula "27"))
                        (rule "polySimp_mulComm0" (formula "29") (term "0,0,1,0,0"))
                        (rule "replace_known_left" (formula "29") (term "0,1,0,0") (ifseqformula "28"))
                        (rule "concrete_not_1" (formula "29") (term "1,0,0"))
                        (rule "concrete_or_4" (formula "29") (term "0,0"))
                        (rule "applyEq" (formula "29") (term "0,0,0,1,0") (ifseqformula "24"))
                        (rule "polySimp_mulComm0" (formula "29") (term "0,0,1,0"))
                        (rule "replace_known_left" (formula "29") (term "0,1,0") (ifseqformula "26"))
                        (rule "concrete_not_1" (formula "29") (term "1,0"))
                        (rule "concrete_or_4" (formula "29") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "23"))
                        (rule "qeq_literals" (formula "29") (term "0,0"))
                        (rule "concrete_and_2" (formula "29") (term "0"))
                        (rule "concrete_or_2" (formula "29"))
                        (rule "polyDiv_pullOut" (formula "9") (term "0") (inst "polyDivCoeff=quotient_36"))
                        (rule "polySimp_mulComm1" (formula "9") (term "1,0,0,2,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0,1,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "9") (term "2,0"))
                        (rule "applyEqRigid" (formula "9") (term "0,1,0,1,2,0") (ifseqformula "11"))
                        (rule "polySimp_pullOutFactor1" (formula "9") (term "0,1,2,0"))
                        (rule "add_literals" (formula "9") (term "1,0,1,2,0"))
                        (rule "times_zero_1" (formula "9") (term "0,1,2,0"))
                        (rule "inEqSimp_contradEq7" (formula "9") (term "0,0") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "9") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "9") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "9") (term "0,0"))
                        (rule "ifthenelse_false" (formula "9") (term "0"))
                        (rule "polySimp_homoEq" (formula "9"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0"))
                        (rule "polySimp_pullOutFactor1" (formula "9") (term "0,0"))
                        (rule "add_literals" (formula "9") (term "1,0,0"))
                        (rule "times_zero_1" (formula "9") (term "0,0"))
                        (rule "add_zero_left" (formula "9") (term "0"))
                        (rule "polySimp_invertEq" (formula "9"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                        (rule "times_zero_2" (formula "9") (term "1"))
                        (rule "polySimp_elimOne" (formula "9") (term "0"))
                        (rule "polyDiv_zero" (formula "9") (term "0"))
                        (rule "ifthenelse_concrete4" (formula "9"))
                        (rule "div_literals" (formula "9") (term "0,1"))
                        (rule "inEqSimp_contradEq7" (formula "9") (term "0,0") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "9") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "9") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "9") (term "0,0"))
                        (rule "concrete_not_2" (formula "9") (term "0"))
                        (rule "concrete_or_1" (formula "9"))
                        (rule "true_left" (formula "9"))
                        (rule "allLeft" (formula "29") (inst "t=x_8"))
                        (rule "applyEq" (formula "29") (term "0,0,1") (ifseqformula "5"))
                        (rule "polySimp_mulComm0" (formula "29") (term "0,1"))
                        (rule "inEqSimp_contradEq3" (formula "29") (term "1") (ifseqformula "2"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                        (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "29") (term "0,0,1"))
                        (rule "qeq_literals" (formula "29") (term "0,1"))
                        (rule "concrete_and_2" (formula "29") (term "1"))
                        (rule "concrete_or_4" (formula "29"))
                        (rule "inEqSimp_contradInEq1" (formula "29") (term "0,0") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "29") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "29") (term "0,0"))
                        (rule "concrete_or_2" (formula "29") (term "0"))
                        (rule "polyDiv_pullOut" (formula "6") (term "0") (inst "polyDivCoeff=quotient_37"))
                        (rule "polySimp_mulComm1" (formula "6") (term "1,0,0,2,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "6") (term "2,0"))
                        (rule "applyEq" (formula "6") (term "0,1,0,1,2,0") (ifseqformula "8"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,2,0"))
                        (rule "polySimp_pullOutFactor0" (formula "6") (term "0,1,2,0"))
                        (rule "add_literals" (formula "6") (term "1,0,1,2,0"))
                        (rule "times_zero_1" (formula "6") (term "0,1,2,0"))
                        (rule "inEqSimp_contradEq7" (formula "6") (term "0,0") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "6") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "6") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "6") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "6") (term "0,0"))
                        (rule "ifthenelse_false" (formula "6") (term "0"))
                        (rule "polySimp_homoEq" (formula "6"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0"))
                        (rule "polySimp_pullOutFactor1" (formula "6") (term "0,0"))
                        (rule "add_literals" (formula "6") (term "1,0,0"))
                        (rule "times_zero_1" (formula "6") (term "0,0"))
                        (rule "add_zero_left" (formula "6") (term "0"))
                        (rule "polySimp_invertEq" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                        (rule "times_zero_2" (formula "6") (term "1"))
                        (rule "polySimp_elimOne" (formula "6") (term "0"))
                        (rule "polyDiv_zero" (formula "6") (term "0"))
                        (rule "ifthenelse_concrete4" (formula "6"))
                        (rule "div_literals" (formula "6") (term "0,1"))
                        (rule "inEqSimp_contradEq7" (formula "6") (term "0,0") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "6") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "6") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "6") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "6") (term "0,0"))
                        (rule "concrete_not_2" (formula "6") (term "0"))
                        (rule "concrete_or_1" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "polySimp_critPair" (formula "9") (ifseqformula "7"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,1,1,0"))
                        (rule "polySimp_mulAssoc" (formula "9") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0,1,0"))
                        (rule "polySimp_mulComm1" (formula "9") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                        (rule "polySimp_mulComm1" (formula "9") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0"))
                        (rule "polySimp_addComm1" (formula "9") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                        (rule "add_literals" (formula "9") (term "1,1,0"))
                        (rule "times_zero_1" (formula "9") (term "1,0"))
                        (rule "add_zero_right" (formula "9") (term "0"))
                        (rule "polySimp_addComm0" (formula "9") (term "0"))
                        (rule "polySimp_sepPosMonomial" (formula "9"))
                        (rule "jdiv_axiom" (formula "28") (term "0,0"))
                        (rule "eqSymm" (formula "28"))
                        (rule "inEqSimp_subsumption1" (formula "28") (term "0,0") (ifseqformula "22"))
                        (rule "leq_literals" (formula "28") (term "0,0,0"))
                        (rule "concrete_or_1" (formula "28") (term "0,0"))
                        (rule "ifthenelse_true" (formula "28") (term "0"))
                        (rule "eqSymm" (formula "28"))
                        (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "28"))
                        (rule "polyDiv_pullOut" (formula "29") (term "0,0") (inst "polyDivCoeff=Z(1(#))"))
                        (rule "mul_literals" (formula "29") (term "0,1,0,0,2,0,0"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,2,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "29") (term "0,0,2,0,0"))
                        (rule "add_literals" (formula "29") (term "1,0,0,2,0,0"))
                        (rule "times_zero_1" (formula "29") (term "0,0,2,0,0"))
                        (rule "polySimp_addComm0" (formula "29") (term "2,0,0"))
                        (rule "inEqSimp_contradEq7" (formula "29") (term "0,0,0") (ifseqformula "22"))
                        (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "29") (term "0,0,0,0,0"))
                        (rule "leq_literals" (formula "29") (term "0,0,0,0"))
                        (rule "concrete_and_2" (formula "29") (term "0,0,0"))
                        (rule "ifthenelse_false" (formula "29") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "29") (term "0"))
                        (rule "polySimp_rightDist" (formula "29") (term "0"))
                        (rule "polySimp_homoEq" (formula "29"))
                        (rule "polySimp_elimOne" (formula "29") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "29") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "29") (term "0"))
                        (rule "polySimp_pullOutFactor1" (formula "29") (term "0,0"))
                        (rule "add_literals" (formula "29") (term "1,0,0"))
                        (rule "times_zero_1" (formula "29") (term "0,0"))
                        (rule "add_zero_left" (formula "29") (term "0"))
                        (rule "polySimp_invertEq" (formula "29"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                        (rule "times_zero_2" (formula "29") (term "1"))
                        (rule "polySimp_elimOne" (formula "29") (term "0"))
                        (rule "polyDiv_zero" (formula "29") (term "0,0"))
                        (rule "div_literals" (formula "29") (term "1,0,0"))
                        (rule "inEqSimp_contradEq7" (formula "29") (term "0,0,0") (ifseqformula "22"))
                        (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "29") (term "0,0,0,0,0"))
                        (rule "leq_literals" (formula "29") (term "0,0,0,0"))
                        (rule "concrete_and_2" (formula "29") (term "0,0,0"))
                        (rule "ifthenelse_false" (formula "29") (term "0,0"))
                        (rule "times_zero_2" (formula "29") (term "0"))
                        (rule "eqClose" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "polyDiv_pullOut" (formula "28") (term "1") (inst "polyDivCoeff=Z(1(#))"))
                        (rule "mul_literals" (formula "28") (term "0,1,0,0,2,1"))
                        (rule "eqSymm" (formula "28"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,2,0"))
                        (rule "polySimp_pullOutFactor1" (formula "28") (term "0,0,2,0"))
                        (rule "add_literals" (formula "28") (term "1,0,0,2,0"))
                        (rule "times_zero_1" (formula "28") (term "0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "28") (term "2,0"))
                        (rule "inEqSimp_contradEq7" (formula "28") (term "0,0") (ifseqformula "22"))
                        (rule "times_zero_1" (formula "28") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "28") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "28") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "28") (term "0,0"))
                        (rule "ifthenelse_false" (formula "28") (term "0"))
                        (rule "eqSymm" (formula "28"))
                        (rule "polyDiv_zero" (formula "28") (term "1,1"))
                        (rule "div_literals" (formula "28") (term "1,1,1"))
                        (rule "polySimp_homoEq" (formula "28"))
                        (rule "polySimp_addComm1" (formula "28") (term "0"))
                        (rule "polySimp_sepPosMonomial" (formula "28"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1"))
                        (rule "polySimp_rightDist" (formula "28") (term "1"))
                        (rule "mul_literals" (formula "28") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "28") (term "1,1"))
                        (rule "inEqSimp_contradEq7" (formula "28") (term "0,0") (ifseqformula "22"))
                        (rule "times_zero_1" (formula "28") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "28") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "28") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "28") (term "0,0"))
                        (rule "ifthenelse_false" (formula "28") (term "0"))
                        (rule "polySimp_homoEq" (formula "28"))
                        (rule "times_zero_2" (formula "28") (term "1,0"))
                        (rule "add_zero_right" (formula "28") (term "0"))
                        (rule "polySimp_sepPosMonomial" (formula "28"))
                        (rule "mul_literals" (formula "28") (term "1"))
                        (rule "polySimp_critPair" (formula "25") (ifseqformula "24"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,1,1,0"))
                        (rule "polySimp_mulAssoc" (formula "25") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "25") (term "0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "25") (term "0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "25") (term "1,0"))
                        (rule "polySimp_mulComm1" (formula "25") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "25") (term "0,1,0"))
                        (rule "polySimp_mulComm1" (formula "25") (term "0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "25") (term "0,0"))
                        (rule "polySimp_mulComm1" (formula "25") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "25") (term "0,1,0,0"))
                        (rule "polySimp_mulAssoc" (formula "25") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0"))
                        (rule "polySimp_addComm1" (formula "25") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "25") (term "0"))
                        (rule "add_literals" (formula "25") (term "1,1,0"))
                        (rule "times_zero_1" (formula "25") (term "1,0"))
                        (rule "add_zero_right" (formula "25") (term "0"))
                        (rule "polySimp_addComm0" (formula "25") (term "0"))
                        (rule "apply_eq_monomials" (formula "25") (term "1,0") (ifseqformula "28"))
                        (rule "polySimp_rightDist" (formula "25") (term "0,1,0"))
                        (rule "polySimp_mulComm1" (formula "25") (term "1,0,1,0"))
                        (rule "polySimp_mulComm1" (formula "25") (term "0,1,0,1,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "25") (term "1,0"))
                        (rule "add_literals" (formula "25") (term "1,1,1,0"))
                        (rule "times_zero_1" (formula "25") (term "1,1,0"))
                        (rule "add_zero_right" (formula "25") (term "1,0"))
                        (rule "polySimp_mulAssoc" (formula "25") (term "1,0"))
                        (rule "polySimp_pullOutFactor1" (formula "25") (term "0"))
                        (rule "add_literals" (formula "25") (term "1,0"))
                        (rule "times_zero_1" (formula "25") (term "0"))
                        (rule "eqClose" (formula "25"))
                        (rule "true_left" (formula "25"))
                        (rule "jdiv_axiom" (formula "29") (term "0,0,0,1"))
                        (rule "eqSymm" (formula "29"))
                        (rule "inEqSimp_subsumption1" (formula "29") (term "0,0") (ifseqformula "17"))
                        (rule "leq_literals" (formula "29") (term "0,0,0"))
                        (rule "concrete_or_1" (formula "29") (term "0,0"))
                        (rule "ifthenelse_true" (formula "29") (term "0"))
                        (rule "eqSymm" (formula "29"))
                        (rule "applyEq" (formula "30") (term "0,0,0,1") (ifseqformula "29"))
                        (rule "polyDiv_pullOut" (formula "30") (term "0,0,0,1") (inst "polyDivCoeff=quotient_36"))
                        (rule "polySimp_mulComm1" (formula "30") (term "1,0,0,2,0,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "30") (term "0,1,0,0,2,0,0,0,1"))
                        (rule "polySimp_addComm0" (formula "30") (term "2,0,0,0,1"))
                        (rule "applyEqRigid" (formula "30") (term "0,1,0,1,2,0,0,0,1") (ifseqformula "10"))
                        (rule "polySimp_pullOutFactor1" (formula "30") (term "0,1,2,0,0,0,1"))
                        (rule "add_literals" (formula "30") (term "1,0,1,2,0,0,0,1"))
                        (rule "times_zero_1" (formula "30") (term "0,1,2,0,0,0,1"))
                        (rule "inEqSimp_contradEq7" (formula "30") (term "0,0,0,0,1") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0,0,1"))
                        (rule "add_zero_right" (formula "30") (term "0,0,0,0,0,0,1"))
                        (rule "leq_literals" (formula "30") (term "0,0,0,0,0,1"))
                        (rule "concrete_and_2" (formula "30") (term "0,0,0,0,1"))
                        (rule "ifthenelse_false" (formula "30") (term "0,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "30") (term "0,0,1"))
                        (rule "polySimp_rightDist" (formula "30") (term "0,0,1"))
                        (rule "polySimp_homoEq" (formula "30") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "30") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0,0,1"))
                        (rule "applyEq" (formula "30") (term "0,1,0,0,0,1") (ifseqformula "10"))
                        (rule "polySimp_pullOutFactor1" (formula "30") (term "0,0,0,1"))
                        (rule "add_literals" (formula "30") (term "1,0,0,0,1"))
                        (rule "times_zero_1" (formula "30") (term "0,0,0,1"))
                        (rule "add_zero_left" (formula "30") (term "0,0,1"))
                        (rule "polySimp_invertEq" (formula "30") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "0,0,1"))
                        (rule "times_zero_2" (formula "30") (term "1,0,1"))
                        (rule "polySimp_elimOne" (formula "30") (term "0,0,1"))
                        (rule "polyDiv_zero" (formula "30") (term "0,0,0,1"))
                        (rule "div_literals" (formula "30") (term "1,0,0,0,1"))
                        (rule "inEqSimp_contradEq7" (formula "30") (term "0,0,0,0,1") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0,0,1"))
                        (rule "add_zero_right" (formula "30") (term "0,0,0,0,0,0,1"))
                        (rule "leq_literals" (formula "30") (term "0,0,0,0,0,1"))
                        (rule "concrete_and_2" (formula "30") (term "0,0,0,0,1"))
                        (rule "ifthenelse_false" (formula "30") (term "0,0,0,1"))
                        (rule "times_zero_2" (formula "30") (term "0,0,1"))
                        (rule "eqClose" (formula "30") (term "0,1"))
                        (rule "concrete_not_1" (formula "30") (term "1"))
                        (rule "concrete_or_4" (formula "30"))
                        (rule "notLeft" (formula "30"))
                        (rule "polyDiv_pullOut" (formula "29") (term "1") (inst "polyDivCoeff=quotient_36"))
                        (rule "eqSymm" (formula "29"))
                        (rule "polySimp_mulComm1" (formula "29") (term "1,0,0,2,0"))
                        (rule "polySimp_mulComm0" (formula "29") (term "0,1,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "29") (term "2,0"))
                        (rule "applyEqRigid" (formula "29") (term "0,1,0,1,2,0") (ifseqformula "10"))
                        (rule "polySimp_pullOutFactor1" (formula "29") (term "0,1,2,0"))
                        (rule "add_literals" (formula "29") (term "1,0,1,2,0"))
                        (rule "times_zero_1" (formula "29") (term "0,1,2,0"))
                        (rule "inEqSimp_contradEq7" (formula "29") (term "0,0") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "29") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "29") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "29") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "29") (term "0,0"))
                        (rule "ifthenelse_false" (formula "29") (term "0"))
                        (rule "eqSymm" (formula "29"))
                        (rule "polyDiv_zero" (formula "29") (term "1,1"))
                        (rule "div_literals" (formula "29") (term "1,1,1"))
                        (rule "polySimp_homoEq" (formula "29"))
                        (rule "polySimp_addComm1" (formula "29") (term "0"))
                        (rule "polySimp_sepPosMonomial" (formula "29"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1"))
                        (rule "polySimp_rightDist" (formula "29") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "29") (term "1,1"))
                        (rule "polySimp_mulComm0" (formula "29") (term "0,1"))
                        (rule "inEqSimp_contradEq7" (formula "29") (term "0,0") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "29") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "29") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "29") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "29") (term "0,0"))
                        (rule "ifthenelse_false" (formula "29") (term "0"))
                        (rule "polySimp_homoEq" (formula "29"))
                        (rule "times_zero_2" (formula "29") (term "1,0"))
                        (rule "add_zero_right" (formula "29") (term "0"))
                        (rule "polySimp_sepPosMonomial" (formula "29"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "1"))
                        (rule "polySimp_elimOne" (formula "29") (term "1"))
                        (rule "jdiv_axiom" (formula "31") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,2,1"))
                        (rule "eqSymm" (formula "1"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,0,2,0"))
                        (rule "inEqSimp_invertInEq1" (formula "1") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                        (rule "times_zero_2" (formula "1") (term "1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                        (rule "inEqSimp_subsumption0" (formula "1") (term "0,0") (ifseqformula "17"))
                        (rule "leq_literals" (formula "1") (term "0,0,0"))
                        (rule "concrete_or_1" (formula "1") (term "0,0"))
                        (rule "ifthenelse_true" (formula "1") (term "0"))
                        (rule "eqSymm" (formula "1"))
                        (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "1"))
                        (rule "polyDiv_pullOut" (formula "32") (term "0,0") (inst "polyDivCoeff=quotient_37"))
                        (rule "polySimp_mulComm1" (formula "32") (term "1,0,0,2,0,0"))
                        (rule "polySimp_mulComm0" (formula "32") (term "0,1,0,0,2,0,0"))
                        (rule "polySimp_addComm0" (formula "32") (term "2,0,0"))
                        (rule "applyEq" (formula "32") (term "0,1,0,1,2,0,0") (ifseqformula "8"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1,0,1,2,0,0"))
                        (rule "polySimp_pullOutFactor0" (formula "32") (term "0,1,2,0,0"))
                        (rule "add_literals" (formula "32") (term "1,0,1,2,0,0"))
                        (rule "times_zero_1" (formula "32") (term "0,1,2,0,0"))
                        (rule "inEqSimp_contradEq7" (formula "32") (term "0,0,0") (ifseqformula "4"))
                        (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "32") (term "0,0,0,0,0"))
                        (rule "leq_literals" (formula "32") (term "0,0,0,0"))
                        (rule "concrete_and_2" (formula "32") (term "0,0,0"))
                        (rule "ifthenelse_false" (formula "32") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "32") (term "0"))
                        (rule "polySimp_rightDist" (formula "32") (term "0"))
                        (rule "polySimp_homoEq" (formula "32"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "32") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "32") (term "0"))
                        (rule "applyEq" (formula "32") (term "0,1,0,0") (ifseqformula "8"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0" (formula "32") (term "0,0"))
                        (rule "add_literals" (formula "32") (term "1,0,0"))
                        (rule "times_zero_1" (formula "32") (term "0,0"))
                        (rule "add_zero_left" (formula "32") (term "0"))
                        (rule "polySimp_invertEq" (formula "32"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "0"))
                        (rule "times_zero_2" (formula "32") (term "1"))
                        (rule "polySimp_elimOne" (formula "32") (term "0"))
                        (rule "polyDiv_zero" (formula "32") (term "0,0"))
                        (rule "div_literals" (formula "32") (term "1,0,0"))
                        (rule "inEqSimp_contradEq7" (formula "32") (term "0,0,0") (ifseqformula "4"))
                        (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "32") (term "0,0,0,0,0"))
                        (rule "leq_literals" (formula "32") (term "0,0,0,0"))
                        (rule "concrete_and_2" (formula "32") (term "0,0,0"))
                        (rule "ifthenelse_false" (formula "32") (term "0,0"))
                        (rule "times_zero_2" (formula "32") (term "0"))
                        (rule "eqClose" (formula "32"))
                        (rule "closeTrue" (formula "32"))
                     )
                     (branch "result_1 >= 0 FALSE"
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "26"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "eqSymm" (formula "1"))
                        (rule "inEqSimp_geqRight" (formula "26"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "2"))
                        (rule "polySimp_mulComm1" (formula "28") (term "0"))
                        (rule "polySimp_homoEq" (formula "28"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "1,0"))
                        (rule "polySimp_elimOne" (formula "28") (term "1,0"))
                        (rule "polySimp_sepPosMonomial" (formula "28"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_contradEq3" (formula "26") (ifseqformula "19"))
                        (rule "times_zero_1" (formula "26") (term "1,0,0"))
                        (rule "add_zero_right" (formula "26") (term "0,0"))
                        (rule "qeq_literals" (formula "26") (term "0"))
                        (rule "concrete_and_2" (formula "26"))
                        (rule "false_right" (formula "26"))
                        (rule "div_axiom" (formula "5") (term "0,1") (inst "quotient=quotient_33"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,1,1,1,1"))
                        (rule "polySimp_mulComm0" (formula "5") (term "0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "5") (term "0,2,1,1"))
                        (rule "polySimp_mulComm0" (formula "5") (term "0,1,1,1"))
                        (rule "inEqSimp_contradEq7" (formula "5") (term "0") (ifseqformula "2"))
                        (rule "times_zero_1" (formula "5") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "5") (term "0,0,0"))
                        (rule "leq_literals" (formula "5") (term "0,0"))
                        (rule "concrete_and_2" (formula "5") (term "0"))
                        (rule "concrete_or_2" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "applyEqRigid" (formula "9") (term "0,0") (ifseqformula "5"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0"))
                        (rule "applyEqRigid" (formula "6") (term "0") (ifseqformula "9"))
                        (rule "inEqSimp_homoInEq0" (formula "6"))
                        (rule "polySimp_pullOutFactor1" (formula "6") (term "0"))
                        (rule "add_literals" (formula "6") (term "1,0"))
                        (rule "times_zero_1" (formula "6") (term "0"))
                        (rule "qeq_literals" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "applyEq" (formula "6") (term "0,2") (ifseqformula "8"))
                        (rule "inEqSimp_homoInEq1" (formula "6") (term "2"))
                        (rule "polySimp_addComm1" (formula "6") (term "0,2"))
                        (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,2"))
                        (rule "add_literals" (formula "6") (term "1,1,0,0,2"))
                        (rule "times_zero_1" (formula "6") (term "1,0,0,2"))
                        (rule "add_zero_right" (formula "6") (term "0,0,2"))
                        (rule "applyEqRigid" (formula "6") (term "0,1") (ifseqformula "8"))
                        (rule "inEqSimp_homoInEq1" (formula "6") (term "1"))
                        (rule "polySimp_addComm1" (formula "6") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1"))
                        (rule "add_literals" (formula "6") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "6") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "6") (term "0,0,1"))
                        (rule "applyEq" (formula "7") (term "0,1") (ifseqformula "5"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "2"))
                        (rule "mul_literals" (formula "6") (term "1,2"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "6") (term "0,1"))
                        (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "2"))
                        (rule "inEqSimp_contradInEq1" (formula "6") (term "2") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "6") (term "0,2"))
                        (rule "concrete_and_2" (formula "6") (term "2"))
                        (rule "ifthenelse_concrete" (formula "6"))
                        (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "2"))
                        (rule "leq_literals" (formula "6") (term "0"))
                        (rule "concrete_or_1" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "polyDiv_pullOut" (formula "19") (term "0") (inst "polyDivCoeff=quotient_31"))
                        (rule "polySimp_mulComm1" (formula "19") (term "1,0,0,2,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "0,1,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "19") (term "2,0"))
                        (rule "applyEq" (formula "19") (term "0,1,0,1,2,0") (ifseqformula "22"))
                        (rule "polySimp_pullOutFactor1" (formula "19") (term "0,1,2,0"))
                        (rule "add_literals" (formula "19") (term "1,0,1,2,0"))
                        (rule "times_zero_1" (formula "19") (term "0,1,2,0"))
                        (rule "inEqSimp_contradEq3" (formula "19") (term "0,0") (ifseqformula "20"))
                        (rule "times_zero_1" (formula "19") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "19") (term "0,0,0,0"))
                        (rule "qeq_literals" (formula "19") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "19") (term "0,0"))
                        (rule "ifthenelse_false" (formula "19") (term "0"))
                        (rule "polySimp_homoEq" (formula "19"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "polySimp_pullOutFactor1" (formula "19") (term "0,0"))
                        (rule "add_literals" (formula "19") (term "1,0,0"))
                        (rule "times_zero_1" (formula "19") (term "0,0"))
                        (rule "add_zero_left" (formula "19") (term "0"))
                        (rule "polySimp_invertEq" (formula "19"))
                        (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                        (rule "times_zero_2" (formula "19") (term "1"))
                        (rule "polySimp_elimOne" (formula "19") (term "0"))
                        (rule "polyDiv_zero" (formula "19") (term "0"))
                        (rule "ifthenelse_concrete4" (formula "19"))
                        (rule "div_literals" (formula "19") (term "0,1"))
                        (rule "inEqSimp_contradEq3" (formula "19") (term "0,0") (ifseqformula "20"))
                        (rule "times_zero_1" (formula "19") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "19") (term "0,0,0,0"))
                        (rule "qeq_literals" (formula "19") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "19") (term "0,0"))
                        (rule "concrete_not_2" (formula "19") (term "0"))
                        (rule "concrete_or_1" (formula "19"))
                        (rule "true_left" (formula "19"))
                        (rule "div_axiom" (formula "3") (term "0,1") (inst "quotient=quotient_34"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,1,1,1,1"))
                        (rule "polySimp_mulComm0" (formula "3") (term "0,1,1,1"))
                        (rule "polySimp_mulComm0" (formula "3") (term "0,2,1,1"))
                        (rule "polySimp_mulComm0" (formula "3") (term "0,1,0,1"))
                        (rule "inEqSimp_contradEq7" (formula "3") (term "0") (ifseqformula "2"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0,0"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_and_2" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "3"))
                        (rule "polySimp_mulComm0" (formula "7") (term "0"))
                        (rule "applyEq" (formula "4") (term "0") (ifseqformula "7"))
                        (rule "inEqSimp_homoInEq0" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                        (rule "polySimp_pullOutFactor0" (formula "4") (term "0"))
                        (rule "add_literals" (formula "4") (term "1,0"))
                        (rule "times_zero_1" (formula "4") (term "0"))
                        (rule "qeq_literals" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "applyEq" (formula "4") (term "0,1") (ifseqformula "6"))
                        (rule "inEqSimp_homoInEq1" (formula "4") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1"))
                        (rule "polySimp_elimOne" (formula "4") (term "1,0,1"))
                        (rule "polySimp_addComm1" (formula "4") (term "0,1"))
                        (rule "polySimp_pullOutFactor2b" (formula "4") (term "0,0,1"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "4") (term "0,0,1"))
                        (rule "applyEq" (formula "4") (term "0,2") (ifseqformula "6"))
                        (rule "inEqSimp_homoInEq1" (formula "4") (term "2"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0,2"))
                        (rule "polySimp_elimOne" (formula "4") (term "1,0,2"))
                        (rule "polySimp_addComm1" (formula "4") (term "0,2"))
                        (rule "polySimp_pullOutFactor2b" (formula "4") (term "0,0,2"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0,2"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0,2"))
                        (rule "add_zero_right" (formula "4") (term "0,0,2"))
                        (rule "applyEq" (formula "5") (term "0,1") (ifseqformula "3"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "4") (term "0,1"))
                        (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "2"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "2"))
                        (rule "mul_literals" (formula "4") (term "1,2"))
                        (rule "inEqSimp_contradInEq1" (formula "4") (term "2") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "4") (term "0,2"))
                        (rule "concrete_and_2" (formula "4") (term "2"))
                        (rule "ifthenelse_concrete" (formula "4"))
                        (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "2"))
                        (rule "leq_literals" (formula "4") (term "0"))
                        (rule "concrete_or_1" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "polySimp_critPair" (formula "22") (ifseqformula "25"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,1,1,0"))
                        (rule "polySimp_mulAssoc" (formula "22") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "0,1,0"))
                        (rule "polySimp_mulComm1" (formula "22") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "0,0,0"))
                        (rule "polySimp_mulComm1" (formula "22") (term "1,0,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0"))
                        (rule "polySimp_addComm1" (formula "22") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "22") (term "0"))
                        (rule "add_literals" (formula "22") (term "1,1,0"))
                        (rule "times_zero_1" (formula "22") (term "1,0"))
                        (rule "add_zero_right" (formula "22") (term "0"))
                        (rule "polySimp_addComm0" (formula "22") (term "0"))
                        (rule "polySimp_sepPosMonomial" (formula "22"))
                        (rule "div_axiom" (formula "1") (term "0,1") (inst "quotient=quotient_35"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,2,1,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,1,1,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,1,1"))
                        (rule "inEqSimp_contradEq7" (formula "1") (term "0") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0"))
                        (rule "leq_literals" (formula "1") (term "0,0"))
                        (rule "concrete_and_2" (formula "1") (term "0"))
                        (rule "concrete_or_2" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "1"))
                        (rule "polySimp_mulComm0" (formula "31") (term "0"))
                        (rule "applyEq" (formula "4") (term "0,1") (ifseqformula "1"))
                        (rule "inEqSimp_strengthen0" (formula "2") (ifseqformula "31"))
                        (rule "inEqSimp_contradEq3" (formula "31") (ifseqformula "2"))
                        (rule "polySimp_mulAssoc" (formula "31") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "31") (term "0,0"))
                        (rule "add_literals" (formula "31") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "31") (term "1,0,0"))
                        (rule "add_zero_right" (formula "31") (term "0,0"))
                        (rule "qeq_literals" (formula "31") (term "0"))
                        (rule "concrete_and_2" (formula "31"))
                        (rule "false_right" (formula "31"))
                        (rule "inEqSimp_subsumption1" (formula "3") (term "0") (ifseqformula "5"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_1" (formula "3") (term "0"))
                        (rule "ifthenelse_true_for" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "2"))
                        (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "polySimp_rightDist" (formula "3") (term "0,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "mul_literals" (formula "3") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "3"))
                        (rule "leq_literals" (formula "6") (term "0"))
                        (rule "concrete_or_1" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "polyDiv_pullOut" (formula "27") (term "0") (inst "polyDivCoeff=quotient_32"))
                        (rule "polySimp_mulComm1" (formula "27") (term "1,0,0,2,0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "0,1,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "27") (term "2,0"))
                        (rule "applyEq" (formula "27") (term "0,1,0,1,2,0") (ifseqformula "29"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,2,0"))
                        (rule "polySimp_pullOutFactor0" (formula "27") (term "0,1,2,0"))
                        (rule "add_literals" (formula "27") (term "1,0,1,2,0"))
                        (rule "times_zero_1" (formula "27") (term "0,1,2,0"))
                        (rule "inEqSimp_contradEq3" (formula "27") (term "0,0") (ifseqformula "23"))
                        (rule "times_zero_1" (formula "27") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "27") (term "0,0,0,0"))
                        (rule "qeq_literals" (formula "27") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "27") (term "0,0"))
                        (rule "ifthenelse_false" (formula "27") (term "0"))
                        (rule "polySimp_homoEq" (formula "27"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "27") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "27") (term "0"))
                        (rule "polySimp_pullOutFactor1" (formula "27") (term "0,0"))
                        (rule "add_literals" (formula "27") (term "1,0,0"))
                        (rule "times_zero_1" (formula "27") (term "0,0"))
                        (rule "add_zero_left" (formula "27") (term "0"))
                        (rule "polySimp_invertEq" (formula "27"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "0"))
                        (rule "times_zero_2" (formula "27") (term "1"))
                        (rule "polySimp_elimOne" (formula "27") (term "0"))
                        (rule "polyDiv_zero" (formula "27") (term "0"))
                        (rule "ifthenelse_concrete4" (formula "27"))
                        (rule "div_literals" (formula "27") (term "0,1"))
                        (rule "inEqSimp_contradEq3" (formula "27") (term "0,0") (ifseqformula "23"))
                        (rule "times_zero_1" (formula "27") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "27") (term "0,0,0,0"))
                        (rule "qeq_literals" (formula "27") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "27") (term "0,0"))
                        (rule "concrete_not_2" (formula "27") (term "0"))
                        (rule "concrete_or_1" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "polyDiv_pullOut" (formula "9") (term "0") (inst "polyDivCoeff=quotient_33"))
                        (rule "polySimp_mulComm1" (formula "9") (term "1,0,0,2,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0,1,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "9") (term "2,0"))
                        (rule "applyEqRigid" (formula "9") (term "0,1,0,1,2,0") (ifseqformula "11"))
                        (rule "polySimp_pullOutFactor1" (formula "9") (term "0,1,2,0"))
                        (rule "add_literals" (formula "9") (term "1,0,1,2,0"))
                        (rule "times_zero_1" (formula "9") (term "0,1,2,0"))
                        (rule "inEqSimp_contradEq7" (formula "9") (term "0,0") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "9") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "9") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "9") (term "0,0"))
                        (rule "ifthenelse_false" (formula "9") (term "0"))
                        (rule "polySimp_homoEq" (formula "9"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0"))
                        (rule "polySimp_pullOutFactor1" (formula "9") (term "0,0"))
                        (rule "add_literals" (formula "9") (term "1,0,0"))
                        (rule "times_zero_1" (formula "9") (term "0,0"))
                        (rule "add_zero_left" (formula "9") (term "0"))
                        (rule "polySimp_invertEq" (formula "9"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                        (rule "times_zero_2" (formula "9") (term "1"))
                        (rule "polySimp_elimOne" (formula "9") (term "0"))
                        (rule "polyDiv_zero" (formula "9") (term "0"))
                        (rule "ifthenelse_concrete4" (formula "9"))
                        (rule "div_literals" (formula "9") (term "0,1"))
                        (rule "inEqSimp_contradEq7" (formula "9") (term "0,0") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "9") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "9") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "9") (term "0,0"))
                        (rule "concrete_not_2" (formula "9") (term "0"))
                        (rule "concrete_or_1" (formula "9"))
                        (rule "true_left" (formula "9"))
                        (rule "allLeft" (formula "28") (inst "t=x_8"))
                        (rule "applyEq" (formula "28") (term "0,0,1") (ifseqformula "5"))
                        (rule "polySimp_mulComm1" (formula "28") (term "0,1"))
                        (rule "polySimp_homoEq" (formula "28") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1"))
                        (rule "polySimp_elimOne" (formula "28") (term "1,0,1"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1,0,1"))
                        (rule "polySimp_sepPosMonomial" (formula "28") (term "1"))
                        (rule "inEqSimp_contradEq3" (formula "28") (term "1") (ifseqformula "2"))
                        (rule "polySimp_mulAssoc" (formula "28") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "28") (term "0,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "1,0,0,1"))
                        (rule "polySimp_pullOutFactor0b" (formula "28") (term "0,0,1"))
                        (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "28") (term "0,0,1"))
                        (rule "qeq_literals" (formula "28") (term "0,1"))
                        (rule "concrete_and_2" (formula "28") (term "1"))
                        (rule "concrete_or_4" (formula "28"))
                        (rule "inEqSimp_contradInEq1" (formula "28") (term "0,0") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "28") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "28") (term "0,0"))
                        (rule "concrete_or_2" (formula "28") (term "0"))
                        (rule "polyDiv_pullOut" (formula "6") (term "0") (inst "polyDivCoeff=quotient_34"))
                        (rule "polySimp_mulComm1" (formula "6") (term "1,0,0,2,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "6") (term "2,0"))
                        (rule "applyEq" (formula "6") (term "0,1,0,1,2,0") (ifseqformula "8"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,2,0"))
                        (rule "polySimp_elimOne" (formula "6") (term "1,0,1,2,0"))
                        (rule "polySimp_pullOutFactor2" (formula "6") (term "0,1,2,0"))
                        (rule "add_literals" (formula "6") (term "1,0,1,2,0"))
                        (rule "times_zero_1" (formula "6") (term "0,1,2,0"))
                        (rule "inEqSimp_contradEq7" (formula "6") (term "0,0") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "6") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "6") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "6") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "6") (term "0,0"))
                        (rule "ifthenelse_false" (formula "6") (term "0"))
                        (rule "polySimp_homoEq" (formula "6"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0"))
                        (rule "polySimp_pullOutFactor1" (formula "6") (term "0,0"))
                        (rule "add_literals" (formula "6") (term "1,0,0"))
                        (rule "times_zero_1" (formula "6") (term "0,0"))
                        (rule "add_zero_left" (formula "6") (term "0"))
                        (rule "polySimp_invertEq" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                        (rule "times_zero_2" (formula "6") (term "1"))
                        (rule "polySimp_elimOne" (formula "6") (term "0"))
                        (rule "polyDiv_zero" (formula "6") (term "0"))
                        (rule "ifthenelse_concrete4" (formula "6"))
                        (rule "div_literals" (formula "6") (term "0,1"))
                        (rule "inEqSimp_contradEq7" (formula "6") (term "0,0") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "6") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "6") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "6") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "6") (term "0,0"))
                        (rule "concrete_not_2" (formula "6") (term "0"))
                        (rule "concrete_or_1" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "polySimp_critPair" (formula "9") (ifseqformula "7"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,1,1,0"))
                        (rule "polySimp_mulAssoc" (formula "9") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0,1,0"))
                        (rule "polySimp_mulComm1" (formula "9") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0,0,0"))
                        (rule "polySimp_mulComm1" (formula "9") (term "1,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0"))
                        (rule "polySimp_addComm1" (formula "9") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                        (rule "add_literals" (formula "9") (term "1,1,0"))
                        (rule "times_zero_1" (formula "9") (term "1,0"))
                        (rule "add_zero_right" (formula "9") (term "0"))
                        (rule "polySimp_addComm0" (formula "9") (term "0"))
                        (rule "polySimp_sepPosMonomial" (formula "9"))
                        (rule "polySimp_critPair" (formula "25") (ifseqformula "24"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,1,1,0"))
                        (rule "polySimp_mulAssoc" (formula "25") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "25") (term "0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "25") (term "0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "25") (term "1,0"))
                        (rule "polySimp_mulComm1" (formula "25") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "25") (term "0,1,0"))
                        (rule "polySimp_mulComm1" (formula "25") (term "0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "25") (term "0,0"))
                        (rule "polySimp_mulComm1" (formula "25") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "25") (term "0,1,0,0"))
                        (rule "polySimp_mulAssoc" (formula "25") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0"))
                        (rule "polySimp_addComm1" (formula "25") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "25") (term "0"))
                        (rule "add_literals" (formula "25") (term "1,1,0"))
                        (rule "times_zero_1" (formula "25") (term "1,0"))
                        (rule "add_zero_right" (formula "25") (term "0"))
                        (rule "polySimp_addComm0" (formula "25") (term "0"))
                        (rule "apply_eq_monomials" (formula "25") (term "1,0") (ifseqformula "28"))
                        (rule "polySimp_rightDist" (formula "25") (term "0,1,0"))
                        (rule "polySimp_mulComm1" (formula "25") (term "1,0,1,0"))
                        (rule "polySimp_mulComm1" (formula "25") (term "0,1,0,1,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "25") (term "1,0"))
                        (rule "add_literals" (formula "25") (term "1,1,1,0"))
                        (rule "times_zero_1" (formula "25") (term "1,1,0"))
                        (rule "add_zero_right" (formula "25") (term "1,0"))
                        (rule "polySimp_mulAssoc" (formula "25") (term "1,0"))
                        (rule "polySimp_pullOutFactor1" (formula "25") (term "0"))
                        (rule "add_literals" (formula "25") (term "1,0"))
                        (rule "times_zero_1" (formula "25") (term "0"))
                        (rule "eqClose" (formula "25"))
                        (rule "true_left" (formula "25"))
                        (rule "jdiv_axiom" (formula "28") (term "0,0,0,1"))
                        (rule "eqSymm" (formula "28"))
                        (rule "inEqSimp_subsumption1" (formula "28") (term "0,0") (ifseqformula "17"))
                        (rule "leq_literals" (formula "28") (term "0,0,0"))
                        (rule "concrete_or_1" (formula "28") (term "0,0"))
                        (rule "ifthenelse_true" (formula "28") (term "0"))
                        (rule "eqSymm" (formula "28"))
                        (rule "applyEqRigid" (formula "29") (term "0,0,0,1") (ifseqformula "28"))
                        (rule "polyDiv_pullOut" (formula "29") (term "0,0,0,1") (inst "polyDivCoeff=quotient_33"))
                        (rule "polySimp_mulComm1" (formula "29") (term "1,0,0,2,0,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "29") (term "0,1,0,0,2,0,0,0,1"))
                        (rule "polySimp_addComm0" (formula "29") (term "2,0,0,0,1"))
                        (rule "applyEqRigid" (formula "29") (term "0,1,0,1,2,0,0,0,1") (ifseqformula "10"))
                        (rule "polySimp_pullOutFactor1" (formula "29") (term "0,1,2,0,0,0,1"))
                        (rule "add_literals" (formula "29") (term "1,0,1,2,0,0,0,1"))
                        (rule "times_zero_1" (formula "29") (term "0,1,2,0,0,0,1"))
                        (rule "inEqSimp_contradEq7" (formula "29") (term "0,0,0,0,1") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0,0,1"))
                        (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0,1"))
                        (rule "leq_literals" (formula "29") (term "0,0,0,0,0,1"))
                        (rule "concrete_and_2" (formula "29") (term "0,0,0,0,1"))
                        (rule "ifthenelse_false" (formula "29") (term "0,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "29") (term "0,0,1"))
                        (rule "polySimp_rightDist" (formula "29") (term "0,0,1"))
                        (rule "polySimp_homoEq" (formula "29") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "29") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "29") (term "0,0,1"))
                        (rule "applyEq" (formula "29") (term "0,1,0,0,0,1") (ifseqformula "10"))
                        (rule "polySimp_pullOutFactor1" (formula "29") (term "0,0,0,1"))
                        (rule "add_literals" (formula "29") (term "1,0,0,0,1"))
                        (rule "times_zero_1" (formula "29") (term "0,0,0,1"))
                        (rule "add_zero_left" (formula "29") (term "0,0,1"))
                        (rule "polySimp_invertEq" (formula "29") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "0,0,1"))
                        (rule "times_zero_2" (formula "29") (term "1,0,1"))
                        (rule "polySimp_elimOne" (formula "29") (term "0,0,1"))
                        (rule "polyDiv_zero" (formula "29") (term "0,0,0,1"))
                        (rule "div_literals" (formula "29") (term "1,0,0,0,1"))
                        (rule "inEqSimp_contradEq7" (formula "29") (term "0,0,0,0,1") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0,0,1"))
                        (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0,1"))
                        (rule "leq_literals" (formula "29") (term "0,0,0,0,0,1"))
                        (rule "concrete_and_2" (formula "29") (term "0,0,0,0,1"))
                        (rule "ifthenelse_false" (formula "29") (term "0,0,0,1"))
                        (rule "times_zero_2" (formula "29") (term "0,0,1"))
                        (rule "eqClose" (formula "29") (term "0,1"))
                        (rule "concrete_not_1" (formula "29") (term "1"))
                        (rule "concrete_or_4" (formula "29"))
                        (rule "notLeft" (formula "29"))
                        (rule "polyDiv_pullOut" (formula "28") (term "1") (inst "polyDivCoeff=quotient_33"))
                        (rule "eqSymm" (formula "28"))
                        (rule "polySimp_mulComm1" (formula "28") (term "1,0,0,2,0"))
                        (rule "polySimp_mulComm0" (formula "28") (term "0,1,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "28") (term "2,0"))
                        (rule "applyEqRigid" (formula "28") (term "0,1,0,1,2,0") (ifseqformula "10"))
                        (rule "polySimp_pullOutFactor1" (formula "28") (term "0,1,2,0"))
                        (rule "add_literals" (formula "28") (term "1,0,1,2,0"))
                        (rule "times_zero_1" (formula "28") (term "0,1,2,0"))
                        (rule "inEqSimp_contradEq7" (formula "28") (term "0,0") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "28") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "28") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "28") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "28") (term "0,0"))
                        (rule "ifthenelse_false" (formula "28") (term "0"))
                        (rule "eqSymm" (formula "28"))
                        (rule "polyDiv_zero" (formula "28") (term "1,1"))
                        (rule "div_literals" (formula "28") (term "1,1,1"))
                        (rule "polySimp_homoEq" (formula "28"))
                        (rule "polySimp_addComm1" (formula "28") (term "0"))
                        (rule "polySimp_sepPosMonomial" (formula "28"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1"))
                        (rule "polySimp_rightDist" (formula "28") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "28") (term "1,1"))
                        (rule "polySimp_mulComm0" (formula "28") (term "0,1"))
                        (rule "inEqSimp_contradEq7" (formula "28") (term "0,0") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "28") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "28") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "28") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "28") (term "0,0"))
                        (rule "ifthenelse_false" (formula "28") (term "0"))
                        (rule "polySimp_homoEq" (formula "28"))
                        (rule "times_zero_2" (formula "28") (term "1,0"))
                        (rule "add_zero_right" (formula "28") (term "0"))
                        (rule "polySimp_sepPosMonomial" (formula "28"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "1"))
                        (rule "polySimp_elimOne" (formula "28") (term "1"))
                        (rule "jdiv_axiom" (formula "30") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,2,1"))
                        (rule "eqSymm" (formula "1"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,0,2,0"))
                        (rule "inEqSimp_invertInEq1" (formula "1") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                        (rule "times_zero_2" (formula "1") (term "1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                        (rule "inEqSimp_subsumption0" (formula "1") (term "0,0") (ifseqformula "17"))
                        (rule "leq_literals" (formula "1") (term "0,0,0"))
                        (rule "concrete_or_1" (formula "1") (term "0,0"))
                        (rule "ifthenelse_true" (formula "1") (term "0"))
                        (rule "eqSymm" (formula "1"))
                        (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "1"))
                        (rule "polyDiv_pullOut" (formula "31") (term "0,0") (inst "polyDivCoeff=quotient_34"))
                        (rule "polySimp_mulComm1" (formula "31") (term "1,0,0,2,0,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "0,1,0,0,2,0,0"))
                        (rule "polySimp_addComm0" (formula "31") (term "2,0,0"))
                        (rule "applyEq" (formula "31") (term "0,1,0,1,2,0,0") (ifseqformula "8"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,0,1,2,0,0"))
                        (rule "polySimp_pullOutFactor0" (formula "31") (term "0,1,2,0,0"))
                        (rule "add_literals" (formula "31") (term "1,0,1,2,0,0"))
                        (rule "times_zero_1" (formula "31") (term "0,1,2,0,0"))
                        (rule "inEqSimp_contradEq7" (formula "31") (term "0,0,0") (ifseqformula "4"))
                        (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "31") (term "0,0,0,0,0"))
                        (rule "leq_literals" (formula "31") (term "0,0,0,0"))
                        (rule "concrete_and_2" (formula "31") (term "0,0,0"))
                        (rule "ifthenelse_false" (formula "31") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "0"))
                        (rule "polySimp_rightDist" (formula "31") (term "0"))
                        (rule "polySimp_homoEq" (formula "31"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "31") (term "0"))
                        (rule "applyEq" (formula "31") (term "0,1,0,0") (ifseqformula "8"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0" (formula "31") (term "0,0"))
                        (rule "add_literals" (formula "31") (term "1,0,0"))
                        (rule "times_zero_1" (formula "31") (term "0,0"))
                        (rule "add_zero_left" (formula "31") (term "0"))
                        (rule "polySimp_invertEq" (formula "31"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                        (rule "times_zero_2" (formula "31") (term "1"))
                        (rule "polySimp_elimOne" (formula "31") (term "0"))
                        (rule "polyDiv_zero" (formula "31") (term "0,0"))
                        (rule "div_literals" (formula "31") (term "1,0,0"))
                        (rule "inEqSimp_contradEq7" (formula "31") (term "0,0,0") (ifseqformula "4"))
                        (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "31") (term "0,0,0,0,0"))
                        (rule "leq_literals" (formula "31") (term "0,0,0,0"))
                        (rule "concrete_and_2" (formula "31") (term "0,0,0"))
                        (rule "ifthenelse_false" (formula "31") (term "0,0"))
                        (rule "times_zero_2" (formula "31") (term "0"))
                        (rule "eqClose" (formula "31"))
                        (rule "closeTrue" (formula "31"))
                     )
                  )
               )
               (branch "a <= -1 FALSE"
                  (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "10"))
                  (rule "ifthenelse_false" (formula "1") (term "0"))
                  (rule "replace_known_right" (formula "9") (term "0,0,0,0,0,1,0,1,1") (ifseqformula "10"))
                  (rule "ifthenelse_false" (formula "9") (term "0,0,0,0,1,0,1,1"))
                  (rule "replace_known_right" (formula "9") (term "0,0,0,0,1,0,1") (ifseqformula "10"))
                  (rule "ifthenelse_false" (formula "9") (term "0,0,0,1,0,1"))
                  (rule "replace_known_right" (formula "9") (term "0,1,0,1,0,1,1") (ifseqformula "10"))
                  (rule "ifthenelse_false" (formula "9") (term "1,0,1,0,1,1"))
                  (rule "inEqSimp_leqRight" (formula "10"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_homoInEq1" (formula "2"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "mul_literals" (formula "2") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "2"))
                  (rule "mul_literals" (formula "5") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "5") (term "0"))
                  (rule "add_literals" (formula "5") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                  (rule "mul_literals" (formula "5") (term "1"))
                  (rule "inEqSimp_contradEq7" (formula "11") (term "0,0") (ifseqformula "5"))
                  (rule "times_zero_1" (formula "11") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "11") (term "0,0,0,0"))
                  (rule "leq_literals" (formula "11") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "11") (term "0,0"))
                  (rule "concrete_not_2" (formula "11") (term "0"))
                  (rule "concrete_impl_1" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "12"))
                  (rule "concrete_and_1" (formula "14") (term "0"))
                  (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "5"))
                  (rule "leq_literals" (formula "1") (term "0"))
                  (rule "concrete_or_1" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "commute_or_2" (formula "12") (term "0"))
                  (rule "commute_or_2" (formula "12") (term "0,0"))
                  (rule "jdiv_axiom" (formula "10") (term "0,0"))
                  (rule "eqSymm" (formula "10"))
                  (rule "inEqSimp_subsumption1" (formula "10") (term "0,0") (ifseqformula "5"))
                  (rule "leq_literals" (formula "10") (term "0,0,0"))
                  (rule "concrete_or_1" (formula "10") (term "0,0"))
                  (rule "ifthenelse_true" (formula "10") (term "0"))
                  (rule "eqSymm" (formula "10"))
                  (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "10"))
                  (rule "jdiv_axiom" (formula "12") (term "0,0"))
                  (rule "eqSymm" (formula "12"))
                  (rule "inEqSimp_subsumption1" (formula "12") (term "0,0") (ifseqformula "4"))
                  (rule "leq_literals" (formula "12") (term "0,0,0"))
                  (rule "concrete_or_1" (formula "12") (term "0,0"))
                  (rule "ifthenelse_true" (formula "12") (term "0"))
                  (rule "eqSymm" (formula "12"))
                  (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "12"))
                  (rule "jdiv_axiom" (formula "15") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,0,2,1"))
                  (rule "eqSymm" (formula "1"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,0,2,0"))
                  (rule "inEqSimp_invertInEq1" (formula "1") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                  (rule "times_zero_2" (formula "1") (term "1,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (term "0,0") (ifseqformula "6"))
                  (rule "qeq_literals" (formula "1") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "1") (term "0,0"))
                  (rule "ifthenelse_false" (formula "1") (term "0"))
                  (rule "eqSymm" (formula "1"))
                  (rule "applyEq" (formula "16") (term "0,0,0") (ifseqformula "1"))
                  (rule "polySimp_mulComm1" (formula "16") (term "0,0"))
                  (rule "polySimp_homoEq" (formula "16") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,0,0"))
                  (rule "applyEq" (formula "16") (term "1,0,0") (ifseqformula "12"))
                  (rule "polySimp_pullOutFactor2" (formula "16") (term "0,0"))
                  (rule "add_literals" (formula "16") (term "1,0,0"))
                  (rule "times_zero_1" (formula "16") (term "0,0"))
                  (rule "eqClose" (formula "16") (term "0"))
                  (rule "concrete_and_1" (formula "16"))
                  (rule "allRight" (formula "16") (inst "sk=x_7"))
                  (rule "orRight" (formula "16"))
                  (rule "orRight" (formula "16"))
                  (rule "orRight" (formula "16"))
                  (rule "notRight" (formula "18"))
                  (rule "notRight" (formula "18"))
                  (rule "inEqSimp_leqRight" (formula "18"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "div_axiom" (formula "14") (term "1") (inst "quotient=quotient_23"))
                  (rule "polySimp_mulComm0" (formula "14") (term "0,2,1,1"))
                  (rule "polySimp_mulComm0" (formula "14") (term "0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "14") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,1,1,1,1"))
                  (rule "commute_and" (formula "14") (term "0,1"))
                  (rule "div_axiom" (formula "17") (term "1") (inst "quotient=quotient_24"))
                  (rule "polySimp_mulComm0" (formula "17") (term "0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "17") (term "0,2,1,1"))
                  (rule "polySimp_mulComm0" (formula "17") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,1,1,1,1"))
                  (rule "commute_and" (formula "17") (term "0,1"))
                  (rule "jdiv_axiom" (formula "21") (term "0,0"))
                  (rule "eqSymm" (formula "1"))
                  (rule "jdiv_axiom" (formula "4") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "0,0,2,1"))
                  (rule "eqSymm" (formula "4"))
                  (rule "polySimp_elimOne" (formula "4") (term "0,0,2,0"))
                  (rule "inEqSimp_invertInEq1" (formula "4") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0"))
                  (rule "times_zero_2" (formula "4") (term "1,0,0"))
                  (rule "polySimp_elimOne" (formula "4") (term "0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "4") (term "0,0") (ifseqformula "11"))
                  (rule "qeq_literals" (formula "4") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "4") (term "0,0"))
                  (rule "ifthenelse_false" (formula "4") (term "0"))
                  (rule "eqSymm" (formula "4"))
                  (rule "applyEqRigid" (formula "5") (term "0,0") (ifseqformula "4"))
                  (rule "polySimp_mulComm1" (formula "5") (term "0"))
                  (rule "polySimp_homoEq" (formula "5"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                  (rule "polySimp_elimOne" (formula "5") (term "1,0"))
                  (rule "polySimp_sepPosMonomial" (formula "5"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1"))
                  (rule "polySimp_elimOne" (formula "5") (term "1"))
                  (rule "jdiv_axiom" (formula "3") (term "0,0"))
                  (rule "eqSymm" (formula "3"))
                  (rule "inEqSimp_subsumption1" (formula "3") (term "0,0") (ifseqformula "11"))
                  (rule "leq_literals" (formula "3") (term "0,0,0"))
                  (rule "concrete_or_1" (formula "3") (term "0,0"))
                  (rule "ifthenelse_true" (formula "3") (term "0"))
                  (rule "eqSymm" (formula "3"))
                  (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "3"))
                  (rule "polySimp_critPair" (formula "19") (ifseqformula "22"))
                  (rule "polySimp_mulComm0" (formula "19") (term "0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,1,1,0"))
                  (rule "polySimp_rightDist" (formula "19") (term "0,0"))
                  (rule "polySimp_mulComm1" (formula "19") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "19") (term "0,1,0,0"))
                  (rule "polySimp_mulAssoc" (formula "19") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                  (rule "polySimp_mulComm1" (formula "19") (term "1,1,0"))
                  (rule "polySimp_mulComm1" (formula "19") (term "0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "19") (term "0"))
                  (rule "polySimp_addComm1" (formula "19") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "19") (term "0"))
                  (rule "add_literals" (formula "19") (term "1,1,0"))
                  (rule "times_zero_1" (formula "19") (term "1,0"))
                  (rule "add_zero_right" (formula "19") (term "0"))
                  (rule "polySimp_addComm0" (formula "19") (term "0"))
                  (rule "polySimp_sepNegMonomial" (formula "19"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                  (rule "polySimp_elimOne" (formula "19") (term "0"))
                  (rule "allLeft" (formula "24") (inst "t=x_7"))
                  (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "26"))
                  (rule "concrete_or_4" (formula "24"))
                  (rule "applyEq" (formula "24") (term "0,0,0,1,0") (ifseqformula "3"))
                  (rule "replace_known_left" (formula "24") (term "0,1,0") (ifseqformula "4"))
                  (rule "concrete_not_1" (formula "24") (term "1,0"))
                  (rule "concrete_or_4" (formula "24") (term "0"))
                  (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "24") (term "0,0"))
                  (rule "concrete_and_2" (formula "24") (term "0"))
                  (rule "concrete_or_2" (formula "24"))
                  (rule "notLeft" (formula "24"))
                  (rule "div_axiom" (formula "1") (term "1,0") (inst "quotient=quotient_25"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,2,1,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,1,1,1"))
                  (rule "inEqSimp_contradEq7" (formula "1") (term "0") (ifseqformula "3"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0"))
                  (rule "leq_literals" (formula "1") (term "0,0"))
                  (rule "concrete_and_2" (formula "1") (term "0"))
                  (rule "concrete_or_2" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "1"))
                  (rule "inEqSimp_subsumption1" (formula "3") (term "0") (ifseqformula "5"))
                  (rule "leq_literals" (formula "3") (term "0,0"))
                  (rule "concrete_or_1" (formula "3") (term "0"))
                  (rule "ifthenelse_true_for" (formula "3"))
                  (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "2"))
                  (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                  (rule "polySimp_elimOne" (formula "3") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0"))
                  (rule "polySimp_rightDist" (formula "3") (term "0,0,0"))
                  (rule "mul_literals" (formula "3") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor2b" (formula "3") (term "0,0"))
                  (rule "add_literals" (formula "3") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "3") (term "1,0,0"))
                  (rule "add_zero_right" (formula "3") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                  (rule "mul_literals" (formula "3") (term "1"))
                  (rule "div_axiom" (formula "4") (term "0,2,0") (inst "quotient=quotient_26"))
                  (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "4") (term "0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "4") (term "0,2,1,1"))
                  (rule "inEqSimp_contradEq7" (formula "4") (term "0") (ifseqformula "6"))
                  (rule "times_zero_1" (formula "4") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "4") (term "0,0,0"))
                  (rule "leq_literals" (formula "4") (term "0,0"))
                  (rule "concrete_and_2" (formula "4") (term "0"))
                  (rule "concrete_or_2" (formula "4"))
                  (rule "andLeft" (formula "4"))
                  (rule "andLeft" (formula "4"))
                  (rule "applyEq" (formula "7") (term "0,2,0") (ifseqformula "4"))
                  (rule "inEqSimp_subsumption1" (formula "6") (term "0") (ifseqformula "8"))
                  (rule "leq_literals" (formula "6") (term "0,0"))
                  (rule "concrete_or_1" (formula "6") (term "0"))
                  (rule "ifthenelse_true_for" (formula "6"))
                  (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "5"))
                  (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0"))
                  (rule "polySimp_elimOne" (formula "6") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0"))
                  (rule "polySimp_rightDist" (formula "6") (term "0,0,0"))
                  (rule "mul_literals" (formula "6") (term "0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0"))
                  (rule "add_literals" (formula "6") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "6") (term "1,0,0"))
                  (rule "add_zero_right" (formula "6") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                  (rule "mul_literals" (formula "6") (term "1"))
                  (rule "div_axiom" (formula "11") (term "0,1") (inst "quotient=quotient_27"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "11") (term "0,2,1,1"))
                  (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "11") (term "0,1,1,1"))
                  (rule "inEqSimp_contradEq7" (formula "11") (term "0") (ifseqformula "8"))
                  (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "11") (term "0,0,0"))
                  (rule "leq_literals" (formula "11") (term "0,0"))
                  (rule "concrete_and_2" (formula "11") (term "0"))
                  (rule "concrete_or_2" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "applyEqRigid" (formula "15") (term "0,0") (ifseqformula "11"))
                  (rule "polySimp_mulComm0" (formula "15") (term "0"))
                  (rule "applyEq" (formula "12") (term "0") (ifseqformula "15"))
                  (rule "inEqSimp_homoInEq0" (formula "12"))
                  (rule "polySimp_pullOutFactor1" (formula "12") (term "0"))
                  (rule "add_literals" (formula "12") (term "1,0"))
                  (rule "times_zero_1" (formula "12") (term "0"))
                  (rule "qeq_literals" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "applyEq" (formula "12") (term "0,2") (ifseqformula "14"))
                  (rule "inEqSimp_homoInEq1" (formula "12") (term "2"))
                  (rule "polySimp_addComm1" (formula "12") (term "0,2"))
                  (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,2"))
                  (rule "add_literals" (formula "12") (term "1,1,0,0,2"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0,2"))
                  (rule "add_zero_right" (formula "12") (term "0,0,2"))
                  (rule "applyEqRigid" (formula "12") (term "0,1") (ifseqformula "14"))
                  (rule "inEqSimp_homoInEq1" (formula "12") (term "1"))
                  (rule "polySimp_addComm1" (formula "12") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
                  (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "12") (term "0,0,1"))
                  (rule "applyEq" (formula "13") (term "0,1") (ifseqformula "11"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "2"))
                  (rule "mul_literals" (formula "12") (term "1,2"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "12") (term "0,1"))
                  (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "8"))
                  (rule "inEqSimp_subsumption1" (formula "12") (term "0") (ifseqformula "8"))
                  (rule "leq_literals" (formula "12") (term "0,0"))
                  (rule "concrete_or_1" (formula "12") (term "0"))
                  (rule "ifthenelse_true_for" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "ifthenelse_split_for" (formula "28") (term "1,1"))
                  (branch "result_1 >= 0 TRUE"
                     (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "28"))
                     (rule "ifthenelse_true" (formula "7") (term "0"))
                     (rule "eqSymm" (formula "7"))
                     (rule "replace_known_left" (formula "24") (term "0,1,1") (ifseqformula "28"))
                     (rule "ifthenelse_true_for" (formula "24") (term "1,1"))
                     (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "7"))
                     (rule "polySimp_mulComm0" (formula "34") (term "0"))
                     (rule "inEqSimp_strengthen0" (formula "2") (ifseqformula "34"))
                     (rule "inEqSimp_contradEq3" (formula "34") (ifseqformula "2"))
                     (rule "polySimp_mulComm0" (formula "34") (term "1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0"))
                     (rule "add_literals" (formula "34") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "34") (term "1,0,0"))
                     (rule "add_zero_right" (formula "34") (term "0,0"))
                     (rule "qeq_literals" (formula "34") (term "0"))
                     (rule "concrete_and_2" (formula "34"))
                     (rule "false_right" (formula "34"))
                     (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "2"))
                     (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0"))
                     (rule "polySimp_rightDist" (formula "3") (term "0,0,0"))
                     (rule "mul_literals" (formula "3") (term "0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                     (rule "add_literals" (formula "3") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "3") (term "0,0"))
                     (rule "add_literals" (formula "3") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "3") (term "1,0,0"))
                     (rule "add_zero_right" (formula "3") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                     (rule "mul_literals" (formula "3") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "3"))
                     (rule "leq_literals" (formula "9") (term "0"))
                     (rule "concrete_or_1" (formula "9"))
                     (rule "true_left" (formula "9"))
                     (rule "cnf_rightDist" (formula "29"))
                     (rule "andLeft" (formula "29"))
                     (rule "commute_or" (formula "30"))
                     (rule "cnf_rightDist" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "commute_or" (formula "25"))
                     (rule "cnf_rightDist" (formula "30"))
                     (rule "andLeft" (formula "30"))
                     (rule "commute_or" (formula "31"))
                     (rule "cnf_rightDist" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "commute_or" (formula "25"))
                     (rule "div_axiom" (formula "9") (term "1") (inst "quotient=quotient_29"))
                     (rule "polySimp_mulComm0" (formula "9") (term "0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,1,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "9") (term "0,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "9") (term "0,2,1,1"))
                     (rule "inEqSimp_contradEq7" (formula "9") (term "0") (ifseqformula "3"))
                     (rule "times_zero_1" (formula "9") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "9") (term "0,0,0"))
                     (rule "leq_literals" (formula "9") (term "0,0"))
                     (rule "concrete_and_2" (formula "9") (term "0"))
                     (rule "concrete_or_2" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "9"))
                     (rule "polySimp_mulComm0" (formula "13") (term "0"))
                     (rule "applyEq" (formula "11") (term "0,2") (ifseqformula "13"))
                     (rule "inEqSimp_homoInEq1" (formula "11") (term "2"))
                     (rule "polySimp_addComm1" (formula "11") (term "0,2"))
                     (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,2"))
                     (rule "add_literals" (formula "11") (term "1,1,0,0,2"))
                     (rule "times_zero_1" (formula "11") (term "1,0,0,2"))
                     (rule "add_zero_right" (formula "11") (term "0,0,2"))
                     (rule "applyEq" (formula "11") (term "0,1") (ifseqformula "13"))
                     (rule "inEqSimp_homoInEq1" (formula "11") (term "1"))
                     (rule "polySimp_addComm1" (formula "11") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
                     (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "11") (term "0,0,1"))
                     (rule "applyEq" (formula "10") (term "0") (ifseqformula "13"))
                     (rule "inEqSimp_homoInEq0" (formula "10"))
                     (rule "polySimp_pullOutFactor1" (formula "10") (term "0"))
                     (rule "add_literals" (formula "10") (term "1,0"))
                     (rule "times_zero_1" (formula "10") (term "0"))
                     (rule "qeq_literals" (formula "10"))
                     (rule "true_left" (formula "10"))
                     (rule "applyEq" (formula "11") (term "1") (ifseqformula "9"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "2"))
                     (rule "mul_literals" (formula "10") (term "1,2"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "10") (term "0,1"))
                     (rule "inEqSimp_subsumption1" (formula "10") (term "1") (ifseqformula "3"))
                     (rule "leq_literals" (formula "10") (term "0,1"))
                     (rule "concrete_or_1" (formula "10") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "10") (term "2") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "10") (term "0,2"))
                     (rule "concrete_and_2" (formula "10") (term "2"))
                     (rule "ifthenelse_concrete" (formula "10"))
                     (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "3"))
                     (rule "leq_literals" (formula "10") (term "0"))
                     (rule "concrete_or_1" (formula "10"))
                     (rule "true_left" (formula "10"))
                     (rule "jdiv_axiom" (formula "38") (term "0,0"))
                     (rule "eqSymm" (formula "1"))
                     (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "13"))
                     (rule "inEqSimp_subsumption1" (formula "1") (term "0,0") (ifseqformula "21"))
                     (rule "leq_literals" (formula "1") (term "0,0,0"))
                     (rule "concrete_or_1" (formula "1") (term "0,0"))
                     (rule "ifthenelse_true" (formula "1") (term "0"))
                     (rule "eqSymm" (formula "1"))
                     (rule "applyEq" (formula "39") (term "0,0") (ifseqformula "1"))
                     (rule "polySimp_mulComm0" (formula "39") (term "0"))
                     (rule "close" (formula "39") (ifseqformula "15"))
                  )
                  (branch "result_1 >= 0 FALSE"
                     (rule "replace_known_right" (formula "7") (term "0,0") (ifseqformula "32"))
                     (rule "ifthenelse_false" (formula "7") (term "0"))
                     (rule "eqSymm" (formula "7"))
                     (rule "replace_known_right" (formula "24") (term "0,1,1") (ifseqformula "32"))
                     (rule "ifthenelse_false_for" (formula "24") (term "1,1"))
                     (rule "inEqSimp_geqRight" (formula "32"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "8"))
                     (rule "polySimp_mulComm1" (formula "34") (term "0"))
                     (rule "polySimp_homoEq" (formula "34"))
                     (rule "polySimp_mulLiterals" (formula "34") (term "1,0"))
                     (rule "polySimp_elimOne" (formula "34") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "34") (term "1,0"))
                     (rule "polySimp_sepPosMonomial" (formula "34"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "inEqSimp_contradEq3" (formula "29") (term "0") (ifseqformula "1"))
                     (rule "times_zero_1" (formula "29") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "29") (term "0,0,0"))
                     (rule "qeq_literals" (formula "29") (term "0,0"))
                     (rule "concrete_and_2" (formula "29") (term "0"))
                     (rule "concrete_or_2" (formula "29"))
                     (rule "andLeft" (formula "29"))
                     (rule "andLeft" (formula "29"))
                     (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "30"))
                     (rule "polySimp_mulComm0" (formula "33") (term "0"))
                     (rule "applyEq" (formula "29") (term "0") (ifseqformula "33"))
                     (rule "inEqSimp_homoInEq0" (formula "29"))
                     (rule "polySimp_pullOutFactor1" (formula "29") (term "0"))
                     (rule "add_literals" (formula "29") (term "1,0"))
                     (rule "times_zero_1" (formula "29") (term "0"))
                     (rule "qeq_literals" (formula "29"))
                     (rule "true_left" (formula "29"))
                     (rule "applyEq" (formula "30") (term "0") (ifseqformula "32"))
                     (rule "inEqSimp_homoInEq1" (formula "30"))
                     (rule "polySimp_addComm1" (formula "30") (term "0"))
                     (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0"))
                     (rule "add_literals" (formula "30") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "30") (term "1,0,0"))
                     (rule "add_zero_right" (formula "30") (term "0,0"))
                     (rule "applyEq" (formula "27") (term "0,1") (ifseqformula "29"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1"))
                     (rule "applyEq" (formula "31") (term "1") (ifseqformula "29"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "30"))
                     (rule "mul_literals" (formula "30") (term "1"))
                     (rule "inEqSimp_contradEq3" (formula "25") (term "0") (ifseqformula "1"))
                     (rule "times_zero_1" (formula "25") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "25") (term "0,0,0"))
                     (rule "qeq_literals" (formula "25") (term "0,0"))
                     (rule "concrete_and_2" (formula "25") (term "0"))
                     (rule "concrete_or_2" (formula "25"))
                     (rule "andLeft" (formula "25"))
                     (rule "andLeft" (formula "25"))
                     (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "26"))
                     (rule "polySimp_mulComm0" (formula "30") (term "0"))
                     (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "26"))
                     (rule "polySimp_mulComm0" (formula "29") (term "0"))
                     (rule "applyEq" (formula "25") (term "0") (ifseqformula "30"))
                     (rule "inEqSimp_homoInEq0" (formula "25"))
                     (rule "polySimp_pullOutFactor1" (formula "25") (term "0"))
                     (rule "add_literals" (formula "25") (term "1,0"))
                     (rule "times_zero_1" (formula "25") (term "0"))
                     (rule "qeq_literals" (formula "25"))
                     (rule "true_left" (formula "25"))
                     (rule "applyEq" (formula "26") (term "0") (ifseqformula "29"))
                     (rule "inEqSimp_homoInEq1" (formula "26"))
                     (rule "polySimp_addComm1" (formula "26") (term "0"))
                     (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                     (rule "add_literals" (formula "26") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "26") (term "1,0,0"))
                     (rule "add_zero_right" (formula "26") (term "0,0"))
                     (rule "applyEq" (formula "27") (term "1") (ifseqformula "25"))
                     (rule "applyEq" (formula "15") (term "0,1") (ifseqformula "25"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "26"))
                     (rule "mul_literals" (formula "26") (term "1"))
                     (rule "inEqSimp_strengthen0" (formula "6") (ifseqformula "34"))
                     (rule "inEqSimp_contradEq3" (formula "34") (ifseqformula "6"))
                     (rule "polySimp_mulAssoc" (formula "34") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "34") (term "0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "34") (term "1,0,0"))
                     (rule "polySimp_elimOne" (formula "34") (term "1,0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "34") (term "0,0"))
                     (rule "add_literals" (formula "34") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "34") (term "1,0,0"))
                     (rule "add_zero_right" (formula "34") (term "0,0"))
                     (rule "qeq_literals" (formula "34") (term "0"))
                     (rule "concrete_and_2" (formula "34"))
                     (rule "false_right" (formula "34"))
                     (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "6"))
                     (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "7") (term "0"))
                     (rule "polySimp_rightDist" (formula "7") (term "0,0,0"))
                     (rule "mul_literals" (formula "7") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
                     (rule "add_literals" (formula "7") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
                     (rule "add_literals" (formula "7") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "7") (term "1,0,0"))
                     (rule "add_zero_right" (formula "7") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                     (rule "mul_literals" (formula "7") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "7"))
                     (rule "leq_literals" (formula "10") (term "0"))
                     (rule "concrete_or_1" (formula "10"))
                     (rule "true_left" (formula "10"))
                     (rule "div_axiom" (formula "10") (term "1") (inst "quotient=quotient_28"))
                     (rule "polySimp_mulComm0" (formula "10") (term "0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "10") (term "0,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,1,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "10") (term "0,2,1,1"))
                     (rule "inEqSimp_contradEq7" (formula "10") (term "0") (ifseqformula "7"))
                     (rule "times_zero_1" (formula "10") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "10") (term "0,0,0"))
                     (rule "leq_literals" (formula "10") (term "0,0"))
                     (rule "concrete_and_2" (formula "10") (term "0"))
                     (rule "concrete_or_2" (formula "10"))
                     (rule "andLeft" (formula "10"))
                     (rule "andLeft" (formula "10"))
                     (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "10"))
                     (rule "polySimp_mulComm0" (formula "14") (term "0"))
                     (rule "applyEq" (formula "12") (term "0,2") (ifseqformula "14"))
                     (rule "inEqSimp_homoInEq1" (formula "12") (term "2"))
                     (rule "polySimp_addComm1" (formula "12") (term "0,2"))
                     (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,2"))
                     (rule "add_literals" (formula "12") (term "1,1,0,0,2"))
                     (rule "times_zero_1" (formula "12") (term "1,0,0,2"))
                     (rule "add_zero_right" (formula "12") (term "0,0,2"))
                     (rule "applyEq" (formula "12") (term "0,1") (ifseqformula "14"))
                     (rule "inEqSimp_homoInEq1" (formula "12") (term "1"))
                     (rule "polySimp_addComm1" (formula "12") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
                     (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "12") (term "0,0,1"))
                     (rule "applyEq" (formula "11") (term "0") (ifseqformula "14"))
                     (rule "inEqSimp_homoInEq0" (formula "11"))
                     (rule "polySimp_pullOutFactor1" (formula "11") (term "0"))
                     (rule "add_literals" (formula "11") (term "1,0"))
                     (rule "times_zero_1" (formula "11") (term "0"))
                     (rule "qeq_literals" (formula "11"))
                     (rule "true_left" (formula "11"))
                     (rule "applyEq" (formula "12") (term "1") (ifseqformula "10"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "2"))
                     (rule "mul_literals" (formula "11") (term "1,2"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "11") (term "0,1"))
                     (rule "inEqSimp_subsumption1" (formula "11") (term "1") (ifseqformula "7"))
                     (rule "leq_literals" (formula "11") (term "0,1"))
                     (rule "concrete_or_1" (formula "11") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "11") (term "2") (ifseqformula "7"))
                     (rule "qeq_literals" (formula "11") (term "0,2"))
                     (rule "concrete_and_2" (formula "11") (term "2"))
                     (rule "ifthenelse_concrete" (formula "11"))
                     (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "7"))
                     (rule "leq_literals" (formula "11") (term "0"))
                     (rule "concrete_or_1" (formula "11"))
                     (rule "true_left" (formula "11"))
                     (rule "jdiv_axiom" (formula "34") (term "0,0"))
                     (rule "eqSymm" (formula "1"))
                     (rule "applyEqRigid" (formula "1") (term "1,0") (ifseqformula "14"))
                     (rule "inEqSimp_subsumption1" (formula "1") (term "0,0") (ifseqformula "22"))
                     (rule "leq_literals" (formula "1") (term "0,0,0"))
                     (rule "concrete_or_1" (formula "1") (term "0,0"))
                     (rule "ifthenelse_true" (formula "1") (term "0"))
                     (rule "eqSymm" (formula "1"))
                     (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "1"))
                     (rule "polySimp_mulComm0" (formula "35") (term "0"))
                     (rule "close" (formula "35") (ifseqformula "16"))
                  )
               )
            )
         )
         (branch "Exceptional Post (gcdHelp)"
            (rule "inInt" (formula "7") (term "1,0,0,1,1,0,1,1,1,1,1"))
            (rule "concrete_and_3" (formula "7") (term "0,0,1,1,0,1,1,1,1,1"))
            (rule "translateJavaMod" (formula "7") (term "0,0,0,1,0,1,1,1,1,1"))
            (rule "translateJavaMod" (formula "7") (term "0,1,0,1,0,1,1,1,1,1"))
            (rule "translateJavaMod" (formula "7") (term "0,1,0,1,1,0,1,1,1,1,1"))
            (rule "translateJavaMod" (formula "7") (term "0,1,0,0,0,1,1,0,1,1,1,1,1"))
            (rule "translateJavaMod" (formula "7") (term "0,1,0,0,1,1,0,1,1,1,1,1"))
            (rule "simplifyUpdate2" (formula "8"))
            (rule "simplifyUpdate2" (formula "7"))
            (rule "simplifyUpdate2" (formula "7") (term "1"))
            (rule "andLeft" (formula "7"))
            (rule "simplifyUpdate2" (formula "7"))
            (rule "sequentialToParallel2" (formula "9"))
            (rule "simplifyUpdate3" (formula "9") (term "1,0"))
            (rule "sequentialToParallel2" (formula "8"))
            (rule "simplifyUpdate3" (formula "8") (term "1,0"))
            (rule "andLeft" (formula "8"))
            (rule "simplifyUpdate2" (formula "8"))
            (rule "simplifyUpdate2" (formula "9"))
            (rule "andLeft" (formula "8"))
            (rule "simplifyUpdate2" (formula "8"))
            (rule "andLeft" (formula "10"))
            (rule "simplifyUpdate2" (formula "11"))
            (rule "notLeft" (formula "8"))
            (rule "close" (formula "11") (ifseqformula "10"))
         )
         (branch "Pre (gcdHelp)"
            (rule "inInt" (formula "6") (term "1,1,1,1"))
            (rule "concrete_and_3" (formula "6") (term "1,1,1"))
            (rule "inInt" (formula "6") (term "1,1,1,1"))
            (rule "concrete_and_3" (formula "6") (term "1,1,1"))
            (rule "simplifyUpdate2" (formula "6"))
            (rule "simplifyUpdate2" (formula "6") (term "1"))
            (rule "applyOnRigidFormula" (formula "6"))
            (rule "simplifyUpdate2" (formula "6") (term "1"))
            (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "2"))
            (rule "concrete_and_3" (formula "6"))
            (rule "applyOnRigidFormula" (formula "6"))
            (rule "simplifyUpdate2" (formula "6") (term "0"))
            (rule "applyOnRigidFormula" (formula "6") (term "1"))
            (rule "simplifyUpdate1" (formula "6") (term "0,1"))
            (rule "simplifyUpdate1" (formula "6") (term "1,1"))
            (rule "applyOnPV" (formula "6") (term "0,1"))
            (rule "applyOnPV" (formula "6") (term "1,1"))
            (rule "applyOnRigidFormula" (formula "6") (term "0"))
            (rule "applyOnPV" (formula "6") (term "0,0"))
            (rule "simplifyUpdate1" (formula "6") (term "1,0"))
            (rule "replace_known_left" (formula "6") (term "0") (ifseqformula "4"))
            (rule "concrete_and_1" (formula "6"))
            (rule "inEqSimp_geqRight" (formula "6"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "mul_literals" (formula "1") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
            (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
            (rule "andLeft" (formula "1"))
            (rule "inEqSimp_homoInEq1" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "1,1,0"))
            (rule "times_zero_1" (formula "1") (term "1,0"))
            (rule "add_zero_right" (formula "1") (term "0"))
            (rule "leq_literals" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "if x_2 false"
         (rule "false_to_not_true" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "6"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "applyOnRigidFormula" (formula "5"))
         (rule "applyOnPV" (formula "5") (term "0"))
         (rule "simplifyUpdate1" (formula "5") (term "1"))
         (rule "ifthenelse_concrete3" (formula "5"))
         (rule "boolean_not_equal_2" (formula "5") (term "1"))
         (rule "concrete_or_4" (formula "5"))
         (rule "inEqSimp_geqRight" (formula "5"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0"))
         (rule "assignment" (formula "6") (term "1"))
         (rule "sequentialToParallel2" (formula "6"))
         (rule "simplifyUpdate2" (formula "6"))
         (rule "simplifyUpdate3" (formula "6") (term "1,0"))
         (rule "applyOnElementary" (formula "6") (term "1,0"))
         (rule "applyOnPV" (formula "6") (term "0,1,0"))
         (rule "assignment" (formula "6") (term "1"))
         (rule "sequentialToParallel2" (formula "6"))
         (rule "simplifyUpdate2" (formula "6"))
         (rule "simplifyUpdate3" (formula "6") (term "1,0"))
         (rule "applyOnElementary" (formula "6") (term "1,0"))
         (rule "applyOnPV" (formula "6") (term "0,1,0"))
         (rule "blockEmpty" (formula "6") (term "1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1"))
         (rule "polySimp_elimOne" (formula "1") (term "1"))
         (rule "returnUnfold" (formula "6") (term "1") (inst "#v0=x"))
         (rule "variableDeclarationAssign" (formula "6") (term "1"))
         (rule "variableDeclaration" (formula "6") (term "1") (newnames "x_3"))
         (builtin "Use Operation Contract" (formula "6") (newnames "heapBefore_gcdHelp,result_0,exc_0,heapAfter_gcdHelp,anon_heap_gcdHelp") (contract "Gcd[Gcd::gcdHelp(int,int)].JML normal_behavior operation contract.0"))
         (branch "Post (gcdHelp)"
            (rule "inInt" (formula "7") (term "1,0,1,1,1,1"))
            (rule "concrete_and_3" (formula "7") (term "0,1,1,1,1"))
            (rule "inInt" (formula "7") (term "1,0,0,1,1,0,1,1,1,1,1"))
            (rule "concrete_and_3" (formula "7") (term "0,0,1,1,0,1,1,1,1,1"))
            (rule "translateJavaMod" (formula "7") (term "0,1,0,1,0,1,1,1,1,1"))
            (rule "translateJavaMod" (formula "7") (term "0,0,0,1,0,1,1,1,1,1"))
            (rule "translateJavaMod" (formula "7") (term "0,1,0,1,1,0,1,1,1,1,1"))
            (rule "translateJavaMod" (formula "7") (term "0,1,0,0,1,1,0,1,1,1,1,1"))
            (rule "translateJavaMod" (formula "7") (term "0,1,0,0,0,1,1,0,1,1,1,1,1"))
            (rule "simplifyUpdate2" (formula "8"))
            (rule "simplifyUpdate2" (formula "7"))
            (rule "simplifyUpdate2" (formula "7") (term "1"))
            (rule "simplifyUpdate2" (formula "7") (term "1,1"))
            (rule "andLeft" (formula "7"))
            (rule "simplifyUpdate2" (formula "7"))
            (rule "andLeft" (formula "8"))
            (rule "simplifyUpdate2" (formula "8"))
            (rule "andLeft" (formula "9"))
            (rule "simplifyUpdate2" (formula "10"))
            (rule "sequentialToParallel2" (formula "10"))
            (rule "simplifyUpdate3" (formula "10") (term "1,0"))
            (rule "applyOnRigidFormula" (formula "9"))
            (rule "simplifyUpdate2" (formula "9") (term "0"))
            (rule "applyOnRigidFormula" (formula "9") (term "1"))
            (rule "applyOnRigidFormula" (formula "9") (term "0"))
            (rule "applyOnRigidFormula" (formula "9") (term "0,1"))
            (rule "simplifyUpdate2" (formula "9") (term "0,0,1"))
            (rule "simplifyUpdate2" (formula "9") (term "1,0,1"))
            (rule "applyOnRigidFormula" (formula "9") (term "1,1"))
            (rule "applyOnRigidFormula" (formula "9") (term "0,0"))
            (rule "applyOnPV" (formula "9") (term "0,0,0"))
            (rule "simplifyUpdate1" (formula "9") (term "1,0,0"))
            (rule "applyOnRigidFormula" (formula "9") (term "0,0,1"))
            (rule "simplifyUpdate1" (formula "9") (term "1,0,0,1"))
            (rule "applyOnRigidFormula" (formula "9") (term "1,0,1"))
            (rule "simplifyUpdate1" (formula "9") (term "1,1,0,1"))
            (rule "applyOnRigidFormula" (formula "9") (term "0,1,1"))
            (rule "simplifyUpdate2" (formula "9") (term "1,0,1,1"))
            (rule "applyOnRigidTerm" (formula "9") (term "0,0,0,1"))
            (rule "applyOnPV" (formula "9") (term "0,0,0,0,1"))
            (rule "simplifyUpdate1" (formula "9") (term "1,0,0,0,1"))
            (rule "applyOnRigidTerm" (formula "9") (term "0,1,0,1"))
            (rule "applyOnPV" (formula "9") (term "0,0,1,0,1"))
            (rule "simplifyUpdate1" (formula "9") (term "1,0,1,0,1"))
            (rule "applyOnRigidFormula" (formula "9") (term "0,0,1,1"))
            (rule "simplifyUpdate2" (formula "9") (term "0,0,0,1,1"))
            (rule "simplifyUpdate2" (formula "9") (term "1,0,0,1,1"))
            (rule "applyOnRigidFormula" (formula "9") (term "0,0,0,1,1"))
            (rule "simplifyUpdate2" (formula "9") (term "0,0,0,0,1,1"))
            (rule "applyOnRigidFormula" (formula "9") (term "1,0,0,1,1"))
            (rule "simplifyUpdate1" (formula "9") (term "1,1,0,0,1,1"))
            (rule "applyOnRigidFormula" (formula "9") (term "1,0,0,0,1,1"))
            (rule "simplifyUpdate1" (formula "9") (term "1,1,0,0,0,1,1"))
            (rule "applyOnRigidTerm" (formula "9") (term "0,1,0,0,1,1"))
            (rule "applyOnPV" (formula "9") (term "0,0,1,0,0,1,1"))
            (rule "simplifyUpdate1" (formula "9") (term "1,0,1,0,0,1,1"))
            (rule "applyOnRigidTerm" (formula "9") (term "0,1,0,0,0,1,1"))
            (rule "applyOnPV" (formula "9") (term "0,0,1,0,0,0,1,1"))
            (rule "simplifyUpdate1" (formula "9") (term "1,0,1,0,0,0,1,1"))
            (rule "inEqSimp_gtToGeq" (formula "9") (term "0,0,0,0,1,1"))
            (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0,0,1,1"))
            (rule "add_zero_right" (formula "9") (term "0,0,0,0,0,0,1,1"))
            (rule "assignment" (formula "10") (term "1"))
            (rule "sequentialToParallel2" (formula "10"))
            (rule "simplifyUpdate3" (formula "10") (term "1,0"))
            (rule "jmod_axiom" (formula "9") (term "0,1,0,1,1"))
            (rule "polySimp_mulComm1" (formula "9") (term "1,0,1,0,1,1"))
            (rule "jmod_axiom" (formula "9") (term "0,0,0,1"))
            (rule "polySimp_mulComm1" (formula "9") (term "1,0,0,0,1"))
            (rule "jmod_axiom" (formula "9") (term "0,1,0,1"))
            (rule "polySimp_mulComm1" (formula "9") (term "1,0,1,0,1"))
            (rule "jmod_axiom" (formula "9") (term "0,1,0,0,1,1"))
            (rule "polySimp_mulComm1" (formula "9") (term "1,0,1,0,0,1,1"))
            (rule "jmod_axiom" (formula "9") (term "0,1,0,0,0,1,1"))
            (rule "polySimp_mulComm1" (formula "9") (term "1,0,1,0,0,0,1,1"))
            (rule "polySimp_sepNegMonomial" (formula "9") (term "1,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,1,1"))
            (rule "polySimp_elimOne" (formula "9") (term "0,1,0,1,1"))
            (rule "polySimp_sepNegMonomial" (formula "9") (term "0,0,1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,1"))
            (rule "polySimp_elimOne" (formula "9") (term "0,0,0,1"))
            (rule "polySimp_sepNegMonomial" (formula "9") (term "1,0,1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,1"))
            (rule "polySimp_elimOne" (formula "9") (term "0,1,0,1"))
            (rule "polySimp_sepNegMonomial" (formula "9") (term "1,0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0,1,1"))
            (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0,1,1"))
            (rule "polySimp_sepNegMonomial" (formula "9") (term "1,0,0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0,0,1,1"))
            (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0,0,1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0,0,1,1"))
            (rule "mul_literals" (formula "9") (term "1,0,0,0,0,1,1"))
            (rule "nnf_imp2or" (formula "9") (term "0,1,1"))
            (rule "nnf_notAnd" (formula "9") (term "0,0,1,1"))
            (rule "nnf_notAnd" (formula "9") (term "0,0,0,1,1"))
            (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,0,1,1"))
            (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0,0,1,1"))
            (rule "add_literals" (formula "9") (term "0,0,0,0,0,0,1,1"))
            (rule "add_zero_left" (formula "9") (term "0,0,0,0,0,1,1"))
            (rule "commute_or_2" (formula "9") (term "0,1,1"))
            (rule "methodCallReturn" (formula "10") (term "1"))
            (rule "assignment" (formula "10") (term "1"))
            (rule "sequentialToParallel2" (formula "10"))
            (rule "simplifyUpdate2" (formula "10"))
            (rule "simplifyUpdate3" (formula "10") (term "1,0"))
            (rule "applyOnElementary" (formula "10") (term "1,0"))
            (rule "applyOnPV" (formula "10") (term "0,1,0"))
            (rule "methodCallEmpty" (formula "10") (term "1"))
            (rule "tryEmpty" (formula "10") (term "1"))
            (rule "simplifyUpdate2" (formula "10"))
            (rule "emptyModality" (formula "10") (term "1"))
            (rule "applyOnRigidFormula" (formula "10"))
            (rule "simplifyUpdate2" (formula "10") (term "0"))
            (rule "simplifyUpdate2" (formula "10") (term "1"))
            (rule "applyOnRigidFormula" (formula "10") (term "0"))
            (rule "simplifyUpdate2" (formula "10") (term "0,0"))
            (rule "applyOnRigidFormula" (formula "10") (term "1"))
            (rule "applyOnPV" (formula "10") (term "0,1"))
            (rule "simplifyUpdate1" (formula "10") (term "1,1"))
            (rule "eqClose" (formula "10") (term "1"))
            (rule "concrete_and_3" (formula "10"))
            (rule "impRight" (formula "10"))
            (rule "applyOnRigidFormula" (formula "11"))
            (rule "applyOnRigidFormula" (formula "11") (term "0"))
            (rule "applyOnRigidFormula" (formula "11") (term "1"))
            (rule "applyOnRigidFormula" (formula "11") (term "1,0"))
            (rule "simplifyUpdate1" (formula "11") (term "1,1,0"))
            (rule "applyOnRigidFormula" (formula "11") (term "0,0"))
            (rule "simplifyUpdate1" (formula "11") (term "1,0,0"))
            (rule "applyOnRigidFormula" (formula "11") (term "0,1"))
            (rule "simplifyUpdate2" (formula "11") (term "0,0,1"))
            (rule "applyOnRigidTerm" (formula "11") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "11") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "11") (term "1,0,1,0"))
            (rule "applyOnRigidTerm" (formula "11") (term "0,0,0"))
            (rule "simplifyUpdate1" (formula "11") (term "0,0,0,0"))
            (rule "applyOnPV" (formula "11") (term "1,0,0,0"))
            (rule "applyOnRigidFormula" (formula "11") (term "1,0,1"))
            (rule "simplifyUpdate1" (formula "11") (term "1,1,0,1"))
            (rule "applyOnRigidTerm" (formula "11") (term "0,1,0,1"))
            (rule "applyOnPV" (formula "11") (term "0,0,1,0,1"))
            (rule "simplifyUpdate1" (formula "11") (term "1,0,1,0,1"))
            (rule "jmod_axiom" (formula "11") (term "0,0,1,0,0,1"))
            (rule "polySimp_mulComm1" (formula "11") (term "1,0,0,1,0,0,1"))
            (rule "jmod_axiom" (formula "11") (term "0,0,1,0,0,0,1"))
            (rule "polySimp_mulComm1" (formula "11") (term "1,0,0,1,0,0,0,1"))
            (rule "jmod_axiom" (formula "11") (term "0,1,0"))
            (rule "polySimp_mulComm1" (formula "11") (term "1,0,1,0"))
            (rule "jmod_axiom" (formula "11") (term "0,0,0"))
            (rule "polySimp_mulComm1" (formula "11") (term "1,0,0,0"))
            (rule "jmod_axiom" (formula "11") (term "0,1,0,1"))
            (rule "polySimp_mulComm1" (formula "11") (term "1,0,1,0,1"))
            (rule "polySimp_sepNegMonomial" (formula "11") (term "0,1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1,0,0,1"))
            (rule "polySimp_elimOne" (formula "11") (term "0,0,1,0,0,1"))
            (rule "polySimp_sepNegMonomial" (formula "11") (term "0,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "11") (term "0,0,1,0,0,0,1"))
            (rule "polySimp_sepNegMonomial" (formula "11") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "11") (term "0,1,0"))
            (rule "polySimp_sepNegMonomial" (formula "11") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "0,0,0"))
            (rule "polySimp_sepNegMonomial" (formula "11") (term "1,0,1"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,1"))
            (rule "polySimp_elimOne" (formula "11") (term "0,1,0,1"))
            (rule "cut_direct" (formula "6") (term "0"))
            (branch "CUT: b = abstrPred_geq_AND_abstrPred_or_0 TRUE"
               (rule "concrete_or_1" (formula "7"))
               (rule "true_left" (formula "7"))
               (rule "applyEq" (formula "1") (term "0,0,1") (ifseqformula "6"))
               (rule "applyEq" (formula "11") (term "0,0,0,1,0") (ifseqformula "6"))
               (rule "applyEq" (formula "11") (term "0,0,0,0,1,0,0,1") (ifseqformula "6"))
               (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "6"))
               (rule "applyEq" (formula "11") (term "1,0,1,0,0,1") (ifseqformula "6"))
               (rule "ifthenelse_split" (formula "10") (term "1,1,0,1"))
               (branch "a <= -1 TRUE"
                  (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "10"))
                  (rule "ifthenelse_true" (formula "2") (term "0"))
                  (rule "replace_known_left" (formula "11") (term "0,1,0,1,0,1,1") (ifseqformula "10"))
                  (rule "ifthenelse_true" (formula "11") (term "1,0,1,0,1,1"))
                  (rule "replace_known_left" (formula "11") (term "0,0,0,0,1,0,1") (ifseqformula "10"))
                  (rule "ifthenelse_true" (formula "11") (term "0,0,0,1,0,1"))
                  (rule "replace_known_left" (formula "11") (term "0,0,0,0,0,1,0,1,1") (ifseqformula "10"))
                  (rule "ifthenelse_true" (formula "11") (term "0,0,0,0,1,0,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "2"))
                  (rule "inEqSimp_contradEq3" (formula "1") (term "0,0") (ifseqformula "10"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
                  (rule "qeq_literals" (formula "1") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "1") (term "0,0"))
                  (rule "concrete_not_2" (formula "1") (term "0"))
                  (rule "concrete_or_1" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "commute_or_2" (formula "10") (term "0,1,1"))
                  (rule "commute_and" (formula "10") (term "0,1"))
                  (rule "commute_or_2" (formula "10") (term "0,0,1,1"))
                  (rule "cut_direct" (formula "10") (term "0,0"))
                  (branch "CUT: abstrPred_geq_AND_abstrPred_or_0 = 0 TRUE"
                     (rule "concrete_not_1" (formula "11") (term "0"))
                     (rule "concrete_impl_2" (formula "11"))
                     (rule "true_left" (formula "11"))
                     (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "10"))
                     (rule "inEqSimp_commuteGeq" (formula "1"))
                     (rule "applyEq" (formula "4") (term "0") (ifseqformula "10"))
                     (rule "qeq_literals" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "applyEqRigid" (formula "10") (term "0,0,0,1,0") (ifseqformula "9"))
                     (rule "jdiv_axiom_inline" (formula "10") (term "0,0,1,0"))
                     (rule "qeq_literals" (formula "10") (term "0,0,0,1,0"))
                     (rule "ifthenelse_true" (formula "10") (term "0,0,1,0"))
                     (rule "applyEqRigid" (formula "10") (term "0,0,0,0,1,0,0,1") (ifseqformula "9"))
                     (rule "jdiv_axiom_inline" (formula "10") (term "0,0,0,1,0,0,1"))
                     (rule "qeq_literals" (formula "10") (term "0,0,0,0,1,0,0,1"))
                     (rule "ifthenelse_true" (formula "10") (term "0,0,0,1,0,0,1"))
                     (rule "applyEq" (formula "10") (term "1,0,1,0,0,1") (ifseqformula "9"))
                     (rule "applyEq" (formula "4") (term "1") (ifseqformula "9"))
                     (rule "applyEqRigid" (formula "10") (term "1,1,0") (ifseqformula "9"))
                     (rule "inEqSimp_invertInEq0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "times_zero_2" (formula "1") (term "1"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "8"))
                     (rule "qeq_literals" (formula "1") (term "0"))
                     (rule "concrete_and_2" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "CUT: abstrPred_geq_AND_abstrPred_or_0 = 0 FALSE"
                     (rule "concrete_not_2" (formula "10") (term "0"))
                     (rule "concrete_impl_1" (formula "10"))
                     (rule "andLeft" (formula "10"))
                     (rule "andLeft" (formula "10"))
                     (rule "replace_known_left" (formula "14") (term "1,0") (ifseqformula "11"))
                     (rule "concrete_and_3" (formula "14") (term "0"))
                     (rule "inEqSimp_strengthen1" (formula "4") (ifseqformula "13"))
                     (rule "add_zero_right" (formula "4") (term "1"))
                     (rule "inEqSimp_contradEq7" (formula "13") (ifseqformula "4"))
                     (rule "times_zero_1" (formula "13") (term "1,0,0"))
                     (rule "add_zero_right" (formula "13") (term "0,0"))
                     (rule "leq_literals" (formula "13") (term "0"))
                     (rule "concrete_and_2" (formula "13"))
                     (rule "false_right" (formula "13"))
                     (rule "jdiv_axiom" (formula "10") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "0,0,2,1"))
                     (rule "eqSymm" (formula "10"))
                     (rule "polySimp_elimOne" (formula "10") (term "0,0,2,0"))
                     (rule "inEqSimp_invertInEq1" (formula "10") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0"))
                     (rule "times_zero_2" (formula "10") (term "1,0,0"))
                     (rule "polySimp_elimOne" (formula "10") (term "0,0,0"))
                     (rule "inEqSimp_subsumption0" (formula "10") (term "0,0") (ifseqformula "9"))
                     (rule "leq_literals" (formula "10") (term "0,0,0"))
                     (rule "concrete_or_1" (formula "10") (term "0,0"))
                     (rule "ifthenelse_true" (formula "10") (term "0"))
                     (rule "eqSymm" (formula "10"))
                     (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "10"))
                     (rule "jdiv_axiom" (formula "12") (term "0,0"))
                     (rule "eqSymm" (formula "12"))
                     (rule "inEqSimp_subsumption1" (formula "12") (term "0,0") (ifseqformula "4"))
                     (rule "leq_literals" (formula "12") (term "0,0,0"))
                     (rule "concrete_or_1" (formula "12") (term "0,0"))
                     (rule "ifthenelse_true" (formula "12") (term "0"))
                     (rule "eqSymm" (formula "12"))
                     (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "12"))
                     (rule "jdiv_axiom" (formula "15") (term "0,0,0"))
                     (rule "eqSymm" (formula "1"))
                     (rule "inEqSimp_contradInEq0" (formula "1") (term "0,0") (ifseqformula "10"))
                     (rule "qeq_literals" (formula "1") (term "0,0,0"))
                     (rule "concrete_and_2" (formula "1") (term "0,0"))
                     (rule "ifthenelse_false" (formula "1") (term "0"))
                     (rule "eqSymm" (formula "1"))
                     (rule "applyEq" (formula "16") (term "0,0,0") (ifseqformula "1"))
                     (rule "polySimp_mulComm1" (formula "16") (term "0,0"))
                     (rule "polySimp_homoEq" (formula "16") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0"))
                     (rule "polySimp_elimOne" (formula "16") (term "1,0,0"))
                     (rule "applyEq" (formula "16") (term "1,0,0") (ifseqformula "12"))
                     (rule "polySimp_pullOutFactor1" (formula "16") (term "0,0"))
                     (rule "add_literals" (formula "16") (term "1,0,0"))
                     (rule "times_zero_1" (formula "16") (term "0,0"))
                     (rule "eqClose" (formula "16") (term "0"))
                     (rule "concrete_and_1" (formula "16"))
                     (rule "allRight" (formula "16") (inst "sk=x_5"))
                     (rule "orRight" (formula "16"))
                     (rule "orRight" (formula "16"))
                     (rule "notRight" (formula "17"))
                     (rule "orRight" (formula "17"))
                     (rule "notRight" (formula "18"))
                     (rule "inEqSimp_leqRight" (formula "18"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "div_axiom" (formula "14") (term "1") (inst "quotient=quotient_16"))
                     (rule "polySimp_mulComm0" (formula "14") (term "0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "14") (term "0,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,1,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "14") (term "0,2,1,1"))
                     (rule "commute_and" (formula "14") (term "0,1"))
                     (rule "div_axiom" (formula "17") (term "1") (inst "quotient=quotient_17"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,1,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "17") (term "0,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "17") (term "0,2,1,1"))
                     (rule "polySimp_mulComm0" (formula "17") (term "0,1,0,1"))
                     (rule "commute_and" (formula "17") (term "0,1"))
                     (rule "jdiv_axiom" (formula "21") (term "0,0"))
                     (rule "eqSymm" (formula "1"))
                     (rule "jdiv_axiom" (formula "4") (term "0,0"))
                     (rule "eqSymm" (formula "4"))
                     (rule "inEqSimp_subsumption1" (formula "4") (term "0,0") (ifseqformula "10"))
                     (rule "leq_literals" (formula "4") (term "0,0,0"))
                     (rule "concrete_or_1" (formula "4") (term "0,0"))
                     (rule "ifthenelse_true" (formula "4") (term "0"))
                     (rule "eqSymm" (formula "4"))
                     (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "4"))
                     (rule "jdiv_axiom" (formula "3") (term "0,0"))
                     (rule "eqSymm" (formula "3"))
                     (rule "inEqSimp_contradInEq0" (formula "3") (term "0,0") (ifseqformula "16"))
                     (rule "qeq_literals" (formula "3") (term "0,0,0"))
                     (rule "concrete_and_2" (formula "3") (term "0,0"))
                     (rule "ifthenelse_false" (formula "3") (term "0"))
                     (rule "eqSymm" (formula "3"))
                     (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "3"))
                     (rule "polySimp_mulComm1" (formula "4") (term "0"))
                     (rule "polySimp_homoEq" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                     (rule "polySimp_elimOne" (formula "4") (term "1,0"))
                     (rule "polySimp_sepPosMonomial" (formula "4"))
                     (rule "polySimp_critPair" (formula "22") (ifseqformula "19"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,1,1,0"))
                     (rule "polySimp_mulAssoc" (formula "22") (term "0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "22") (term "0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                     (rule "polySimp_mulComm1" (formula "22") (term "1,1,0"))
                     (rule "polySimp_mulComm1" (formula "22") (term "0,1,1,0"))
                     (rule "polySimp_rightDist" (formula "22") (term "0,0"))
                     (rule "polySimp_mulComm1" (formula "22") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "22") (term "0"))
                     (rule "polySimp_addComm1" (formula "22") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "22") (term "0"))
                     (rule "add_literals" (formula "22") (term "1,1,0"))
                     (rule "times_zero_1" (formula "22") (term "1,0"))
                     (rule "add_zero_right" (formula "22") (term "0"))
                     (rule "polySimp_addComm0" (formula "22") (term "0"))
                     (rule "polySimp_sepPosMonomial" (formula "22"))
                     (rule "allLeft" (formula "24") (inst "t=x_5"))
                     (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "26"))
                     (rule "concrete_or_4" (formula "24"))
                     (rule "applyEqRigid" (formula "24") (term "0,0,0,1") (ifseqformula "5"))
                     (rule "replace_known_left" (formula "24") (term "0,1") (ifseqformula "6"))
                     (rule "concrete_not_1" (formula "24") (term "1"))
                     (rule "concrete_or_4" (formula "24"))
                     (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "24") (term "0,0"))
                     (rule "concrete_and_2" (formula "24") (term "0"))
                     (rule "concrete_or_2" (formula "24"))
                     (rule "notLeft" (formula "24"))
                     (rule "div_axiom" (formula "1") (term "1,0") (inst "quotient=quotient_18"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,2,1,1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,1,1,1"))
                     (rule "inEqSimp_contradEq7" (formula "1") (term "0") (ifseqformula "3"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0,0"))
                     (rule "leq_literals" (formula "1") (term "0,0"))
                     (rule "concrete_and_2" (formula "1") (term "0"))
                     (rule "concrete_or_2" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "1"))
                     (rule "inEqSimp_subsumption1" (formula "3") (term "0") (ifseqformula "5"))
                     (rule "leq_literals" (formula "3") (term "0,0"))
                     (rule "concrete_or_1" (formula "3") (term "0"))
                     (rule "ifthenelse_true_for" (formula "3"))
                     (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "2"))
                     (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0"))
                     (rule "polySimp_rightDist" (formula "3") (term "0,0,0"))
                     (rule "mul_literals" (formula "3") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "3") (term "0,0"))
                     (rule "add_literals" (formula "3") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "3") (term "1,0,0"))
                     (rule "add_zero_right" (formula "3") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                     (rule "mul_literals" (formula "3") (term "1"))
                     (rule "div_axiom" (formula "4") (term "0,2,0") (inst "quotient=quotient_19"))
                     (rule "polySimp_mulComm0" (formula "4") (term "0,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,1,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "4") (term "0,2,1,1"))
                     (rule "inEqSimp_contradEq7" (formula "4") (term "0") (ifseqformula "6"))
                     (rule "times_zero_1" (formula "4") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "4") (term "0,0,0"))
                     (rule "leq_literals" (formula "4") (term "0,0"))
                     (rule "concrete_and_2" (formula "4") (term "0"))
                     (rule "concrete_or_2" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "applyEq" (formula "7") (term "0,2,0") (ifseqformula "4"))
                     (rule "inEqSimp_subsumption1" (formula "6") (term "0") (ifseqformula "8"))
                     (rule "leq_literals" (formula "6") (term "0,0"))
                     (rule "concrete_or_1" (formula "6") (term "0"))
                     (rule "ifthenelse_true_for" (formula "6"))
                     (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "5"))
                     (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0"))
                     (rule "polySimp_elimOne" (formula "6") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "6") (term "0"))
                     (rule "polySimp_rightDist" (formula "6") (term "0,0,0"))
                     (rule "mul_literals" (formula "6") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0"))
                     (rule "add_literals" (formula "6") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "6") (term "1,0,0"))
                     (rule "add_zero_right" (formula "6") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                     (rule "mul_literals" (formula "6") (term "1"))
                     (rule "div_axiom" (formula "11") (term "1") (inst "quotient=quotient_20"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,1,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "11") (term "0,2,1,1"))
                     (rule "polySimp_mulComm0" (formula "11") (term "0,1,1,1"))
                     (rule "inEqSimp_contradEq7" (formula "11") (term "0") (ifseqformula "8"))
                     (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "11") (term "0,0,0"))
                     (rule "leq_literals" (formula "11") (term "0,0"))
                     (rule "concrete_and_2" (formula "11") (term "0"))
                     (rule "concrete_or_2" (formula "11"))
                     (rule "andLeft" (formula "11"))
                     (rule "andLeft" (formula "11"))
                     (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "11"))
                     (rule "polySimp_mulComm0" (formula "15") (term "0"))
                     (rule "applyEqRigid" (formula "13") (term "0,1") (ifseqformula "15"))
                     (rule "inEqSimp_homoInEq1" (formula "13") (term "1"))
                     (rule "polySimp_addComm1" (formula "13") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1"))
                     (rule "add_literals" (formula "13") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "13") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "13") (term "0,0,1"))
                     (rule "applyEqRigid" (formula "13") (term "0,2") (ifseqformula "15"))
                     (rule "inEqSimp_homoInEq1" (formula "13") (term "2"))
                     (rule "polySimp_addComm1" (formula "13") (term "0,2"))
                     (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,2"))
                     (rule "add_literals" (formula "13") (term "1,1,0,0,2"))
                     (rule "times_zero_1" (formula "13") (term "1,0,0,2"))
                     (rule "add_zero_right" (formula "13") (term "0,0,2"))
                     (rule "applyEq" (formula "12") (term "0") (ifseqformula "15"))
                     (rule "inEqSimp_homoInEq0" (formula "12"))
                     (rule "polySimp_pullOutFactor1" (formula "12") (term "0"))
                     (rule "add_literals" (formula "12") (term "1,0"))
                     (rule "times_zero_1" (formula "12") (term "0"))
                     (rule "qeq_literals" (formula "12"))
                     (rule "true_left" (formula "12"))
                     (rule "applyEqRigid" (formula "13") (term "1") (ifseqformula "11"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "12") (term "0,1"))
                     (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "8"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "2"))
                     (rule "mul_literals" (formula "12") (term "1,2"))
                     (rule "inEqSimp_subsumption1" (formula "12") (term "0") (ifseqformula "8"))
                     (rule "leq_literals" (formula "12") (term "0,0"))
                     (rule "concrete_or_1" (formula "12") (term "0"))
                     (rule "ifthenelse_true_for" (formula "12"))
                     (rule "true_left" (formula "12"))
                     (rule "ifthenelse_split_for" (formula "27") (term "1,1"))
                     (branch "result_0 >= 0 TRUE"
                        (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "27"))
                        (rule "ifthenelse_true" (formula "7") (term "0"))
                        (rule "eqSymm" (formula "7"))
                        (rule "replace_known_left" (formula "24") (term "0,1,1") (ifseqformula "27"))
                        (rule "ifthenelse_true_for" (formula "24") (term "1,1"))
                        (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "7"))
                        (rule "polySimp_mulComm0" (formula "34") (term "0"))
                        (rule "inEqSimp_strengthen0" (formula "2") (ifseqformula "34"))
                        (rule "inEqSimp_contradEq3" (formula "34") (ifseqformula "2"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0"))
                        (rule "add_literals" (formula "34") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "34") (term "1,0,0"))
                        (rule "add_zero_right" (formula "34") (term "0,0"))
                        (rule "qeq_literals" (formula "34") (term "0"))
                        (rule "concrete_and_2" (formula "34"))
                        (rule "false_right" (formula "34"))
                        (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "2"))
                        (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "polySimp_rightDist" (formula "3") (term "0,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "mul_literals" (formula "3") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "3"))
                        (rule "leq_literals" (formula "9") (term "0"))
                        (rule "concrete_or_1" (formula "9"))
                        (rule "true_left" (formula "9"))
                        (rule "cnf_rightDist" (formula "28"))
                        (rule "andLeft" (formula "28"))
                        (rule "commute_or" (formula "29"))
                        (rule "cnf_rightDist" (formula "24"))
                        (rule "andLeft" (formula "24"))
                        (rule "commute_or" (formula "25"))
                        (rule "cnf_rightDist" (formula "29"))
                        (rule "andLeft" (formula "29"))
                        (rule "commute_or" (formula "30"))
                        (rule "cnf_rightDist" (formula "24"))
                        (rule "andLeft" (formula "24"))
                        (rule "commute_or" (formula "25"))
                        (rule "div_axiom" (formula "9") (term "0,1") (inst "quotient=quotient_22"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,1,1,1,1"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0,2,1,1"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0,1,1,1"))
                        (rule "inEqSimp_contradEq7" (formula "9") (term "0") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "9") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "9") (term "0,0,0"))
                        (rule "leq_literals" (formula "9") (term "0,0"))
                        (rule "concrete_and_2" (formula "9") (term "0"))
                        (rule "concrete_or_2" (formula "9"))
                        (rule "andLeft" (formula "9"))
                        (rule "andLeft" (formula "9"))
                        (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "9"))
                        (rule "polySimp_mulComm0" (formula "13") (term "0"))
                        (rule "applyEq" (formula "10") (term "0") (ifseqformula "13"))
                        (rule "inEqSimp_homoInEq0" (formula "10"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
                        (rule "polySimp_pullOutFactor0" (formula "10") (term "0"))
                        (rule "add_literals" (formula "10") (term "1,0"))
                        (rule "times_zero_1" (formula "10") (term "0"))
                        (rule "qeq_literals" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "applyEq" (formula "10") (term "0,2") (ifseqformula "12"))
                        (rule "inEqSimp_homoInEq1" (formula "10") (term "2"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,2"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,0,2"))
                        (rule "polySimp_addComm1" (formula "10") (term "0,2"))
                        (rule "polySimp_pullOutFactor2b" (formula "10") (term "0,0,2"))
                        (rule "add_literals" (formula "10") (term "1,1,0,0,2"))
                        (rule "times_zero_1" (formula "10") (term "1,0,0,2"))
                        (rule "add_zero_right" (formula "10") (term "0,0,2"))
                        (rule "applyEq" (formula "10") (term "0,1") (ifseqformula "12"))
                        (rule "inEqSimp_homoInEq1" (formula "10") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,0,1"))
                        (rule "polySimp_addComm1" (formula "10") (term "0,1"))
                        (rule "polySimp_pullOutFactor2b" (formula "10") (term "0,0,1"))
                        (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "10") (term "0,0,1"))
                        (rule "applyEq" (formula "11") (term "0,1") (ifseqformula "9"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "2"))
                        (rule "mul_literals" (formula "10") (term "1,2"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "10") (term "0,1"))
                        (rule "inEqSimp_contradInEq1" (formula "10") (term "2") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "10") (term "0,2"))
                        (rule "concrete_and_2" (formula "10") (term "2"))
                        (rule "inEqSimp_subsumption1" (formula "10") (term "1") (ifseqformula "3"))
                        (rule "leq_literals" (formula "10") (term "0,1"))
                        (rule "concrete_or_1" (formula "10") (term "1"))
                        (rule "ifthenelse_concrete" (formula "10"))
                        (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "3"))
                        (rule "leq_literals" (formula "10") (term "0"))
                        (rule "concrete_or_1" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "jdiv_axiom" (formula "38") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,2,1"))
                        (rule "eqSymm" (formula "1"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,0,2,0"))
                        (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "10"))
                        (rule "inEqSimp_invertInEq1" (formula "1") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                        (rule "times_zero_2" (formula "1") (term "1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                        (rule "inEqSimp_subsumption0" (formula "1") (term "0,0") (ifseqformula "25"))
                        (rule "leq_literals" (formula "1") (term "0,0,0"))
                        (rule "concrete_or_1" (formula "1") (term "0,0"))
                        (rule "ifthenelse_true" (formula "1") (term "0"))
                        (rule "eqSymm" (formula "1"))
                        (rule "applyEq" (formula "39") (term "0,0") (ifseqformula "1"))
                        (rule "polySimp_mulComm0" (formula "39") (term "0"))
                        (rule "close" (formula "39") (ifseqformula "12"))
                     )
                     (branch "result_0 >= 0 FALSE"
                        (rule "replace_known_right" (formula "7") (term "0,0") (ifseqformula "32"))
                        (rule "ifthenelse_false" (formula "7") (term "0"))
                        (rule "eqSymm" (formula "7"))
                        (rule "replace_known_right" (formula "24") (term "0,1,1") (ifseqformula "32"))
                        (rule "ifthenelse_false_for" (formula "24") (term "1,1"))
                        (rule "inEqSimp_geqRight" (formula "32"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "8"))
                        (rule "polySimp_mulComm1" (formula "34") (term "0"))
                        (rule "polySimp_homoEq" (formula "34"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "1,0"))
                        (rule "polySimp_elimOne" (formula "34") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,0"))
                        (rule "polySimp_sepPosMonomial" (formula "34"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_contradEq3" (formula "25") (term "0") (ifseqformula "1"))
                        (rule "times_zero_1" (formula "25") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "25") (term "0,0,0"))
                        (rule "qeq_literals" (formula "25") (term "0,0"))
                        (rule "concrete_and_2" (formula "25") (term "0"))
                        (rule "concrete_or_2" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "26"))
                        (rule "polySimp_mulComm0" (formula "29") (term "0"))
                        (rule "applyEq" (formula "27") (term "0") (ifseqformula "29"))
                        (rule "inEqSimp_homoInEq1" (formula "27"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "1,0"))
                        (rule "polySimp_elimOne" (formula "27") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "27") (term "0"))
                        (rule "polySimp_pullOutFactor2b" (formula "27") (term "0,0"))
                        (rule "add_literals" (formula "27") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "27") (term "1,0,0"))
                        (rule "add_zero_right" (formula "27") (term "0,0"))
                        (rule "applyEq" (formula "25") (term "0") (ifseqformula "29"))
                        (rule "inEqSimp_homoInEq0" (formula "25"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "1,0"))
                        (rule "polySimp_pullOutFactor0" (formula "25") (term "0"))
                        (rule "add_literals" (formula "25") (term "1,0"))
                        (rule "times_zero_1" (formula "25") (term "0"))
                        (rule "qeq_literals" (formula "25"))
                        (rule "true_left" (formula "25"))
                        (rule "applyEq" (formula "27") (term "1") (ifseqformula "25"))
                        (rule "applyEq" (formula "15") (term "0,1") (ifseqformula "25"))
                        (rule "applyEq" (formula "31") (term "0,0,1") (ifseqformula "25"))
                        (rule "polySimp_mulComm0" (formula "31") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "26"))
                        (rule "mul_literals" (formula "26") (term "1"))
                        (rule "inEqSimp_contradEq3" (formula "28") (term "0") (ifseqformula "1"))
                        (rule "times_zero_1" (formula "28") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "28") (term "0,0,0"))
                        (rule "qeq_literals" (formula "28") (term "0,0"))
                        (rule "concrete_and_2" (formula "28") (term "0"))
                        (rule "concrete_or_2" (formula "28"))
                        (rule "andLeft" (formula "28"))
                        (rule "andLeft" (formula "28"))
                        (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "29"))
                        (rule "polySimp_mulComm0" (formula "33") (term "0"))
                        (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "29"))
                        (rule "polySimp_mulComm0" (formula "32") (term "0"))
                        (rule "eqSymm" (formula "32"))
                        (rule "polySimp_homoEq" (formula "32"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1,0"))
                        (rule "polySimp_elimOne" (formula "32") (term "1,0"))
                        (rule "applyEq" (formula "30") (term "0") (ifseqformula "33"))
                        (rule "inEqSimp_homoInEq1" (formula "30"))
                        (rule "polySimp_addComm1" (formula "30") (term "0"))
                        (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0"))
                        (rule "add_literals" (formula "30") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "30") (term "1,0,0"))
                        (rule "add_zero_right" (formula "30") (term "0,0"))
                        (rule "applyEq" (formula "28") (term "0") (ifseqformula "33"))
                        (rule "inEqSimp_homoInEq0" (formula "28"))
                        (rule "polySimp_pullOutFactor1" (formula "28") (term "0"))
                        (rule "add_literals" (formula "28") (term "1,0"))
                        (rule "times_zero_1" (formula "28") (term "0"))
                        (rule "qeq_literals" (formula "28"))
                        (rule "true_left" (formula "28"))
                        (rule "applyEq" (formula "30") (term "1") (ifseqformula "28"))
                        (rule "polySimp_sepPosMonomial" (formula "31"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "29"))
                        (rule "mul_literals" (formula "29") (term "1"))
                        (rule "inEqSimp_strengthen0" (formula "6") (ifseqformula "34"))
                        (rule "inEqSimp_contradEq3" (formula "34") (ifseqformula "6"))
                        (rule "polySimp_mulAssoc" (formula "34") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "34") (term "0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "1,0,0"))
                        (rule "polySimp_elimOne" (formula "34") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "34") (term "0,0"))
                        (rule "add_literals" (formula "34") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "34") (term "1,0,0"))
                        (rule "add_zero_right" (formula "34") (term "0,0"))
                        (rule "qeq_literals" (formula "34") (term "0"))
                        (rule "concrete_and_2" (formula "34"))
                        (rule "false_right" (formula "34"))
                        (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "6"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0"))
                        (rule "add_zero_right" (formula "7") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                        (rule "mul_literals" (formula "7") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "7"))
                        (rule "leq_literals" (formula "10") (term "0"))
                        (rule "concrete_or_1" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "div_axiom" (formula "10") (term "0,1") (inst "quotient=quotient_21"))
                        (rule "polySimp_mulComm0" (formula "10") (term "0,1,1,1"))
                        (rule "polySimp_mulComm0" (formula "10") (term "0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,1,1,1,1"))
                        (rule "polySimp_mulComm0" (formula "10") (term "0,2,1,1"))
                        (rule "inEqSimp_contradEq7" (formula "10") (term "0") (ifseqformula "7"))
                        (rule "times_zero_1" (formula "10") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "10") (term "0,0,0"))
                        (rule "leq_literals" (formula "10") (term "0,0"))
                        (rule "concrete_and_2" (formula "10") (term "0"))
                        (rule "concrete_or_2" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "10"))
                        (rule "polySimp_mulComm0" (formula "14") (term "0"))
                        (rule "applyEq" (formula "12") (term "0,1") (ifseqformula "14"))
                        (rule "inEqSimp_homoInEq1" (formula "12") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,0,1"))
                        (rule "polySimp_addComm1" (formula "12") (term "0,1"))
                        (rule "polySimp_pullOutFactor2b" (formula "12") (term "0,0,1"))
                        (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "12") (term "0,0,1"))
                        (rule "applyEq" (formula "12") (term "0,2") (ifseqformula "14"))
                        (rule "inEqSimp_homoInEq1" (formula "12") (term "2"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,0,2"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,0,2"))
                        (rule "polySimp_addComm1" (formula "12") (term "0,2"))
                        (rule "polySimp_pullOutFactor2b" (formula "12") (term "0,0,2"))
                        (rule "add_literals" (formula "12") (term "1,1,0,0,2"))
                        (rule "times_zero_1" (formula "12") (term "1,0,0,2"))
                        (rule "add_zero_right" (formula "12") (term "0,0,2"))
                        (rule "applyEq" (formula "11") (term "0") (ifseqformula "14"))
                        (rule "inEqSimp_homoInEq0" (formula "11"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0"))
                        (rule "polySimp_pullOutFactor0" (formula "11") (term "0"))
                        (rule "add_literals" (formula "11") (term "1,0"))
                        (rule "times_zero_1" (formula "11") (term "0"))
                        (rule "qeq_literals" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "applyEq" (formula "12") (term "0,1") (ifseqformula "10"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "11") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "2"))
                        (rule "mul_literals" (formula "11") (term "1,2"))
                        (rule "inEqSimp_contradInEq1" (formula "11") (term "2") (ifseqformula "7"))
                        (rule "qeq_literals" (formula "11") (term "0,2"))
                        (rule "concrete_and_2" (formula "11") (term "2"))
                        (rule "inEqSimp_subsumption1" (formula "11") (term "1") (ifseqformula "7"))
                        (rule "leq_literals" (formula "11") (term "0,1"))
                        (rule "concrete_or_1" (formula "11") (term "1"))
                        (rule "ifthenelse_concrete" (formula "11"))
                        (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "7"))
                        (rule "leq_literals" (formula "11") (term "0"))
                        (rule "concrete_or_1" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "jdiv_axiom" (formula "34") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,2,1"))
                        (rule "eqSymm" (formula "1"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,0,2,0"))
                        (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "11"))
                        (rule "inEqSimp_invertInEq1" (formula "1") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                        (rule "times_zero_2" (formula "1") (term "1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                        (rule "inEqSimp_subsumption0" (formula "1") (term "0,0") (ifseqformula "26"))
                        (rule "leq_literals" (formula "1") (term "0,0,0"))
                        (rule "concrete_or_1" (formula "1") (term "0,0"))
                        (rule "ifthenelse_true" (formula "1") (term "0"))
                        (rule "eqSymm" (formula "1"))
                        (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "1"))
                        (rule "polySimp_mulComm0" (formula "35") (term "0"))
                        (rule "close" (formula "35") (ifseqformula "13"))
                     )
                  )
               )
               (branch "a <= -1 FALSE"
                  (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "11"))
                  (rule "ifthenelse_false" (formula "2") (term "0"))
                  (rule "replace_known_right" (formula "10") (term "0,0,0,0,1,0,1") (ifseqformula "11"))
                  (rule "ifthenelse_false" (formula "10") (term "0,0,0,1,0,1"))
                  (rule "replace_known_right" (formula "10") (term "0,1,0,1,0,1,1") (ifseqformula "11"))
                  (rule "ifthenelse_false" (formula "10") (term "1,0,1,0,1,1"))
                  (rule "replace_known_right" (formula "10") (term "0,0,0,0,0,1,0,1,1") (ifseqformula "11"))
                  (rule "ifthenelse_false" (formula "10") (term "0,0,0,0,1,0,1,1"))
                  (rule "inEqSimp_leqRight" (formula "11"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "3"))
                  (rule "commute_or_2" (formula "11") (term "0,1,1"))
                  (rule "commute_and" (formula "11") (term "0,1"))
                  (rule "commute_or_2" (formula "11") (term "0,0,1,1"))
                  (rule "replace_known_right" (formula "11") (term "1") (ifseqformula "12"))
                  (rule "concrete_impl_3" (formula "11"))
                  (rule "double_not" (formula "11"))
                  (rule "replace_known_left" (formula "2") (term "0,1") (ifseqformula "11"))
                  (rule "concrete_not_1" (formula "2") (term "1"))
                  (rule "concrete_or_4" (formula "2"))
                  (rule "notLeft" (formula "2"))
                  (rule "applyEq" (formula "12") (term "0,0,0,0,1,0,0,1") (ifseqformula "10"))
                  (rule "jdiv_axiom_inline" (formula "12") (term "0,0,0,1,0,0,1"))
                  (rule "times_zero_2" (formula "12") (term "0,0,2,0,0,0,1,0,0,1"))
                  (rule "qeq_literals" (formula "12") (term "0,0,0,0,1,0,0,1"))
                  (rule "ifthenelse_true" (formula "12") (term "0,0,0,1,0,0,1"))
                  (rule "applyEqRigid" (formula "12") (term "0,0,0,1,0") (ifseqformula "10"))
                  (rule "jdiv_axiom_inline" (formula "12") (term "0,0,1,0"))
                  (rule "times_zero_2" (formula "12") (term "0,0,2,0,0,1,0"))
                  (rule "qeq_literals" (formula "12") (term "0,0,0,1,0"))
                  (rule "ifthenelse_true" (formula "12") (term "0,0,1,0"))
                  (rule "applyEqRigid" (formula "5") (term "0") (ifseqformula "10"))
                  (rule "qeq_literals" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "9"))
                  (rule "inEqSimp_commuteGeq" (formula "2"))
                  (rule "applyEqRigid" (formula "5") (term "1") (ifseqformula "9"))
                  (rule "applyEqRigid" (formula "11") (term "1,1,0") (ifseqformula "9"))
                  (rule "applyEqRigid" (formula "11") (term "1,0,1,0,0,1") (ifseqformula "9"))
                  (rule "inEqSimp_strengthen0" (formula "2") (ifseqformula "10"))
                  (rule "add_zero_right" (formula "2") (term "1"))
                  (rule "inEqSimp_contradEq3" (formula "10") (ifseqformula "2"))
                  (rule "times_zero_1" (formula "10") (term "1,0,0"))
                  (rule "add_zero_right" (formula "10") (term "0,0"))
                  (rule "qeq_literals" (formula "10") (term "0"))
                  (rule "concrete_and_2" (formula "10"))
                  (rule "false_right" (formula "10"))
                  (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "2") (term "0"))
                  (rule "concrete_and_2" (formula "2"))
                  (rule "closeFalse" (formula "2"))
               )
            )
            (branch "CUT: b = abstrPred_geq_AND_abstrPred_or_0 FALSE"
               (rule "concrete_or_2" (formula "6"))
               (rule "applyEq" (formula "12") (term "0,0,0,1,0") (ifseqformula "6"))
               (rule "applyEq" (formula "1") (term "0,0,1") (ifseqformula "6"))
               (rule "applyEq" (formula "12") (term "0,0,0,0,1,0,0,1") (ifseqformula "6"))
               (rule "applyEq" (formula "11") (term "0") (ifseqformula "6"))
               (rule "polySimp_homoEq" (formula "11"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,0"))
               (rule "polySimp_pullOutFactor1" (formula "11") (term "0"))
               (rule "add_literals" (formula "11") (term "1,0"))
               (rule "applyEq" (formula "12") (term "1,1,0") (ifseqformula "6"))
               (rule "applyEq" (formula "12") (term "1,0,1,0,0,1") (ifseqformula "6"))
               (rule "polySimp_invertEq" (formula "1") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1"))
               (rule "times_zero_2" (formula "1") (term "1,0,1"))
               (rule "polySimp_elimOne" (formula "1") (term "0,0,1"))
               (rule "elimGcdEq" (formula "11") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=abstrPred_geq_AND_abstrPred_or_0") (inst "elimGcd=Z(2(#))"))
               (rule "eqClose" (formula "11") (term "0,0,0"))
               (rule "concrete_and_1" (formula "11") (term "0,0"))
               (rule "add_zero_left" (formula "11") (term "0,1,0"))
               (rule "add_zero_left" (formula "11") (term "0,0,1"))
               (rule "add_literals" (formula "11") (term "1,0,0"))
               (rule "add_zero_left" (formula "11") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0"))
               (rule "times_zero_1" (formula "11") (term "0,0,1"))
               (rule "eqClose" (formula "11") (term "0,1"))
               (rule "concrete_and_1" (formula "11") (term "1"))
               (rule "times_zero_1" (formula "11") (term "0,0,0"))
               (rule "times_zero_1" (formula "11") (term "0,1,0"))
               (rule "leq_literals" (formula "11") (term "0,0"))
               (rule "concrete_and_1" (formula "11") (term "0"))
               (rule "qeq_literals" (formula "11") (term "0"))
               (rule "ifthenelse_true_for" (formula "11"))
               (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "11"))
               (rule "concrete_not_2" (formula "1") (term "1"))
               (rule "concrete_or_3" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "replace_known_right" (formula "9") (term "0,0") (ifseqformula "10"))
               (rule "concrete_not_2" (formula "9") (term "0"))
               (rule "concrete_impl_1" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "inEqSimp_strengthen1" (formula "4") (ifseqformula "12"))
               (rule "add_zero_right" (formula "4") (term "1"))
               (rule "inEqSimp_contradEq7" (formula "12") (ifseqformula "4"))
               (rule "times_zero_1" (formula "12") (term "1,0,0"))
               (rule "add_zero_right" (formula "12") (term "0,0"))
               (rule "leq_literals" (formula "12") (term "0"))
               (rule "concrete_and_2" (formula "12"))
               (rule "false_right" (formula "12"))
               (rule "ifthenelse_split" (formula "1") (term "0"))
               (branch "a <= -1 TRUE"
                  (rule "replace_known_left" (formula "11") (term "0,0,0,0") (ifseqformula "1"))
                  (rule "ifthenelse_true" (formula "11") (term "0,0,0"))
                  (rule "replace_known_left" (formula "12") (term "0,0,0,0,0,1,0") (ifseqformula "1"))
                  (rule "ifthenelse_true" (formula "12") (term "0,0,0,0,1,0"))
                  (rule "replace_known_left" (formula "12") (term "0,1,0,1,0") (ifseqformula "1"))
                  (rule "ifthenelse_true" (formula "12") (term "1,0,1,0"))
                  (rule "replace_known_left" (formula "11") (term "0,1") (ifseqformula "1"))
                  (rule "ifthenelse_true" (formula "11") (term "1"))
                  (rule "inEqSimp_commuteLeq" (formula "2"))
                  (rule "commute_or_2" (formula "12") (term "0"))
                  (rule "commute_or_2" (formula "12") (term "0,0"))
                  (rule "jdiv_axiom" (formula "13") (term "0,0,0,0"))
                  (rule "eqSymm" (formula "1"))
                  (rule "inEqSimp_contradInEq0" (formula "1") (term "0,0") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "1") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "1") (term "0,0"))
                  (rule "ifthenelse_false" (formula "1") (term "0"))
                  (rule "eqSymm" (formula "1"))
                  (rule "applyEq" (formula "14") (term "0,0,0,0") (ifseqformula "1"))
                  (rule "polySimp_mulComm1" (formula "14") (term "0,0,0"))
                  (rule "polySimp_homoEq" (formula "14") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0"))
                  (rule "polySimp_sepPosMonomial" (formula "14") (term "0,0"))
                  (rule "polyDiv_pullOut" (formula "14") (term "0,0,0,0") (inst "polyDivCoeff=jdiv(mul(a, Z(neglit(1(#)))), result_0)"))
                  (rule "polySimp_mulComm1" (formula "14") (term "1,0,0,2,0,0,0,0"))
                  (rule "polySimp_addComm0" (formula "14") (term "2,0,0,0,0"))
                  (rule "applyEq" (formula "14") (term "0,1,0,1,2,0,0,0,0") (ifseqformula "12"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,2,0,0,0,0"))
                  (rule "polySimp_pullOutFactor0" (formula "14") (term "0,1,2,0,0,0,0"))
                  (rule "add_literals" (formula "14") (term "1,0,1,2,0,0,0,0"))
                  (rule "times_zero_1" (formula "14") (term "0,1,2,0,0,0,0"))
                  (rule "polySimp_addComm0" (formula "14") (term "2,0,0,0,0"))
                  (rule "polyDiv_zero" (formula "14") (term "0,2,0,0,0,0"))
                  (rule "div_literals" (formula "14") (term "1,0,2,0,0,0,0"))
                  (rule "polySimp_addComm0" (formula "14") (term "2,0,0,0,0"))
                  (rule "polyDiv_pullOut" (formula "1") (term "0,1") (inst "polyDivCoeff=jdiv(mul(a, Z(neglit(1(#)))), result_0)"))
                  (rule "eqSymm" (formula "1"))
                  (rule "polySimp_homoEq" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,0"))
                  (rule "polySimp_mulComm1" (formula "1") (term "1,0,0,2,1,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "2,1,0"))
                  (rule "applyEq" (formula "1") (term "0,1,0,1,2,1,0") (ifseqformula "12"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,2,1,0"))
                  (rule "polySimp_pullOutFactor0" (formula "1") (term "0,1,2,1,0"))
                  (rule "add_literals" (formula "1") (term "1,0,1,2,1,0"))
                  (rule "times_zero_1" (formula "1") (term "0,1,2,1,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "2,1,0"))
                  (rule "polySimp_sepPosMonomial" (formula "1"))
                  (rule "polyDiv_zero" (formula "1") (term "0,2,0"))
                  (rule "div_literals" (formula "1") (term "1,0,2,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "2,0"))
                  (rule "applyEq" (formula "14") (term "0,0,0,0") (ifseqformula "1"))
                  (rule "polySimp_mulComm1" (formula "14") (term "0,0,0"))
                  (rule "polySimp_homoEq" (formula "14") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0"))
                  (rule "polySimp_sepPosMonomial" (formula "14") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "1,0,0"))
                  (rule "jdiv_axiom" (formula "14") (term "0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,0,2,1"))
                  (rule "eqSymm" (formula "1"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,0,2,0"))
                  (rule "inEqSimp_invertInEq1" (formula "1") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                  (rule "times_zero_2" (formula "1") (term "1,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (term "0,0") (ifseqformula "7"))
                  (rule "qeq_literals" (formula "1") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "1") (term "0,0"))
                  (rule "ifthenelse_false" (formula "1") (term "0"))
                  (rule "eqSymm" (formula "1"))
                  (rule "applyEq" (formula "15") (term "0,0,1,0") (ifseqformula "1"))
                  (rule "polySimp_mulComm1" (formula "15") (term "0,1,0"))
                  (rule "polySimp_homoEq" (formula "15") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,0,1,0"))
                  (rule "polySimp_sepPosMonomial" (formula "15") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,1,0"))
                  (rule "polyDiv_pullOut" (formula "15") (term "0,0,1,0") (inst "polyDivCoeff=jdiv(abstrPred_geq_AND_abstrPred_or_0, result_0)"))
                  (rule "polySimp_mulComm1" (formula "15") (term "1,0,0,2,0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "15") (term "2,0,0,1,0"))
                  (rule "applyEq" (formula "15") (term "0,1,0,1,2,0,0,1,0") (ifseqformula "12"))
                  (rule "polySimp_pullOutFactor1" (formula "15") (term "0,1,2,0,0,1,0"))
                  (rule "add_literals" (formula "15") (term "1,0,1,2,0,0,1,0"))
                  (rule "times_zero_1" (formula "15") (term "0,1,2,0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "15") (term "2,0,0,1,0"))
                  (rule "polyDiv_zero" (formula "15") (term "0,2,0,0,1,0"))
                  (rule "div_literals" (formula "15") (term "1,0,2,0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "15") (term "2,0,0,1,0"))
                  (rule "polyDiv_pullOut" (formula "1") (term "0,1") (inst "polyDivCoeff=jdiv(abstrPred_geq_AND_abstrPred_or_0, result_0)"))
                  (rule "eqSymm" (formula "1"))
                  (rule "polySimp_homoEq" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,0"))
                  (rule "polySimp_mulComm1" (formula "1") (term "1,0,0,2,1,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "2,1,0"))
                  (rule "applyEq" (formula "1") (term "0,1,0,1,2,1,0") (ifseqformula "12"))
                  (rule "polySimp_pullOutFactor1" (formula "1") (term "0,1,2,1,0"))
                  (rule "add_literals" (formula "1") (term "1,0,1,2,1,0"))
                  (rule "times_zero_1" (formula "1") (term "0,1,2,1,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "2,1,0"))
                  (rule "polySimp_sepPosMonomial" (formula "1"))
                  (rule "polyDiv_zero" (formula "1") (term "0,2,0"))
                  (rule "div_literals" (formula "1") (term "1,0,2,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "2,0"))
                  (rule "applyEq" (formula "15") (term "0,0,1,0") (ifseqformula "1"))
                  (rule "polySimp_mulComm1" (formula "15") (term "0,1,0"))
                  (rule "polySimp_homoEq" (formula "15") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,0,1,0"))
                  (rule "polySimp_sepPosMonomial" (formula "15") (term "1,0"))
                  (rule "jdiv_axiom" (formula "12") (term "0,0"))
                  (rule "eqSymm" (formula "12"))
                  (rule "inEqSimp_subsumption1" (formula "12") (term "0,0") (ifseqformula "7"))
                  (rule "leq_literals" (formula "12") (term "0,0,0"))
                  (rule "concrete_or_1" (formula "12") (term "0,0"))
                  (rule "ifthenelse_true" (formula "12") (term "0"))
                  (rule "eqSymm" (formula "12"))
                  (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "12"))
                  (rule "applyEq" (formula "1") (term "0,2,0") (ifseqformula "12"))
                  (rule "jdiv_axiom" (formula "14") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "0,0,2,1"))
                  (rule "eqSymm" (formula "14"))
                  (rule "polySimp_elimOne" (formula "14") (term "0,0,2,0"))
                  (rule "inEqSimp_invertInEq1" (formula "14") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0"))
                  (rule "times_zero_2" (formula "14") (term "1,0,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "0,0,0"))
                  (rule "inEqSimp_subsumption0" (formula "14") (term "0,0") (ifseqformula "3"))
                  (rule "leq_literals" (formula "14") (term "0,0,0"))
                  (rule "concrete_or_1" (formula "14") (term "0,0"))
                  (rule "ifthenelse_true" (formula "14") (term "0"))
                  (rule "eqSymm" (formula "14"))
                  (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "14"))
                  (rule "applyEq" (formula "2") (term "0,2,0") (ifseqformula "14"))
                  (rule "div_axiom" (formula "2") (term "1,0") (inst "quotient=quotient_7"))
                  (rule "eqClose" (formula "2") (term "0"))
                  (rule "concrete_or_1" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "ifthenelse_split" (formula "2") (term "1,2,0"))
                  (branch "result_0 = 0 TRUE"
                     (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "2"))
                     (rule "ifthenelse_true" (formula "3") (term "0"))
                     (rule "eqSymm" (formula "3"))
                     (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "2"))
                     (rule "ifthenelse_true" (formula "1") (term "0"))
                     (rule "eqSymm" (formula "1"))
                     (rule "polySimp_homoEq" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                     (rule "polySimp_homoEq" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,0"))
                     (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "2"))
                     (rule "times_zero_1" (formula "14") (term "0"))
                     (rule "eqSymm" (formula "14"))
                     (rule "applyEq" (formula "18") (term "0,0,0,1,0,1") (ifseqformula "2"))
                     (rule "jdiv_axiom_inline" (formula "18") (term "0,0,1,0,1"))
                     (rule "qeq_literals" (formula "18") (term "0,0,0,1,0,1"))
                     (rule "ifthenelse_true" (formula "18") (term "0,0,1,0,1"))
                     (rule "applyEq" (formula "17") (term "0,0,0,1,0") (ifseqformula "2"))
                     (rule "jdiv_axiom_inline" (formula "17") (term "0,0,1,0"))
                     (rule "qeq_literals" (formula "17") (term "0,0,0,1,0"))
                     (rule "ifthenelse_true" (formula "17") (term "0,0,1,0"))
                     (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "2"))
                     (rule "times_zero_1" (formula "16") (term "0"))
                     (rule "eqSymm" (formula "16"))
                     (rule "applyEq" (formula "18") (term "1,0,0,1,0") (ifseqformula "2"))
                     (rule "polySimp_mulComm0" (formula "18") (term "0,1,0"))
                     (rule "applyEq" (formula "18") (term "1,0,0,0") (ifseqformula "2"))
                     (rule "times_zero_1" (formula "18") (term "0,0,0"))
                     (rule "eqSymm" (formula "18") (term "0,0"))
                     (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "2"))
                     (rule "eqSymm" (formula "15"))
                     (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "2"))
                     (rule "eqSymm" (formula "13"))
                     (rule "applyEq" (formula "3") (term "1,1,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "1,1,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "18") (term "0,0,0,0,0,1,0,0,1") (ifseqformula "14"))
                     (rule "times_zero_2" (formula "18") (term "0,0,0,0,1,0,0,1"))
                     (rule "jdiv_axiom_inline" (formula "18") (term "0,0,0,1,0,0,1"))
                     (rule "qeq_literals" (formula "18") (term "0,0,0,0,1,0,0,1"))
                     (rule "ifthenelse_true" (formula "18") (term "0,0,0,1,0,0,1"))
                     (rule "applyEq" (formula "1") (term "0,0,1,0") (ifseqformula "14"))
                     (rule "times_zero_2" (formula "1") (term "0,1,0"))
                     (rule "jdiv_axiom_inline" (formula "1") (term "1,0"))
                     (rule "qeq_literals" (formula "1") (term "0,1,0"))
                     (rule "ifthenelse_true" (formula "1") (term "1,0"))
                     (rule "div_literals" (formula "1") (term "1,0"))
                     (rule "applyEq" (formula "5") (term "0") (ifseqformula "14"))
                     (rule "inEqSimp_commuteGeq" (formula "5"))
                     (rule "applyEqRigid" (formula "8") (term "0") (ifseqformula "14"))
                     (rule "qeq_literals" (formula "8"))
                     (rule "closeFalse" (formula "8"))
                  )
                  (branch "result_0 = 0 FALSE"
                     (rule "add_zero_right" (formula "2") (term "2,0"))
                     (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "17"))
                     (rule "ifthenelse_false" (formula "2") (term "0"))
                     (rule "eqSymm" (formula "2"))
                     (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "17"))
                     (rule "ifthenelse_false" (formula "1") (term "0"))
                     (rule "replace_known_right" (formula "1") (term "0,1,0") (ifseqformula "17"))
                     (rule "ifthenelse_false" (formula "1") (term "1,0"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "eqSymm" (formula "1"))
                     (rule "polySimp_homoEq" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                     (rule "polySimp_homoEq" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,0"))
                     (rule "polySimp_sepPosMonomial" (formula "2"))
                     (rule "applyEq" (formula "18") (term "0,0,0,0") (ifseqformula "2"))
                     (rule "polySimp_mulComm1" (formula "18") (term "0,0,0"))
                     (rule "polySimp_homoEq" (formula "18") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "18") (term "1,0,0,0"))
                     (rule "applyEq" (formula "18") (term "1,0,0,0") (ifseqformula "15"))
                     (rule "polySimp_pullOutFactor1" (formula "18") (term "0,0,0"))
                     (rule "add_literals" (formula "18") (term "1,0,0,0"))
                     (rule "times_zero_1" (formula "18") (term "0,0,0"))
                     (rule "eqClose" (formula "18") (term "0,0"))
                     (rule "concrete_and_1" (formula "18") (term "0"))
                     (rule "polySimp_sepPosMonomial" (formula "1"))
                     (rule "applyEq" (formula "18") (term "0,0,0") (ifseqformula "1"))
                     (rule "polySimp_mulComm1" (formula "18") (term "0,0"))
                     (rule "polySimp_homoEq" (formula "18") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0"))
                     (rule "polySimp_elimOne" (formula "18") (term "1,0,0"))
                     (rule "applyEq" (formula "18") (term "1,0,0") (ifseqformula "13"))
                     (rule "polySimp_pullOutFactor2" (formula "18") (term "0,0"))
                     (rule "add_literals" (formula "18") (term "1,0,0"))
                     (rule "times_zero_1" (formula "18") (term "0,0"))
                     (rule "eqClose" (formula "18") (term "0"))
                     (rule "concrete_and_1" (formula "18"))
                     (rule "allRight" (formula "18") (inst "sk=x_4"))
                     (rule "orRight" (formula "18"))
                     (rule "orRight" (formula "18"))
                     (rule "notRight" (formula "19"))
                     (rule "orRight" (formula "19"))
                     (rule "notRight" (formula "20"))
                     (rule "inEqSimp_leqRight" (formula "20"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "div_axiom" (formula "15") (term "1") (inst "quotient=quotient_8"))
                     (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "21"))
                     (rule "concrete_or_2" (formula "15"))
                     (rule "andLeft" (formula "15"))
                     (rule "andLeft" (formula "15"))
                     (rule "polySimp_mulComm0" (formula "17") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,1,1"))
                     (rule "polySimp_mulComm0" (formula "17") (term "0,2"))
                     (rule "polySimp_mulComm0" (formula "16") (term "0"))
                     (rule "applyEq" (formula "19") (term "0,0") (ifseqformula "15"))
                     (rule "polySimp_mulComm0" (formula "19") (term "0"))
                     (rule "applyEq" (formula "16") (term "0") (ifseqformula "19"))
                     (rule "inEqSimp_homoInEq0" (formula "16"))
                     (rule "polySimp_pullOutFactor1" (formula "16") (term "0"))
                     (rule "add_literals" (formula "16") (term "1,0"))
                     (rule "times_zero_1" (formula "16") (term "0"))
                     (rule "qeq_literals" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "applyEq" (formula "16") (term "0,1") (ifseqformula "18"))
                     (rule "inEqSimp_homoInEq1" (formula "16") (term "1"))
                     (rule "polySimp_addComm1" (formula "16") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                     (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "16") (term "0,0,1"))
                     (rule "applyEq" (formula "16") (term "0,2") (ifseqformula "18"))
                     (rule "inEqSimp_homoInEq1" (formula "16") (term "2"))
                     (rule "polySimp_addComm1" (formula "16") (term "0,2"))
                     (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,2"))
                     (rule "add_literals" (formula "16") (term "1,1,0,0,2"))
                     (rule "times_zero_1" (formula "16") (term "1,0,0,2"))
                     (rule "add_zero_right" (formula "16") (term "0,0,2"))
                     (rule "applyEq" (formula "17") (term "1") (ifseqformula "15"))
                     (rule "applyEq" (formula "4") (term "0,1") (ifseqformula "15"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "16") (term "0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "2"))
                     (rule "mul_literals" (formula "16") (term "1,2"))
                     (rule "div_axiom" (formula "19") (term "1") (inst "quotient=quotient_9"))
                     (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "23"))
                     (rule "concrete_or_2" (formula "19"))
                     (rule "andLeft" (formula "19"))
                     (rule "andLeft" (formula "19"))
                     (rule "polySimp_mulComm0" (formula "21") (term "0,2"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,1,1"))
                     (rule "polySimp_mulComm0" (formula "21") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "20") (term "0"))
                     (rule "applyEq" (formula "23") (term "0,0") (ifseqformula "19"))
                     (rule "polySimp_mulComm0" (formula "23") (term "0"))
                     (rule "applyEq" (formula "20") (term "0") (ifseqformula "23"))
                     (rule "inEqSimp_homoInEq0" (formula "20"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "1,0"))
                     (rule "polySimp_pullOutFactor0" (formula "20") (term "0"))
                     (rule "add_literals" (formula "20") (term "1,0"))
                     (rule "times_zero_1" (formula "20") (term "0"))
                     (rule "qeq_literals" (formula "20"))
                     (rule "true_left" (formula "20"))
                     (rule "applyEq" (formula "20") (term "0,1") (ifseqformula "22"))
                     (rule "inEqSimp_homoInEq1" (formula "20") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1"))
                     (rule "polySimp_elimOne" (formula "20") (term "1,0,1"))
                     (rule "polySimp_addComm1" (formula "20") (term "0,1"))
                     (rule "polySimp_pullOutFactor2b" (formula "20") (term "0,0,1"))
                     (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "20") (term "0,0,1"))
                     (rule "applyEq" (formula "20") (term "0,2") (ifseqformula "22"))
                     (rule "inEqSimp_homoInEq1" (formula "20") (term "2"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "1,0,2"))
                     (rule "polySimp_elimOne" (formula "20") (term "1,0,2"))
                     (rule "polySimp_addComm1" (formula "20") (term "0,2"))
                     (rule "polySimp_pullOutFactor2b" (formula "20") (term "0,0,2"))
                     (rule "add_literals" (formula "20") (term "1,1,0,0,2"))
                     (rule "times_zero_1" (formula "20") (term "1,0,0,2"))
                     (rule "add_zero_right" (formula "20") (term "0,0,2"))
                     (rule "applyEq" (formula "5") (term "0,1") (ifseqformula "19"))
                     (rule "applyEq" (formula "21") (term "1") (ifseqformula "19"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "20") (term "0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "2"))
                     (rule "mul_literals" (formula "20") (term "1,2"))
                     (rule "jdiv_axiom" (formula "24") (term "0,0"))
                     (rule "eqSymm" (formula "1"))
                     (rule "jdiv_axiom" (formula "4") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "0,0,2,1"))
                     (rule "eqSymm" (formula "4"))
                     (rule "polySimp_elimOne" (formula "4") (term "0,0,2,0"))
                     (rule "inEqSimp_invertInEq1" (formula "4") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0"))
                     (rule "times_zero_2" (formula "4") (term "1,0,0"))
                     (rule "polySimp_elimOne" (formula "4") (term "0,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "4") (term "0,0") (ifseqformula "12"))
                     (rule "qeq_literals" (formula "4") (term "0,0,0"))
                     (rule "concrete_and_2" (formula "4") (term "0,0"))
                     (rule "ifthenelse_false" (formula "4") (term "0"))
                     (rule "eqSymm" (formula "4"))
                     (rule "applyEqRigid" (formula "5") (term "0,0") (ifseqformula "4"))
                     (rule "polySimp_mulComm1" (formula "5") (term "0"))
                     (rule "polySimp_homoEq" (formula "5"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                     (rule "polySimp_elimOne" (formula "5") (term "1,0"))
                     (rule "polySimp_sepPosMonomial" (formula "5"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "1"))
                     (rule "polySimp_elimOne" (formula "5") (term "1"))
                     (rule "jdiv_axiom" (formula "3") (term "0,0"))
                     (rule "eqSymm" (formula "3"))
                     (rule "inEqSimp_contradInEq0" (formula "3") (term "0,0") (ifseqformula "9"))
                     (rule "qeq_literals" (formula "3") (term "0,0,0"))
                     (rule "concrete_and_2" (formula "3") (term "0,0"))
                     (rule "ifthenelse_false" (formula "3") (term "0"))
                     (rule "eqSymm" (formula "3"))
                     (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "3"))
                     (rule "polySimp_mulComm1" (formula "4") (term "0"))
                     (rule "polySimp_homoEq" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                     (rule "polySimp_elimOne" (formula "4") (term "1,0"))
                     (rule "polySimp_sepPosMonomial" (formula "4"))
                     (rule "ifthenelse_split_for" (formula "19"))
                     (branch "result_0 >= 0 TRUE"
                        (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "19"))
                        (rule "ifthenelse_true" (formula "1") (term "0"))
                        (rule "eqSymm" (formula "1"))
                        (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "1"))
                        (rule "inEqSimp_contradEq7" (formula "27") (ifseqformula "20"))
                        (rule "times_zero_1" (formula "27") (term "1,0,0"))
                        (rule "add_zero_right" (formula "27") (term "0,0"))
                        (rule "leq_literals" (formula "27") (term "0"))
                        (rule "concrete_and_2" (formula "27"))
                        (rule "false_right" (formula "27"))
                        (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "20"))
                        (rule "leq_literals" (formula "19") (term "0"))
                        (rule "concrete_or_1" (formula "19"))
                        (rule "true_left" (formula "19"))
                        (rule "div_axiom" (formula "5") (term "0,1") (inst "quotient=quotient_13"))
                        (rule "polySimp_mulComm0" (formula "5") (term "0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "5") (term "0,2,1,1"))
                        (rule "polySimp_mulComm0" (formula "5") (term "0,1,1,1"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,1,1,1,1"))
                        (rule "inEqSimp_contradEq7" (formula "5") (term "0") (ifseqformula "2"))
                        (rule "times_zero_1" (formula "5") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "5") (term "0,0,0"))
                        (rule "leq_literals" (formula "5") (term "0,0"))
                        (rule "concrete_and_2" (formula "5") (term "0"))
                        (rule "concrete_or_2" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "applyEqRigid" (formula "9") (term "0,0") (ifseqformula "5"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0"))
                        (rule "applyEq" (formula "7") (term "0,1") (ifseqformula "9"))
                        (rule "inEqSimp_homoInEq1" (formula "7") (term "1"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "7") (term "0,0,1"))
                        (rule "applyEq" (formula "7") (term "0,2") (ifseqformula "9"))
                        (rule "inEqSimp_homoInEq1" (formula "7") (term "2"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,2"))
                        (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,2"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0,2"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0,2"))
                        (rule "add_zero_right" (formula "7") (term "0,0,2"))
                        (rule "applyEq" (formula "6") (term "0") (ifseqformula "9"))
                        (rule "inEqSimp_homoInEq0" (formula "6"))
                        (rule "polySimp_pullOutFactor1" (formula "6") (term "0"))
                        (rule "add_literals" (formula "6") (term "1,0"))
                        (rule "times_zero_1" (formula "6") (term "0"))
                        (rule "qeq_literals" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "applyEq" (formula "7") (term "0,1") (ifseqformula "5"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "6") (term "0,1"))
                        (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "2"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "2"))
                        (rule "mul_literals" (formula "6") (term "1,2"))
                        (rule "inEqSimp_contradInEq1" (formula "6") (term "2") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "6") (term "0,2"))
                        (rule "concrete_and_2" (formula "6") (term "2"))
                        (rule "ifthenelse_concrete" (formula "6"))
                        (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "2"))
                        (rule "leq_literals" (formula "6") (term "0"))
                        (rule "concrete_or_1" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "polyDiv_pullOut" (formula "19") (term "0") (inst "polyDivCoeff=quotient_8"))
                        (rule "polySimp_mulComm1" (formula "19") (term "1,0,0,2,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "0,1,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "19") (term "2,0"))
                        (rule "applyEq" (formula "19") (term "0,1,0,1,2,0") (ifseqformula "22"))
                        (rule "polySimp_pullOutFactor1" (formula "19") (term "0,1,2,0"))
                        (rule "add_literals" (formula "19") (term "1,0,1,2,0"))
                        (rule "times_zero_1" (formula "19") (term "0,1,2,0"))
                        (rule "inEqSimp_contradEq7" (formula "19") (term "0,0") (ifseqformula "20"))
                        (rule "times_zero_1" (formula "19") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "19") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "19") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "19") (term "0,0"))
                        (rule "ifthenelse_false" (formula "19") (term "0"))
                        (rule "polySimp_homoEq" (formula "19"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "polySimp_pullOutFactor1" (formula "19") (term "0,0"))
                        (rule "add_literals" (formula "19") (term "1,0,0"))
                        (rule "times_zero_1" (formula "19") (term "0,0"))
                        (rule "add_zero_left" (formula "19") (term "0"))
                        (rule "polySimp_invertEq" (formula "19"))
                        (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                        (rule "times_zero_2" (formula "19") (term "1"))
                        (rule "polySimp_elimOne" (formula "19") (term "0"))
                        (rule "polyDiv_zero" (formula "19") (term "0"))
                        (rule "ifthenelse_concrete4" (formula "19"))
                        (rule "div_literals" (formula "19") (term "0,1"))
                        (rule "inEqSimp_contradEq7" (formula "19") (term "0,0") (ifseqformula "20"))
                        (rule "times_zero_1" (formula "19") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "19") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "19") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "19") (term "0,0"))
                        (rule "concrete_not_2" (formula "19") (term "0"))
                        (rule "concrete_or_1" (formula "19"))
                        (rule "true_left" (formula "19"))
                        (rule "div_axiom" (formula "3") (term "0,1") (inst "quotient=quotient_14"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,1,1,1,1"))
                        (rule "polySimp_mulComm0" (formula "3") (term "0,1,1,1"))
                        (rule "polySimp_mulComm0" (formula "3") (term "0,2,1,1"))
                        (rule "polySimp_mulComm0" (formula "3") (term "0,1,0,1"))
                        (rule "inEqSimp_contradEq7" (formula "3") (term "0") (ifseqformula "2"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0,0"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_and_2" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "3"))
                        (rule "polySimp_mulComm0" (formula "7") (term "0"))
                        (rule "applyEq" (formula "5") (term "0,2") (ifseqformula "7"))
                        (rule "inEqSimp_homoInEq1" (formula "5") (term "2"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,2"))
                        (rule "polySimp_elimOne" (formula "5") (term "1,0,2"))
                        (rule "polySimp_addComm1" (formula "5") (term "0,2"))
                        (rule "polySimp_pullOutFactor2b" (formula "5") (term "0,0,2"))
                        (rule "add_literals" (formula "5") (term "1,1,0,0,2"))
                        (rule "times_zero_1" (formula "5") (term "1,0,0,2"))
                        (rule "add_zero_right" (formula "5") (term "0,0,2"))
                        (rule "applyEq" (formula "5") (term "0,1") (ifseqformula "7"))
                        (rule "inEqSimp_homoInEq1" (formula "5") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1"))
                        (rule "polySimp_elimOne" (formula "5") (term "1,0,1"))
                        (rule "polySimp_addComm1" (formula "5") (term "0,1"))
                        (rule "polySimp_pullOutFactor2b" (formula "5") (term "0,0,1"))
                        (rule "add_literals" (formula "5") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "5") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "5") (term "0,0,1"))
                        (rule "applyEq" (formula "4") (term "0") (ifseqformula "7"))
                        (rule "inEqSimp_homoInEq0" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                        (rule "polySimp_pullOutFactor0" (formula "4") (term "0"))
                        (rule "add_literals" (formula "4") (term "1,0"))
                        (rule "times_zero_1" (formula "4") (term "0"))
                        (rule "qeq_literals" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "applyEq" (formula "5") (term "0,1") (ifseqformula "3"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "2"))
                        (rule "mul_literals" (formula "4") (term "1,2"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "4") (term "0,1"))
                        (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "2"))
                        (rule "inEqSimp_subsumption1" (formula "4") (term "0") (ifseqformula "2"))
                        (rule "leq_literals" (formula "4") (term "0,0"))
                        (rule "concrete_or_1" (formula "4") (term "0"))
                        (rule "ifthenelse_true_for" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "polySimp_critPair" (formula "22") (ifseqformula "25"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,1,1,0"))
                        (rule "polySimp_mulAssoc" (formula "22") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "0,1,0"))
                        (rule "polySimp_mulComm1" (formula "22") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "0,0,0"))
                        (rule "polySimp_mulComm1" (formula "22") (term "1,0,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0"))
                        (rule "polySimp_addComm1" (formula "22") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "22") (term "0"))
                        (rule "add_literals" (formula "22") (term "1,1,0"))
                        (rule "times_zero_1" (formula "22") (term "1,0"))
                        (rule "add_zero_right" (formula "22") (term "0"))
                        (rule "polySimp_addComm0" (formula "22") (term "0"))
                        (rule "polySimp_sepPosMonomial" (formula "22"))
                        (rule "div_axiom" (formula "1") (term "1") (inst "quotient=quotient_15"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,1,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,1,1,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,2,1,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,1"))
                        (rule "inEqSimp_contradEq7" (formula "1") (term "0") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0"))
                        (rule "leq_literals" (formula "1") (term "0,0"))
                        (rule "concrete_and_2" (formula "1") (term "0"))
                        (rule "concrete_or_2" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "1"))
                        (rule "polySimp_mulComm0" (formula "31") (term "0"))
                        (rule "applyEq" (formula "4") (term "1") (ifseqformula "1"))
                        (rule "inEqSimp_strengthen0" (formula "2") (ifseqformula "31"))
                        (rule "inEqSimp_contradEq3" (formula "31") (ifseqformula "2"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0"))
                        (rule "add_literals" (formula "31") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "31") (term "1,0,0"))
                        (rule "add_zero_right" (formula "31") (term "0,0"))
                        (rule "qeq_literals" (formula "31") (term "0"))
                        (rule "concrete_and_2" (formula "31"))
                        (rule "false_right" (formula "31"))
                        (rule "inEqSimp_subsumption1" (formula "3") (term "0") (ifseqformula "5"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_1" (formula "3") (term "0"))
                        (rule "ifthenelse_true_for" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "2"))
                        (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "polySimp_rightDist" (formula "3") (term "0,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "mul_literals" (formula "3") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "3"))
                        (rule "leq_literals" (formula "6") (term "0"))
                        (rule "concrete_or_1" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "polyDiv_pullOut" (formula "27") (term "0") (inst "polyDivCoeff=quotient_9"))
                        (rule "polySimp_mulComm1" (formula "27") (term "1,0,0,2,0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "0,1,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "27") (term "2,0"))
                        (rule "applyEq" (formula "27") (term "0,1,0,1,2,0") (ifseqformula "29"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,2,0"))
                        (rule "polySimp_elimOne" (formula "27") (term "1,0,1,2,0"))
                        (rule "polySimp_pullOutFactor2" (formula "27") (term "0,1,2,0"))
                        (rule "add_literals" (formula "27") (term "1,0,1,2,0"))
                        (rule "times_zero_1" (formula "27") (term "0,1,2,0"))
                        (rule "inEqSimp_contradEq7" (formula "27") (term "0,0") (ifseqformula "23"))
                        (rule "times_zero_1" (formula "27") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "27") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "27") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "27") (term "0,0"))
                        (rule "ifthenelse_false" (formula "27") (term "0"))
                        (rule "polySimp_homoEq" (formula "27"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "27") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "27") (term "0"))
                        (rule "polySimp_pullOutFactor1" (formula "27") (term "0,0"))
                        (rule "add_literals" (formula "27") (term "1,0,0"))
                        (rule "times_zero_1" (formula "27") (term "0,0"))
                        (rule "add_zero_left" (formula "27") (term "0"))
                        (rule "polySimp_invertEq" (formula "27"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "0"))
                        (rule "times_zero_2" (formula "27") (term "1"))
                        (rule "polySimp_elimOne" (formula "27") (term "0"))
                        (rule "polyDiv_zero" (formula "27") (term "0"))
                        (rule "ifthenelse_concrete4" (formula "27"))
                        (rule "div_literals" (formula "27") (term "0,1"))
                        (rule "inEqSimp_contradEq7" (formula "27") (term "0,0") (ifseqformula "23"))
                        (rule "times_zero_1" (formula "27") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "27") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "27") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "27") (term "0,0"))
                        (rule "concrete_not_2" (formula "27") (term "0"))
                        (rule "concrete_or_1" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "allLeft" (formula "29") (inst "t=result_0"))
                        (rule "applyEq" (formula "29") (term "0,0,0,1,0,0") (ifseqformula "27"))
                        (rule "polySimp_mulComm0" (formula "29") (term "0,0,1,0,0"))
                        (rule "replace_known_left" (formula "29") (term "0,1,0,0") (ifseqformula "28"))
                        (rule "concrete_not_1" (formula "29") (term "1,0,0"))
                        (rule "concrete_or_4" (formula "29") (term "0,0"))
                        (rule "applyEq" (formula "29") (term "0,0,0,1,0") (ifseqformula "24"))
                        (rule "polySimp_mulComm0" (formula "29") (term "0,0,1,0"))
                        (rule "replace_known_left" (formula "29") (term "0,1,0") (ifseqformula "26"))
                        (rule "concrete_not_1" (formula "29") (term "1,0"))
                        (rule "concrete_or_4" (formula "29") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "23"))
                        (rule "qeq_literals" (formula "29") (term "0,0"))
                        (rule "concrete_and_2" (formula "29") (term "0"))
                        (rule "concrete_or_2" (formula "29"))
                        (rule "polyDiv_pullOut" (formula "9") (term "0") (inst "polyDivCoeff=quotient_13"))
                        (rule "polySimp_mulComm1" (formula "9") (term "1,0,0,2,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0,1,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "9") (term "2,0"))
                        (rule "applyEq" (formula "9") (term "0,1,0,1,2,0") (ifseqformula "11"))
                        (rule "polySimp_pullOutFactor1" (formula "9") (term "0,1,2,0"))
                        (rule "add_literals" (formula "9") (term "1,0,1,2,0"))
                        (rule "times_zero_1" (formula "9") (term "0,1,2,0"))
                        (rule "inEqSimp_contradEq7" (formula "9") (term "0,0") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "9") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "9") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "9") (term "0,0"))
                        (rule "ifthenelse_false" (formula "9") (term "0"))
                        (rule "polySimp_homoEq" (formula "9"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0"))
                        (rule "polySimp_pullOutFactor1" (formula "9") (term "0,0"))
                        (rule "add_literals" (formula "9") (term "1,0,0"))
                        (rule "times_zero_1" (formula "9") (term "0,0"))
                        (rule "add_zero_left" (formula "9") (term "0"))
                        (rule "polySimp_invertEq" (formula "9"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                        (rule "times_zero_2" (formula "9") (term "1"))
                        (rule "polySimp_elimOne" (formula "9") (term "0"))
                        (rule "polyDiv_zero" (formula "9") (term "0"))
                        (rule "ifthenelse_concrete4" (formula "9"))
                        (rule "div_literals" (formula "9") (term "0,1"))
                        (rule "inEqSimp_contradEq7" (formula "9") (term "0,0") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "9") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "9") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "9") (term "0,0"))
                        (rule "concrete_not_2" (formula "9") (term "0"))
                        (rule "concrete_or_1" (formula "9"))
                        (rule "true_left" (formula "9"))
                        (rule "allLeft" (formula "29") (inst "t=x_4"))
                        (rule "applyEq" (formula "29") (term "0,0,1") (ifseqformula "5"))
                        (rule "polySimp_mulComm0" (formula "29") (term "0,1"))
                        (rule "inEqSimp_contradEq3" (formula "29") (term "1") (ifseqformula "2"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                        (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "29") (term "0,0,1"))
                        (rule "qeq_literals" (formula "29") (term "0,1"))
                        (rule "concrete_and_2" (formula "29") (term "1"))
                        (rule "concrete_or_4" (formula "29"))
                        (rule "inEqSimp_contradInEq1" (formula "29") (term "0,0") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "29") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "29") (term "0,0"))
                        (rule "concrete_or_2" (formula "29") (term "0"))
                        (rule "polyDiv_pullOut" (formula "6") (term "0") (inst "polyDivCoeff=quotient_14"))
                        (rule "polySimp_mulComm1" (formula "6") (term "1,0,0,2,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "6") (term "2,0"))
                        (rule "applyEq" (formula "6") (term "0,1,0,1,2,0") (ifseqformula "8"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,2,0"))
                        (rule "polySimp_pullOutFactor0" (formula "6") (term "0,1,2,0"))
                        (rule "add_literals" (formula "6") (term "1,0,1,2,0"))
                        (rule "times_zero_1" (formula "6") (term "0,1,2,0"))
                        (rule "inEqSimp_contradEq7" (formula "6") (term "0,0") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "6") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "6") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "6") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "6") (term "0,0"))
                        (rule "ifthenelse_false" (formula "6") (term "0"))
                        (rule "polySimp_homoEq" (formula "6"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0"))
                        (rule "polySimp_pullOutFactor1" (formula "6") (term "0,0"))
                        (rule "add_literals" (formula "6") (term "1,0,0"))
                        (rule "times_zero_1" (formula "6") (term "0,0"))
                        (rule "add_zero_left" (formula "6") (term "0"))
                        (rule "polySimp_invertEq" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                        (rule "times_zero_2" (formula "6") (term "1"))
                        (rule "polySimp_elimOne" (formula "6") (term "0"))
                        (rule "polyDiv_zero" (formula "6") (term "0"))
                        (rule "ifthenelse_concrete4" (formula "6"))
                        (rule "div_literals" (formula "6") (term "0,1"))
                        (rule "inEqSimp_contradEq7" (formula "6") (term "0,0") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "6") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "6") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "6") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "6") (term "0,0"))
                        (rule "concrete_not_2" (formula "6") (term "0"))
                        (rule "concrete_or_1" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "polySimp_critPair" (formula "9") (ifseqformula "7"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,1,1,0"))
                        (rule "polySimp_mulAssoc" (formula "9") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0,1,0"))
                        (rule "polySimp_mulComm1" (formula "9") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                        (rule "polySimp_mulComm1" (formula "9") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0"))
                        (rule "polySimp_addComm1" (formula "9") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                        (rule "add_literals" (formula "9") (term "1,1,0"))
                        (rule "times_zero_1" (formula "9") (term "1,0"))
                        (rule "add_zero_right" (formula "9") (term "0"))
                        (rule "polySimp_addComm0" (formula "9") (term "0"))
                        (rule "polySimp_sepPosMonomial" (formula "9"))
                        (rule "jdiv_axiom" (formula "28") (term "0,0"))
                        (rule "eqSymm" (formula "28"))
                        (rule "inEqSimp_subsumption1" (formula "28") (term "0,0") (ifseqformula "22"))
                        (rule "leq_literals" (formula "28") (term "0,0,0"))
                        (rule "concrete_or_1" (formula "28") (term "0,0"))
                        (rule "ifthenelse_true" (formula "28") (term "0"))
                        (rule "eqSymm" (formula "28"))
                        (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "28"))
                        (rule "polyDiv_pullOut" (formula "29") (term "0,0") (inst "polyDivCoeff=Z(1(#))"))
                        (rule "mul_literals" (formula "29") (term "0,1,0,0,2,0,0"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,2,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "29") (term "0,0,2,0,0"))
                        (rule "add_literals" (formula "29") (term "1,0,0,2,0,0"))
                        (rule "times_zero_1" (formula "29") (term "0,0,2,0,0"))
                        (rule "polySimp_addComm0" (formula "29") (term "2,0,0"))
                        (rule "inEqSimp_contradEq7" (formula "29") (term "0,0,0") (ifseqformula "22"))
                        (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "29") (term "0,0,0,0,0"))
                        (rule "leq_literals" (formula "29") (term "0,0,0,0"))
                        (rule "concrete_and_2" (formula "29") (term "0,0,0"))
                        (rule "ifthenelse_false" (formula "29") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "29") (term "0"))
                        (rule "polySimp_rightDist" (formula "29") (term "0"))
                        (rule "polySimp_homoEq" (formula "29"))
                        (rule "polySimp_elimOne" (formula "29") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "29") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "29") (term "0"))
                        (rule "polySimp_pullOutFactor1" (formula "29") (term "0,0"))
                        (rule "add_literals" (formula "29") (term "1,0,0"))
                        (rule "times_zero_1" (formula "29") (term "0,0"))
                        (rule "add_zero_left" (formula "29") (term "0"))
                        (rule "polySimp_invertEq" (formula "29"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                        (rule "times_zero_2" (formula "29") (term "1"))
                        (rule "polySimp_elimOne" (formula "29") (term "0"))
                        (rule "polyDiv_zero" (formula "29") (term "0,0"))
                        (rule "div_literals" (formula "29") (term "1,0,0"))
                        (rule "inEqSimp_contradEq7" (formula "29") (term "0,0,0") (ifseqformula "22"))
                        (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "29") (term "0,0,0,0,0"))
                        (rule "leq_literals" (formula "29") (term "0,0,0,0"))
                        (rule "concrete_and_2" (formula "29") (term "0,0,0"))
                        (rule "ifthenelse_false" (formula "29") (term "0,0"))
                        (rule "times_zero_2" (formula "29") (term "0"))
                        (rule "eqClose" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "polyDiv_pullOut" (formula "28") (term "1") (inst "polyDivCoeff=Z(1(#))"))
                        (rule "mul_literals" (formula "28") (term "0,1,0,0,2,1"))
                        (rule "eqSymm" (formula "28"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,2,0"))
                        (rule "polySimp_pullOutFactor1" (formula "28") (term "0,0,2,0"))
                        (rule "add_literals" (formula "28") (term "1,0,0,2,0"))
                        (rule "times_zero_1" (formula "28") (term "0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "28") (term "2,0"))
                        (rule "inEqSimp_contradEq7" (formula "28") (term "0,0") (ifseqformula "22"))
                        (rule "times_zero_1" (formula "28") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "28") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "28") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "28") (term "0,0"))
                        (rule "ifthenelse_false" (formula "28") (term "0"))
                        (rule "eqSymm" (formula "28"))
                        (rule "polyDiv_zero" (formula "28") (term "1,1"))
                        (rule "div_literals" (formula "28") (term "1,1,1"))
                        (rule "polySimp_homoEq" (formula "28"))
                        (rule "polySimp_addComm1" (formula "28") (term "0"))
                        (rule "polySimp_sepPosMonomial" (formula "28"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1"))
                        (rule "polySimp_rightDist" (formula "28") (term "1"))
                        (rule "mul_literals" (formula "28") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "28") (term "1,1"))
                        (rule "inEqSimp_contradEq7" (formula "28") (term "0,0") (ifseqformula "22"))
                        (rule "times_zero_1" (formula "28") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "28") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "28") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "28") (term "0,0"))
                        (rule "ifthenelse_false" (formula "28") (term "0"))
                        (rule "polySimp_homoEq" (formula "28"))
                        (rule "times_zero_2" (formula "28") (term "1,0"))
                        (rule "add_zero_right" (formula "28") (term "0"))
                        (rule "polySimp_sepPosMonomial" (formula "28"))
                        (rule "mul_literals" (formula "28") (term "1"))
                        (rule "polySimp_critPair" (formula "25") (ifseqformula "24"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,1,1,0"))
                        (rule "polySimp_mulAssoc" (formula "25") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "25") (term "0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "25") (term "0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "25") (term "1,0"))
                        (rule "polySimp_mulComm1" (formula "25") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "25") (term "0,1,0"))
                        (rule "polySimp_mulComm1" (formula "25") (term "0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "25") (term "0,0"))
                        (rule "polySimp_mulComm1" (formula "25") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "25") (term "0,1,0,0"))
                        (rule "polySimp_mulAssoc" (formula "25") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0"))
                        (rule "polySimp_addComm1" (formula "25") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "25") (term "0"))
                        (rule "add_literals" (formula "25") (term "1,1,0"))
                        (rule "times_zero_1" (formula "25") (term "1,0"))
                        (rule "add_zero_right" (formula "25") (term "0"))
                        (rule "polySimp_addComm0" (formula "25") (term "0"))
                        (rule "apply_eq_monomials" (formula "25") (term "1,0") (ifseqformula "28"))
                        (rule "polySimp_rightDist" (formula "25") (term "0,1,0"))
                        (rule "polySimp_mulComm1" (formula "25") (term "1,0,1,0"))
                        (rule "polySimp_mulComm1" (formula "25") (term "0,1,0,1,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "25") (term "1,0"))
                        (rule "add_literals" (formula "25") (term "1,1,1,0"))
                        (rule "times_zero_1" (formula "25") (term "1,1,0"))
                        (rule "add_zero_right" (formula "25") (term "1,0"))
                        (rule "polySimp_mulAssoc" (formula "25") (term "1,0"))
                        (rule "polySimp_pullOutFactor1" (formula "25") (term "0"))
                        (rule "add_literals" (formula "25") (term "1,0"))
                        (rule "times_zero_1" (formula "25") (term "0"))
                        (rule "eqClose" (formula "25"))
                        (rule "true_left" (formula "25"))
                        (rule "jdiv_axiom" (formula "29") (term "0,0,0,1"))
                        (rule "eqSymm" (formula "29"))
                        (rule "inEqSimp_subsumption1" (formula "29") (term "0,0") (ifseqformula "17"))
                        (rule "leq_literals" (formula "29") (term "0,0,0"))
                        (rule "concrete_or_1" (formula "29") (term "0,0"))
                        (rule "ifthenelse_true" (formula "29") (term "0"))
                        (rule "eqSymm" (formula "29"))
                        (rule "applyEq" (formula "30") (term "0,0,0,1") (ifseqformula "29"))
                        (rule "polyDiv_pullOut" (formula "30") (term "0,0,0,1") (inst "polyDivCoeff=quotient_13"))
                        (rule "polySimp_mulComm1" (formula "30") (term "1,0,0,2,0,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "30") (term "0,1,0,0,2,0,0,0,1"))
                        (rule "polySimp_addComm0" (formula "30") (term "2,0,0,0,1"))
                        (rule "applyEq" (formula "30") (term "0,1,0,1,2,0,0,0,1") (ifseqformula "10"))
                        (rule "polySimp_pullOutFactor1" (formula "30") (term "0,1,2,0,0,0,1"))
                        (rule "add_literals" (formula "30") (term "1,0,1,2,0,0,0,1"))
                        (rule "times_zero_1" (formula "30") (term "0,1,2,0,0,0,1"))
                        (rule "inEqSimp_contradEq7" (formula "30") (term "0,0,0,0,1") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0,0,1"))
                        (rule "add_zero_right" (formula "30") (term "0,0,0,0,0,0,1"))
                        (rule "leq_literals" (formula "30") (term "0,0,0,0,0,1"))
                        (rule "concrete_and_2" (formula "30") (term "0,0,0,0,1"))
                        (rule "ifthenelse_false" (formula "30") (term "0,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "30") (term "0,0,1"))
                        (rule "polySimp_rightDist" (formula "30") (term "0,0,1"))
                        (rule "polySimp_homoEq" (formula "30") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "30") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0,0,1"))
                        (rule "applyEqRigid" (formula "30") (term "0,1,0,0,0,1") (ifseqformula "10"))
                        (rule "polySimp_pullOutFactor1" (formula "30") (term "0,0,0,1"))
                        (rule "add_literals" (formula "30") (term "1,0,0,0,1"))
                        (rule "times_zero_1" (formula "30") (term "0,0,0,1"))
                        (rule "add_zero_left" (formula "30") (term "0,0,1"))
                        (rule "polySimp_invertEq" (formula "30") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "0,0,1"))
                        (rule "times_zero_2" (formula "30") (term "1,0,1"))
                        (rule "polySimp_elimOne" (formula "30") (term "0,0,1"))
                        (rule "polyDiv_zero" (formula "30") (term "0,0,0,1"))
                        (rule "div_literals" (formula "30") (term "1,0,0,0,1"))
                        (rule "inEqSimp_contradEq7" (formula "30") (term "0,0,0,0,1") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0,0,1"))
                        (rule "add_zero_right" (formula "30") (term "0,0,0,0,0,0,1"))
                        (rule "leq_literals" (formula "30") (term "0,0,0,0,0,1"))
                        (rule "concrete_and_2" (formula "30") (term "0,0,0,0,1"))
                        (rule "ifthenelse_false" (formula "30") (term "0,0,0,1"))
                        (rule "times_zero_2" (formula "30") (term "0,0,1"))
                        (rule "eqClose" (formula "30") (term "0,1"))
                        (rule "concrete_not_1" (formula "30") (term "1"))
                        (rule "concrete_or_4" (formula "30"))
                        (rule "notLeft" (formula "30"))
                        (rule "polyDiv_pullOut" (formula "29") (term "1") (inst "polyDivCoeff=quotient_13"))
                        (rule "eqSymm" (formula "29"))
                        (rule "polySimp_mulComm1" (formula "29") (term "1,0,0,2,0"))
                        (rule "polySimp_mulComm0" (formula "29") (term "0,1,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "29") (term "2,0"))
                        (rule "applyEqRigid" (formula "29") (term "0,1,0,1,2,0") (ifseqformula "10"))
                        (rule "polySimp_pullOutFactor1" (formula "29") (term "0,1,2,0"))
                        (rule "add_literals" (formula "29") (term "1,0,1,2,0"))
                        (rule "times_zero_1" (formula "29") (term "0,1,2,0"))
                        (rule "inEqSimp_contradEq7" (formula "29") (term "0,0") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "29") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "29") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "29") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "29") (term "0,0"))
                        (rule "ifthenelse_false" (formula "29") (term "0"))
                        (rule "eqSymm" (formula "29"))
                        (rule "polyDiv_zero" (formula "29") (term "1,1"))
                        (rule "div_literals" (formula "29") (term "1,1,1"))
                        (rule "polySimp_homoEq" (formula "29"))
                        (rule "polySimp_addComm1" (formula "29") (term "0"))
                        (rule "polySimp_sepPosMonomial" (formula "29"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1"))
                        (rule "polySimp_rightDist" (formula "29") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "29") (term "1,1"))
                        (rule "polySimp_mulComm0" (formula "29") (term "0,1"))
                        (rule "inEqSimp_contradEq7" (formula "29") (term "0,0") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "29") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "29") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "29") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "29") (term "0,0"))
                        (rule "ifthenelse_false" (formula "29") (term "0"))
                        (rule "polySimp_homoEq" (formula "29"))
                        (rule "times_zero_2" (formula "29") (term "1,0"))
                        (rule "add_zero_right" (formula "29") (term "0"))
                        (rule "polySimp_sepPosMonomial" (formula "29"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "1"))
                        (rule "polySimp_elimOne" (formula "29") (term "1"))
                        (rule "polySimp_critPair" (formula "24") (ifseqformula "9"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,1,1,0"))
                        (rule "polySimp_mulAssoc" (formula "24") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "24") (term "0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                        (rule "polySimp_mulComm1" (formula "24") (term "1,1,0"))
                        (rule "polySimp_mulAssoc" (formula "24") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "24") (term "0,0"))
                        (rule "polySimp_mulComm1" (formula "24") (term "1,0,0"))
                        (rule "polySimp_mulAssoc" (formula "24") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "24") (term "0"))
                        (rule "polySimp_addComm1" (formula "24") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "24") (term "0"))
                        (rule "add_literals" (formula "24") (term "1,1,0"))
                        (rule "times_zero_1" (formula "24") (term "1,0"))
                        (rule "add_zero_right" (formula "24") (term "0"))
                        (rule "polySimp_sepNegMonomial" (formula "24"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "0"))
                        (rule "polySimp_elimOne" (formula "24") (term "0"))
                        (rule "jdiv_axiom" (formula "32") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,2,1"))
                        (rule "eqSymm" (formula "1"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,0,2,0"))
                        (rule "inEqSimp_invertInEq1" (formula "1") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                        (rule "times_zero_2" (formula "1") (term "1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                        (rule "inEqSimp_subsumption0" (formula "1") (term "0,0") (ifseqformula "14"))
                        (rule "leq_literals" (formula "1") (term "0,0,0"))
                        (rule "concrete_or_1" (formula "1") (term "0,0"))
                        (rule "ifthenelse_true" (formula "1") (term "0"))
                        (rule "eqSymm" (formula "1"))
                        (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "1"))
                        (rule "polyDiv_pullOut" (formula "33") (term "0,0") (inst "polyDivCoeff=quotient_14"))
                        (rule "polySimp_mulComm1" (formula "33") (term "1,0,0,2,0,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "0,1,0,0,2,0,0"))
                        (rule "polySimp_addComm0" (formula "33") (term "2,0,0"))
                        (rule "applyEq" (formula "33") (term "0,1,0,1,2,0,0") (ifseqformula "8"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,0,1,2,0,0"))
                        (rule "polySimp_pullOutFactor0" (formula "33") (term "0,1,2,0,0"))
                        (rule "add_literals" (formula "33") (term "1,0,1,2,0,0"))
                        (rule "times_zero_1" (formula "33") (term "0,1,2,0,0"))
                        (rule "inEqSimp_contradEq7" (formula "33") (term "0,0,0") (ifseqformula "4"))
                        (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "33") (term "0,0,0,0,0"))
                        (rule "leq_literals" (formula "33") (term "0,0,0,0"))
                        (rule "concrete_and_2" (formula "33") (term "0,0,0"))
                        (rule "ifthenelse_false" (formula "33") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "0"))
                        (rule "polySimp_rightDist" (formula "33") (term "0"))
                        (rule "polySimp_homoEq" (formula "33"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "33") (term "0"))
                        (rule "applyEq" (formula "33") (term "0,1,0,0") (ifseqformula "8"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0" (formula "33") (term "0,0"))
                        (rule "add_literals" (formula "33") (term "1,0,0"))
                        (rule "times_zero_1" (formula "33") (term "0,0"))
                        (rule "add_zero_left" (formula "33") (term "0"))
                        (rule "polySimp_invertEq" (formula "33"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "0"))
                        (rule "times_zero_2" (formula "33") (term "1"))
                        (rule "polySimp_elimOne" (formula "33") (term "0"))
                        (rule "polyDiv_zero" (formula "33") (term "0,0"))
                        (rule "div_literals" (formula "33") (term "1,0,0"))
                        (rule "inEqSimp_contradEq7" (formula "33") (term "0,0,0") (ifseqformula "4"))
                        (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "33") (term "0,0,0,0,0"))
                        (rule "leq_literals" (formula "33") (term "0,0,0,0"))
                        (rule "concrete_and_2" (formula "33") (term "0,0,0"))
                        (rule "ifthenelse_false" (formula "33") (term "0,0"))
                        (rule "times_zero_2" (formula "33") (term "0"))
                        (rule "eqClose" (formula "33"))
                        (rule "closeTrue" (formula "33"))
                     )
                     (branch "result_0 >= 0 FALSE"
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "26"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "eqSymm" (formula "1"))
                        (rule "inEqSimp_geqRight" (formula "26"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "2"))
                        (rule "polySimp_mulComm1" (formula "28") (term "0"))
                        (rule "polySimp_homoEq" (formula "28"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "1,0"))
                        (rule "polySimp_elimOne" (formula "28") (term "1,0"))
                        (rule "polySimp_sepPosMonomial" (formula "28"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_contradEq3" (formula "26") (ifseqformula "19"))
                        (rule "times_zero_1" (formula "26") (term "1,0,0"))
                        (rule "add_zero_right" (formula "26") (term "0,0"))
                        (rule "qeq_literals" (formula "26") (term "0"))
                        (rule "concrete_and_2" (formula "26"))
                        (rule "false_right" (formula "26"))
                        (rule "div_axiom" (formula "5") (term "0,1") (inst "quotient=quotient_10"))
                        (rule "polySimp_mulComm0" (formula "5") (term "0,2,1,1"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,1,1,1,1"))
                        (rule "polySimp_mulComm0" (formula "5") (term "0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "5") (term "0,1,1,1"))
                        (rule "inEqSimp_contradEq7" (formula "5") (term "0") (ifseqformula "2"))
                        (rule "times_zero_1" (formula "5") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "5") (term "0,0,0"))
                        (rule "leq_literals" (formula "5") (term "0,0"))
                        (rule "concrete_and_2" (formula "5") (term "0"))
                        (rule "concrete_or_2" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "applyEqRigid" (formula "9") (term "0,0") (ifseqformula "5"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0"))
                        (rule "applyEq" (formula "7") (term "0,2") (ifseqformula "9"))
                        (rule "inEqSimp_homoInEq1" (formula "7") (term "2"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,2"))
                        (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,2"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0,2"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0,2"))
                        (rule "add_zero_right" (formula "7") (term "0,0,2"))
                        (rule "applyEqRigid" (formula "7") (term "0,1") (ifseqformula "9"))
                        (rule "inEqSimp_homoInEq1" (formula "7") (term "1"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "7") (term "0,0,1"))
                        (rule "applyEqRigid" (formula "6") (term "0") (ifseqformula "9"))
                        (rule "inEqSimp_homoInEq0" (formula "6"))
                        (rule "polySimp_pullOutFactor1" (formula "6") (term "0"))
                        (rule "add_literals" (formula "6") (term "1,0"))
                        (rule "times_zero_1" (formula "6") (term "0"))
                        (rule "qeq_literals" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "applyEq" (formula "7") (term "0,1") (ifseqformula "5"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "2"))
                        (rule "mul_literals" (formula "6") (term "1,2"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "6") (term "0,1"))
                        (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "2"))
                        (rule "inEqSimp_subsumption1" (formula "6") (term "0") (ifseqformula "2"))
                        (rule "leq_literals" (formula "6") (term "0,0"))
                        (rule "concrete_or_1" (formula "6") (term "0"))
                        (rule "ifthenelse_true_for" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "polyDiv_pullOut" (formula "19") (term "0") (inst "polyDivCoeff=quotient_8"))
                        (rule "polySimp_mulComm1" (formula "19") (term "1,0,0,2,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "0,1,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "19") (term "2,0"))
                        (rule "applyEq" (formula "19") (term "0,1,0,1,2,0") (ifseqformula "22"))
                        (rule "polySimp_pullOutFactor1" (formula "19") (term "0,1,2,0"))
                        (rule "add_literals" (formula "19") (term "1,0,1,2,0"))
                        (rule "times_zero_1" (formula "19") (term "0,1,2,0"))
                        (rule "inEqSimp_contradEq3" (formula "19") (term "0,0") (ifseqformula "20"))
                        (rule "times_zero_1" (formula "19") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "19") (term "0,0,0,0"))
                        (rule "qeq_literals" (formula "19") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "19") (term "0,0"))
                        (rule "ifthenelse_false" (formula "19") (term "0"))
                        (rule "polySimp_homoEq" (formula "19"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "polySimp_pullOutFactor1" (formula "19") (term "0,0"))
                        (rule "add_literals" (formula "19") (term "1,0,0"))
                        (rule "times_zero_1" (formula "19") (term "0,0"))
                        (rule "add_zero_left" (formula "19") (term "0"))
                        (rule "polySimp_invertEq" (formula "19"))
                        (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                        (rule "times_zero_2" (formula "19") (term "1"))
                        (rule "polySimp_elimOne" (formula "19") (term "0"))
                        (rule "polyDiv_zero" (formula "19") (term "0"))
                        (rule "ifthenelse_concrete4" (formula "19"))
                        (rule "div_literals" (formula "19") (term "0,1"))
                        (rule "inEqSimp_contradEq3" (formula "19") (term "0,0") (ifseqformula "20"))
                        (rule "times_zero_1" (formula "19") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "19") (term "0,0,0,0"))
                        (rule "qeq_literals" (formula "19") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "19") (term "0,0"))
                        (rule "concrete_not_2" (formula "19") (term "0"))
                        (rule "concrete_or_1" (formula "19"))
                        (rule "true_left" (formula "19"))
                        (rule "div_axiom" (formula "3") (term "0,1") (inst "quotient=quotient_11"))
                        (rule "polySimp_mulComm0" (formula "3") (term "0,1,1,1"))
                        (rule "polySimp_mulComm0" (formula "3") (term "0,2,1,1"))
                        (rule "polySimp_mulComm0" (formula "3") (term "0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,1,1,1,1"))
                        (rule "inEqSimp_contradEq7" (formula "3") (term "0") (ifseqformula "2"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0,0"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_and_2" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "3"))
                        (rule "polySimp_mulComm0" (formula "7") (term "0"))
                        (rule "applyEq" (formula "4") (term "0") (ifseqformula "7"))
                        (rule "inEqSimp_homoInEq0" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                        (rule "polySimp_pullOutFactor0" (formula "4") (term "0"))
                        (rule "add_literals" (formula "4") (term "1,0"))
                        (rule "times_zero_1" (formula "4") (term "0"))
                        (rule "qeq_literals" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "applyEq" (formula "4") (term "0,1") (ifseqformula "6"))
                        (rule "inEqSimp_homoInEq1" (formula "4") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1"))
                        (rule "polySimp_elimOne" (formula "4") (term "1,0,1"))
                        (rule "polySimp_addComm1" (formula "4") (term "0,1"))
                        (rule "polySimp_pullOutFactor2b" (formula "4") (term "0,0,1"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "4") (term "0,0,1"))
                        (rule "applyEq" (formula "4") (term "0,2") (ifseqformula "6"))
                        (rule "inEqSimp_homoInEq1" (formula "4") (term "2"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0,2"))
                        (rule "polySimp_elimOne" (formula "4") (term "1,0,2"))
                        (rule "polySimp_addComm1" (formula "4") (term "0,2"))
                        (rule "polySimp_pullOutFactor2b" (formula "4") (term "0,0,2"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0,2"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0,2"))
                        (rule "add_zero_right" (formula "4") (term "0,0,2"))
                        (rule "applyEq" (formula "5") (term "0,1") (ifseqformula "3"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "4") (term "0,1"))
                        (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "2"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "2"))
                        (rule "mul_literals" (formula "4") (term "1,2"))
                        (rule "inEqSimp_contradInEq1" (formula "4") (term "2") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "4") (term "0,2"))
                        (rule "concrete_and_2" (formula "4") (term "2"))
                        (rule "ifthenelse_concrete" (formula "4"))
                        (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "2"))
                        (rule "leq_literals" (formula "4") (term "0"))
                        (rule "concrete_or_1" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "polySimp_critPair" (formula "22") (ifseqformula "25"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,1,1,0"))
                        (rule "polySimp_mulAssoc" (formula "22") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                        (rule "polySimp_mulComm1" (formula "22") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "0,1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "0,0,0"))
                        (rule "polySimp_mulComm1" (formula "22") (term "1,0,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0"))
                        (rule "polySimp_addComm1" (formula "22") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "22") (term "0"))
                        (rule "add_literals" (formula "22") (term "1,1,0"))
                        (rule "times_zero_1" (formula "22") (term "1,0"))
                        (rule "add_zero_right" (formula "22") (term "0"))
                        (rule "polySimp_addComm0" (formula "22") (term "0"))
                        (rule "polySimp_sepPosMonomial" (formula "22"))
                        (rule "div_axiom" (formula "1") (term "0,1") (inst "quotient=quotient_12"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,2,1,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,1,1,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,1,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,1"))
                        (rule "inEqSimp_contradEq7" (formula "1") (term "0") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0"))
                        (rule "leq_literals" (formula "1") (term "0,0"))
                        (rule "concrete_and_2" (formula "1") (term "0"))
                        (rule "concrete_or_2" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "1"))
                        (rule "polySimp_mulComm0" (formula "31") (term "0"))
                        (rule "applyEq" (formula "4") (term "0,1") (ifseqformula "1"))
                        (rule "inEqSimp_strengthen0" (formula "2") (ifseqformula "31"))
                        (rule "inEqSimp_contradEq3" (formula "31") (ifseqformula "2"))
                        (rule "polySimp_mulAssoc" (formula "31") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "31") (term "0,0"))
                        (rule "add_literals" (formula "31") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "31") (term "1,0,0"))
                        (rule "add_zero_right" (formula "31") (term "0,0"))
                        (rule "qeq_literals" (formula "31") (term "0"))
                        (rule "concrete_and_2" (formula "31"))
                        (rule "false_right" (formula "31"))
                        (rule "inEqSimp_subsumption1" (formula "3") (term "0") (ifseqformula "5"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_1" (formula "3") (term "0"))
                        (rule "ifthenelse_true_for" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "2"))
                        (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "polySimp_rightDist" (formula "3") (term "0,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "mul_literals" (formula "3") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "3"))
                        (rule "leq_literals" (formula "6") (term "0"))
                        (rule "concrete_or_1" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "polyDiv_pullOut" (formula "27") (term "0") (inst "polyDivCoeff=quotient_9"))
                        (rule "polySimp_mulComm1" (formula "27") (term "1,0,0,2,0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "0,1,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "27") (term "2,0"))
                        (rule "applyEq" (formula "27") (term "0,1,0,1,2,0") (ifseqformula "29"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,2,0"))
                        (rule "polySimp_elimOne" (formula "27") (term "1,0,1,2,0"))
                        (rule "polySimp_pullOutFactor2" (formula "27") (term "0,1,2,0"))
                        (rule "add_literals" (formula "27") (term "1,0,1,2,0"))
                        (rule "times_zero_1" (formula "27") (term "0,1,2,0"))
                        (rule "inEqSimp_contradEq3" (formula "27") (term "0,0") (ifseqformula "23"))
                        (rule "times_zero_1" (formula "27") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "27") (term "0,0,0,0"))
                        (rule "qeq_literals" (formula "27") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "27") (term "0,0"))
                        (rule "ifthenelse_false" (formula "27") (term "0"))
                        (rule "polySimp_homoEq" (formula "27"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "27") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "27") (term "0"))
                        (rule "polySimp_pullOutFactor1" (formula "27") (term "0,0"))
                        (rule "add_literals" (formula "27") (term "1,0,0"))
                        (rule "times_zero_1" (formula "27") (term "0,0"))
                        (rule "add_zero_left" (formula "27") (term "0"))
                        (rule "polySimp_invertEq" (formula "27"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "0"))
                        (rule "times_zero_2" (formula "27") (term "1"))
                        (rule "polySimp_elimOne" (formula "27") (term "0"))
                        (rule "polyDiv_zero" (formula "27") (term "0"))
                        (rule "ifthenelse_concrete4" (formula "27"))
                        (rule "div_literals" (formula "27") (term "0,1"))
                        (rule "inEqSimp_contradEq3" (formula "27") (term "0,0") (ifseqformula "23"))
                        (rule "times_zero_1" (formula "27") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "27") (term "0,0,0,0"))
                        (rule "qeq_literals" (formula "27") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "27") (term "0,0"))
                        (rule "concrete_not_2" (formula "27") (term "0"))
                        (rule "concrete_or_1" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "polyDiv_pullOut" (formula "9") (term "0") (inst "polyDivCoeff=quotient_10"))
                        (rule "polySimp_mulComm1" (formula "9") (term "1,0,0,2,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0,1,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "9") (term "2,0"))
                        (rule "applyEqRigid" (formula "9") (term "0,1,0,1,2,0") (ifseqformula "11"))
                        (rule "polySimp_pullOutFactor1" (formula "9") (term "0,1,2,0"))
                        (rule "add_literals" (formula "9") (term "1,0,1,2,0"))
                        (rule "times_zero_1" (formula "9") (term "0,1,2,0"))
                        (rule "inEqSimp_contradEq7" (formula "9") (term "0,0") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "9") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "9") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "9") (term "0,0"))
                        (rule "ifthenelse_false" (formula "9") (term "0"))
                        (rule "polySimp_homoEq" (formula "9"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0"))
                        (rule "polySimp_pullOutFactor1" (formula "9") (term "0,0"))
                        (rule "add_literals" (formula "9") (term "1,0,0"))
                        (rule "times_zero_1" (formula "9") (term "0,0"))
                        (rule "add_zero_left" (formula "9") (term "0"))
                        (rule "polySimp_invertEq" (formula "9"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                        (rule "times_zero_2" (formula "9") (term "1"))
                        (rule "polySimp_elimOne" (formula "9") (term "0"))
                        (rule "polyDiv_zero" (formula "9") (term "0"))
                        (rule "ifthenelse_concrete4" (formula "9"))
                        (rule "div_literals" (formula "9") (term "0,1"))
                        (rule "inEqSimp_contradEq7" (formula "9") (term "0,0") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "9") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "9") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "9") (term "0,0"))
                        (rule "concrete_not_2" (formula "9") (term "0"))
                        (rule "concrete_or_1" (formula "9"))
                        (rule "true_left" (formula "9"))
                        (rule "allLeft" (formula "28") (inst "t=x_4"))
                        (rule "applyEq" (formula "28") (term "0,0,1") (ifseqformula "5"))
                        (rule "polySimp_mulComm1" (formula "28") (term "0,1"))
                        (rule "polySimp_homoEq" (formula "28") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1"))
                        (rule "polySimp_elimOne" (formula "28") (term "1,0,1"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1,0,1"))
                        (rule "polySimp_sepPosMonomial" (formula "28") (term "1"))
                        (rule "inEqSimp_contradEq3" (formula "28") (term "1") (ifseqformula "2"))
                        (rule "polySimp_mulAssoc" (formula "28") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "28") (term "0,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "1,0,0,1"))
                        (rule "polySimp_pullOutFactor0b" (formula "28") (term "0,0,1"))
                        (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "28") (term "0,0,1"))
                        (rule "qeq_literals" (formula "28") (term "0,1"))
                        (rule "concrete_and_2" (formula "28") (term "1"))
                        (rule "concrete_or_4" (formula "28"))
                        (rule "inEqSimp_contradInEq1" (formula "28") (term "0,0") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "28") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "28") (term "0,0"))
                        (rule "concrete_or_2" (formula "28") (term "0"))
                        (rule "polyDiv_pullOut" (formula "6") (term "0") (inst "polyDivCoeff=quotient_11"))
                        (rule "polySimp_mulComm1" (formula "6") (term "1,0,0,2,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "6") (term "2,0"))
                        (rule "applyEq" (formula "6") (term "0,1,0,1,2,0") (ifseqformula "8"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,2,0"))
                        (rule "polySimp_pullOutFactor0" (formula "6") (term "0,1,2,0"))
                        (rule "add_literals" (formula "6") (term "1,0,1,2,0"))
                        (rule "times_zero_1" (formula "6") (term "0,1,2,0"))
                        (rule "inEqSimp_contradEq7" (formula "6") (term "0,0") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "6") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "6") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "6") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "6") (term "0,0"))
                        (rule "ifthenelse_false" (formula "6") (term "0"))
                        (rule "polySimp_homoEq" (formula "6"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0"))
                        (rule "polySimp_pullOutFactor1" (formula "6") (term "0,0"))
                        (rule "add_literals" (formula "6") (term "1,0,0"))
                        (rule "times_zero_1" (formula "6") (term "0,0"))
                        (rule "add_zero_left" (formula "6") (term "0"))
                        (rule "polySimp_invertEq" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                        (rule "times_zero_2" (formula "6") (term "1"))
                        (rule "polySimp_elimOne" (formula "6") (term "0"))
                        (rule "polyDiv_zero" (formula "6") (term "0"))
                        (rule "ifthenelse_concrete4" (formula "6"))
                        (rule "div_literals" (formula "6") (term "0,1"))
                        (rule "inEqSimp_contradEq7" (formula "6") (term "0,0") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "6") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "6") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "6") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "6") (term "0,0"))
                        (rule "concrete_not_2" (formula "6") (term "0"))
                        (rule "concrete_or_1" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "polySimp_critPair" (formula "9") (ifseqformula "7"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,1,1,0"))
                        (rule "polySimp_mulAssoc" (formula "9") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0,1,0"))
                        (rule "polySimp_mulComm1" (formula "9") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0,0,0"))
                        (rule "polySimp_mulComm1" (formula "9") (term "1,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0"))
                        (rule "polySimp_addComm1" (formula "9") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                        (rule "add_literals" (formula "9") (term "1,1,0"))
                        (rule "times_zero_1" (formula "9") (term "1,0"))
                        (rule "add_zero_right" (formula "9") (term "0"))
                        (rule "polySimp_addComm0" (formula "9") (term "0"))
                        (rule "polySimp_sepPosMonomial" (formula "9"))
                        (rule "polySimp_critPair" (formula "25") (ifseqformula "24"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,1,1,0"))
                        (rule "polySimp_mulAssoc" (formula "25") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "25") (term "0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "25") (term "0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "25") (term "1,0"))
                        (rule "polySimp_mulComm1" (formula "25") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "25") (term "0,1,0"))
                        (rule "polySimp_mulComm1" (formula "25") (term "0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "25") (term "0,0"))
                        (rule "polySimp_mulComm1" (formula "25") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "25") (term "0,1,0,0"))
                        (rule "polySimp_mulAssoc" (formula "25") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0"))
                        (rule "polySimp_addComm1" (formula "25") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "25") (term "0"))
                        (rule "add_literals" (formula "25") (term "1,1,0"))
                        (rule "times_zero_1" (formula "25") (term "1,0"))
                        (rule "add_zero_right" (formula "25") (term "0"))
                        (rule "polySimp_addComm0" (formula "25") (term "0"))
                        (rule "apply_eq_monomials" (formula "25") (term "1,0") (ifseqformula "28"))
                        (rule "polySimp_rightDist" (formula "25") (term "0,1,0"))
                        (rule "polySimp_mulComm1" (formula "25") (term "1,0,1,0"))
                        (rule "polySimp_mulComm1" (formula "25") (term "0,1,0,1,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "25") (term "1,0"))
                        (rule "add_literals" (formula "25") (term "1,1,1,0"))
                        (rule "times_zero_1" (formula "25") (term "1,1,0"))
                        (rule "add_zero_right" (formula "25") (term "1,0"))
                        (rule "polySimp_mulAssoc" (formula "25") (term "1,0"))
                        (rule "polySimp_pullOutFactor1" (formula "25") (term "0"))
                        (rule "add_literals" (formula "25") (term "1,0"))
                        (rule "times_zero_1" (formula "25") (term "0"))
                        (rule "eqClose" (formula "25"))
                        (rule "true_left" (formula "25"))
                        (rule "jdiv_axiom" (formula "28") (term "0,0,0,1"))
                        (rule "eqSymm" (formula "28"))
                        (rule "inEqSimp_subsumption1" (formula "28") (term "0,0") (ifseqformula "17"))
                        (rule "leq_literals" (formula "28") (term "0,0,0"))
                        (rule "concrete_or_1" (formula "28") (term "0,0"))
                        (rule "ifthenelse_true" (formula "28") (term "0"))
                        (rule "eqSymm" (formula "28"))
                        (rule "applyEq" (formula "29") (term "0,0,0,1") (ifseqformula "28"))
                        (rule "polyDiv_pullOut" (formula "29") (term "0,0,0,1") (inst "polyDivCoeff=quotient_10"))
                        (rule "polySimp_mulComm1" (formula "29") (term "1,0,0,2,0,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "29") (term "0,1,0,0,2,0,0,0,1"))
                        (rule "polySimp_addComm0" (formula "29") (term "2,0,0,0,1"))
                        (rule "applyEqRigid" (formula "29") (term "0,1,0,1,2,0,0,0,1") (ifseqformula "10"))
                        (rule "polySimp_pullOutFactor1" (formula "29") (term "0,1,2,0,0,0,1"))
                        (rule "add_literals" (formula "29") (term "1,0,1,2,0,0,0,1"))
                        (rule "times_zero_1" (formula "29") (term "0,1,2,0,0,0,1"))
                        (rule "inEqSimp_contradEq7" (formula "29") (term "0,0,0,0,1") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0,0,1"))
                        (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0,1"))
                        (rule "leq_literals" (formula "29") (term "0,0,0,0,0,1"))
                        (rule "concrete_and_2" (formula "29") (term "0,0,0,0,1"))
                        (rule "ifthenelse_false" (formula "29") (term "0,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "29") (term "0,0,1"))
                        (rule "polySimp_rightDist" (formula "29") (term "0,0,1"))
                        (rule "polySimp_homoEq" (formula "29") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "29") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "29") (term "0,0,1"))
                        (rule "applyEqRigid" (formula "29") (term "0,1,0,0,0,1") (ifseqformula "10"))
                        (rule "polySimp_pullOutFactor1" (formula "29") (term "0,0,0,1"))
                        (rule "add_literals" (formula "29") (term "1,0,0,0,1"))
                        (rule "times_zero_1" (formula "29") (term "0,0,0,1"))
                        (rule "add_zero_left" (formula "29") (term "0,0,1"))
                        (rule "polySimp_invertEq" (formula "29") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "0,0,1"))
                        (rule "times_zero_2" (formula "29") (term "1,0,1"))
                        (rule "polySimp_elimOne" (formula "29") (term "0,0,1"))
                        (rule "polyDiv_zero" (formula "29") (term "0,0,0,1"))
                        (rule "div_literals" (formula "29") (term "1,0,0,0,1"))
                        (rule "inEqSimp_contradEq7" (formula "29") (term "0,0,0,0,1") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0,0,1"))
                        (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0,1"))
                        (rule "leq_literals" (formula "29") (term "0,0,0,0,0,1"))
                        (rule "concrete_and_2" (formula "29") (term "0,0,0,0,1"))
                        (rule "ifthenelse_false" (formula "29") (term "0,0,0,1"))
                        (rule "times_zero_2" (formula "29") (term "0,0,1"))
                        (rule "eqClose" (formula "29") (term "0,1"))
                        (rule "concrete_not_1" (formula "29") (term "1"))
                        (rule "concrete_or_4" (formula "29"))
                        (rule "notLeft" (formula "29"))
                        (rule "polyDiv_pullOut" (formula "28") (term "1") (inst "polyDivCoeff=quotient_10"))
                        (rule "eqSymm" (formula "28"))
                        (rule "polySimp_mulComm1" (formula "28") (term "1,0,0,2,0"))
                        (rule "polySimp_mulComm0" (formula "28") (term "0,1,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "28") (term "2,0"))
                        (rule "applyEq" (formula "28") (term "0,1,0,1,2,0") (ifseqformula "10"))
                        (rule "polySimp_pullOutFactor1" (formula "28") (term "0,1,2,0"))
                        (rule "add_literals" (formula "28") (term "1,0,1,2,0"))
                        (rule "times_zero_1" (formula "28") (term "0,1,2,0"))
                        (rule "inEqSimp_contradEq7" (formula "28") (term "0,0") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "28") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "28") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "28") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "28") (term "0,0"))
                        (rule "ifthenelse_false" (formula "28") (term "0"))
                        (rule "eqSymm" (formula "28"))
                        (rule "polyDiv_zero" (formula "28") (term "1,1"))
                        (rule "div_literals" (formula "28") (term "1,1,1"))
                        (rule "polySimp_homoEq" (formula "28"))
                        (rule "polySimp_addComm1" (formula "28") (term "0"))
                        (rule "polySimp_sepPosMonomial" (formula "28"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1"))
                        (rule "polySimp_rightDist" (formula "28") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "28") (term "1,1"))
                        (rule "polySimp_mulComm0" (formula "28") (term "0,1"))
                        (rule "inEqSimp_contradEq7" (formula "28") (term "0,0") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "28") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "28") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "28") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "28") (term "0,0"))
                        (rule "ifthenelse_false" (formula "28") (term "0"))
                        (rule "polySimp_homoEq" (formula "28"))
                        (rule "times_zero_2" (formula "28") (term "1,0"))
                        (rule "add_zero_right" (formula "28") (term "0"))
                        (rule "polySimp_sepPosMonomial" (formula "28"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "1"))
                        (rule "polySimp_elimOne" (formula "28") (term "1"))
                        (rule "jdiv_axiom" (formula "30") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,2,1"))
                        (rule "eqSymm" (formula "1"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,0,2,0"))
                        (rule "inEqSimp_invertInEq1" (formula "1") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                        (rule "times_zero_2" (formula "1") (term "1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                        (rule "inEqSimp_subsumption0" (formula "1") (term "0,0") (ifseqformula "14"))
                        (rule "leq_literals" (formula "1") (term "0,0,0"))
                        (rule "concrete_or_1" (formula "1") (term "0,0"))
                        (rule "ifthenelse_true" (formula "1") (term "0"))
                        (rule "eqSymm" (formula "1"))
                        (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "1"))
                        (rule "polyDiv_pullOut" (formula "31") (term "0,0") (inst "polyDivCoeff=quotient_11"))
                        (rule "polySimp_mulComm1" (formula "31") (term "1,0,0,2,0,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "0,1,0,0,2,0,0"))
                        (rule "polySimp_addComm0" (formula "31") (term "2,0,0"))
                        (rule "applyEq" (formula "31") (term "0,1,0,1,2,0,0") (ifseqformula "8"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,0,1,2,0,0"))
                        (rule "polySimp_pullOutFactor0" (formula "31") (term "0,1,2,0,0"))
                        (rule "add_literals" (formula "31") (term "1,0,1,2,0,0"))
                        (rule "times_zero_1" (formula "31") (term "0,1,2,0,0"))
                        (rule "inEqSimp_contradEq7" (formula "31") (term "0,0,0") (ifseqformula "4"))
                        (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "31") (term "0,0,0,0,0"))
                        (rule "leq_literals" (formula "31") (term "0,0,0,0"))
                        (rule "concrete_and_2" (formula "31") (term "0,0,0"))
                        (rule "ifthenelse_false" (formula "31") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "0"))
                        (rule "polySimp_rightDist" (formula "31") (term "0"))
                        (rule "polySimp_homoEq" (formula "31"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "31") (term "0"))
                        (rule "applyEq" (formula "31") (term "0,1,0,0") (ifseqformula "8"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0" (formula "31") (term "0,0"))
                        (rule "add_literals" (formula "31") (term "1,0,0"))
                        (rule "times_zero_1" (formula "31") (term "0,0"))
                        (rule "add_zero_left" (formula "31") (term "0"))
                        (rule "polySimp_invertEq" (formula "31"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                        (rule "times_zero_2" (formula "31") (term "1"))
                        (rule "polySimp_elimOne" (formula "31") (term "0"))
                        (rule "polyDiv_zero" (formula "31") (term "0,0"))
                        (rule "div_literals" (formula "31") (term "1,0,0"))
                        (rule "inEqSimp_contradEq7" (formula "31") (term "0,0,0") (ifseqformula "4"))
                        (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "31") (term "0,0,0,0,0"))
                        (rule "leq_literals" (formula "31") (term "0,0,0,0"))
                        (rule "concrete_and_2" (formula "31") (term "0,0,0"))
                        (rule "ifthenelse_false" (formula "31") (term "0,0"))
                        (rule "times_zero_2" (formula "31") (term "0"))
                        (rule "eqClose" (formula "31"))
                        (rule "closeTrue" (formula "31"))
                     )
                  )
               )
               (branch "a <= -1 FALSE"
                  (rule "replace_known_right" (formula "11") (term "0,1,0,1,0") (ifseqformula "12"))
                  (rule "ifthenelse_false" (formula "11") (term "1,0,1,0"))
                  (rule "replace_known_right" (formula "11") (term "0,0,0,0,0,1,0") (ifseqformula "12"))
                  (rule "ifthenelse_false" (formula "11") (term "0,0,0,0,1,0"))
                  (rule "replace_known_right" (formula "10") (term "0,1") (ifseqformula "12"))
                  (rule "ifthenelse_false" (formula "10") (term "1"))
                  (rule "replace_known_right" (formula "10") (term "0,0,0,0") (ifseqformula "12"))
                  (rule "ifthenelse_false" (formula "10") (term "0,0,0"))
                  (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "10"))
                  (rule "concrete_and_1" (formula "13") (term "0"))
                  (rule "inEqSimp_leqRight" (formula "12"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "2"))
                  (rule "commute_or_2" (formula "12") (term "0"))
                  (rule "commute_or_2" (formula "12") (term "0,0"))
                  (rule "jdiv_axiom" (formula "10") (term "0,0"))
                  (rule "eqSymm" (formula "10"))
                  (rule "inEqSimp_subsumption1" (formula "10") (term "0,0") (ifseqformula "5"))
                  (rule "leq_literals" (formula "10") (term "0,0,0"))
                  (rule "concrete_or_1" (formula "10") (term "0,0"))
                  (rule "ifthenelse_true" (formula "10") (term "0"))
                  (rule "eqSymm" (formula "10"))
                  (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "10"))
                  (rule "jdiv_axiom" (formula "12") (term "0,0"))
                  (rule "eqSymm" (formula "12"))
                  (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "1"))
                  (rule "ifthenelse_true" (formula "12") (term "0"))
                  (rule "eqSymm" (formula "12"))
                  (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "12"))
                  (rule "jdiv_axiom" (formula "15") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,0,2,1"))
                  (rule "eqSymm" (formula "1"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,0,2,0"))
                  (rule "inEqSimp_invertInEq1" (formula "1") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                  (rule "times_zero_2" (formula "1") (term "1,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (term "0,0") (ifseqformula "6"))
                  (rule "qeq_literals" (formula "1") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "1") (term "0,0"))
                  (rule "ifthenelse_false" (formula "1") (term "0"))
                  (rule "eqSymm" (formula "1"))
                  (rule "applyEq" (formula "16") (term "0,0,0") (ifseqformula "1"))
                  (rule "polySimp_mulComm1" (formula "16") (term "0,0"))
                  (rule "polySimp_homoEq" (formula "16") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,0,0"))
                  (rule "applyEq" (formula "16") (term "1,0,0") (ifseqformula "12"))
                  (rule "polySimp_pullOutFactor2" (formula "16") (term "0,0"))
                  (rule "add_literals" (formula "16") (term "1,0,0"))
                  (rule "times_zero_1" (formula "16") (term "0,0"))
                  (rule "eqClose" (formula "16") (term "0"))
                  (rule "concrete_and_1" (formula "16"))
                  (rule "allRight" (formula "16") (inst "sk=x_0"))
                  (rule "orRight" (formula "16"))
                  (rule "orRight" (formula "16"))
                  (rule "orRight" (formula "16"))
                  (rule "notRight" (formula "18"))
                  (rule "notRight" (formula "18"))
                  (rule "inEqSimp_leqRight" (formula "18"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "div_axiom" (formula "14") (term "1") (inst "quotient=quotient_0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "14") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "14") (term "0,2,1,1"))
                  (rule "commute_and" (formula "14") (term "0,1"))
                  (rule "div_axiom" (formula "17") (term "1") (inst "quotient=quotient_1"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "17") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "17") (term "0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "17") (term "0,2,1,1"))
                  (rule "commute_and" (formula "17") (term "0,1"))
                  (rule "jdiv_axiom" (formula "21") (term "0,0"))
                  (rule "eqSymm" (formula "1"))
                  (rule "jdiv_axiom" (formula "4") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "0,0,2,1"))
                  (rule "eqSymm" (formula "4"))
                  (rule "polySimp_elimOne" (formula "4") (term "0,0,2,0"))
                  (rule "inEqSimp_invertInEq1" (formula "4") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0"))
                  (rule "times_zero_2" (formula "4") (term "1,0,0"))
                  (rule "polySimp_elimOne" (formula "4") (term "0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "4") (term "0,0") (ifseqformula "11"))
                  (rule "qeq_literals" (formula "4") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "4") (term "0,0"))
                  (rule "ifthenelse_false" (formula "4") (term "0"))
                  (rule "eqSymm" (formula "4"))
                  (rule "applyEqRigid" (formula "5") (term "0,0") (ifseqformula "4"))
                  (rule "polySimp_mulComm1" (formula "5") (term "0"))
                  (rule "polySimp_homoEq" (formula "5"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                  (rule "polySimp_elimOne" (formula "5") (term "1,0"))
                  (rule "polySimp_sepPosMonomial" (formula "5"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1"))
                  (rule "polySimp_elimOne" (formula "5") (term "1"))
                  (rule "jdiv_axiom" (formula "3") (term "0,0"))
                  (rule "eqSymm" (formula "3"))
                  (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "8"))
                  (rule "ifthenelse_true" (formula "3") (term "0"))
                  (rule "eqSymm" (formula "3"))
                  (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "3"))
                  (rule "polySimp_critPair" (formula "19") (ifseqformula "22"))
                  (rule "polySimp_mulComm0" (formula "19") (term "0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,1,1,0"))
                  (rule "polySimp_rightDist" (formula "19") (term "0,0"))
                  (rule "polySimp_mulComm1" (formula "19") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "19") (term "0,1,0,0"))
                  (rule "polySimp_mulAssoc" (formula "19") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                  (rule "polySimp_mulComm1" (formula "19") (term "1,1,0"))
                  (rule "polySimp_mulComm1" (formula "19") (term "0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "19") (term "0"))
                  (rule "polySimp_addComm1" (formula "19") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "19") (term "0"))
                  (rule "add_literals" (formula "19") (term "1,1,0"))
                  (rule "times_zero_1" (formula "19") (term "1,0"))
                  (rule "add_zero_right" (formula "19") (term "0"))
                  (rule "polySimp_addComm0" (formula "19") (term "0"))
                  (rule "polySimp_sepNegMonomial" (formula "19"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                  (rule "polySimp_elimOne" (formula "19") (term "0"))
                  (rule "allLeft" (formula "24") (inst "t=x_0"))
                  (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "26"))
                  (rule "concrete_or_4" (formula "24"))
                  (rule "applyEq" (formula "24") (term "0,0,0,1,0") (ifseqformula "3"))
                  (rule "replace_known_left" (formula "24") (term "0,1,0") (ifseqformula "4"))
                  (rule "concrete_not_1" (formula "24") (term "1,0"))
                  (rule "concrete_or_4" (formula "24") (term "0"))
                  (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "24") (term "0,0"))
                  (rule "concrete_and_2" (formula "24") (term "0"))
                  (rule "concrete_or_2" (formula "24"))
                  (rule "notLeft" (formula "24"))
                  (rule "div_axiom" (formula "1") (term "1,0") (inst "quotient=quotient_2"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,2,1,1"))
                  (rule "inEqSimp_contradEq7" (formula "1") (term "0") (ifseqformula "3"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0"))
                  (rule "leq_literals" (formula "1") (term "0,0"))
                  (rule "concrete_and_2" (formula "1") (term "0"))
                  (rule "concrete_or_2" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "1"))
                  (rule "inEqSimp_subsumption1" (formula "3") (term "0") (ifseqformula "5"))
                  (rule "leq_literals" (formula "3") (term "0,0"))
                  (rule "concrete_or_1" (formula "3") (term "0"))
                  (rule "ifthenelse_true_for" (formula "3"))
                  (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "2"))
                  (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                  (rule "polySimp_elimOne" (formula "3") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0"))
                  (rule "polySimp_rightDist" (formula "3") (term "0,0,0"))
                  (rule "mul_literals" (formula "3") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor2b" (formula "3") (term "0,0"))
                  (rule "add_literals" (formula "3") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "3") (term "1,0,0"))
                  (rule "add_zero_right" (formula "3") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                  (rule "mul_literals" (formula "3") (term "1"))
                  (rule "div_axiom" (formula "4") (term "0,2,0") (inst "quotient=quotient_3"))
                  (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "4") (term "0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "4") (term "0,2,1,1"))
                  (rule "inEqSimp_contradEq7" (formula "4") (term "0") (ifseqformula "6"))
                  (rule "times_zero_1" (formula "4") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "4") (term "0,0,0"))
                  (rule "leq_literals" (formula "4") (term "0,0"))
                  (rule "concrete_and_2" (formula "4") (term "0"))
                  (rule "concrete_or_2" (formula "4"))
                  (rule "andLeft" (formula "4"))
                  (rule "andLeft" (formula "4"))
                  (rule "applyEq" (formula "7") (term "0,2,0") (ifseqformula "4"))
                  (rule "inEqSimp_subsumption1" (formula "6") (term "0") (ifseqformula "8"))
                  (rule "leq_literals" (formula "6") (term "0,0"))
                  (rule "concrete_or_1" (formula "6") (term "0"))
                  (rule "ifthenelse_true_for" (formula "6"))
                  (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "5"))
                  (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0"))
                  (rule "polySimp_elimOne" (formula "6") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0"))
                  (rule "polySimp_rightDist" (formula "6") (term "0,0,0"))
                  (rule "mul_literals" (formula "6") (term "0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0"))
                  (rule "add_literals" (formula "6") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "6") (term "1,0,0"))
                  (rule "add_zero_right" (formula "6") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                  (rule "mul_literals" (formula "6") (term "1"))
                  (rule "div_axiom" (formula "11") (term "0,1") (inst "quotient=quotient_4"))
                  (rule "polySimp_mulComm0" (formula "11") (term "0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "11") (term "0,2,1,1"))
                  (rule "inEqSimp_contradEq7" (formula "11") (term "0") (ifseqformula "8"))
                  (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "11") (term "0,0,0"))
                  (rule "leq_literals" (formula "11") (term "0,0"))
                  (rule "concrete_and_2" (formula "11") (term "0"))
                  (rule "concrete_or_2" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "applyEqRigid" (formula "15") (term "0,0") (ifseqformula "11"))
                  (rule "polySimp_mulComm0" (formula "15") (term "0"))
                  (rule "applyEq" (formula "13") (term "0,1") (ifseqformula "15"))
                  (rule "inEqSimp_homoInEq1" (formula "13") (term "1"))
                  (rule "polySimp_addComm1" (formula "13") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1"))
                  (rule "add_literals" (formula "13") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "13") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "13") (term "0,0,1"))
                  (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "15"))
                  (rule "inEqSimp_homoInEq0" (formula "12"))
                  (rule "polySimp_pullOutFactor1" (formula "12") (term "0"))
                  (rule "add_literals" (formula "12") (term "1,0"))
                  (rule "times_zero_1" (formula "12") (term "0"))
                  (rule "qeq_literals" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "applyEq" (formula "12") (term "0,2") (ifseqformula "14"))
                  (rule "inEqSimp_homoInEq1" (formula "12") (term "2"))
                  (rule "polySimp_addComm1" (formula "12") (term "0,2"))
                  (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,2"))
                  (rule "add_literals" (formula "12") (term "1,1,0,0,2"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0,2"))
                  (rule "add_zero_right" (formula "12") (term "0,0,2"))
                  (rule "applyEqRigid" (formula "13") (term "0,1") (ifseqformula "11"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "12") (term "0,1"))
                  (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "8"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "2"))
                  (rule "mul_literals" (formula "12") (term "1,2"))
                  (rule "inEqSimp_subsumption1" (formula "12") (term "0") (ifseqformula "8"))
                  (rule "leq_literals" (formula "12") (term "0,0"))
                  (rule "concrete_or_1" (formula "12") (term "0"))
                  (rule "ifthenelse_true_for" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "ifthenelse_split_for" (formula "28") (term "1,1"))
                  (branch "result_0 >= 0 TRUE"
                     (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "28"))
                     (rule "ifthenelse_true" (formula "7") (term "0"))
                     (rule "eqSymm" (formula "7"))
                     (rule "replace_known_left" (formula "24") (term "0,1,1") (ifseqformula "28"))
                     (rule "ifthenelse_true_for" (formula "24") (term "1,1"))
                     (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "7"))
                     (rule "polySimp_mulComm0" (formula "34") (term "0"))
                     (rule "inEqSimp_strengthen0" (formula "2") (ifseqformula "34"))
                     (rule "inEqSimp_contradEq3" (formula "34") (ifseqformula "2"))
                     (rule "polySimp_mulComm0" (formula "34") (term "1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0"))
                     (rule "add_literals" (formula "34") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "34") (term "1,0,0"))
                     (rule "add_zero_right" (formula "34") (term "0,0"))
                     (rule "qeq_literals" (formula "34") (term "0"))
                     (rule "concrete_and_2" (formula "34"))
                     (rule "false_right" (formula "34"))
                     (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "2"))
                     (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0"))
                     (rule "polySimp_rightDist" (formula "3") (term "0,0,0"))
                     (rule "mul_literals" (formula "3") (term "0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                     (rule "add_literals" (formula "3") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "3") (term "0,0"))
                     (rule "add_literals" (formula "3") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "3") (term "1,0,0"))
                     (rule "add_zero_right" (formula "3") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                     (rule "mul_literals" (formula "3") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "3"))
                     (rule "leq_literals" (formula "9") (term "0"))
                     (rule "concrete_or_1" (formula "9"))
                     (rule "true_left" (formula "9"))
                     (rule "cnf_rightDist" (formula "29"))
                     (rule "andLeft" (formula "29"))
                     (rule "commute_or" (formula "30"))
                     (rule "cnf_rightDist" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "commute_or" (formula "25"))
                     (rule "cnf_rightDist" (formula "30"))
                     (rule "andLeft" (formula "30"))
                     (rule "commute_or" (formula "31"))
                     (rule "cnf_rightDist" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "commute_or" (formula "25"))
                     (rule "div_axiom" (formula "9") (term "1") (inst "quotient=quotient_6"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,1,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "9") (term "0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "9") (term "0,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "9") (term "0,2,1,1"))
                     (rule "inEqSimp_contradEq7" (formula "9") (term "0") (ifseqformula "3"))
                     (rule "times_zero_1" (formula "9") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "9") (term "0,0,0"))
                     (rule "leq_literals" (formula "9") (term "0,0"))
                     (rule "concrete_and_2" (formula "9") (term "0"))
                     (rule "concrete_or_2" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "9"))
                     (rule "polySimp_mulComm0" (formula "13") (term "0"))
                     (rule "applyEq" (formula "11") (term "0,2") (ifseqformula "13"))
                     (rule "inEqSimp_homoInEq1" (formula "11") (term "2"))
                     (rule "polySimp_addComm1" (formula "11") (term "0,2"))
                     (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,2"))
                     (rule "add_literals" (formula "11") (term "1,1,0,0,2"))
                     (rule "times_zero_1" (formula "11") (term "1,0,0,2"))
                     (rule "add_zero_right" (formula "11") (term "0,0,2"))
                     (rule "applyEq" (formula "10") (term "0") (ifseqformula "13"))
                     (rule "inEqSimp_homoInEq0" (formula "10"))
                     (rule "polySimp_pullOutFactor1" (formula "10") (term "0"))
                     (rule "add_literals" (formula "10") (term "1,0"))
                     (rule "times_zero_1" (formula "10") (term "0"))
                     (rule "qeq_literals" (formula "10"))
                     (rule "true_left" (formula "10"))
                     (rule "applyEq" (formula "10") (term "0,1") (ifseqformula "12"))
                     (rule "inEqSimp_homoInEq1" (formula "10") (term "1"))
                     (rule "polySimp_addComm1" (formula "10") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                     (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "10") (term "0,0,1"))
                     (rule "applyEq" (formula "11") (term "1") (ifseqformula "9"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "2"))
                     (rule "mul_literals" (formula "10") (term "1,2"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "10") (term "0,1"))
                     (rule "inEqSimp_subsumption1" (formula "10") (term "1") (ifseqformula "3"))
                     (rule "leq_literals" (formula "10") (term "0,1"))
                     (rule "concrete_or_1" (formula "10") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "10") (term "2") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "10") (term "0,2"))
                     (rule "concrete_and_2" (formula "10") (term "2"))
                     (rule "ifthenelse_concrete" (formula "10"))
                     (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "3"))
                     (rule "leq_literals" (formula "10") (term "0"))
                     (rule "concrete_or_1" (formula "10"))
                     (rule "true_left" (formula "10"))
                     (rule "jdiv_axiom" (formula "38") (term "0,0"))
                     (rule "eqSymm" (formula "1"))
                     (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "13"))
                     (rule "inEqSimp_subsumption1" (formula "1") (term "0,0") (ifseqformula "21"))
                     (rule "leq_literals" (formula "1") (term "0,0,0"))
                     (rule "concrete_or_1" (formula "1") (term "0,0"))
                     (rule "ifthenelse_true" (formula "1") (term "0"))
                     (rule "eqSymm" (formula "1"))
                     (rule "applyEqRigid" (formula "39") (term "0,0") (ifseqformula "1"))
                     (rule "polySimp_mulComm0" (formula "39") (term "0"))
                     (rule "close" (formula "39") (ifseqformula "15"))
                  )
                  (branch "result_0 >= 0 FALSE"
                     (rule "replace_known_right" (formula "7") (term "0,0") (ifseqformula "32"))
                     (rule "ifthenelse_false" (formula "7") (term "0"))
                     (rule "eqSymm" (formula "7"))
                     (rule "replace_known_right" (formula "24") (term "0,1,1") (ifseqformula "32"))
                     (rule "ifthenelse_false_for" (formula "24") (term "1,1"))
                     (rule "inEqSimp_geqRight" (formula "32"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "8"))
                     (rule "polySimp_mulComm1" (formula "34") (term "0"))
                     (rule "polySimp_homoEq" (formula "34"))
                     (rule "polySimp_mulLiterals" (formula "34") (term "1,0"))
                     (rule "polySimp_elimOne" (formula "34") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "34") (term "1,0"))
                     (rule "polySimp_sepPosMonomial" (formula "34"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "inEqSimp_contradEq3" (formula "29") (term "0") (ifseqformula "1"))
                     (rule "times_zero_1" (formula "29") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "29") (term "0,0,0"))
                     (rule "qeq_literals" (formula "29") (term "0,0"))
                     (rule "concrete_and_2" (formula "29") (term "0"))
                     (rule "concrete_or_2" (formula "29"))
                     (rule "andLeft" (formula "29"))
                     (rule "andLeft" (formula "29"))
                     (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "30"))
                     (rule "polySimp_mulComm0" (formula "33") (term "0"))
                     (rule "applyEq" (formula "31") (term "0") (ifseqformula "33"))
                     (rule "inEqSimp_homoInEq1" (formula "31"))
                     (rule "polySimp_addComm1" (formula "31") (term "0"))
                     (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0"))
                     (rule "add_literals" (formula "31") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "31") (term "1,0,0"))
                     (rule "add_zero_right" (formula "31") (term "0,0"))
                     (rule "applyEq" (formula "29") (term "0") (ifseqformula "33"))
                     (rule "inEqSimp_homoInEq0" (formula "29"))
                     (rule "polySimp_pullOutFactor1" (formula "29") (term "0"))
                     (rule "add_literals" (formula "29") (term "1,0"))
                     (rule "times_zero_1" (formula "29") (term "0"))
                     (rule "qeq_literals" (formula "29"))
                     (rule "true_left" (formula "29"))
                     (rule "applyEq" (formula "27") (term "0,1") (ifseqformula "29"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1"))
                     (rule "applyEq" (formula "31") (term "1") (ifseqformula "29"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "30"))
                     (rule "mul_literals" (formula "30") (term "1"))
                     (rule "inEqSimp_contradEq3" (formula "25") (term "0") (ifseqformula "1"))
                     (rule "times_zero_1" (formula "25") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "25") (term "0,0,0"))
                     (rule "qeq_literals" (formula "25") (term "0,0"))
                     (rule "concrete_and_2" (formula "25") (term "0"))
                     (rule "concrete_or_2" (formula "25"))
                     (rule "andLeft" (formula "25"))
                     (rule "andLeft" (formula "25"))
                     (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "26"))
                     (rule "polySimp_mulComm0" (formula "29") (term "0"))
                     (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "26"))
                     (rule "polySimp_mulComm0" (formula "30") (term "0"))
                     (rule "applyEq" (formula "27") (term "0") (ifseqformula "30"))
                     (rule "inEqSimp_homoInEq1" (formula "27"))
                     (rule "polySimp_addComm1" (formula "27") (term "0"))
                     (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0"))
                     (rule "add_literals" (formula "27") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "27") (term "1,0,0"))
                     (rule "add_zero_right" (formula "27") (term "0,0"))
                     (rule "applyEq" (formula "25") (term "0") (ifseqformula "30"))
                     (rule "inEqSimp_homoInEq0" (formula "25"))
                     (rule "polySimp_pullOutFactor1" (formula "25") (term "0"))
                     (rule "add_literals" (formula "25") (term "1,0"))
                     (rule "times_zero_1" (formula "25") (term "0"))
                     (rule "qeq_literals" (formula "25"))
                     (rule "true_left" (formula "25"))
                     (rule "applyEq" (formula "27") (term "1") (ifseqformula "25"))
                     (rule "applyEq" (formula "15") (term "0,1") (ifseqformula "25"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "26"))
                     (rule "mul_literals" (formula "26") (term "1"))
                     (rule "inEqSimp_strengthen0" (formula "6") (ifseqformula "34"))
                     (rule "inEqSimp_contradEq3" (formula "34") (ifseqformula "6"))
                     (rule "polySimp_mulAssoc" (formula "34") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "34") (term "0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "34") (term "1,0,0"))
                     (rule "polySimp_elimOne" (formula "34") (term "1,0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "34") (term "0,0"))
                     (rule "add_literals" (formula "34") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "34") (term "1,0,0"))
                     (rule "add_zero_right" (formula "34") (term "0,0"))
                     (rule "qeq_literals" (formula "34") (term "0"))
                     (rule "concrete_and_2" (formula "34"))
                     (rule "false_right" (formula "34"))
                     (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "6"))
                     (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "7") (term "0"))
                     (rule "polySimp_rightDist" (formula "7") (term "0,0,0"))
                     (rule "mul_literals" (formula "7") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
                     (rule "add_literals" (formula "7") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
                     (rule "add_literals" (formula "7") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "7") (term "1,0,0"))
                     (rule "add_zero_right" (formula "7") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                     (rule "mul_literals" (formula "7") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "7"))
                     (rule "leq_literals" (formula "10") (term "0"))
                     (rule "concrete_or_1" (formula "10"))
                     (rule "true_left" (formula "10"))
                     (rule "div_axiom" (formula "10") (term "1") (inst "quotient=quotient_5"))
                     (rule "polySimp_mulComm0" (formula "10") (term "0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "10") (term "0,2,1,1"))
                     (rule "polySimp_mulComm0" (formula "10") (term "0,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,1,1,1,1"))
                     (rule "inEqSimp_contradEq7" (formula "10") (term "0") (ifseqformula "7"))
                     (rule "times_zero_1" (formula "10") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "10") (term "0,0,0"))
                     (rule "leq_literals" (formula "10") (term "0,0"))
                     (rule "concrete_and_2" (formula "10") (term "0"))
                     (rule "concrete_or_2" (formula "10"))
                     (rule "andLeft" (formula "10"))
                     (rule "andLeft" (formula "10"))
                     (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "10"))
                     (rule "polySimp_mulComm0" (formula "14") (term "0"))
                     (rule "applyEq" (formula "11") (term "0") (ifseqformula "14"))
                     (rule "inEqSimp_homoInEq0" (formula "11"))
                     (rule "polySimp_pullOutFactor1" (formula "11") (term "0"))
                     (rule "add_literals" (formula "11") (term "1,0"))
                     (rule "times_zero_1" (formula "11") (term "0"))
                     (rule "qeq_literals" (formula "11"))
                     (rule "true_left" (formula "11"))
                     (rule "applyEq" (formula "11") (term "0,1") (ifseqformula "13"))
                     (rule "inEqSimp_homoInEq1" (formula "11") (term "1"))
                     (rule "polySimp_addComm1" (formula "11") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
                     (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "11") (term "0,0,1"))
                     (rule "applyEq" (formula "11") (term "0,2") (ifseqformula "13"))
                     (rule "inEqSimp_homoInEq1" (formula "11") (term "2"))
                     (rule "polySimp_addComm1" (formula "11") (term "0,2"))
                     (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,2"))
                     (rule "add_literals" (formula "11") (term "1,1,0,0,2"))
                     (rule "times_zero_1" (formula "11") (term "1,0,0,2"))
                     (rule "add_zero_right" (formula "11") (term "0,0,2"))
                     (rule "applyEq" (formula "12") (term "1") (ifseqformula "10"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "11") (term "0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "2"))
                     (rule "mul_literals" (formula "11") (term "1,2"))
                     (rule "inEqSimp_subsumption1" (formula "11") (term "1") (ifseqformula "7"))
                     (rule "leq_literals" (formula "11") (term "0,1"))
                     (rule "concrete_or_1" (formula "11") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "11") (term "2") (ifseqformula "7"))
                     (rule "qeq_literals" (formula "11") (term "0,2"))
                     (rule "concrete_and_2" (formula "11") (term "2"))
                     (rule "ifthenelse_concrete" (formula "11"))
                     (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "7"))
                     (rule "leq_literals" (formula "11") (term "0"))
                     (rule "concrete_or_1" (formula "11"))
                     (rule "true_left" (formula "11"))
                     (rule "jdiv_axiom" (formula "34") (term "0,0"))
                     (rule "eqSymm" (formula "1"))
                     (rule "applyEqRigid" (formula "1") (term "1,0") (ifseqformula "14"))
                     (rule "inEqSimp_subsumption1" (formula "1") (term "0,0") (ifseqformula "22"))
                     (rule "leq_literals" (formula "1") (term "0,0,0"))
                     (rule "concrete_or_1" (formula "1") (term "0,0"))
                     (rule "ifthenelse_true" (formula "1") (term "0"))
                     (rule "eqSymm" (formula "1"))
                     (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "1"))
                     (rule "polySimp_mulComm0" (formula "35") (term "0"))
                     (rule "close" (formula "35") (ifseqformula "16"))
                  )
               )
            )
         )
         (branch "Exceptional Post (gcdHelp)"
            (rule "inInt" (formula "7") (term "1,0,0,1,1,0,1,1,1,1,1"))
            (rule "concrete_and_3" (formula "7") (term "0,0,1,1,0,1,1,1,1,1"))
            (rule "translateJavaMod" (formula "7") (term "0,0,0,1,0,1,1,1,1,1"))
            (rule "translateJavaMod" (formula "7") (term "0,1,0,1,1,0,1,1,1,1,1"))
            (rule "translateJavaMod" (formula "7") (term "0,1,0,1,0,1,1,1,1,1"))
            (rule "translateJavaMod" (formula "7") (term "0,1,0,0,1,1,0,1,1,1,1,1"))
            (rule "translateJavaMod" (formula "7") (term "0,1,0,0,0,1,1,0,1,1,1,1,1"))
            (rule "simplifyUpdate2" (formula "8"))
            (rule "simplifyUpdate2" (formula "7"))
            (rule "simplifyUpdate2" (formula "7") (term "1"))
            (rule "andLeft" (formula "7"))
            (rule "simplifyUpdate2" (formula "7"))
            (rule "sequentialToParallel2" (formula "9"))
            (rule "simplifyUpdate3" (formula "9") (term "1,0"))
            (rule "sequentialToParallel2" (formula "8"))
            (rule "simplifyUpdate3" (formula "8") (term "1,0"))
            (rule "andLeft" (formula "8"))
            (rule "simplifyUpdate2" (formula "8"))
            (rule "simplifyUpdate2" (formula "9"))
            (rule "andLeft" (formula "8"))
            (rule "simplifyUpdate2" (formula "8"))
            (rule "andLeft" (formula "10"))
            (rule "simplifyUpdate2" (formula "11"))
            (rule "notLeft" (formula "8"))
            (rule "close" (formula "11") (ifseqformula "10"))
         )
         (branch "Pre (gcdHelp)"
            (rule "inInt" (formula "6") (term "1,1,1,1"))
            (rule "concrete_and_3" (formula "6") (term "1,1,1"))
            (rule "inInt" (formula "6") (term "1,1,1,1"))
            (rule "concrete_and_3" (formula "6") (term "1,1,1"))
            (rule "simplifyUpdate2" (formula "6"))
            (rule "simplifyUpdate2" (formula "6") (term "1"))
            (rule "applyOnRigidFormula" (formula "6"))
            (rule "simplifyUpdate2" (formula "6") (term "1"))
            (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "2"))
            (rule "concrete_and_3" (formula "6"))
            (rule "applyOnRigidFormula" (formula "6"))
            (rule "simplifyUpdate2" (formula "6") (term "0"))
            (rule "applyOnRigidFormula" (formula "6") (term "1"))
            (rule "simplifyUpdate1" (formula "6") (term "0,1"))
            (rule "simplifyUpdate1" (formula "6") (term "1,1"))
            (rule "applyOnPV" (formula "6") (term "0,1"))
            (rule "applyOnPV" (formula "6") (term "1,1"))
            (rule "applyOnRigidFormula" (formula "6") (term "0"))
            (rule "applyOnPV" (formula "6") (term "0,0"))
            (rule "simplifyUpdate1" (formula "6") (term "1,0"))
            (rule "inEqSimp_commuteGeq" (formula "6") (term "1"))
            (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "1"))
            (rule "concrete_and_3" (formula "6"))
            (rule "inEqSimp_geqRight" (formula "6"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "ifthenelse_split" (formula "2") (term "0"))
            (branch "a <= -1 TRUE"
               (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "2"))
               (rule "ifthenelse_true" (formula "1") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "3"))
               (rule "inEqSimp_homoInEq0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
               (rule "qeq_literals" (formula "1") (term "0"))
               (rule "concrete_and_2" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "a <= -1 FALSE"
               (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "7"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "close" (formula "7") (ifseqformula "1"))
            )
         )
      )
   )
   (branch "if x_1 false"
      (rule "false_to_not_true" (formula "1") (term "1"))
      (rule "simplifyUpdate2" (formula "4"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "applyOnRigidFormula" (formula "3"))
      (rule "simplifyUpdate1" (formula "3") (term "1"))
      (rule "applyOnPV" (formula "3") (term "0"))
      (rule "ifthenelse_concrete3" (formula "3"))
      (rule "boolean_not_equal_2" (formula "3") (term "1"))
      (rule "concrete_or_4" (formula "3"))
      (rule "inEqSimp_leqRight" (formula "3"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (builtin "CloseAfterMerge" (formula "4") (newnames "abstrPred_geq_AND_abstrPred_or,abstrPred_geq_AND_abstrPred_or_0") (mergeNode "148"))
   )
)
(branch "if x false"
   (rule "false_to_not_true" (formula "1") (term "1"))
   (rule "simplifyUpdate2" (formula "4"))
   (rule "simplifyUpdate2" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "applyOnRigidFormula" (formula "3"))
   (rule "simplifyUpdate1" (formula "3") (term "1"))
   (rule "applyOnPV" (formula "3") (term "0"))
   (rule "ifthenelse_concrete3" (formula "3"))
   (rule "boolean_not_equal_2" (formula "3") (term "1"))
   (rule "concrete_or_4" (formula "3"))
   (rule "inEqSimp_leqRight" (formula "3"))
   (rule "mul_literals" (formula "1") (term "1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "add_zero_left" (formula "1") (term "0"))
   (builtin "CloseAfterMerge" (formula "4") (mergeNode "93"))
)
)

}
