//--------------- loops ------------------------------------------------------//
\schemaVariables {
 \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
 \formula post;
 \program LeftHandSide #lhs, #lhs1;
 \program SimpleExpression #se;
 \program Statement #s;
 \program[list] Statement #slist, #slist1, #slist2, #slist3;
 \program Label #innerLabel, #outerLabel;
 \program Expression #e, #e0, #e1, #e2 ;
 \program NonSimpleExpression #nse;
 \program ForLoop #forloop ;
 \program ProgramMethod #pm ; 
 \program Type #t, #t2;
 \program Variable #v, #v0, #v1, #a;
 \program NonStringLiteral #lit ;
 \program ArrayLength #length ;
 \program Label #lb, #lb1;
 \program[list] Ccatch #cs ;
}

\rules(programRules:Java) {

    // Abrupt completion catching rules

    execReturn {
        \find (
            \modality{#allmodal}{.. 
                exec { return; #slist }
                ccat ( \Return ) { #slist1 } 
            ...}\endmodality(post))
        \replacewith (\modality{#allmodal}{..
            { #slist1 } 
        ...}\endmodality(post))
        \heuristics(simplify_prog)
    };
    
    // "Standard" exception rules (cf. try statement)
    
    execCatchThrow { 
       \find (\modality{#allmodal}{.. exec { throw #se; #slist }
                  ccat ( #t #v0 ) { #slist1 } ...}\endmodality(post))
       \replacewith (\modality{#allmodal}{.. if ( #se == null ) {
                               exec { throw new java.lang.NullPointerException (); }
                               ccat ( #t #v0 ) { #slist1 }
                         } else if ( #se instanceof #t ) {
                               #t #v0;
                               #v0 = (#t) #se;
                               #slist1
                         } else {
                               throw #se;
                         } ...}\endmodality(post))
       \heuristics(simplify_prog)
       \displayname "execCatchThrow"
     };
   
    execMultipleCatchThrow { 
       \find (\modality{#allmodal}{.. exec { throw #se; #slist }
                  ccat ( #t #v0 ) { #slist1 }
                  ccat ( #t2 #v1 ) { #slist3 }
                  ccat #cs ...}\endmodality(post))
       \replacewith (\modality{#allmodal}{.. if ( #se == null ) {
                              exec { throw new java.lang.NullPointerException (); }
                              ccat ( #t #v0 ) { #slist1 }
                              ccat ( #t2 #v1 ) { #slist3 }
                              ccat #cs
                         } else if ( #se instanceof #t ) {
                              #t #v0;
                              #v0 = (#t) #se;
                              #slist1
                         } else {
                              exec { throw #se; }
                              ccat ( #t2 #v1 ) { #slist3 }
                              ccat #cs
                         } ...}\endmodality(post))
       \heuristics(simplify_prog)
       \displayname "execCatchThrow"
     };
     
     // Rules for eliminating clauses that don't match the present behavior
   
    execThrowEliminateReturn { 
       \find (\modality{#allmodal}{..
           exec { throw #se; #slist }
           ccat ( \Return ) { #slist1 }
           ccat #cs
        ...}\endmodality(post))
        
       \replacewith (\modality{#allmodal}{..  
           exec { throw #se; #slist }
           ccat #cs
       ...}\endmodality(post))
       
       \heuristics(simplify_prog)
       \displayname "execEliminateNonMatching"
     };

}