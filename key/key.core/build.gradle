plugins {
    id("ca.coglinc.javacc") version("2.4.0")
    id("antlr")
}

repositories { jcenter() }

configurations { antlr4 }


dependencies {
    compile project(":key.util")
    compile name: 'recoderKey'
    //compile name: 'javacc'
    //compile name: 'antlr'
    compile 'net.java.dev.javacc:javacc:4.0'
    compile "org.antlr:antlr-runtime:3.5.2"
    compile group: 'antlr', name: 'antlr', version: '2.7.7'

    compile "org.jtwig:jtwig-core:5.87.0.RELEASE"

    //antlr name: 'antlr'
    //javacc name: 'javacc'
    javacc 'net.java.dev.javacc:javacc:4.0'
    antlr "org.antlr:antlr:3.5.2"   // use ANTLR version 3

    antlr4 "org.antlr:antlr4:4.7.1"
    compile "org.antlr:antlr4:4.7.1"
    // compile "org.antlr:antlr4-runtime:4.7.1"
}

def javaCCOutputDir = file("${buildDir}/generated-src/javacc")
def javaCCOutputDirMain = file("$javaCCOutputDir/main")
sourceSets.main.java.srcDirs(javaCCOutputDirMain)

generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ["-visitor", "-listener", "-long-messages"]
}

generateTestGrammarSource {
    maxHeapSize = "64m"
    arguments += ["-visitor", "-listener", "-long-messages"]
}

compileJavacc {
    outputDirectory = javaCCOutputDirMain
    inputDirectory = file("src/main/javacc")
    doLast {
        copy {
            from("src/main/javacc/de/uka/ilkd/key/parser/schemajava/Token.java")
            into "$javaCCOutputDirMain/de/uka/ilkd/key/parser/schemajava/"
        }
        copy {
            from("src/main/javacc/de/uka/ilkd/key/parser/proofjava/Token.java")
            into "$javaCCOutputDirMain/de/uka/ilkd/key/parser/proofjava/"
        }
    }
}

test {
    filter {
        // use testProofRules or testRunAllProofs, avoid double execution on jenkins
        excludeTestsMatching "ProveRulesTest"
        excludeTestsMatching "RunAllProofsTestSuite"
        excludeTestsMatching "RunAllProofsInfFlow"
        excludeTestsMatching "RunAllProofsTestWithComputeCostProfiling"
        excludeTestsMatching "RunAllProofsFunctional"
        excludeTestsMatching "TestParallelParsing"
        excludeTestsMatching "TestCvc4"
    }
    useJUnit {
        excludeCategories 'org.key_project.util.testcategories.Performance'
        excludeCategories 'org.key_project.util.testcategories.Interactive'
    }
}

// Should actually be named "testProveRules" ... as rules are proved, and not ProofRules tested
task testProofRules(type: Test) {
    group "verification"
    filter { includeTestsMatching "ProveRulesTest" }
}

task testRunAllProofs(type: Test) {
    group "verification"
    filter {
        includeTestsMatching "RunAllProofsTestSuite"
        includeTestsMatching "RunAllProofsInfFlow"
        includeTestsMatching "RunAllProofsFunctional"
    }
}

task generateVersionFiles() {
    def outputFolder = file("build/resources/main/de/uka/ilkd/key/util")
    def sha1 = new File(outputFolder, "sha1")
    def branch = new File(outputFolder, "branch")
    def versionf = new File(outputFolder, "version")

    outputs.files sha1, branch, versionf

    def gitRevision = gitRevParse('--short HEAD')
    def gitBranch = gitRevParse('--abbrev-ref HEAD')

    doLast {
        sha1.text = gitRevision
        branch.text = gitBranch
        versionf.text = rootProject.version
    }
}
processResources.dependsOn generateVersionFiles

def antlr4Output = "$projectDir/build/generated-src/antlr4/main/de/uka/ilkd/key/nparser"
task runAntlr4(type: JavaExec) {
    //see incremental task api, prevents rerun if nothing has changed.
    inputs.dir "src/main/antlr4/"
    outputs.dir "$projectDir/build/generated/antlr4/main/"
    classpath = configurations.antlr4
    main = "org.antlr.v4.Tool"
    args = ["-visitor",
            "-Xexact-output-dir", "-o", antlr4Output,
            "-package", "de.uka.ilkd.key.nparser",
            "src/main/antlr4/KeYLexer.g4", "src/main/antlr4/KeYParser.g4"]
    doFirst {
        file(antlr4Output).mkdirs()
        println("create $antlr4Output")
    }
}
sourceSets.main.java.srcDir("$projectDir/build/generated-src/antlr4/main/")
compileJava.dependsOn runAntlr4


//check.dependsOn << testProofRules << testRunAllProofs

