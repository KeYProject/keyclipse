plugins {
    id("ca.coglinc.javacc") version("2.4.0")
    id("antlr")
}


dependencies {
    compile project(":key.util")
    compile name: 'recoderKey'
    //compile name: 'javacc'
    //compile name: 'antlr'
    compile 'net.java.dev.javacc:javacc:4.0'
    compile "org.antlr:antlr-runtime:3.5.2"
    compile group: 'antlr', name: 'antlr', version: '2.7.7'

    //antlr name: 'antlr'
    //javacc name: 'javacc'
    javacc 'net.java.dev.javacc:javacc:4.0'
    antlr "org.antlr:antlr:3.5.2"   // use ANTLR version 3
}

def javaCCOutputDir = file("${buildDir}/generated-src/javacc")
def javaCCOutputDirMain = file("$javaCCOutputDir/main")
sourceSets.main.java.srcDirs(javaCCOutputDirMain)

generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ["-visitor", "-listener", "-long-messages"]
}

generateTestGrammarSource {
    maxHeapSize = "64m"
    arguments += ["-visitor", "-listener", "-long-messages"]
}

compileJavacc {
    outputDirectory = javaCCOutputDirMain
    inputDirectory = file("src/main/javacc")
    doLast {
        copy {
            from("src/main/javacc/de/uka/ilkd/key/parser/schemajava/Token.java")
            into "$javaCCOutputDirMain/de/uka/ilkd/key/parser/schemajava/"
        }
        copy {
            from("src/main/javacc/de/uka/ilkd/key/parser/proofjava/Token.java")
            into "$javaCCOutputDirMain/de/uka/ilkd/key/parser/proofjava/"
        }
    }
}

test {
    filter {
        // use testProofRules or testRunAllProofs, avoid double execution on jenkins
        excludeTestsMatching "ProveRulesTest"
        excludeTestsMatching "RunAllProofsTestSuite"
        excludeTestsMatching "RunAllProofsInfFlow"
        excludeTestsMatching "RunAllProofsTestWithComputeCostProfiling"
        excludeTestsMatching "RunAllProofsFunctional"
    }
    useJUnit {
            excludeCategories 'org.key_project.util.testcategories.Performance'
            excludeCategories 'org.key_project.util.testcategories.Interactive'
    }
}

task testProofRules(type: Test) {
    group "verification"
    filter { includeTestsMatching "ProveRulesTest" }
}

task testRunAllProofs(type: Test) {
    group "verification"
    filter { 
        includeTestsMatching "RunAllProofsTestSuite"
        includeTestsMatching "RunAllProofsInfFlow"
        includeTestsMatching "RunAllProofsTestWithComputeCostProfiling"
        includeTestsMatching "RunAllProofsFunctional"
    }
}

//check.dependsOn << testProofRules << testRunAllProofs
