\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Oct 11 11:01:14 CEST 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_RESTRICTED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=200
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\proofObligation "#Proof Obligation Settings
#Tue Oct 11 11:01:14 CEST 2016
name=schiffl_lemma_1
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proofScript "
macro split-prop;
rule 'seqPermDefLeft';
rule 'andLeft';
rule 'exLeft';
macro split-prop;
cut 'f_x = f_y';
rule  seqNPermRange;
rule seqNPermDefLeft;
#instantiate var='iv' with='f_x' occ=1;
#rule impLeft;
#tryclose branch;
#rule andLeft;
#rule andLeft;
instantiate var=iv with='f_x' occ=2;
rule impLeft;
tryclose branch;
rule exLeft;
rule andLeft;
rule andLeft;
instantiate hide var='v_r' with='seqSwap(s_0,f_x,jv_0)';
# in the following r refers to this instantion
rule andRight;
rule andRight;
rule andRight;
rule andRight;
rule lenOfSwap;
# established: r is of correct length
tryclose branch;
rule seqNPermSwapNPerm;
instantiate hide var='iv' with='f_x' occ=3;
instantiate hide var='jv' with='jv_0';
rule impLeft;
#rule  seqNPermRange;
tryclose branch;
tryclose branch;
# established: r is permutation
rule allRight;
rule impRight;
rule andLeft;
rule getOfSwap;
rule ifthenelse_negated;
rule ifthenelse_split occ=0;
macro split-prop;
rule ifthenelse_split occ=0;
instantiate hide var=iv with='f_x' occ=3;
rule impLeft;
tryclose branch;
rule hide_left formula='\forall int iv;
   (   0 <= iv & iv < s_0.length
    -> \exists int jv; (0 <= jv & jv < s_0.length & s_0[jv] = iv))';
rule hide_left formula='seqNPerm(s_0)';
rule hide_left formula='seqPerm(f_s, f_t)';
instantiate var='iv' with='f_x';
rule impLeft;
tryclose branch;
rule andLeft;
rule andLeft;
#rule ineffectiveCast;
#rule ineffectiveCast occ=0;
instantiate hide var='iv' with='jv_0';
rule impLeft;
tryclose branch;
rule andLeft;
rule andLeft;
tryclose branch;
rule hide_left formula='int::instance(s_0[f_x]) = TRUE';
rule castAdd formula='any::seqGet(s_0, jv_0) = f_x' occ=0;
#rule castAdd formula='s_0[jv_0] = (int)(s_0[f_x])' occ=0;
tryclose branch;
rule ifthenelse_split;
rule hide_left formula='\forall int iv;
   (   0 <= iv & iv < s_0.length
    -> \exists int jv; (0 <= jv & jv < s_0.length & s_0[jv] = iv))';
#instantiate hide var='iv' with='v_iv_0' occ=2;
instantiate var='iv' with='v_iv_0' occ=2;
rule impLeft;
tryclose branch;
rule hide_left formula='seqNPerm(s_0)';
rule hide_left formula='seqPerm(f_s, f_t)';
instantiate hide var='iv' with='jv_0';
rule impLeft;
tryclose branch;
rule andLeft;
rule andLeft;
rule castAdd formula='any::seqGet(s_0, jv_0) = f_x' occ=0;
tryclose branch;
instantiate hide var='iv' with='v_iv_0' occ=3;
rule impLeft;
tryclose branch;
tryclose branch;
tryclose branch;
#  established:  witness property of r
rule getOfSwap;
rule ifthenelse_negated;
rule ifthenelse_split occ=0;
rule andLeft;
rule andLeft;
rule andLeft;
rule ifthenelse_split occ=0;
tryclose branch;
tryclose branch;
tryclose branch;
# established: r fixes f_x
rule getOfSwap;
rule ifthenelse_negated;
rule ifthenelse_split occ=0;
rule andLeft;
rule andLeft;
rule andLeft;
rule ifthenelse_split occ=0;
tryclose branch;
tryclose branch;
tryclose branch;
# established: r fixes f_y
# from now on f_x != f_y
rule seqNPermInjective;
instantiate hide var=iv with='f_x';
instantiate hide var=jv with='f_y';
cut '(int)s_0[f_x] = (int)s_0[f_y]'
rule impLeft;
tryclose branch;
rule hide_left formula='     leq(Z(0(#)), f_x)
    & lt(f_x, seqLen(s_0))
    & leq(Z(0(#)), f_y)
    & lt(f_y, seqLen(s_0))
    & int::seqGet(s_0, f_x) = int::seqGet(s_0, f_y)
 -> f_x = f_y';
cut 's_0[f_x] = f_x';
rule seqNPermDefLeft;
instantiate hide var=iv with='f_y';
rule impLeft;
tryclose branch;
rule exLeft;
rule andLeft;
rule andLeft;
instantiate hide var=v_r with='seqSwap(s_0,f_y,jv_1)';
# in the following r1 refers to this instantion
rule andRight;
rule andRight;
rule andRight;
rule andRight;
tryclose branch;
# established: r1 is of the correct length
rule seqNPermSwapNPerm;
instantiate hide var=iv with='f_y';
instantiate hide var=jv with='jv_1';
tryclose branch;
# established: r1 is permutation
rule allRight;
rule impRight;
rule andLeft;
instantiate var=iv with='v_iv_1';
rule impLeft;
tryclose branch;
rule seqNPermRange;
instantiate var='iv' with='v_iv_1' occ=1;
rule impLeft;
tryclose branch;
rule andLeft;
rule andLeft;
instantiate hide var=iv with='jv_1' occ=1;
rule impLeft;
tryclose branch;
rule andLeft;
rule andLeft;
rule castAdd formula='s_0[jv_1] = f_y' occ=0;
rule getOfSwap;
rule ifthenelse_negated;
rule ifthenelse_split occ=0;
rule andLeft;
rule andLeft;
rule andLeft;
rule ifthenelse_split occ=0;
instantiate var=iv with='f_y' occ=1;
rule impLeft;
tryclose branch;
tryclose branch;
rule ifthenelse_split occ=0;
tryclose branch;
tryclose branch;
tryclose branch;
# established: witness property for r1
rule getOfSwap;
rule ifthenelse_negated;
rule ifthenelse_split occ=0;
tryclose branch;
tryclose branch;
# established: r1 fixes f_x
rule getOfSwap;
rule ifthenelse_negated;
rule ifthenelse_split occ=0;
tryclose branch;
tryclose branch;
# established: r1 fixes f_y
# from now on  f_x != f_y and s_0[f_x]!= f_x
cut  's_0[f_y] = f_y';
rule seqNPermDefLeft;
instantiate hide var=iv with='f_x';
rule impLeft;
tryclose branch;
rule exLeft;
rule andLeft;
rule andLeft;
instantiate hide var=v_r with='seqSwap(s_0,f_x,jv_2)';
# in the following r2 refers to this instantion
rule andRight;
rule andRight;
rule andRight;
rule andRight;
tryclose branch;
# established: r2 is of the correct length
rule seqNPermSwapNPerm;
instantiate hide var=iv with='f_x';
instantiate hide var=jv with='jv_2';
rule impLeft;
tryclose branch;
tryclose branch;
# established: r2 is permutation
rule allRight;
rule impRight;
rule andLeft;
instantiate var=iv with='v_iv_2';
rule impLeft;
tryclose branch;
rule seqNPermRange;
instantiate var='iv' with='v_iv_2' occ=1;
rule impLeft;
tryclose branch;
rule andLeft;
rule andLeft;
instantiate hide var=iv with='jv_2' occ=1;
rule impLeft;
tryclose branch;
rule andLeft;
rule andLeft;
rule castAdd formula='s_0[jv_2] = f_x' occ=0;
rule getOfSwap;
rule ifthenelse_negated;
rule ifthenelse_split occ=0;
rule andLeft;
rule andLeft;
rule andLeft;
rule ifthenelse_split occ=0;
instantiate var=iv with='f_x' occ=1;
rule impLeft;
tryclose branch;
tryclose branch;
rule ifthenelse_split occ=0;
tryclose branch;
tryclose branch;
tryclose branch;
# established: witness property for r2
rule getOfSwap;
rule ifthenelse_negated;
rule ifthenelse_split occ=0;
tryclose branch;
tryclose branch;
# established: r2 fixes f_x
rule getOfSwap;
rule ifthenelse_negated;
rule ifthenelse_split occ=0;
tryclose branch;
tryclose branch;
# established: r2 fixes f_y
# from now on  f_x != f_y and s_0[f_x]!= f_x and  s_0[f_y]!= f_y
cut 's_0[f_x]=f_y';
rule seqNPermDefLeft;
instantiate hide var=iv with='f_x';
rule impLeft;
tryclose branch;
rule exLeft;
rule andLeft;
rule andLeft;
instantiate hide var=v_r with='seqSwap(seqSwap(s_0,jv_3,f_x),jv_3,f_y)';
# in the following r3 refers to this instantion
rule andRight;
rule andRight;
rule andRight;
rule andRight;
tryclose branch;
# established: r3 is of the correct length
rule seqNPermSwapNPerm;
instantiate hide var=iv with='jv_3';
instantiate hide var=jv with='f_x';
rule impLeft;
tryclose branch;
rule seqNPermSwapNPerm formula='seqNPerm(seqSwap(s_0, jv_3, f_x))';
instantiate hide var=iv with='jv_3';
instantiate hide var=jv with='f_y';
rule impLeft;
tryclose branch;
tryclose branch;
# established: r3 is permutation
rule allRight;
rule impRight;
rule andLeft;
# start marker
instantiate var=iv with='v_iv_3';
rule impLeft;
tryclose branch;
rule seqNPermRange;
instantiate hide var=iv with='jv_3' occ=1;
rule impLeft;
tryclose branch;
rule andLeft;
rule andLeft;
rule castAdd formula='s_0[jv_3] = f_x' occ=0;
# end marker
rule getOfSwap;
rule ifthenelse_negated;
rule ifthenelse_split occ=0;
rule andLeft;
rule andLeft;
rule andLeft;
rule ifthenelse_split occ=0;
rule getOfSwap;
rule ifthenelse_negated;
rule ifthenelse_split occ=0;
rule andLeft;
rule andLeft;
rule andLeft;
rule ifthenelse_split occ=0;
tryclose branch;
# established: case 1 in the unravelling of r3
rule ifthenelse_split occ=0;
tryclose branch;
# established: case 2 in the unravelling of r3
# there are 9 cases in total, I lost trackat this point
instantiate var=iv  with='f_x';
rule impLeft;
tryclose branch;
instantiate hide var=iv  with='f_y';
rule impLeft;
tryclose branch;
rule seqNPermRange;
instantiate hide var=iv with='f_x' occ=1;
rule impLeft;
tryclose branch;
rule andLeft;
rule andLeft;
rule castAdd formula='s_0[f_x] = f_y' occ=0;
tryclose branch;
tryclose branch;
rule ifthenelse_split;
rule getOfSwap;
rule ifthenelse_negated;
rule ifthenelse_split occ=0;
rule ifthenelse_split occ=0;
rule seqNPermRange;
instantiate hide var=iv with='f_x' occ=1;
rule impLeft;
tryclose branch;
rule andLeft occ=0;
rule andLeft occ=0;
rule andLeft occ=0;
rule andLeft;
rule andLeft;
rule castAdd formula='s_0[f_x] = f_y' occ=0;
tryclose branch;
tryclose branch;
tryclose branch;
rule getOfSwap;
rule ifthenelse_negated;
rule ifthenelse_split occ=0;
rule ifthenelse_split occ=0;
tryclose branch;
rule ifthenelse_split occ=0;
rule seqNPermRange;
instantiate hide var=iv with='f_x' occ=1;
rule impLeft;
tryclose branch;
rule andLeft occ=0;
rule andLeft occ=0;
rule andLeft occ=0;
rule andLeft;
rule andLeft;
rule castAdd formula='s_0[f_x] = f_y' occ=0;
tryclose branch;
rule andLeft;
rule andLeft;
rule andLeft;
rule seqNPermRange;
instantiate hide var=iv with='f_x' occ=1;
rule impLeft;
tryclose branch;
rule andLeft;
rule andLeft;
rule castAdd formula='s_0[f_x] = f_y' occ=0;
tryclose branch;
tryclose branch;
tryclose branch;
# established: witness property for r3
rule getOfSwap;
rule ifthenelse_negated;
rule ifthenelse_split occ=0;
tryclose branch;
rule getOfSwap;
rule ifthenelse_negated;
rule ifthenelse_split occ=0;
tryclose branch;
tryclose branch;
# established: r3 fixes f_x
rule getOfSwap;
tryclose branch;
# established: r3 fixes f_y
# from now on  f_x != f_y and s_0[f_x]!= f_x and  
# s_0[f_y]!= f_y  and s_0[f_x]!= f_y
cut 'int::seqGet(s_0, f_y)=f_x';
rule seqNPermDefLeft;
instantiate hide var=iv with='f_y';
rule impLeft;
tryclose branch;
rule exLeft;
rule andLeft;
rule andLeft;
instantiate hide var=v_r with='seqSwap(seqSwap(s_0,jv_4,f_y),jv_4,f_x)';
# in the following r4 refers to this instantion
rule andRight;
rule andRight;
rule andRight;
rule andRight;
tryclose branch;
# established: r4 is of the correct length
rule seqNPermSwapNPerm;
instantiate hide var=iv with='jv_4';
instantiate hide var=jv with='f_y';
rule impLeft;
tryclose branch;
rule seqNPermSwapNPerm formula='seqNPerm(seqSwap(s_0,jv_4,f_y))';
instantiate hide var=iv with='jv_4';
instantiate hide var=jv with='f_x';
rule impLeft;
tryclose branch;
tryclose branch;
# established: r4 is permutation
rule allRight;
rule impRight;
rule andLeft;
# start marker
instantiate var=iv with='v_iv_4';
rule impLeft;
tryclose branch;
instantiate var=iv with='f_x';
rule impLeft;
tryclose branch;
instantiate var=iv with='f_y';
rule impLeft;
tryclose branch;
# end marker
rule getOfSwap;
rule ifthenelse_negated;
rule ifthenelse_split occ=0;
rule andLeft;
rule andLeft;
rule andLeft;
rule ifthenelse_split occ=0;
rule getOfSwap;
rule ifthenelse_negated;
rule ifthenelse_split occ=0;
rule andLeft;
rule andLeft;
rule andLeft;
rule ifthenelse_split occ=0;
tryclose branch;
rule ifthenelse_split occ=0;
tryclose branch;
tryclose branch;
tryclose branch;
rule seqNPermRange;
instantiate hide var=iv with='jv_4' occ=1;
rule impLeft;
tryclose branch;
rule andLeft;
rule andLeft;
rule castAdd formula='s_0[jv_4] = f_y' occ=0;
tryclose branch;
tryclose branch;
rule ifthenelse_split occ=0;
rule seqNPermRange;
instantiate hide var=iv with='jv_4' occ=1;
rule impLeft;
tryclose branch;
rule andLeft;
rule andLeft;
rule castAdd formula='s_0[jv_4] = f_y' occ=0;
tryclose branch;
rule getOfSwap;
rule ifthenelse_negated;
rule ifthenelse_split occ=0;
rule andLeft;
rule andLeft;
rule andLeft;
rule ifthenelse_split occ=0;
tryclose branch;
rule ifthenelse_split occ=0;
tryclose branch;
rule seqNPermRange;
instantiate hide var=iv with='jv_4' occ=1;
rule impLeft;
tryclose branch;
rule andLeft;
rule andLeft;
rule castAdd formula='s_0[jv_4] = f_y' occ=0;
tryclose branch;
rule seqNPermRange;
instantiate hide var=iv with='jv_4' occ=1;
rule impLeft;
tryclose branch;
rule andLeft;
rule andLeft;
rule castAdd formula='s_0[jv_4] = f_y' occ=0;
tryclose branch;
rule seqNPermRange;
instantiate hide var=iv with='jv_4' occ=1;
rule impLeft;
tryclose branch;
rule andLeft;
rule andLeft;
rule castAdd formula='s_0[jv_4] = f_y' occ=0;
tryclose branch;
tryclose branch;
# established: witness property for r4
rule getOfSwap occ=0;
rule ifthenelse_negated;
rule ifthenelse_split occ=0;
rule andLeft;
rule andLeft;
rule andLeft;
rule ifthenelse_split occ=0;
tryclose branch;
rule ifthenelse_split occ=0;
tryclose branch;
rule getOfSwap occ=0;
rule ifthenelse_negated;
rule ifthenelse_split occ=0;
rule andLeft;
rule andLeft;
rule andLeft;
rule ifthenelse_split occ=0;
rule seqNPermRange;
instantiate hide var=iv with='f_y' occ=1;
rule impLeft;
tryclose branch;
rule andLeft;
rule andLeft;
rule castAdd formula='s_0[f_y] = f_x' occ=0;
tryclose branch;
tryclose branch;
tryclose branch;
tryclose branch;
rule hide_right formula='seqSwap(s_0, jv_4, f_y)[f_x] = f_x';
tryclose branch;
# established: r4 fixes f_x
rule getOfSwap;
tryclose branch;
# established: r4 fixes f_y
# from now on  f_x != f_y and s_0[f_x]!= f_x and  
# s_0[f_y]!= f_y  and s_0[f_x]!= f_y and  s_0[f_y]!=f_x;
# preliminary deductions
instantiate var=iv with='f_x';
rule impLeft;
tryclose branch;
instantiate var=iv with='f_y';
rule impLeft;
tryclose branch;
rule seqNPermDefLeft;
instantiate  var=iv with='f_y';
rule impLeft;
tryclose branch;
rule exLeft;
rule andLeft;
rule andLeft;
instantiate hide  var=iv with='f_x';
rule impLeft;
tryclose branch;
rule exLeft;
rule andLeft;
rule andLeft;
rule seqNPermRange;
instantiate var=iv with='jv_5' occ=1;
rule impLeft;
tryclose branch;
rule andLeft;
rule andLeft;
rule castAdd formula='s_0[jv_5] = f_y' occ=0;
instantiate hide var=iv with='jv_6' occ=1;
rule impLeft;
tryclose branch;
rule andLeft;
rule andLeft;
rule castAdd formula='s_0[jv_6] = f_x' occ=0;
instantiate hide var='v_r' with='seqSwap(seqSwap(s_0,f_x,jv_6),f_y,jv_5)';
# in the following r5 refers to this instantion
rule andRight;
rule andRight;
rule andRight;
rule andRight;
tryclose branch;
# established: r5 is of the correct length
rule seqNPermSwapNPerm;
instantiate hide var=iv with='f_x';
instantiate hide var=jv with='jv_6';
rule impLeft;
tryclose branch;
rule seqNPermSwapNPerm formula='seqNPerm(seqSwap(s_0,f_x,jv_6))';
instantiate hide var=iv with='f_y';
instantiate hide var=jv with='jv_5';
rule impLeft;
tryclose branch;
tryclose branch;
# established: r5 is permutation
rule allRight;
rule impRight;
instantiate var=iv with='v_iv_5';
rule impLeft;
tryclose branch;
rule getOfSwap occ=0;
rule ifthenelse_negated;
rule ifthenelse_split occ=0;
tryclose branch;
rule andLeft occ=0;
rule andLeft occ=0;
rule andLeft occ=0;
rule andLeft occ=0;
rule ifthenelse_split occ=0;
rule getOfSwap occ=0;
rule ifthenelse_negated;
rule ifthenelse_split occ=0;
tryclose branch;
tryclose branch;
rule ifthenelse_split occ=0;
tryclose branch;
rule getOfSwap occ=0;
rule ifthenelse_negated;
rule ifthenelse_split occ=0;
tryclose branch;
tryclose branch;
rule getOfSwap occ=0;
rule ifthenelse_negated;
rule ifthenelse_split occ=0;
tryclose branch;
rule ifthenelse_split occ=0;
tryclose branch;
rule ifthenelse_split occ=0;
tryclose branch;
tryclose branch;
tryclose branch;
tryclose branch;
# established: witness property for r5
rule seqNPermRange;
instantiate hide var=iv with='jv_6' occ=1;
rule impLeft;
tryclose branch;
rule andLeft;
rule andLeft;
rule seqNPermRange;
instantiate hide var=iv with='f_y' occ=1;
rule impLeft;
tryclose branch;
rule andLeft;
rule andLeft;
rule castAdd formula='s_0[f_y] = f_y' occ=0;
tryclose branch;
rule seqNPermRange;
instantiate hide var=iv with='f_x' occ=1;
rule impLeft;
tryclose branch;
rule andLeft;
rule andLeft;
rule castAdd formula='s_0[f_x] = f_y' occ=0;
tryclose branch;
rule castAdd formula='s_0[f_x] = f_x' occ=0;
tryclose branch;
rule getOfSwap occ=0;
rule ifthenelse_negated;
rule ifthenelse_split occ=0;
rule andLeft;
rule andLeft;
rule andLeft;
rule ifthenelse_split occ=0;
tryclose branch;
rule ifthenelse_split occ=0;
tryclose branch;
rule getOfSwap occ=0;
rule ifthenelse_negated;
rule ifthenelse_split occ=0;
rule andLeft;
rule andLeft;
rule andLeft;
rule ifthenelse_split occ=0;
rule castAdd formula='s_0[jv_6] = f_x' occ=0;
tryclose branch;
rule ifthenelse_split occ=0;
tryclose branch;
tryclose branch;
tryclose branch;
tryclose branch;
# established: r5 fixes f_x
rule seqNPermRange;
instantiate hide var=iv with='f_x' occ=1;
rule impLeft;
tryclose branch;
rule andLeft;
rule andLeft;
rule castAdd formula='s_0[f_x] = f_x' occ=0;
rule castAdd formula='s_0[f_x] = f_y' occ=0;
rule seqNPermRange;
instantiate hide var=iv with='f_y' occ=1;
rule impLeft;
tryclose branch;
rule andLeft;
rule andLeft;
rule castAdd formula='s_0[f_y] = f_y' occ=0;
rule getOfSwap;
rule ifthenelse_negated;
rule ifthenelse_split occ=0;
rule andLeft;
rule andLeft;
rule andLeft;
rule ifthenelse_split occ=0;
rule getOfSwap;
rule ifthenelse_negated;
rule ifthenelse_split occ=0;
rule andLeft;
rule andLeft;
rule andLeft;
rule ifthenelse_split occ=0;
rule castAdd formula='s_0[jv_6] = f_y' occ=0;
tryclose branch;
rule ifthenelse_split occ=0;
rule castAdd formula='s_0[f_x] = f_y' occ=0;
tryclose branch;
rule castAdd formula='s_0[jv_5] = f_y' occ=0;
tryclose branch;
tryclose branch;
tryclose branch;
tryclose branch;
# established: r5 fixes f_y
"

