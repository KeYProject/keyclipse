//--------------- loops ------------------------------------------------------//
\schemaVariables {
 \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
 \formula post;
 \program LeftHandSide #lhs;
 \program SimpleExpression #se;
 \program Statement #s;
 \program[list] Statement #slist;
 \program Label #innerLabel, #outerLabel;
 \program Expression #e, #e0, #e1, #e2 ;
 \program NonSimpleExpression #nse;
 \program ForLoop #forloop ;
 \program ProgramMethod #pm ; 
 \program Type #t;
 \program Variable #v, #a;
 \program NonStringLiteral #lit ;
 \program ArrayLength #length ;
}

\rules(programRules:Java) {
  // Loop Scope Invariant-related rules
  /*emptyIndexedLoopScope {
      \find        (\modality{#allmodal}{.. loop-scope(#lhs) {} ...}\endmodality(post))
      \replacewith (\modality{#allmodal}{..  #lhs = true; ...}\endmodality(post))
      \heuristics(simplify_prog)
  };*/
  
  emptyIndexedLoopScope {
      \find        (\modality{#allmodal}{.. loop-scope(#lhs) {} ...}\endmodality(post))
      \closegoal
      \heuristics(closure)
  };

  unlabeledContinueIndexedLoopScope {
      \find        (\modality{#allmodal}{.. loop-scope(#lhs) { continue; #slist } ...}\endmodality(post))
      \replacewith (\modality{#allmodal}{  #lhs = false; }\endmodality(post))
      \heuristics(simplify_prog)
  };

  throwIndexedLoopScope {
      \find        (\modality{#allmodal}{.. loop-scope(#lhs) { throw #se; #slist } ...}\endmodality(post))
      \replacewith (\modality{#allmodal}{..  #lhs = true; throw #se; ...}\endmodality(post))
      \heuristics(simplify_prog)
  };

  returnIndexedLoopScope {
      \find        (\modality{#allmodal}{.. loop-scope(#lhs) { return #se; #slist } ...}\endmodality(post))
      \replacewith (\modality{#allmodal}{..  #lhs = true; return #se; ...}\endmodality(post))
      \heuristics(simplify_prog)
  };

  emptyReturnIndexedLoopScope {
      \find        (\modality{#allmodal}{.. loop-scope(#lhs) { return; #slist } ...}\endmodality(post))
      \replacewith (\modality{#allmodal}{..  #lhs = true; return; ...}\endmodality(post))
      \heuristics(simplify_prog)
  };

  unlabeledBreakIndexedLoopScope {
      \find        (\modality{#allmodal}{.. loop-scope(#lhs) { break; #slist } ...}\endmodality(post))
      \replacewith (\modality{#allmodal}{..  #lhs = true; ...}\endmodality(post))
      \heuristics(simplify)
  };

  //TODO: Labeled continue and break

  // Unwinding rules

   loopUnwind    { \find (\modality{#allmodal}{.. while(#e) #s ...}\endmodality(post))
             \varcond(\newLabel(#innerLabel), \newLabel(#outerLabel))
                 \replacewith (\modality{#allmodal}{.. #unwind-loop (#innerLabel, #outerLabel,
                                       while(#e) #s); ...}\endmodality(post))
             \heuristics(loop_expand)
          };

    doWhileUnwind {
      \find (\modality{#allmodal}{.. do #s while (#e); ...}\endmodality(post))
      \varcond(\newLabel(#innerLabel), \newLabel(#outerLabel))
      \replacewith (\modality{#allmodal}{.. #unwind-loop (#innerLabel, #outerLabel, do #s while(#e);); ...}\endmodality(post))
          // This rule is not only for unwinding, but it transforms
          // a do-while loop into a while loop (plus one body expansion upfront)
      // \heuristics(loop_expand)
          \heuristics(simplify_prog)
    };

    // Make a while loop out of a for loop
    for_to_while {
      \find (\modality{#allmodal}{.. #forloop ...}\endmodality(post))
      \varcond(\newLabel(#innerLabel), \newLabel(#outerLabel))
          \replacewith(\modality{#allmodal}{.. #for-to-while(#innerLabel, #outerLabel, #forloop) ...}\endmodality(post))
      \heuristics(simplify_prog)
    };


    arrayInitialisation {
      \find (\modality{#allmodal}{.#pm@#t(#a).. for (int #v=#se;#v<this.#length; #v++) this[#v] = #lit; ...}\endmodality(post))
              //{\for iv; \if (geq(iv,#se) & lt(iv,#a.#length)) #a[iv] := #lit}
      \replacewith({heap:=memset(heap,
                     arrayRange(#a, #se, length(#a) - 1),
                                 #lit)} \modality{#allmodal}{..  ...}\endmodality(post))
      \heuristics(simplify)
    };
}
  /* deprecated for-loop treatment 
   * (when/if deleting forInitUnfold, also delete meta construct #unpack)
   */
  /*  
    forInitUnfold { 
      \find (\modality{#allmodal}{.. for(#loopInit; #guard; #forupdates) #s ...}\endmodality(post))
      \replacewith 
         (\modality{#allmodal}{.. 
          #unpack(for(#loopInit; #guard; #forupdates) #s);
              ...}\endmodality(post)) 
          \heuristics(simplify)
   };


  forUnwindEmptyInit { 
       \find (\modality{#allmodal}{.. for(; #guard; #forupdates) #s ...}\endmodality(post))
       \varcond(\newLabel(#innerLabel), \newLabel(#outerLabel))
       \replacewith (\modality{#allmodal}{.. #unwind-loop(#innerLabel, #outerLabel, 
                for(; #guard; #forupdates) #s); ...}\endmodality(post)) 
       \heuristics(loop_expand)

   
   forUnwindEmptyUpdate { 
       \find (\modality{#allmodal}{.. for(#loopInit; #guard;) #s ...}\endmodality(post))
       \varcond(\newLabel(#innerLabel), \newLabel(#outerLabel))
       \replacewith (\modality{#allmodal}{.. #unwind-loop(#innerLabel, #outerLabel, 
         for(#loopInit; #guard;) #s); ...}\endmodality(post)) 
       \heuristics(loop_expand) 
     }; 

   
   forUnwindEmptyInitUpdate { 
       \find (\modality{#allmodal}{.. for(; #guard;) #s ...}\endmodality(post))
       \varcond(\newLabel(#innerLabel), \newLabel(#outerLabel))
       \replacewith (\modality{#allmodal}{.. #unwind-loop(#innerLabel, #outerLabel, 
                     for(; #guard;) #s); ...}\endmodality(post)) 
       \heuristics(loop_expand)
     }; 
  */
   
  // for_inv      { \find (\[{.. for(#i; #e; #sel) {#s} ...}\]post) 
  //           \varcond(#v new)
  //          \replacewith (==> inv);
  //          \replacewith (inv ==> \[{.. #unwind-loop (for(#i; #e; #sel)
  //           {#s})  ...}\])
  //          \replacewith (inv, \<{.. #v = #e; ...}\> #v = false ==>
  //           \<{.. boolean #v = #e; ...}\>post) };

