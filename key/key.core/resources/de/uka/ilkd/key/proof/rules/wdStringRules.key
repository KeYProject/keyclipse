// This file is part of KeY - Integrated Deductive Software Design
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2013 Karlsruhe Institute of Technology, Germany
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General
// Public License. See LICENSE.TXT for details.
//

\schemaVariables {
	\term int i, j;
	\term CharList c, l;
}

\rules(wdChecks:on) {
	wd_String_Length {

		\find (
			wd( clLength(c) )
		)
		\replacewith (
			wd(c)
		)
		\heuristics ( simplify )
	};

	wd_String_Translate {

		\find (
			wd( clTranslateInt(i) )
		)
		\replacewith (
			wd(i)
		)
		\heuristics ( simplify )
	};

	wd_String_RmvZeros {

		\find (
			wd( clRemoveZeros(c) )
		)
		\replacewith (
			wd(c)
		)
		\heuristics ( simplify )
	};

	wd_String_Hash {

		\find (
			wd( clHashCode(c) )
		)
		\replacewith (
			wd(c)
		)
		\heuristics ( simplify )
	};

	wd_String_Cat {

		\find (
			wd( clCat(c, l) )
		)
		\replacewith (
			wd(c) & wd(l)
		)
		\heuristics ( simplify )
	};

	wd_String_Cons {

		\find (
			wd( clCons(i, c) )
		)
		\replacewith (
			wd(i) & wd(c) & leq(0,i)
		)
		\heuristics ( simplify )
	};

	wd_String_CharAt {

		\find (
			wd( clCharAt(i, c) )
		)
		\replacewith (
			wd(i) & wd(c) & leq(0, i) & lt(i, clLength(c))
		)
		\heuristics ( simplify )
	};

	wd_String_Concat {

		\find (
			wd( clConcat(c, l) )
		)
		\replacewith (
			wd(c) & wd(l)
		)
		\heuristics ( simplify )
	};

	wd_String_IndexOfChar {

		\find (
			wd( clIndexOfChar(i, j, c) )
		)
		\replacewith (
			wd(i) & wd(j) & wd(c) & leq(0, i) & leq(i, j) & lt(j, clLength(c))
		)
		\heuristics ( simplify )
	};

	wd_String_Sub {

		\find (
			wd( clSub(i, j, c) )
		)
		\replacewith (
			wd(i) & wd(j) & wd(c) & leq(0, i) & lt(i, j) & lt(j, clLength(c))
		)
		\heuristics ( simplify )
	};

	wd_String_IndexOfStr {

		\find (
			wd( clIndexOfCl(c, i, l) )
		)
		\replacewith (
			wd(c) & wd(i) & wd(l) & leq(0, i) & lt(add(i, clLength(c)), clLength(l))
		)
		\heuristics ( simplify )
	};

	wd_String_LastIndexOfChar {

		\find (
			wd( clLastIndexOfChar(i, j, c) )
		)
		\replacewith (
			wd(i) & wd(j) & wd(c) & leq(0, i) & leq(i, j) & lt(j, clLength(c))
		)
		\heuristics ( simplify )
	};

	wd_String_LastIndexOfStr {

		\find (
			wd( clLastIndexOfCl(c, i, l) )
		)
		\replacewith (
			wd(c) & wd(i) & wd(l) & leq(0, i) & lt(add(i, clLength(c)), clLength(l))
		)
		\heuristics ( simplify )
	};

	wd_String_Replace {

		\find (
			wd( clReplace(i, j, c) )
		)
		\replacewith (
			wd(i) & wd(j) & wd(c) & leq(0,i) & leq(0,j) & lt(i, clLength(c)) & lt(j, clLength(c))
		)
		\heuristics ( simplify )
	};

	wd_String_Pred_StartsWith {

		\find (
			WD( clStartsWith(c, l) )
		)
		\replacewith (
			wd(c) & wd(l)
		)
		\heuristics ( simplify )
	};

	wd_String_Pred_EndsWith {

		\find (
			WD( clEndsWith(c, l) )
		)
		\replacewith (
			wd(c) & wd(l)
		)
		\heuristics ( simplify )
	};

	wd_String_Pred_Contains {

		\find (
			WD( clContains(c, l) )
		)
		\replacewith (
			wd(c) & wd(l)
		)
		\heuristics ( simplify )
	};
}