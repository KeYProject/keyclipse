//--------------- loops ------------------------------------------------------//
\schemaVariables {
  \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
  \formula post;
  \program Statement #s;
  \program[list] Statement #slist;
  \program ForLoop #forloop;
  \program LoopInit #loopInit;
  \program Guard #guard;
  \program ForUpdates #forupdates;
  \program Expression #e;
}

\rules(programRules:Java) {
/*
  forInitUnfold { 
    \find (\modality{#allmodal}{.. for(#loopInit; #guard; #forupdates) #s ...}\endmodality(post))
    \replacewith 
        (\modality{#allmodal}{.. 
      #forInitUnfoldTransformer(for(#loopInit; #guard; #forupdates) #s);
      //#unpack(for(#loopInit; #guard; #forupdates) #s);
        ...}\endmodality(post)) 
    \heuristics(loop_expand)
  };
*/

  forInitUnfold { 
    \find (\modality{#allmodal}{.. for(#loopInit; #guard; #forupdates) #s ...}\endmodality(post))
    \replacewith 
        (\modality{#allmodal}{.. 
            #forInitUnfoldTransformer(#loopInit);
            //for(; #guard; #forupdates) #s
      			//#forInitUnfoldTransformer(#loopInit);
      			//#unpack(for(#loopInit; #guard; #forupdates) #s); 
        ...}\endmodality(post)) 
    \heuristics(loop_expand)
  };
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/* deprecated for-loop treatment 
   * (when/if deleting forInitUnfold, also delete meta construct #unpack)
   */
  /*  
    forInitUnfold { 
      \find (\modality{#allmodal}{.. for(#loopInit; #guard; #forupdates) #s ...}\endmodality(post))
      \replacewith 
         (\modality{#allmodal}{.. 
          #unpack(for(#loopInit; #guard; #forupdates) #s);
              ...}\endmodality(post)) 
          \heuristics(simplify)
   };


  forUnwindEmptyInit { 
       \find (\modality{#allmodal}{.. for(; #guard; #forupdates) #s ...}\endmodality(post))
       \varcond(\newLabel(#innerLabel), \newLabel(#outerLabel))
       \replacewith (\modality{#allmodal}{.. #unwind-loop(#innerLabel, #outerLabel, 
                for(; #guard; #forupdates) #s); ...}\endmodality(post)) 
       \heuristics(loop_expand)

   
   forUnwindEmptyUpdate { 
       \find (\modality{#allmodal}{.. for(#loopInit; #guard;) #s ...}\endmodality(post))
       \varcond(\newLabel(#innerLabel), \newLabel(#outerLabel))
       \replacewith (\modality{#allmodal}{.. #unwind-loop(#innerLabel, #outerLabel, 
         for(#loopInit; #guard;) #s); ...}\endmodality(post)) 
       \heuristics(loop_expand) 
     }; 

   
   forUnwindEmptyInitUpdate { 
       \find (\modality{#allmodal}{.. for(; #guard;) #s ...}\endmodality(post))
       \varcond(\newLabel(#innerLabel), \newLabel(#outerLabel))
       \replacewith (\modality{#allmodal}{.. #unwind-loop(#innerLabel, #outerLabel, 
                     for(; #guard;) #s); ...}\endmodality(post)) 
       \heuristics(loop_expand)
     }; 
  */
   
  // for_inv      { \find (\[{.. for(#i; #e; #sel) {#s} ...}\]post) 
  //           \varcond(#v new)
  //          \replacewith (==> inv);
  //          \replacewith (inv ==> \[{.. #unwind-loop (for(#i; #e; #sel)
  //           {#s})  ...}\])
  //          \replacewith (inv, \<{.. #v = #e; ...}\> #v = false ==>
  //           \<{.. boolean #v = #e; ...}\>post) };

