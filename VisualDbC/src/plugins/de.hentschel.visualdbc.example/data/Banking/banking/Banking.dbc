<?xml version="1.0" encoding="UTF-8"?>
<dbcmodel:DbcModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dbcmodel="http://www.hentschel.de/dbcmodel" driverId="de.hentschel.visualdbc.dataSource.key">
  <packages name="banking">
    <proofs target="//@packages.0/@types.1/@methods.0/@operationContracts.0" obligation="ContractPO"/>
    <types xsi:type="dbcmodel:DbcClass" name="LoggingPayCard" extends="//@packages.0/@types.1">
      <invariants name="JML class invariant nr 0 in LoggingPayCard" condition="(!self.log = null)&lt;&lt;impl>>"/>
      <invariants name="JML class invariant nr 1 in LoggingPayCard" condition="self.nextEntry >= 0 &amp; self.nextEntry &lt; self.log.length"/>
      <axioms name="Class invariant axiom for banking.LoggingPayCard" definition="equiv(java.lang.Object::&lt;inv>(heap,self),and(not(equals(int[]::select(heap,self,banking.LoggingPayCard::$log),null))&lt;&lt;impl>>,and(geq(int::select(heap,self,banking.LoggingPayCard::$nextEntry),Z(0(#))),lt(int::select(heap,self,banking.LoggingPayCard::$nextEntry),length(int[]::select(heap,self,banking.LoggingPayCard::$log))))))"/>
      <methods signature="charge(amount : int)" returnType="void">
        <proofs target="//@packages.0/@types.0/@methods.0/@operationContracts.0" obligation="ContractPO"/>
        <proofs target="//@packages.0/@types.0/@methods.0/@operationContracts.1" obligation="ContractPO"/>
        <operationContracts name="banking.LoggingPayCard[banking.PayCard::charge(int)].JML operation contract.0" proofObligations="//@proofObligations.0" pre="(amount >= 0 &amp; self.&lt;inv>&lt;&lt;impl>>)&lt;&lt;SC>>" post="(   (exc = null)&lt;&lt;impl>>&#xA;   -> (    self.balance&#xA;         = javaAddInt(self.balance@heapAtPre, amount)&#xA;       &amp; self.&lt;inv>&lt;&lt;impl>>)&lt;&lt;SC>>)&#xA;&amp; (   !(exc = null)&lt;&lt;impl>>&#xA;   ->   ((   java.lang.Throwable::instance(exc) = TRUE&#xA;          -> self.&lt;inv>)&lt;&lt;impl>>)&#xA;      &amp; (  java.lang.Error::instance(exc) = TRUE&#xA;         |   java.lang.RuntimeException::instance(exc)&#xA;           = TRUE))" modifies="mod[heap]: allLocs" termination="diamond"/>
        <operationContracts name="banking.LoggingPayCard[banking.LoggingPayCard::charge(int)].JML operation contract.0" proofObligations="//@proofObligations.0" pre="(amount >= 0 &amp; self.&lt;inv>&lt;&lt;impl>>)&lt;&lt;SC>>" post="(   (exc = null)&lt;&lt;impl>>&#xA;   -> (  self.log[self.nextEntry@heapAtPre] = amount&#xA;       &amp; ((  \if (!  javaAddInt(self.nextEntry@heapAtPre,&#xA;                                1)&#xA;                   = self.log.length)&#xA;                 \then (  self.nextEntry&#xA;                        = javaAddInt(self.nextEntry@heapAtPre,&#xA;                                     1))&#xA;                 \else (self.nextEntry = 0)&#xA;           &amp; ((  \forall int i;&#xA;                   (     i >= 0&#xA;                       &amp; (  i &lt; self.log.length&#xA;                          &amp; !  i&#xA;                             = self.nextEntry@heapAtPre)&#xA;                       &amp; inInt(i)&#xA;                    ->   self.log[i]&#xA;                       = self.log[i]@heapAtPre)&#xA;               &amp; self.&lt;inv>&lt;&lt;impl>>)&lt;&lt;SC>>))&lt;&lt;SC>>))&lt;&lt;SC>>)&#xA;&amp; (   !(exc = null)&lt;&lt;impl>>&#xA;   ->   ((   java.lang.Throwable::instance(exc) = TRUE&#xA;          -> self.&lt;inv>)&lt;&lt;impl>>)&#xA;      &amp; (  java.lang.Error::instance(exc) = TRUE&#xA;         |   java.lang.RuntimeException::instance(exc)&#xA;           = TRUE))" modifies="mod[heap]: allLocs" termination="diamond"/>
      </methods>
      <attributes name="log" type="int[]" visibility="default"/>
      <attributes name="nextEntry" type="int" visibility="default"/>
      <constructors signature="LoggingPayCard()" visibility="default"/>
      <extendsFullNames>banking.PayCard</extendsFullNames>
    </types>
    <types xsi:type="dbcmodel:DbcClass" name="PayCard">
      <methods signature="charge(amount : int)" returnType="void">
        <operationContracts name="banking.PayCard[banking.PayCard::charge(int)].JML operation contract.0" proofObligations="//@proofObligations.0" pre="(amount >= 0 &amp; self.&lt;inv>&lt;&lt;impl>>)&lt;&lt;SC>>" post="(   (exc = null)&lt;&lt;impl>>&#xA;   -> (    self.balance&#xA;         = javaAddInt(self.balance@heapAtPre, amount)&#xA;       &amp; self.&lt;inv>&lt;&lt;impl>>)&lt;&lt;SC>>)&#xA;&amp; (   !(exc = null)&lt;&lt;impl>>&#xA;   ->   ((   java.lang.Throwable::instance(exc) = TRUE&#xA;          -> self.&lt;inv>)&lt;&lt;impl>>)&#xA;      &amp; (  java.lang.Error::instance(exc) = TRUE&#xA;         |   java.lang.RuntimeException::instance(exc)&#xA;           = TRUE))" modifies="mod[heap]: allLocs" termination="diamond"/>
      </methods>
      <attributes name="balance" type="int" visibility="default"/>
      <constructors signature="PayCard()" visibility="default"/>
      <extendsFullNames>java.lang.Object</extendsFullNames>
    </types>
  </packages>
  <connectionSettings key="location" value="/Banking/src/banking"/>
  <connectionSettings key="packageManagement" value="FLAT_LIST"/>
  <connectionSettings key="packageManagementType" value="de.hentschel.visualdbc.datasource.model.DSPackageManagement"/>
  <connectionSettings key="locationType" value="org.eclipse.core.runtime.IPath"/>
  <connectionSettings key="skipLibraryClasses" value="true"/>
  <connectionSettings key="skipLibraryClassesType" value="java.lang.Boolean"/>
  <proofObligations obligation="ContractPO"/>
</dbcmodel:DbcModel>
