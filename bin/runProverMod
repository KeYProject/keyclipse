#!/bin/sh

resolve_symlink  ()
{ 
   TARGET=`ls -l "$1"| awk '/\ ->\ /{print $NF}'`

   if [ -n "$TARGET" ] ; then
      RESULT="$TARGET"
      case "$RESULT" in
         /*) break ;;				# absolute symlink
         *)  RESULT=`dirname "$0"`/"$RESULT" ;;	# relative symlink
      esac
   else
      RESULT=$1
   fi

   echo "$RESULT"
}

UNAME=`uname -s 2>/dev/null | tr '[:upper:]' '[:lower:]'`
ARCH=`uname -pm 2>/dev/null | tr '[:upper:]' '[:lower:]' | tr ' ' '-'`

if [ -z "$JAVA_HOME" ] ; then
    JAVA=`which java`
    if [ -z "$JAVA" ] ; then
	echo "Cannot find JAVA. Please set your PATH or \$JAVA_HOME."
	exit 1
    fi
else
    if [ "$UNAME" = "darwin" ] ; then
	JRE=$JAVA_HOME/Home
	JAVA=$JRE/bin/java
# other OS
    else
	JRE=$JAVA_HOME/jre
	JAVA=$JRE/bin/java
    fi
fi
echo "Using JDK installation from:      $JAVA_HOME"


# For debugging reasons disable JIT (otherwise strace doesn't work)
JAVA_OPTIONS=""
#JAVA_OPTIONS=-classic

# Uncomment the following definition for remote debugging on port 1234
#JAVA_OPTIONS='-DKeyDebugFlag=on -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=1234'

#
# Now $KEY_HOME  
#

if [ -z "$KEY_HOME" ] ; then
   KEY_HOME=`resolve_symlink "$0"`	# resolve symlink name
   KEY_HOME=`dirname "$KEY_HOME"`		# strip executable filename
   KEY_HOME=`cd "$KEY_HOME";pwd`	# and now expand the path to full
   KEY_HOME=`dirname "$KEY_HOME"`		# strip bin/ sirectory
fi
echo "Using KeY installation from:      $KEY_HOME"


if [ -z "$KEY_LIB" ] ; then
   KEY_LIB="$KEY_HOME/key-ext-jars"
else
echo "Using libraries from:             $KEY_LIB"
fi


#
# KeY CLASSPATH
#

key_ext_jars="antlr.jar recoderKey.jar"

keyclasspath="$KEY_HOME/system/binary/"

for i in $key_ext_jars ; do
    current_jar="$KEY_LIB/$i"
    if [ ! -f "$current_jar" ]
    then
       echo Cannot find $current_jar. 
       echo Copy or link the file into the
       echo $KEY_LIB directory.
       exit 1
    else
       keyclasspath="${keyclasspath}:$current_jar"
    fi
done

if [ "x$ASPECTJRTPATH" != x ]
then
  echo "Using AspectJ runtime from:       $ASPECTJRTPATH"
  keyclasspath=$keyclasspath:$ASPECTJRTPATH
fi

#
#Function prints help message
#

list_help(){
  echo "./runProver [options] [filename]"
  echo "\nOptions for using this script"
  echo "  -J-options are passed through to the JVM following the -J option convention of javac"
  echo "  -J-server:"
  echo "  -remotedebug <port>: option for remote debugging; parameter for listening port"
  echo "  -K-options are options, passed to the KeY system"
  echo "  -K-keydebug : with this option one can choose of which classes the debug output 
		    is to be send to the standard output. For this use the prefix: 
		    -J-Dkey.debug.prefix=
		    and name the classes after the prefix"
  echo "  --help, -h	: prints this help message"
  echo "############################################"
}

#
# KeY-specific command line options
#


keysysprops=""
keyoptions=""
while [ $# -ne 0 ]; do
    case $1 in
	-Kh)
# 	    set ${1} #removes the minus from the option, s.t. it can be passed to key as option
	    list_help
	    break;;
	-Khelp)
# 	    set ${1#--} #removes the minus from the option, s.t. it can be passed to key as option
	    list_help
	    break;;
        -Kkeydebug) keysysprops="${keysysprops}-DKeyDebugFlag=on "
            shift
            continue;;
        -Kdebugclassloader) keysysprops="${keysysprops}-DKeyDebugClassLoader=on "
            shift
            continue;;

	-Kdebugprefix) keysysprops="${keysysprops}-Dkey.debug.prefix=${2}"
	    shift
	    shift
	    continue;;

	-Kremotedebug) JAVA_OPTIONS="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=${2}"
	    shift
	    shift
	    continue;;

	-Kserver) keysysprops="${keysysprops}-server "
            shift
            continue;;

	-J*)
	    option=${1#-J}
	    JAVA_OPTIONS="${JAVA_OPTIONS}${option} "
	    shift
	    continue;;

# 	-K*) option=${1#-D-}
# 	     keyoptions="${keyoptions}${option} "
# 	     shift
# 	     continue;; help ausgabe?

#         -server) 


        -*) keysysprops="${keysysprops}${1} "
            shift
            continue;;

        *)  break;;
    esac
done	


if [ ! -d "$HOME/.key" ]
then
mkdir "$HOME/.key"
fi


# Fallback for KeY-specific binaries
PATH=${PATH}:$KEY_LIB
export PATH



#
# This command actually runs KeY
#
#-server \
#-XX:CompileThreshold=1500 \


$JAVA $JAVA_OPTIONS $keysysprops \
-ea:de.uka.ilkd.key... -Xms64m -Xmx2048m \
-Dkey.home="$KEY_HOME" \
-Dkey.simplify.logdir="$KEY_SIMPLIFY_LOG_DIR" \
-Dkey.ics.logdir="$KEY_ICS_LOG_DIR" \
-Dsun.awt.exception.handler=de.uka.ilkd.key.gui.ExceptionalHandler \
-classpath "$keyclasspath" de.uka.ilkd.key.gui.Main "$@"
