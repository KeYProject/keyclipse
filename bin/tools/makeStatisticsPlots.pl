#!/usr/bin/perl -w
#
# This script can be used to generate plots on the runtimes of KeY
# examples.
# 
# As arguments it expects one or more statistics files generated by
# runAllProofs.pl (using command line option -p).
#
# This script creates some .svg files in the current directory. It
# expects the gnuplot tool to be installed.
#
# written by Mattias Ulbrich

use strict;

# use this string as a prefix to the generated image files; later to
# be definable in a commandline option
my $prefix = "";

# List the names for columns in the statistics files.
# The first line in the files is disregarded
my @COLUMNS = ( "steps", "nodes", "branches", "time", "avg-time" );

# make a unique key from a set of strings.
# we assume that '%' does not occurr in the strings.
sub makeKey {
    return join("%", @_);
}

# extract the problem name from a descriptin which may contain path
# and extension
sub extractProblemName {
    $a = $_[0];
    if($a =~ m#(?:^|/)([^/\.]*)\.[^/]+$#) {
	# print $1 . " " . $a ."\n";
	return $1;
    } else {
	print "Warning: cannot extract short name from '$a'\n";
	return $a;
    }
}

# the arguments
my @filenames = ();

# the collection of all found proof names
my %problemnames = ();

# the data table
my %data = ();

foreach my $filename (@ARGV) {
    push @filenames, $filename;
    open IN, $filename or die "cannot open $filename";
    <IN>;  # skip over first line
    while(<IN>) {
	chomp;
	my @elems = split /\s*\|\s*/, $_;
	my $problem = shift @elems;
	$problemnames{$problem} = 1;
	my $colNo = 0;
	while (my $entry = shift @elems) {
	    $data{&makeKey($filename, $problem, $colNo)} = $entry;
	    # print &makeKey($filename, $problem, $colNo) . " -> " . $entry . "\n";
	    $colNo ++;
	}
    }
    close IN;
}

#foreach my $k (keys %data) {
#    print "$k -> ". $data{$k} ."\n";
#}

foreach (@filenames) {
    print "Checking $_\n";
}

die "There were no file arguments" unless(@filenames);

my $colNo = 0;
foreach my $col (@COLUMNS) {
    open GP, "| gnuplot" or die "cannot launch gnuplot";
    print GP "set title 'Plot for $col'\n";
    print GP "set style data histogram\n";
    print GP "set style histogram gap 1\n";
    print GP "set style fill solid border -1\n";
    print GP "set xtic rotate by -45\n";
    print GP "set out '$prefix$col.svg'\n";
#     print GP "set yrange [0:]\n";
    print GP "set logscale y\n";
    print GP "set terminal svg size ".((values %data) * 3).",480\n";

    print GP "plot";
    my $first = 1;
    foreach my $filename (@filenames) {
	if($first) {
	    $first = 0;
	} else {
	    print GP ",";
	}
	print GP " '-' using 2:xtic(1) title '$filename'" ;
    }
    print GP "\n";
    
    foreach my $filename (@filenames) {
	foreach my $problem (sort (keys %problemnames)) {
	    my $prettyproblem = &extractProblemName($problem);	    
	    my $key = &makeKey($filename, $problem, $colNo);
	    my $data = "0";
	    if(exists $data{$key}) {
		$data = $data{$key};
	    }
	    print GP "\"$prettyproblem\" $data\n";
	}
	print GP "e";
    }
    close GP;
    $colNo ++;
}
