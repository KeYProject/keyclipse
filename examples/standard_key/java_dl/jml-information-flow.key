// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2009 Universitaet Karlsruhe, Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
\settings {
"#Proof-Settings-Config-File
#Mon Jun 18 17:01:04 CEST 2007
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[General]SuggestiveVarNames=false
[View]ShowWholeTaclet=false
[View]MaxTooltipLines=40
[General]DnDDirectionSensitive=false
[General]StupidMode=false
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=50000
[General]OneStepSimplification=true
[Choice]DefaultChoices=programRules-programRules\:Java , initialisation-initialisation\:disableStaticInitialisation , intRules-intRules\:arithmeticSemanticsIgnoringOF , assertions-assertions\:on
[Model]Source=1
[DecisionProcedure]=SIMPLIFY
[Strategy]ActiveStrategy=JavaCardDLStrategy
"
}

\javaSource "jml-information-flow/";


\programVariables {
Avg self_Avg;
}

\functions {
}

\problem {
   inReachableState
-> \forall Avg self_Avg_lv; 
     {self_Avg:=self_Avg_lv}
       (     !self_Avg = null
           &   self_Avg.<created>@(java.lang.Object)
             = TRUE
           & (  !self_Avg.m_Tab@(Avg) = null
              & (    self_Avg.m_Tab@(Avg).length
                   = self_Avg.num_Instances@(Avg)
                 & (  !self_Avg.m_Tab2@(Avg) = null
                    & (    self_Avg.m_Tab2@(Avg).length
                         = self_Avg.num_Instances@(Avg)
                       & (  \forall int i; 
                              (     0 <= i
                                  &    i
                                    <  self_Avg.num_Instances@(Avg)
                               ->   !  self_Avg.m_Tab@(Avg)[i]
                                     = null
                                  & (    int[]::instance(self_Avg.m_Tab@(Avg)[i])
                                       = TRUE
                                     & !  self_Avg.m_Tab@(Avg)[i]
                                        = null
                                     &   self_Avg.m_Tab@(Avg)[i].length
                                       = self_Avg.num_Attributes@(Avg)))
                          & (  \forall int i; 
                                 (     0 <= i
                                     &    i
                                       <  self_Avg.num_Instances@(Avg)
                                  ->   !  self_Avg.m_Tab2@(Avg)[i]
                                        = null
                                     & (    int[]::instance(self_Avg.m_Tab2@(Avg)[i])
                                          = TRUE
                                        & !  self_Avg.m_Tab2@(Avg)[i]
                                           = null
                                        &   self_Avg.m_Tab2@(Avg)[i].length
                                          = self_Avg.num_Attributes@(Avg)))
                             & (    self_Avg.m_Sum@(Avg).length
                                  =   self_Avg.num_Instances@(Avg)
                                    + 1
                                & (  \forall int i; 
                                       (     0 <= i
                                           &    i
                                             <  self_Avg.num_Instances@(Avg)
                                        ->   !  self_Avg.m_Sum@(Avg)
                                              = self_Avg.m_Tab@(Avg)[i]
                                           & !  self_Avg.m_Sum@(Avg)
                                              = self_Avg.m_Tab2@(Avg)[i])
                                   & (  \forall int i; 
                                          (     0 <= i
                                              &    i
                                                <  self_Avg.num_Instances@(Avg)
                                           ->   self_Avg.m_Tab@(Avg)[i][Avg.TAG_ATTR_IDX]
                                              = self_Avg.m_Tab2@(Avg)[i][Avg.TAG_ATTR_IDX])
                                      & \forall int i; 
                                          (     0 <= i
                                              &    i
                                                <  self_Avg.num_Instances@(Avg)
                                           -> !  self_Avg.m_Tab@(Avg)[i][Avg.TAG_ATTR_IDX]
                                               = 0
                                           ->   self_Avg.m_Tab@(Avg)[i][Avg.VALUE_ATTR_IDX]
                                              = self_Avg.m_Tab2@(Avg)[i][Avg.VALUE_ATTR_IDX]))))))))))
           & (  Avg.TAG_ATTR_IDX = 0
              & Avg.VALUE_ATTR_IDX = 1
              & !self_Avg.m_Sum@(Avg) = null
              & self_Avg.num_Instances@(Avg) >= 1
              & self_Avg.num_Attributes@(Avg) >= 2)
        -> \<{ {
                 self_Avg.average()@Avg;
               }
             }\>   self_Avg.res1@(Avg)
                 = self_Avg.res2@(Avg))

}

