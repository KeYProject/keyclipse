\settings {
"#Proof-Settings-Config-File
#Wed Jun 26 18:51:16 CEST 2013
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]RETREAT_MODE_OPTIONS_KEY=RETREAT_MODE_NONE
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[Label]Instantiators=
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=10000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=Strings-Strings\\:on , reach-reach\\:on , JavaCard-JavaCard\\:on , assertions-assertions\\:on , bigint-bigint\\:on , programRules-programRules\\:Java , intRules-intRules\\:arithmeticSemanticsIgnoringOF , modelFields-modelFields\\:treatAsAxiom , initialisation-initialisation\\:disableStaticInitialisation , sequences-sequences\\:on , integerSimplificationRules-integerSimplificationRules\\:full , runtimeExceptions-runtimeExceptions\\:allow
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src.templates";

\proofObligation "#Proof Obligation Settings
#Wed Jun 26 18:51:16 CEST 2013
name=Inc[Inc\\:\\:foo_1()].JML operation contract.0
contract=Inc[Inc\\:\\:foo_1()].JML operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "christoph" ) (keyVersion "98151b013121376e2e9354875c034e6e91892cac"))
(keyLog "1" (keyUser "christoph" ) (keyVersion "1f1226c4c6024cfbad7c2c83e640e8e4598e721f"))
(keyLog "2" (keyUser "christoph" ) (keyVersion "1f1226c4c6024cfbad7c2c83e640e8e4598e721f"))

(autoModeTime "661")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "assignment" (formula "7"))
(rule "inEqSimp_gtToGeq" (formula "4"))
(rule "times_zero_1" (formula "4") (term "1,0,0"))
(rule "add_zero_right" (formula "4") (term "0,0"))
(rule "inEqSimp_gtToGeq" (formula "7") (term "0,1,0,0,1"))
(rule "times_zero_1" (formula "7") (term "1,0,0,0,1,0,0,1"))
(rule "add_literals" (formula "7") (term "0,0,0,1,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "4"))
(rule "mul_literals" (formula "4") (term "1"))
(rule "inEqSimp_sepPosMonomial1" (formula "7") (term "0,1,0,0,1"))
(rule "mul_literals" (formula "7") (term "1,0,1,0,0,1"))
(rule "Class_invariant_axiom_for_Inc" (formula "5") (ifseqformula "3"))
(rule "true_left" (formula "5"))
(rule "methodBodyExpand" (formula "6") (term "1") (newnames "heapBefore_foo_1,savedHeapBefore_foo_1"))
(builtin "One Step Simplification" (formula "6"))
(rule "postincrement_attribute" (formula "6") (term "1") (inst "#v=i"))
(rule "variableDeclarationAssign" (formula "6") (term "1"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "i"))
(rule "assignment" (formula "6") (term "1"))
(builtin "One Step Simplification" (formula "6"))
(rule "eval_order_access4" (formula "6") (term "1") (inst "#v1=x") (inst "#v0=i_1"))
(rule "ifUnfold" (formula "6") (term "1") (inst "#boolv=x_1"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "x_1"))
(rule "equality_comparison_simple" (formula "6") (term "1"))
(builtin "One Step Simplification" (formula "6"))
(rule "replace_known_right" (formula "6") (term "0,0,1,0") (ifseqformula "5"))
(builtin "One Step Simplification" (formula "6"))
(rule "if" (formula "6") (term "1"))
(builtin "One Step Simplification" (formula "6"))
(rule "variableDeclarationAssign" (formula "6") (term "1"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "i_1"))
(rule "assignment" (formula "6") (term "1"))
(builtin "One Step Simplification" (formula "6"))
(rule "variableDeclarationAssign" (formula "6") (term "1"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "x"))
(rule "compound_int_cast_expression" (formula "6") (term "1") (inst "#v=x_1"))
(rule "variableDeclarationAssign" (formula "6") (term "1"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "x_2"))
(rule "remove_parentheses_right" (formula "6") (term "1"))
(rule "compound_addition_1" (formula "6") (term "1") (inst "#v=x_3"))
(rule "variableDeclarationAssign" (formula "6") (term "1"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "x_3"))
(rule "assignment_read_attribute" (formula "6") (term "1"))
(branch "Normal Execution (i != null)"
   (builtin "One Step Simplification" (formula "7"))
   (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "5")))
   (rule "false_right" (formula "6"))
   (rule "assignmentAdditionInt" (formula "6") (term "1"))
   (builtin "One Step Simplification" (formula "6"))
   (rule "translateJavaAddInt" (formula "6") (term "0,1,0"))
   (rule "polySimp_addComm0" (formula "6") (term "0,1,0"))
   (rule "widening_identity_cast_5" (formula "6") (term "1"))
   (rule "assignment" (formula "6") (term "1"))
   (builtin "One Step Simplification" (formula "6"))
   (rule "assignment_write_attribute" (formula "6") (term "1"))
   (branch "Normal Execution (i_1 != null)"
      (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "5")))
      (builtin "One Step Simplification" (formula "7"))
      (rule "false_right" (formula "6"))
      (rule "methodCallEmpty" (formula "6") (term "1"))
      (rule "tryEmpty" (formula "6") (term "1"))
      (rule "emptyModality" (formula "6") (term "1"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "selectOfStore" (formula "6") (term "0,0"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "castDel" (formula "6") (term "0,0"))
      (rule "inEqSimp_homoInEq1" (formula "6") (term "0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,0,0"))
      (rule "mul_literals" (formula "6") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
      (rule "add_literals" (formula "6") (term "0,0,0"))
      (rule "add_zero_left" (formula "6") (term "0,0"))
      (rule "inEqSimp_invertInEq0" (formula "6") (term "0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "0,0"))
      (rule "times_zero_2" (formula "6") (term "1,0"))
      (rule "polySimp_elimOne" (formula "6") (term "0,0"))
      (rule "inEqSimp_subsumption1" (formula "6") (term "0") (ifseqformula "4"))
      (rule "leq_literals" (formula "6") (term "0,0"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "Class_invariant_axiom_for_Inc" (formula "6") (ifseqformula "3"))
      (rule "closeTrue" (formula "6"))
   )
   (branch "Null Reference (i_1 = null)"
      (builtin "One Step Simplification" (formula "7"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Null Reference (i = null)"
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
   (rule "closeFalse" (formula "1"))
)
)

}
