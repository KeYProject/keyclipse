\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Nov 15 23:35:19 CET 2013
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]RETREAT_MODE_OPTIONS_KEY=RETREAT_MODE_NONE
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=1000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=Strings-Strings\\:on , reach-reach\\:on , JavaCard-JavaCard\\:on , assertions-assertions\\:on , bigint-bigint\\:on , programRules-programRules\\:Java , intRules-intRules\\:arithmeticSemanticsIgnoringOF , modelFields-modelFields\\:showSatisfiability , initialisation-initialisation\\:disableStaticInitialisation , sequences-sequences\\:on , integerSimplificationRules-integerSimplificationRules\\:full , runtimeExceptions-runtimeExceptions\\:ban , optimisedSelectRules-optimisedSelectRules\\:on
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "..";

\proofObligation "#Proof Obligation Settings
#Fri Nov 15 23:35:19 CET 2013
name=MapCaseStudy.AMapImplementation[MapCaseStudy.AbstractMap\\:\\:copyMapEntries([LMapCaseStudy.MapEntry,int,int,int)].JML normal_behavior operation contract.0
contract=MapCaseStudy.AMapImplementation[MapCaseStudy.AbstractMap\\:\\:copyMapEntries([LMapCaseStudy.MapEntry,int,int,int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "kai" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "28568")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "translateJavaAddInt" (formula "1") (term "0,1,0,1,1,1,1,1,0"))
(rule "translateJavaAddInt" (formula "1") (term "0,1,0,1,1,1,1,0"))
(rule "translateJavaAddInt" (formula "1") (term "0,2,1,1,1,1,0,0,0,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "0,2,1,0,1,1,0,0,0,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "0,2,1,1,0,1,0,0,0,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "0,2,1,0,0,1,0,0,0,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "0,2,2,0,0,0,0,1,0,1,1"))
(rule "translateJavaSubInt" (formula "1") (term "2,2,0,0,0,0,1,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "8"))
(rule "eqSymm" (formula "15") (term "1,0,0,1,0,1"))
(rule "eqSymm" (formula "14"))
(rule "replace_known_right" (formula "4") (term "1") (ifseqformula "13"))
(builtin "One Step Simplification" (formula "4"))
(rule "polySimp_elimSub" (formula "15") (term "2,2,0,0,0,0,1,0,1"))
(rule "mul_literals" (formula "15") (term "1,2,2,0,0,0,0,1,0,1"))
(rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,0,0,0,0,1"))
(rule "polySimp_addComm1" (formula "15") (term "2,2,0,0,0,0,1,0,1"))
(rule "polySimp_addComm0" (formula "15") (term "0,2,2,0,0,0,0,1,0,1"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "inEqSimp_commuteLeq" (formula "7"))
(rule "inEqSimp_commuteLeq" (formula "6"))
(rule "inEqSimp_commuteLeq" (formula "8"))
(rule "inEqSimp_commuteLeq" (formula "9"))
(rule "elementOfArrayRange" (formula "15") (term "0,0,0,0,1,0,1") (inst "iv=iv"))
(rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,0,1,0,0,0,0,1,0,1"))
(rule "assignment" (formula "15") (term "1"))
(builtin "One Step Simplification" (formula "15"))
(rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "15") (term "0,1,1,0,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,0,0,0,0,1"))
(rule "nnf_imp2or" (formula "15") (term "0,0,0,0,0,1"))
(rule "nnf_imp2or" (formula "15") (term "0,0,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "15") (term "0,0,0,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,0,0,0,0,1"))
(rule "add_literals" (formula "15") (term "0,0,0,1,0,0,0,0,0,0,1"))
(rule "add_zero_left" (formula "15") (term "0,0,1,0,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "15") (term "1,0,0,0,0,0,0,0,0,0,1"))
(rule "add_zero_right" (formula "15") (term "0,0,0,0,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "15") (term "1,0,0,0,0,0,0,0,1"))
(rule "nnf_notAnd" (formula "15") (term "0,0,0,1,0,0,0,1"))
(builtin "One Step Simplification" (formula "15"))
(rule "nnf_notAnd" (formula "15") (term "1,0,0,1,0,0,0,1"))
(builtin "One Step Simplification" (formula "15"))
(rule "nnf_notOr" (formula "15") (term "0,0,0,0,1,0,0,0,1"))
(rule "Class_invariant_axiom_for_MapCaseStudy_AMapImplementation" (formula "11") (inst "i=i") (inst "o=o") (inst "i_0=i_0") (inst "i_1=i_1") (inst "i1=i1") (inst "i2=i2") (inst "i_2=i_2") (inst "sk=sk_0"))
(branch "Use Axiom"
   (builtin "One Step Simplification" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "notLeft" (formula "13"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "eqSymm" (formula "20"))
   (rule "eqSymm" (formula "19") (term "1,0,0,1,0"))
   (rule "eqSymm" (formula "17"))
   (rule "eqSymm" (formula "15") (term "0,1,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,0,0,0"))
   (rule "polySimp_addComm1" (formula "15") (term "0,0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,0,0,0"))
   (rule "subsetSingletonLeft" (formula "12"))
   (rule "subsetSingletonLeft" (formula "11"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,0,1,0"))
   (rule "mul_literals" (formula "19") (term "0,1,1,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
   (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,0"))
   (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
   (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
   (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,0,0,0"))
   (rule "mul_literals" (formula "20") (term "0,1,1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,0,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "15") (term "0,0,0,0,1,0"))
   (rule "elementOfUnionEQ" (formula "12") (ifseqformula "20"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "eqSymm" (formula "12") (term "1"))
   (rule "sortsDisjointModuloNull" (formula "12") (term "1"))
   (rule "replace_known_right" (formula "12") (term "1,1") (ifseqformula "22"))
   (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "21")))
   (rule "elementOfUnionEQ" (formula "11") (ifseqformula "20"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "eqSymm" (formula "11") (term "1"))
   (rule "sortsDisjointModuloNull" (formula "11") (term "1"))
   (rule "replace_known_right" (formula "11") (term "1,1") (ifseqformula "22"))
   (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "21")))
   (rule "elementOfUnion" (formula "12"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "true_left" (formula "12"))
   (rule "elementOfUnion" (formula "11"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "true_left" (formula "11"))
   (rule "nnf_imp2or" (formula "17") (term "0"))
   (rule "nnf_imp2or" (formula "16") (term "0"))
   (rule "nnf_imp2or" (formula "12") (term "0"))
   (rule "nnf_imp2or" (formula "13") (term "0"))
   (rule "nnf_notAnd" (formula "17") (term "0,0"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "nnf_notAnd" (formula "16") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
   (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "16") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
   (rule "mul_literals" (formula "16") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "12") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
   (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "12") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
   (rule "mul_literals" (formula "12") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "13") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
   (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "13") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
   (rule "mul_literals" (formula "13") (term "1,0,0,0"))
   (rule "nnf_imp2or" (formula "13") (term "0,1,0"))
   (rule "nnf_notOr" (formula "17") (term "0,0,0"))
   (rule "nnf_notAnd" (formula "13") (term "0,0,1,0"))
   (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,1,0"))
   (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1,0"))
   (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,1,0"))
   (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0,1,0"))
   (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0,1,0"))
   (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,1,0"))
   (rule "add_zero_left" (formula "13") (term "0,0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "13") (term "1,0,0,0,1,0"))
   (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_copyMapEntries,savedHeapBefore_copyMapEntries"))
   (builtin "One Step Simplification" (formula "23"))
   (rule "commuteUnion" (formula "18") (term "0,0"))
   (rule "commute_or" (formula "17") (term "0,0"))
   (rule "cnf_eqv" (formula "17") (term "1,0"))
   (rule "nnf_notEx" (formula "17") (term "0,1,1,0"))
   (rule "nnf_notAnd" (formula "17") (term "0,0,1,1,0"))
   (rule "nnf_notAnd" (formula "17") (term "0,0,0,1,1,0"))
   (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,0,1,1,0"))
   (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0,0,1,1,0"))
   (rule "add_literals" (formula "17") (term "0,0,0,0,0,0,1,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,0,1,1,0"))
   (rule "mul_literals" (formula "17") (term "1,0,0,0,0,1,1,0"))
   (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,0,1,1,0"))
   (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,0,1,1,0"))
   (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,0,1,1,0"))
   (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,0,1,1,0"))
   (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,0,1,1,0"))
   (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,0,1,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,1,1,0"))
   (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,1,1,0"))
   (rule "commute_or" (formula "13") (term "0,0,1,0"))
   (rule "cnf_rightDist" (formula "17") (term "0,0"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "commuteUnion_2" (formula "18") (term "0"))
   (rule "arrayLengthNotNegative" (formula "7") (term "0"))
   (rule "arrayLengthIsAShort" (formula "8") (term "0"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "true_left" (formula "8"))
   (rule "arrayLengthNotNegative" (formula "10") (term "0"))
   (rule "arrayLengthIsAShort" (formula "11") (term "0"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "true_left" (formula "11"))
   (rule "for_to_while" (formula "25") (term "1") (inst "#outerLabel=_label1") (inst "#innerLabel=_label0"))
   (rule "variableDeclarationAssign" (formula "25") (term "1"))
   (rule "variableDeclaration" (formula "25") (term "1") (newnames "i"))
   (rule "assignment" (formula "25") (term "1"))
   (builtin "One Step Simplification" (formula "25"))
   (rule "mapSizeNotNegativeForFiniteMaps" (formula "17") (term "0"))
   (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "13"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "ex_pull_out2" (formula "20") (term "0,1,0"))
   (rule "commute_or" (formula "20") (term "0,0,1,0"))
   (rule "cnf_rightDist" (formula "20") (term "0,0,1,0"))
   (rule "commute_or" (formula "20") (term "1,0,0,1,0"))
   (rule "cnf_rightDist" (formula "20") (term "0,0,0,1,0"))
   (rule "commute_or" (formula "20") (term "1,0,0,0,1,0"))
   (rule "all_pull_out3" (formula "15") (term "0"))
   (rule "shift_paren_or" (formula "15") (term "0,0"))
   (rule "shift_paren_or" (formula "15") (term "0,0,0"))
   (rule "all_pull_out2" (formula "20") (term "1,1,0"))
   (rule "commute_or_2" (formula "20") (term "0,1,1,0"))
   (rule "commute_or_2" (formula "20") (term "0,0,1,1,0"))
   (rule "commute_or" (formula "20") (term "0,0,0,1,1,0"))
   (rule "ex_pull_out0" (formula "20") (term "1,0"))
   (rule "all_pull_out1" (formula "20") (term "0,1,0"))
   (rule "ex_pull_out3" (formula "20") (term "0"))
   (rule "all_pull_out3" (formula "20") (term "0,0"))
   (rule "cnf_rightDist" (formula "20") (term "0,0,0"))
   (rule "distr_forallAnd" (formula "20") (term "0,0"))
   (builtin "One Step Simplification" (formula "20"))
   (rule "distr_existsAnd1" (formula "20") (term "0"))
   (rule "distr_forallAnd" (formula "20"))
   (rule "andLeft" (formula "20"))
   (rule "commute_or_2" (formula "21") (term "0,0"))
   (rule "shift_paren_or" (formula "21") (term "0,0,0"))
   (rule "swapQuantifiersAll" (formula "21"))
   (builtin "One Step Simplification" (formula "21"))
   (rule "castDel" (formula "21") (term "1,0,0,0,0,0,0"))
   (rule "castDel" (formula "21") (term "1,0,0,1,0,0"))
   (rule "castDel" (formula "21") (term "0,1,0,0,0"))
   (rule "instanceof_static_type" (formula "21") (term "0,0,1,0"))
   (builtin "One Step Simplification" (formula "21"))
   (rule "cnf_rightDist" (formula "20") (term "0,0"))
   (rule "shift_paren_or" (formula "20") (term "1,0,0"))
   (rule "commute_or_2" (formula "20") (term "0,1,0,0"))
   (rule "cnf_rightDist" (formula "20") (term "0,0,0"))
   (rule "commute_or_2" (formula "20") (term "0,0,0,0"))
   (rule "shift_paren_or" (formula "20") (term "1,0,0,0"))
   (rule "commute_or" (formula "20") (term "0,0,0,0,0"))
   (builtin "Loop Invariant" (formula "27") (newnames "heapBeforeLoop,iBeforeLoop,i_0,anon_heap_loop,o,f,variant,b"))
   (branch "Invariant Initially Valid"
      (rule "andRight" (formula "27"))
      (branch "Case 1"
         (builtin "One Step Simplification" (formula "27"))
         (rule "translateJavaSubInt" (formula "27") (term "1"))
         (rule "polySimp_elimSub" (formula "27") (term "1"))
         (rule "times_zero_2" (formula "27") (term "1,1"))
         (rule "add_zero_right" (formula "27") (term "1"))
         (rule "inEqSimp_leqRight" (formula "27"))
         (rule "add_zero_right" (formula "1") (term "0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
         (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "1"))
         (rule "qeq_literals" (formula "6") (term "0"))
         (builtin "One Step Simplification" (formula "6"))
         (rule "closeFalse" (formula "6"))
      )
      (branch "Case 2"
         (rule "andRight" (formula "27"))
         (branch "Case 1"
            (rule "andRight" (formula "27"))
            (branch "Case 1"
               (rule "andRight" (formula "27"))
               (branch "Case 1"
                  (rule "andRight" (formula "27"))
                  (branch "Case 1"
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "leq_literals" (formula "27"))
                     (rule "closeTrue" (formula "27"))
                  )
                  (branch "Case 2"
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "inEqSimp_leqRight" (formula "27"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                     (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "6"))
                     (rule "qeq_literals" (formula "1") (term "0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
               (branch "Case 2"
                  (builtin "One Step Simplification" (formula "27"))
                  (rule "translateJavaAddInt" (formula "27") (term "0,2,1,1,1,1,0"))
                  (rule "translateJavaAddInt" (formula "27") (term "0,2,1,1,0,1,0"))
                  (rule "translateJavaAddInt" (formula "27") (term "0,2,1,0,0,1,0"))
                  (rule "translateJavaAddInt" (formula "27") (term "0,2,1,0,1,1,0"))
                  (rule "allRight" (formula "27") (inst "sk=x_9"))
                  (rule "impRight" (formula "27"))
                  (rule "andLeft" (formula "1"))
                  (rule "inEqSimp_ltToLeq" (formula "2"))
                  (rule "times_zero_1" (formula "2") (term "1,0,0"))
                  (rule "add_literals" (formula "2") (term "0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "1"))
                  (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                  (rule "mul_literals" (formula "2") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "2") (term "0"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "closeFalse" (formula "2"))
               )
            )
            (branch "Case 2"
               (builtin "One Step Simplification" (formula "27"))
               (rule "allRight" (formula "27") (inst "sk=o_5"))
               (rule "impRight" (formula "27"))
               (rule "notRight" (formula "28"))
               (rule "andLeft" (formula "2"))
               (rule "andLeft" (formula "1"))
               (rule "notLeft" (formula "3"))
               (rule "notLeft" (formula "1"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "24"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "Case 2"
            (rule "andRight" (formula "27"))
            (branch "Case 1"
               (rule "andRight" (formula "27"))
               (branch "Case 1"
                  (rule "andRight" (formula "27"))
                  (branch "Case 1"
                     (rule "andRight" (formula "27"))
                     (branch "Case 1"
                        (rule "andRight" (formula "27"))
                        (branch "Case 1"
                           (builtin "One Step Simplification" (formula "27"))
                           (rule "closeTrue" (formula "27"))
                        )
                        (branch "Case 2"
                           (builtin "One Step Simplification" (formula "27"))
                           (rule "closeTrue" (formula "27"))
                        )
                     )
                     (branch "Case 2"
                        (rule "orRight" (formula "27"))
                        (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "25")))
                        (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "4")))
                        (rule "closeTrue" (formula "27"))
                     )
                  )
                  (branch "Case 2"
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "closeTrue" (formula "27"))
                  )
               )
               (branch "Case 2"
                  (builtin "One Step Simplification" (formula "27"))
                  (rule "closeTrue" (formula "27"))
               )
            )
            (branch "Case 2"
               (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "1")))
               (rule "closeTrue" (formula "27"))
            )
         )
      )
   )
   (branch "Body Preserves Invariant"
      (builtin "One Step Simplification" (formula "24"))
      (builtin "One Step Simplification" (formula "29"))
      (rule "translateJavaSubInt" (formula "24") (term "1,1"))
      (rule "translateJavaSubInt" (formula "24") (term "2,1,0,0,0,1,0,1,0,0"))
      (rule "translateJavaAddInt" (formula "24") (term "0,2,1,1,1,1,0,1,0,0"))
      (rule "translateJavaAddInt" (formula "24") (term "0,2,1,0,1,0,0,1,0,1,0,0"))
      (rule "translateJavaAddInt" (formula "24") (term "0,2,1,0,1,1,1,1,1,0,1,0,0"))
      (rule "translateJavaAddInt" (formula "24") (term "0,2,1,0,0,1,0,1,0,0"))
      (rule "translateJavaAddInt" (formula "24") (term "0,2,1,0,1,1,1,1,0,1,0,0"))
      (rule "translateJavaSubInt" (formula "24") (term "2,1,0,1,0,1,0,1,0,0"))
      (rule "translateJavaAddInt" (formula "24") (term "0,2,1,0,1,1,1,0,1,0,0"))
      (rule "translateJavaAddInt" (formula "24") (term "0,2,1,0,1,1,0,1,0,0"))
      (rule "translateJavaAddInt" (formula "24") (term "0,2,1,0,1,0,1,1,0,1,0,0"))
      (rule "translateJavaAddInt" (formula "24") (term "0,2,1,0,0,1,1,0,1,0,0"))
      (rule "translateJavaAddInt" (formula "24") (term "0,2,1,1,0,1,0,1,0,0"))
      (rule "translateJavaAddInt" (formula "24") (term "0,2,1,0,1,1,1,0,1,0,1,0,0"))
      (rule "translateJavaAddInt" (formula "24") (term "0,2,1,0,1,1,0,1,0,1,0,0"))
      (rule "translateJavaSubInt" (formula "29") (term "2,1,0,1,1,0,0"))
      (rule "translateJavaAddInt" (formula "29") (term "0,2,1,0,0,1,0,1,0,0,0,1,1,0,1,1"))
      (rule "translateJavaAddInt" (formula "29") (term "0,2,2,0,0,0,0,1,0,1,1,0,1,1"))
      (rule "translateJavaAddInt" (formula "29") (term "0,2,1,0,1,0,1,1,0,1"))
      (rule "translateJavaAddInt" (formula "29") (term "0,2,1,0,1,1,0,1,0,0,0,1,1,0,1,1"))
      (rule "translateJavaAddInt" (formula "29") (term "0,2,1,1,0,1,0,1,0,0,0,1,1,0,1,1"))
      (rule "translateJavaAddInt" (formula "29") (term "0,2,1,1,1,1,0,1,0,0,0,1,1,0,1,1"))
      (rule "translateJavaSubInt" (formula "29") (term "0,1,1,1,1,0,1,1"))
      (rule "translateJavaSubInt" (formula "29") (term "1,0,1,1,1,0,1,1"))
      (rule "translateJavaSubInt" (formula "29") (term "0,1,1,1,0,1"))
      (rule "translateJavaAddInt" (formula "24") (term "0,2,1,0,0,0,1,0,1,0,0"))
      (rule "translateJavaSubInt" (formula "24") (term "2,1,0,1,0,0,1,0,1,0,0"))
      (rule "translateJavaSubInt" (formula "24") (term "2,1,0,1,1,1,1,1,0,1,0,0"))
      (rule "translateJavaSubInt" (formula "24") (term "2,1,0,1,1,1,1,0,1,0,0"))
      (rule "translateJavaAddInt" (formula "24") (term "0,2,1,0,1,0,1,0,1,0,0"))
      (rule "translateJavaSubInt" (formula "24") (term "2,1,0,1,1,1,0,1,0,0"))
      (rule "translateJavaSubInt" (formula "24") (term "2,1,0,1,0,1,1,0,1,0,0"))
      (rule "translateJavaSubInt" (formula "24") (term "2,1,0,0,1,1,0,1,0,0"))
      (rule "translateJavaSubInt" (formula "24") (term "2,1,0,1,1,1,0,1,0,1,0,0"))
      (rule "translateJavaSubInt" (formula "24") (term "2,1,0,1,1,0,1,0,1,0,0"))
      (rule "translateJavaAddInt" (formula "29") (term "0,2,1,0,1,1,0,0"))
      (rule "translateJavaSubInt" (formula "29") (term "2,2,0,0,0,0,1,0,1,1,0,1,1"))
      (rule "translateJavaSubInt" (formula "29") (term "2,1,0,1,0,1,1,0,1"))
      (rule "andLeft" (formula "24"))
      (rule "impRight" (formula "30"))
      (rule "andLeft" (formula "25"))
      (rule "andLeft" (formula "25"))
      (rule "andLeft" (formula "25"))
      (rule "eqSymm" (formula "34") (term "1,0,0,1,0,1,1,0,1"))
      (rule "polySimp_elimSub" (formula "29") (term "1"))
      (rule "polySimp_elimSub" (formula "34") (term "1,0,1,1,1,0,1"))
      (rule "polySimp_elimSub" (formula "34") (term "2,2,0,0,0,0,1,0,1,1,0,1"))
      (rule "mul_literals" (formula "34") (term "1,2,2,0,0,0,0,1,0,1,1,0,1"))
      (rule "polySimp_elimSub" (formula "1") (term "2,1,0,1,1,0"))
      (rule "mul_literals" (formula "1") (term "1,2,1,0,1,1,0"))
      (rule "polySimp_elimSub" (formula "34") (term "0,1,1,1,1,0,1"))
      (rule "polySimp_elimSub" (formula "34") (term "0,1,1,1,0"))
      (rule "polySimp_elimSub" (formula "34") (term "2,1,0,1,0,1,1,0"))
      (rule "mul_literals" (formula "34") (term "1,2,1,0,1,0,1,1,0"))
      (rule "polySimp_elimSub" (formula "27") (term "2,1,0,1,0,1,0"))
      (rule "mul_literals" (formula "27") (term "1,2,1,0,1,0,1,0"))
      (rule "polySimp_elimSub" (formula "27") (term "2,1,0,1,1,1,1,1,0"))
      (rule "mul_literals" (formula "27") (term "1,2,1,0,1,1,1,1,1,0"))
      (rule "polySimp_elimSub" (formula "27") (term "2,1,0,1,1,1,0"))
      (rule "mul_literals" (formula "27") (term "1,2,1,0,1,1,1,0"))
      (rule "polySimp_elimSub" (formula "27") (term "2,1,0,1,1,0,1,0"))
      (rule "mul_literals" (formula "27") (term "1,2,1,0,1,1,0,1,0"))
      (rule "polySimp_elimSub" (formula "27") (term "2,1,0,1,0,1,1,0"))
      (rule "mul_literals" (formula "27") (term "1,2,1,0,1,0,1,1,0"))
      (rule "polySimp_elimSub" (formula "27") (term "2,1,0,1,1,1,1,0"))
      (rule "mul_literals" (formula "27") (term "1,2,1,0,1,1,1,1,0"))
      (rule "polySimp_elimSub" (formula "27") (term "2,1,0,0,1,1,0"))
      (rule "mul_literals" (formula "27") (term "1,2,1,0,0,1,1,0"))
      (rule "polySimp_elimSub" (formula "27") (term "2,1,0,0,0,1,0"))
      (rule "mul_literals" (formula "27") (term "1,2,1,0,0,0,1,0"))
      (rule "polySimp_elimSub" (formula "27") (term "2,1,0,1,1,1,0,1,0"))
      (rule "mul_literals" (formula "27") (term "1,2,1,0,1,1,1,0,1,0"))
      (rule "polySimp_elimSub" (formula "27") (term "2,1,0,1,0,0,1,0"))
      (rule "mul_literals" (formula "27") (term "1,2,1,0,1,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,1,0,0,0,1,1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "34") (term "1,1,1,1,0,1"))
      (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,1,0,0,0,1,1,0,1"))
      (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,1,1,1,0,1"))
      (rule "polySimp_addComm0" (formula "29") (term "1"))
      (rule "polySimp_addComm1" (formula "34") (term "2,2,0,0,0,0,1,0,1,1,0,1"))
      (rule "polySimp_addComm1" (formula "1") (term "2,1,0,1,1,0"))
      (rule "polySimp_addComm0" (formula "34") (term "0,1,1,1,0"))
      (rule "polySimp_addComm1" (formula "34") (term "2,1,0,1,0,1,1,0"))
      (rule "polySimp_addComm1" (formula "27") (term "2,1,0,1,0,1,0"))
      (rule "polySimp_addComm1" (formula "27") (term "2,1,0,1,1,1,1,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,1,0,0,0,1,1,0,1"))
      (rule "polySimp_addComm1" (formula "27") (term "2,1,0,1,1,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,0,0,1,1,0,1"))
      (rule "polySimp_addComm1" (formula "27") (term "2,1,0,1,1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "26"))
      (rule "inEqSimp_commuteLeq" (formula "25"))
      (rule "polySimp_addComm1" (formula "27") (term "2,1,0,1,0,1,1,0"))
      (rule "polySimp_addComm1" (formula "27") (term "2,1,0,1,1,1,1,0"))
      (rule "polySimp_addComm1" (formula "27") (term "2,1,0,0,1,1,0"))
      (rule "polySimp_addComm1" (formula "27") (term "2,1,0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "27") (term "2,1,0,1,1,1,0,1,0"))
      (rule "polySimp_addComm1" (formula "27") (term "2,1,0,1,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "34") (term "0,1,1,1,1,0,1"))
      (rule "polySimp_addComm0" (formula "34") (term "0,2,2,0,0,0,0,1,0,1,1,0,1"))
      (rule "polySimp_addComm0" (formula "1") (term "0,2,1,0,1,1,0"))
      (rule "polySimp_addComm0" (formula "34") (term "0,2,1,0,1,0,1,1,0"))
      (rule "polySimp_addComm0" (formula "27") (term "0,2,1,0,1,0,1,0"))
      (rule "polySimp_addComm0" (formula "27") (term "0,2,1,0,1,1,1,1,1,0"))
      (rule "polySimp_addComm0" (formula "27") (term "0,2,1,0,1,1,1,0"))
      (rule "polySimp_addComm0" (formula "27") (term "0,2,1,0,1,1,0,1,0"))
      (rule "polySimp_addComm0" (formula "27") (term "0,2,1,0,1,0,1,1,0"))
      (rule "polySimp_addComm0" (formula "27") (term "0,2,1,0,1,1,1,1,0"))
      (rule "polySimp_addComm0" (formula "27") (term "0,2,1,0,0,1,1,0"))
      (rule "polySimp_addComm0" (formula "27") (term "0,2,1,0,0,0,1,0"))
      (rule "polySimp_addComm0" (formula "27") (term "0,2,1,0,1,1,1,0,1,0"))
      (rule "polySimp_addComm0" (formula "27") (term "0,2,1,0,1,0,0,1,0"))
      (rule "inEqSimp_homoInEq0" (formula "34") (term "0,1,1,1,0,1"))
      (rule "times_zero_2" (formula "34") (term "1,0,0,1,1,1,0,1"))
      (rule "add_zero_right" (formula "34") (term "0,0,1,1,1,0,1"))
      (rule "inEqSimp_homoInEq0" (formula "29"))
      (rule "times_zero_2" (formula "29") (term "1,0"))
      (rule "add_zero_right" (formula "29") (term "0"))
      (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,1,1,1,0,1"))
      (rule "elementOfArrayRange" (formula "34") (term "0,0,0,0,1,0,1,1,0,1") (inst "iv=iv"))
      (rule "inEqSimp_commuteLeq" (formula "34") (term "1,0,0,1,0,0,0,0,1,0,1,1,0,1"))
      (rule "variableDeclarationAssign" (formula "1") (term "1"))
      (rule "variableDeclarationAssign" (formula "34") (term "1"))
      (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_2"))
      (rule "variableDeclaration" (formula "34") (term "1") (newnames "exc_1"))
      (rule "assignment" (formula "34") (term "1"))
      (builtin "One Step Simplification" (formula "34"))
      (rule "variableDeclaration" (formula "34") (term "1") (newnames "thrownExc"))
      (rule "blockThrow" (formula "34") (term "1,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "29"))
      (rule "polySimp_mulLiterals" (formula "29") (term "1"))
      (rule "polySimp_elimOne" (formula "29") (term "1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,1,0,0,0,1,1,0,1"))
      (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,1,0,0,0,1,1,0,1"))
      (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,1,0,0,0,1,1,0,1"))
      (rule "mul_literals" (formula "33") (term "0,1,1,0,0,1,0,0,0,1,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,1,0,0,0,1,1,0,1"))
      (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,1,0,0,0,1,1,0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "33") (term "1,1,1,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "33") (term "0,1,1,1,1,0,1"))
      (rule "polySimp_elimOne" (formula "33") (term "0,1,1,1,1,0,1"))
      (rule "inEqSimp_sepNegMonomial1" (formula "33") (term "0,1,1,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "33") (term "0,0,1,1,1,0,1"))
      (rule "polySimp_elimOne" (formula "33") (term "0,0,1,1,1,0,1"))
      (rule "pullOutSelect" (formula "27") (term "1,1,1,1,1,0") (inst "selectSK=selectSK_1"))
      (rule "simplifySelectOfAnon" (formula "27"))
      (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "31")) (ifInst ""  (formula "3")))
      (rule "replaceKnownSelect_taclet0_0" (formula "28") (term "1,1,1,0,1,0"))
      (rule "elementOfArrayRange" (formula "27") (term "0,0") (inst "iv=iv"))
      (builtin "One Step Simplification" (formula "27"))
      (rule "hideAuxiliaryEq" (formula "27"))
      (rule "replaceKnownAuxiliaryConstant_taclet1_0" (formula "27") (term "1,1,1,1,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet1_0" (formula "27") (term "1,1,1,0,1,0"))
      (rule "boxToDiamond" (formula "1") (term "1"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "nnf_imp2or" (formula "27") (term "0"))
      (rule "nnf_imp2or" (formula "26") (term "0"))
      (rule "nnf_notAnd" (formula "27") (term "1,0"))
      (builtin "One Step Simplification" (formula "27"))
      (rule "nnf_notAnd" (formula "26") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
      (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
      (rule "mul_literals" (formula "26") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "27") (term "0,0"))
      (builtin "One Step Simplification" (formula "27"))
      (rule "nnf_imp2or" (formula "33") (term "0,1,0,0,1,1,0,1"))
      (rule "nnf_notOr" (formula "27") (term "0,0,0"))
      (rule "nnf_notOr" (formula "27") (term "0,0,0,0"))
      (rule "nnf_imp2or" (formula "33") (term "0,1,0,0,0,1,1,0,1"))
      (rule "nnf_notAnd" (formula "33") (term "1,0,1,0,0,1,1,0,1"))
      (builtin "One Step Simplification" (formula "33"))
      (rule "nnf_notAnd" (formula "33") (term "0,0,1,0,0,1,1,0,1"))
      (builtin "One Step Simplification" (formula "33"))
      (rule "nnf_notAnd" (formula "33") (term "0,0,1,0,0,0,1,1,0,1"))
      (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0,1,0,0,0,1,1,0,1"))
      (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,1,0,0,0,1,1,0,1"))
      (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,1,0,0,0,1,1,0,1"))
      (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,1,0,0,0,1,1,0,1"))
      (rule "add_literals" (formula "33") (term "0,0,0,1,0,0,1,0,0,0,1,1,0,1"))
      (rule "add_zero_left" (formula "33") (term "0,0,1,0,0,1,0,0,0,1,1,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0,1,0,0,0,1,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0,1,0,0,0,1,1,0,1"))
      (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0,1,0,0,0,1,1,0,1"))
      (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0,1,0,0,0,1,1,0,1"))
      (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0,1,0,0,0,1,1,0,1"))
      (rule "add_literals" (formula "33") (term "0,0,0,0,0,1,0,0,0,1,1,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,1,0,0,0,1,1,0,1"))
      (rule "mul_literals" (formula "33") (term "1,0,0,0,1,0,0,0,1,1,0,1"))
      (rule "nnf_notOr" (formula "33") (term "0,0,0,1,0,0,1,1,0,1"))
      (rule "commute_or" (formula "27") (term "1,0"))
      (rule "commute_or" (formula "27") (term "0,0"))
      (rule "commute_or_2" (formula "27") (term "0"))
      (rule "cnf_rightDist" (formula "26") (term "0"))
      (rule "distr_forallAnd" (formula "26"))
      (rule "andLeft" (formula "26"))
      (rule "commute_or" (formula "27") (term "0"))
      (rule "shift_paren_or" (formula "28") (term "0,0"))
      (builtin "One Step Simplification" (formula "28"))
      (rule "cnf_rightDist" (formula "28") (term "0"))
      (rule "distr_forallAnd" (formula "28"))
      (rule "andLeft" (formula "28"))
      (rule "commute_or" (formula "29") (term "0"))
      (builtin "One Step Simplification" (formula "29"))
      (rule "castDel" (formula "29") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "29"))
      (rule "true_left" (formula "29"))
      (rule "cnf_rightDist" (formula "28") (term "0"))
      (builtin "One Step Simplification" (formula "28"))
      (rule "commute_or" (formula "28") (term "0"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "33") (term "0") (ifseqformula "1"))
      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "31"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "less_than_comparison_simple" (formula "30") (term "1"))
      (builtin "One Step Simplification" (formula "30"))
      (rule "inEqSimp_ltToLeq" (formula "30") (term "0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "30") (term "0,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "30") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "30") (term "0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "30") (term "0,0,0,1,0"))
      (rule "methodCallEmpty" (formula "30") (term "1"))
      (builtin "One Step Simplification" (formula "30"))
      (rule "emptyModality" (formula "30") (term "1"))
      (builtin "One Step Simplification" (formula "30"))
      (rule "notRight" (formula "30"))
      (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq0" (formula "27") (term "0"))
      (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0"))
      (rule "add_literals" (formula "27") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "27") (term "1,0,0"))
      (rule "add_zero_right" (formula "27") (term "0,0"))
      (rule "qeq_literals" (formula "27") (term "0"))
      (builtin "One Step Simplification" (formula "27"))
      (rule "true_left" (formula "27"))
      (rule "ifUnfold" (formula "34") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "34") (term "1") (newnames "x"))
      (rule "less_than_comparison_simple" (formula "34") (term "1"))
      (builtin "One Step Simplification" (formula "34"))
      (rule "inEqSimp_ltToLeq" (formula "34") (term "0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "34") (term "0,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "34") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "34") (term "0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "34") (term "0,0,0,1,0"))
      (rule "replace_known_left" (formula "34") (term "0,0,1,0") (ifseqformula "1"))
      (builtin "One Step Simplification" (formula "34"))
      (rule "if" (formula "34") (term "1"))
      (builtin "One Step Simplification" (formula "34"))
      (rule "eval_order_array_access2" (formula "34") (term "1") (inst "#v0=x") (inst "#ar1=m_arr"))
      (rule "variableDeclarationAssign" (formula "34") (term "1"))
      (rule "variableDeclaration" (formula "34") (term "1") (newnames "m_arr"))
      (rule "assignment" (formula "34") (term "1"))
      (builtin "One Step Simplification" (formula "34"))
      (rule "variableDeclarationAssign" (formula "34") (term "1"))
      (rule "variableDeclaration" (formula "34") (term "1") (newnames "x_1"))
      (rule "assignmentAdditionInt" (formula "34") (term "1"))
      (builtin "One Step Simplification" (formula "34"))
      (rule "translateJavaAddInt" (formula "34") (term "0,1,0"))
      (rule "eval_order_array_access3" (formula "34") (term "1") (inst "#v1=m") (inst "#v2=x_2") (inst "#v0=m_arr_1"))
      (rule "variableDeclarationAssign" (formula "34") (term "1"))
      (rule "variableDeclaration" (formula "34") (term "1") (newnames "m_arr_1"))
      (rule "assignment" (formula "34") (term "1"))
      (builtin "One Step Simplification" (formula "34"))
      (rule "variableDeclarationAssign" (formula "34") (term "1"))
      (rule "variableDeclaration" (formula "34") (term "1") (newnames "x_2"))
      (rule "assignment" (formula "34") (term "1"))
      (builtin "One Step Simplification" (formula "34"))
      (rule "ifUnfold" (formula "34") (term "1") (inst "#boolv=x_3"))
      (rule "variableDeclaration" (formula "34") (term "1") (newnames "x_3"))
      (rule "compound_assignment_5_nonsimple" (formula "34") (term "1"))
      (rule "ifElseUnfold" (formula "34") (term "1") (inst "#boolv=x_4"))
      (rule "variableDeclaration" (formula "34") (term "1") (newnames "x_4"))
      (rule "compound_less_equal_than_comparison_1" (formula "34") (term "1") (inst "#v0=x_5"))
      (rule "variableDeclarationAssign" (formula "34") (term "1"))
      (rule "variableDeclaration" (formula "34") (term "1") (newnames "x_5"))
      (rule "eval_order_access2" (formula "34") (term "1") (inst "#v0=m_arr_2"))
      (rule "variableDeclarationAssign" (formula "34") (term "1"))
      (rule "variableDeclaration" (formula "34") (term "1") (newnames "m_arr_2"))
      (rule "remove_parentheses_right" (formula "34") (term "1"))
      (rule "assignment" (formula "34") (term "1"))
      (builtin "One Step Simplification" (formula "34"))
      (rule "assignment_read_length" (formula "34"))
      (branch "Normal Execution (m_arr_2 != null)"
         (builtin "One Step Simplification" (formula "34"))
         (rule "less_equal_than_comparison_simple" (formula "34") (term "1"))
         (builtin "One Step Simplification" (formula "34"))
         (rule "ifElse" (formula "34") (term "1"))
         (builtin "One Step Simplification" (formula "34"))
         (rule "ifEnterThen" (formula "34") (term "1,1"))
         (rule "assignment" (formula "34") (term "1,1"))
         (builtin "One Step Simplification" (formula "34"))
         (rule "blockThrow" (formula "34") (term "1,1"))
         (rule "blockThrow" (formula "34") (term "1,1"))
         (builtin "One Step Simplification" (formula "34"))
         (rule "ifthenelse_split_for" (formula "34"))
         (branch "leq(length(target), add(beginTarget, i_0)) TRUE"
            (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "1"))
            (rule "polySimp_rightDist" (formula "11") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "11") (term "0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
            (rule "polySimp_pullOutFactor2" (formula "11") (term "0,0,0"))
            (rule "add_literals" (formula "11") (term "1,0,0,0"))
            (rule "times_zero_1" (formula "11") (term "0,0,0"))
            (rule "add_zero_left" (formula "11") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "11"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0"))
            (rule "polySimp_elimOne" (formula "11") (term "0"))
            (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "2"))
            (rule "andLeft" (formula "11"))
            (rule "inEqSimp_homoInEq1" (formula "11"))
            (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
            (rule "add_literals" (formula "11") (term "1,1,0"))
            (rule "times_zero_1" (formula "11") (term "1,0"))
            (rule "add_zero_right" (formula "11") (term "0"))
            (rule "leq_literals" (formula "11"))
            (rule "closeFalse" (formula "11"))
         )
         (branch "leq(length(target), add(beginTarget, i_0)) FALSE"
            (rule "inEqSimp_leqRight" (formula "34"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
            (rule "polySimp_rightDist" (formula "1") (term "0,1"))
            (rule "mul_literals" (formula "1") (term "0,0,1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,0,1"))
            (rule "less_than_comparison_simple" (formula "35") (term "1"))
            (builtin "One Step Simplification" (formula "35"))
            (rule "inEqSimp_ltToLeq" (formula "35") (term "0,0,1,0"))
            (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,1,0"))
            (rule "add_zero_right" (formula "35") (term "0,0,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "35") (term "0,0,0,1,0"))
            (rule "blockEmpty" (formula "35") (term "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0"))
            (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0"))
            (rule "if" (formula "35") (term "1"))
            (builtin "One Step Simplification" (formula "35"))
            (rule "variableDeclarationAssign" (formula "35") (term "1,2"))
            (rule "variableDeclaration" (formula "35") (term "1,2") (newnames "m"))
            (rule "eval_order_array_access4" (formula "35") (term "1,2") (inst "#v0=m_arr_2"))
            (rule "variableDeclarationAssign" (formula "35") (term "1,2"))
            (rule "variableDeclaration" (formula "35") (term "1,2") (newnames "m_arr_3"))
            (rule "blockThrow" (formula "35") (term "1,1"))
            (rule "blockThrow" (formula "35") (term "1,1"))
            (builtin "One Step Simplification" (formula "35"))
            (rule "ifthenelse_split_for" (formula "35"))
            (branch "leq(i_0, add(Z(neglit(1(#))), mul(beginTarget, Z(neglit(1(#)))))) TRUE"
               (rule "inEqSimp_exactShadow3" (formula "28") (ifseqformula "1"))
               (rule "times_zero_1" (formula "28") (term "0,0"))
               (rule "add_zero_left" (formula "28") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "28"))
               (rule "polySimp_mulLiterals" (formula "28") (term "0"))
               (rule "polySimp_elimOne" (formula "28") (term "0"))
               (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "28"))
               (rule "qeq_literals" (formula "10") (term "0"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "closeFalse" (formula "10"))
            )
            (branch "leq(i_0, add(Z(neglit(1(#))), mul(beginTarget, Z(neglit(1(#)))))) FALSE"
               (rule "inEqSimp_leqRight" (formula "35"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0"))
               (rule "assignment_read_attribute_this" (formula "36"))
               (builtin "One Step Simplification" (formula "36"))
               (rule "replaceKnownSelect_taclet0_0" (formula "36") (term "0,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet1_0" (formula "36") (term "0,1,0"))
               (rule "eval_order_array_access5" (formula "36") (term "1") (inst "#v1=x_3") (inst "#ar1=m_arr_4"))
               (rule "variableDeclarationAssign" (formula "36") (term "1"))
               (rule "variableDeclaration" (formula "36") (term "1") (newnames "m_arr_4"))
               (rule "assignment" (formula "36") (term "1"))
               (builtin "One Step Simplification" (formula "36"))
               (rule "variableDeclarationAssign" (formula "36") (term "1"))
               (rule "variableDeclaration" (formula "36") (term "1") (newnames "x_6"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "assignmentAdditionInt" (formula "36") (term "1"))
               (builtin "One Step Simplification" (formula "36"))
               (rule "translateJavaAddInt" (formula "36") (term "0,1,0"))
               (rule "assignment_array2" (formula "36"))
               (branch "Normal Execution (m_arr_4 != null)"
                  (builtin "One Step Simplification" (formula "36"))
                  (rule "pullOutSelect" (formula "36") (term "0,1,0") (inst "selectSK=selectSK_2"))
                  (rule "simplifySelectOfAnon" (formula "1"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "33")) (ifInst ""  (formula "5")))
                  (rule "elementOfArrayRange" (formula "1") (term "0,0") (inst "iv=iv"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "36")))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet3_0" (formula "36") (term "0,1,0"))
                  (rule "assignment_to_reference_array_component" (formula "36"))
                  (branch "Normal Execution (m_arr_1 != null)"
                     (builtin "One Step Simplification" (formula "36"))
                     (rule "blockEmpty" (formula "36") (term "1"))
                     (rule "postincrement" (formula "36") (term "1"))
                     (rule "compound_int_cast_expression" (formula "36") (term "1") (inst "#v=x"))
                     (rule "variableDeclarationAssign" (formula "36") (term "1"))
                     (rule "variableDeclaration" (formula "36") (term "1") (newnames "x_7"))
                     (rule "remove_parentheses_right" (formula "36") (term "1"))
                     (rule "assignmentAdditionInt" (formula "36") (term "1"))
                     (builtin "One Step Simplification" (formula "36"))
                     (rule "translateJavaAddInt" (formula "36") (term "0,1,0"))
                     (rule "polySimp_addComm0" (formula "36") (term "0,1,0"))
                     (rule "widening_identity_cast_5" (formula "36") (term "1"))
                     (rule "assignment" (formula "36") (term "1"))
                     (builtin "One Step Simplification" (formula "36"))
                     (rule "tryEmpty" (formula "36") (term "1"))
                     (rule "methodCallEmpty" (formula "36") (term "1"))
                     (rule "emptyModality" (formula "36") (term "1"))
                     (builtin "One Step Simplification" (formula "36"))
                     (rule "andRight" (formula "36"))
                     (branch "Case 1"
                        (rule "andRight" (formula "36"))
                        (branch "Case 1"
                           (rule "andRight" (formula "36"))
                           (branch "Case 1"
                              (rule "andRight" (formula "36"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "36"))
                                 (branch "Case 1"
                                    (rule "inEqSimp_geqRight" (formula "36"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "28"))
                                    (rule "qeq_literals" (formula "1") (term "0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "Case 2"
                                    (rule "inEqSimp_leqRight" (formula "36"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0"))
                                    (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0"))
                                    (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "4"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0"))
                                    (rule "add_zero_right" (formula "1") (term "0"))
                                    (rule "leq_literals" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                              )
                              (branch "Case 2"
                                 (rule "allRight" (formula "36") (inst "sk=x_0"))
                                 (rule "orRight" (formula "36"))
                                 (rule "orRight" (formula "36"))
                                 (rule "eqSymm" (formula "38") (term "1"))
                                 (rule "eqSymm" (formula "38") (term "0"))
                                 (rule "inEqSimp_leqRight" (formula "36"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_geqRight" (formula "37"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0"))
                                 (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1"))
                                 (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                                 (rule "mul_literals" (formula "2") (term "0,0"))
                                 (rule "add_zero_left" (formula "2") (term "0"))
                                 (rule "pullOutSelect" (formula "37") (term "0,1") (inst "selectSK=selectSK_3"))
                                 (rule "simplifySelectOfStore" (formula "1"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfAnon" (formula "1"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "eqSymm" (formula "38") (term "1"))
                                 (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "pullOutSelect" (formula "38") (term "1,1,0,0") (inst "selectSK=selectSK_4"))
                                 (rule "applyEq" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "2") (term "1,1,0,0,1,0,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "2") (term "1,1,2,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "2") (term "1,1,1,0") (ifseqformula "1"))
                                 (rule "simplifySelectOfStore" (formula "1"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "replaceKnownSelect_taclet0_0" (formula "1") (term "0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet1_0" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "39") (term "1,1,0,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "2") (term "1,1,0,0,1,0,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "2") (term "1,1,2,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "2") (term "1,1,1,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "38") (term "1,0") (inst "selectSK=selectSK_5"))
                                 (rule "simplifySelectOfStore" (formula "1"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfAnon" (formula "1"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "pullOutSelect" (formula "39") (term "1,0,1") (inst "selectSK=selectSK_6"))
                                 (rule "applyEq" (formula "2") (term "0,0,0,0,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "2") (term "1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "2") (term "1,2,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "1"))
                                 (rule "simplifySelectOfStore" (formula "1"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "castDel" (formula "1") (term "1,0"))
                                 (rule "polySimp_homoEq" (formula "1") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "1") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0,0,0"))
                                 (rule "polySimp_sepPosMonomial" (formula "1") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,0,0"))
                                 (rule "pullOutSelect" (formula "40") (term "0,0") (inst "selectSK=selectSK_7"))
                                 (rule "simplifySelectOfStore" (formula "1"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfAnon" (formula "1"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "pullOutSelect" (formula "4") (term "0,0,0,0,0") (inst "selectSK=selectSK_8"))
                                 (rule "applyEq" (formula "1") (term "1,2,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "1,1,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "1,0,0,1,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "1,2,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "1") (term "0,0,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "1") (term "1,1,0") (ifseqformula "4"))
                                 (rule "simplifySelectOfStore" (formula "4"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "castDel" (formula "4") (term "1,0"))
                                 (rule "eqSymm" (formula "4") (term "0,0,0"))
                                 (rule "replace_known_right" (formula "4") (term "0,0,0") (ifseqformula "41"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "simplifySelectOfAnon" (formula "4"))
                                 (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "38")) (ifInst ""  (formula "11")))
                                 (rule "elementOfArrayRange" (formula "4") (term "0,0") (inst "iv=iv"))
                                 (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "41")))
                                 (rule "applyEqReverse" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "4"))
                                 (rule "applyEqReverse" (formula "5") (term "0,0,0,0,0") (ifseqformula "4"))
                                 (rule "applyEqReverse" (formula "1") (term "1,1,0") (ifseqformula "4"))
                                 (rule "applyEqReverse" (formula "1") (term "1,2,0") (ifseqformula "4"))
                                 (rule "applyEqReverse" (formula "5") (term "1,0,0,1,0,0") (ifseqformula "4"))
                                 (rule "applyEqReverse" (formula "5") (term "1,1,0") (ifseqformula "4"))
                                 (rule "applyEqReverse" (formula "5") (term "1,2,0") (ifseqformula "4"))
                                 (rule "applyEqReverse" (formula "1") (term "0,0,0,0,0") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "pullOutSelect" (formula "41") (term "0,1") (inst "selectSK=selectSK_9"))
                                 (rule "simplifySelectOfStore" (formula "1"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfAnon" (formula "1"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "pullOutSelect" (formula "3") (term "2,0") (inst "selectSK=selectSK_10"))
                                 (rule "simplifySelectOfAnon" (formula "3"))
                                 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "41")) (ifInst ""  (formula "16")))
                                 (rule "elementOfArrayRange" (formula "3") (term "0,0") (inst "iv=iv"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "eqSymm" (formula "3") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,0,0,0"))
                                 (rule "applyEq_and_int4" (formula "3") (term "0,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "3") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "3") (term "1,0,1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "0,1,0,1,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "3") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "3") (term "0,0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "3") (term "1,0,0,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "3") (term "0,0,1,0,0,0,0"))
                                 (rule "add_zero_left" (formula "3") (term "0,1,0,0,0,0"))
                                 (rule "inEqSimp_invertInEq0" (formula "3") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "0,1,0,0,0,0"))
                                 (rule "times_zero_2" (formula "3") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "3") (term "0,1,0,0,0,0"))
                                 (rule "replace_known_left" (formula "3") (term "1,0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "commute_and" (formula "3") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "castDel" (formula "3") (term "0,0,0,0"))
                                 (rule "instanceof_static_type" (formula "3") (term "0,1,0,0"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "inEqSimp_homoInEq0" (formula "3") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "3") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "3") (term "1,1,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "3") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "3") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "3") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0"))
                                 (rule "polySimp_elimOne" (formula "3") (term "0,0,0"))
                                 (rule "ifthenelse_split" (formula "6") (term "0"))
                                 (branch " ! MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(add(beginEntry, x_0))) = null & ! boolean::select(heap, MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(add(beginEntry, x_0))), java.lang.Object::<created>) = TRUE TRUE"
                                    (rule "andLeft" (formula "6"))
                                    (rule "notLeft" (formula "6"))
                                    (rule "notLeft" (formula "6"))
                                    (rule "referencedObjectIsCreatedRight" (formula "39") (ifseqformula "40"))
                                    (rule "close" (formula "39") (ifseqformula "13"))
                                 )
                                 (branch " ! MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(add(beginEntry, x_0))) = null & ! boolean::select(heap, MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(add(beginEntry, x_0))), java.lang.Object::<created>) = TRUE FALSE"
                                    (rule "applyEqReverse" (formula "44") (term "1,1") (ifseqformula "6"))
                                    (rule "hideAuxiliaryEq" (formula "6"))
                                    (rule "eqSymm" (formula "43") (term "1"))
                                    (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "38"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "applyEqReverse" (formula "43") (term "0,0") (ifseqformula "2"))
                                    (rule "hideAuxiliaryEq" (formula "2"))
                                    (rule "ifthenelse_split" (formula "2") (term "0"))
                                    (branch "leq(x_0, add(Z(neglit(1(#))), numberCopies)) TRUE"
                                       (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                       (rule "hideAuxiliaryEq" (formula "3"))
                                       (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "2"))
                                       (rule "times_zero_1" (formula "6") (term "0,0"))
                                       (rule "add_zero_left" (formula "6") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                                       (rule "mul_literals" (formula "6") (term "1"))
                                       (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "6"))
                                       (rule "leq_literals" (formula "16") (term "0"))
                                       (builtin "One Step Simplification" (formula "16"))
                                       (rule "true_left" (formula "16"))
                                       (rule "cut_direct" (formula "37") (term "0,0"))
                                       (branch "CUT: MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(add(beginEntry, x_0))) = null TRUE"
                                          (builtin "One Step Simplification" (formula "38"))
                                          (rule "false_right" (formula "38"))
                                          (rule "applyEq" (formula "42") (term "1,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "42") (term "1,0,1") (ifseqformula "1"))
                                          (rule "ifthenelse_split" (formula "4") (term "0"))
                                          (branch "x_0 = i_0 TRUE"
                                             (rule "applyEqReverse" (formula "6") (term "0,0,0,0,0") (ifseqformula "5"))
                                             (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "5"))
                                             (rule "applyEqReverse" (formula "6") (term "1,2,0") (ifseqformula "5"))
                                             (rule "applyEqReverse" (formula "6") (term "1,0,0,1,0,0") (ifseqformula "5"))
                                             (rule "applyEqReverse" (formula "2") (term "1,2,0") (ifseqformula "5"))
                                             (rule "applyEqReverse" (formula "6") (term "1,1,0") (ifseqformula "5"))
                                             (rule "applyEqReverse" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "5"))
                                             (rule "applyEqReverse" (formula "2") (term "0,0,0,0,0") (ifseqformula "5"))
                                             (rule "hideAuxiliaryEq" (formula "5"))
                                             (rule "applyEq" (formula "8") (term "0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "6") (term "0") (ifseqformula "4"))
                                             (rule "inEqSimp_homoInEq0" (formula "6"))
                                             (rule "polySimp_pullOutFactor1" (formula "6") (term "0"))
                                             (rule "add_literals" (formula "6") (term "1,0"))
                                             (rule "times_zero_1" (formula "6") (term "0"))
                                             (rule "qeq_literals" (formula "6"))
                                             (rule "true_left" (formula "6"))
                                             (rule "applyEq" (formula "1") (term "1,0,2,0") (ifseqformula "4"))
                                             (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "applyEqReverse" (formula "40") (term "1,0") (ifseqformula "5"))
                                             (rule "hideAuxiliaryEq" (formula "5"))
                                             (rule "eqSymm" (formula "39") (term "0"))
                                             (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "2"))
                                             (rule "applyEqReverse" (formula "39") (term "1,1") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "eqSymm" (formula "38") (term "1"))
                                             (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "3"))
                                             (rule "inEqSimp_homoInEq0" (formula "2"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0"))
                                             (rule "applyEq" (formula "38") (term "1,0,1") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "38"))
                                             (rule "applyEq" (formula "38") (term "1,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "38"))
                                             (rule "closeTrue" (formula "38"))
                                          )
                                          (branch "x_0 = i_0 FALSE"
                                             (rule "applyEqReverse" (formula "2") (term "0,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEqReverse" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "4"))
                                             (rule "applyEqReverse" (formula "5") (term "1,0,0,1,0,0") (ifseqformula "4"))
                                             (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "4"))
                                             (rule "applyEqReverse" (formula "2") (term "1,2,0") (ifseqformula "4"))
                                             (rule "applyEqReverse" (formula "5") (term "0,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEqReverse" (formula "5") (term "1,2,0") (ifseqformula "4"))
                                             (rule "applyEqReverse" (formula "5") (term "1,1,0") (ifseqformula "4"))
                                             (rule "hideAuxiliaryEq" (formula "4"))
                                             (rule "inEqSimp_strengthen0" (formula "5") (ifseqformula "37"))
                                             (rule "inEqSimp_contradEq3" (formula "37") (ifseqformula "5"))
                                             (rule "polySimp_mulComm0" (formula "37") (term "1,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0"))
                                             (rule "add_literals" (formula "37") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "37") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "37") (term "0,0"))
                                             (rule "qeq_literals" (formula "37") (term "0"))
                                             (builtin "One Step Simplification" (formula "37"))
                                             (rule "false_right" (formula "37"))
                                             (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "5"))
                                             (rule "times_zero_1" (formula "7") (term "0,0"))
                                             (rule "add_zero_left" (formula "7") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                                             (rule "mul_literals" (formula "7") (term "1"))
                                             (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "7"))
                                             (rule "leq_literals" (formula "34") (term "0"))
                                             (builtin "One Step Simplification" (formula "34"))
                                             (rule "true_left" (formula "34"))
                                             (rule "ifthenelse_split" (formula "2") (term "0"))
                                             (branch " ! MapCaseStudy.MapEntry::select(anon_heap_loop<<anonHeapFunction>>, target, arr(add(beginTarget, x_0))) = null & ! boolean::select(heap, MapCaseStudy.MapEntry::select(anon_heap_loop<<anonHeapFunction>>, target, arr(add(beginTarget, x_0))), java.lang.Object::<created>) = TRUE TRUE"
                                                (rule "andLeft" (formula "2"))
                                                (rule "notLeft" (formula "2"))
                                                (rule "notLeft" (formula "2"))
                                                (rule "applyEqReverse" (formula "43") (term "1,1") (ifseqformula "2"))
                                                (rule "hideAuxiliaryEq" (formula "2"))
                                                (rule "eqSymm" (formula "42") (term "1"))
                                                (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "37"))
                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "36")))
                                                (rule "applyEqReverse" (formula "42") (term "1,0") (ifseqformula "3"))
                                                (rule "hideAuxiliaryEq" (formula "3"))
                                                (rule "eqSymm" (formula "41") (term "0"))
                                                (rule "allLeft" (formula "32") (inst "t=x_0"))
                                                (rule "replaceKnownSelect_taclet14_0" (formula "32") (term "1,1,1"))
                                                (rule "replaceKnownSelect_taclet18_0" (formula "32") (term "1,0,1"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet15_0" (formula "32") (term "1,1,1"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet21_0" (formula "32") (term "1,0,1"))
                                                (rule "applyEq" (formula "32") (term "1,1,1") (ifseqformula "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "32") (term "0,0") (ifseqformula "6"))
                                                (rule "qeq_literals" (formula "32") (term "0,0,0"))
                                                (builtin "One Step Simplification" (formula "32"))
                                                (rule "inEqSimp_contradInEq0" (formula "32") (term "0") (ifseqformula "3"))
                                                (rule "inEqSimp_homoInEq1" (formula "32") (term "0,0"))
                                                (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "32") (term "0,1,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "32") (term "0,0,0"))
                                                (rule "polySimp_addComm0" (formula "32") (term "0,0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,0"))
                                                (rule "add_literals" (formula "32") (term "1,1,0,0,0"))
                                                (rule "times_zero_1" (formula "32") (term "1,0,0,0"))
                                                (rule "add_zero_right" (formula "32") (term "0,0,0"))
                                                (rule "leq_literals" (formula "32") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "32"))
                                                (rule "pullOutSelect" (formula "32") (term "1") (inst "selectSK=selectSK_18"))
                                                (rule "simplifySelectOfAnon" (formula "33"))
                                                (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "38")) (ifInst ""  (formula "37")))
                                                (rule "simplifySelectOfAnon" (formula "32"))
                                                (builtin "One Step Simplification" (formula "32"))
                                                (rule "applyEqReverse" (formula "32") (term "1") (ifseqformula "33"))
                                                (rule "hideAuxiliaryEq" (formula "33"))
                                                (rule "elementOfArrayRange" (formula "32") (term "0,0") (inst "iv=iv"))
                                                (builtin "One Step Simplification" (formula "32"))
                                                (rule "eqSymm" (formula "32"))
                                                (rule "replace_known_left" (formula "42") (term "0") (ifseqformula "32"))
                                                (builtin "One Step Simplification" (formula "42"))
                                                (rule "allLeft" (formula "34") (inst "t=x_0"))
                                                (rule "replaceKnownSelect_taclet18_0" (formula "34") (term "1,0,1"))
                                                (rule "replaceKnownSelect_taclet14_0" (formula "34") (term "1,1,1"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet21_0" (formula "34") (term "1,0,1"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet15_0" (formula "34") (term "1,1,1"))
                                                (rule "applyEq" (formula "34") (term "1,1,1") (ifseqformula "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "34") (term "0,0") (ifseqformula "6"))
                                                (rule "qeq_literals" (formula "34") (term "0,0,0"))
                                                (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_contradInEq0" (formula "34") (term "0") (ifseqformula "3"))
                                                (rule "inEqSimp_homoInEq1" (formula "34") (term "0,0"))
                                                (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "34") (term "0,1,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "34") (term "0,0,0"))
                                                (rule "polySimp_addComm0" (formula "34") (term "0,0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,0"))
                                                (rule "add_literals" (formula "34") (term "1,1,0,0,0"))
                                                (rule "times_zero_1" (formula "34") (term "1,0,0,0"))
                                                (rule "add_zero_right" (formula "34") (term "0,0,0"))
                                                (rule "leq_literals" (formula "34") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "34"))
                                                (rule "pullOutSelect" (formula "34") (term "1") (inst "selectSK=selectSK_19"))
                                                (rule "simplifySelectOfAnon" (formula "35"))
                                                (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "39")) (ifInst ""  (formula "38")))
                                                (rule "simplifySelectOfAnon" (formula "34"))
                                                (builtin "One Step Simplification" (formula "34"))
                                                (rule "applyEqReverse" (formula "34") (term "1") (ifseqformula "35"))
                                                (rule "hideAuxiliaryEq" (formula "35"))
                                                (rule "elementOfArrayRange" (formula "34") (term "0,0") (inst "iv=iv"))
                                                (builtin "One Step Simplification" (formula "34"))
                                                (rule "eqSymm" (formula "34"))
                                                (rule "close" (formula "43") (ifseqformula "34"))
                                             )
                                             (branch " ! MapCaseStudy.MapEntry::select(anon_heap_loop<<anonHeapFunction>>, target, arr(add(beginTarget, x_0))) = null & ! boolean::select(heap, MapCaseStudy.MapEntry::select(anon_heap_loop<<anonHeapFunction>>, target, arr(add(beginTarget, x_0))), java.lang.Object::<created>) = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "42") (term "1,1") (ifseqformula "2"))
                                                (rule "hideAuxiliaryEq" (formula "2"))
                                                (rule "eqSymm" (formula "41") (term "1"))
                                                (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "36"))
                                                (builtin "One Step Simplification" (formula "3"))
                                                (rule "applyEqReverse" (formula "41") (term "1,0") (ifseqformula "3"))
                                                (rule "hideAuxiliaryEq" (formula "3"))
                                                (rule "eqSymm" (formula "40") (term "0"))
                                                (rule "allLeft" (formula "32") (inst "t=x_0"))
                                                (rule "replaceKnownSelect_taclet14_0" (formula "32") (term "1,1,1"))
                                                (rule "replaceKnownSelect_taclet18_0" (formula "32") (term "1,0,1"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet15_0" (formula "32") (term "1,1,1"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet21_0" (formula "32") (term "1,0,1"))
                                                (rule "applyEq" (formula "32") (term "1,1,1") (ifseqformula "1"))
                                                (rule "inEqSimp_contradInEq0" (formula "32") (term "1,0") (ifseqformula "3"))
                                                (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0"))
                                                (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0"))
                                                (rule "polySimp_addComm0" (formula "32") (term "0,0,0,1,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1,0"))
                                                (rule "add_literals" (formula "32") (term "1,1,0,0,1,0"))
                                                (rule "times_zero_1" (formula "32") (term "1,0,0,1,0"))
                                                (rule "add_zero_right" (formula "32") (term "0,0,1,0"))
                                                (rule "leq_literals" (formula "32") (term "0,1,0"))
                                                (builtin "One Step Simplification" (formula "32"))
                                                (rule "inEqSimp_contradInEq1" (formula "32") (term "0") (ifseqformula "6"))
                                                (rule "qeq_literals" (formula "32") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "32"))
                                                (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=selectSK_16"))
                                                (rule "simplifySelectOfAnon" (formula "32"))
                                                (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "37")))
                                                (rule "eqSymm" (formula "33"))
                                                (rule "simplifySelectOfAnon" (formula "33"))
                                                (builtin "One Step Simplification" (formula "33"))
                                                (rule "elementOfArrayRange" (formula "32") (term "0,0") (inst "iv=iv"))
                                                (builtin "One Step Simplification" (formula "32"))
                                                (rule "applyEqReverse" (formula "33") (term "1") (ifseqformula "32"))
                                                (rule "hideAuxiliaryEq" (formula "32"))
                                                (rule "elementOfArrayRange" (formula "32") (term "0,0") (inst "iv=iv"))
                                                (builtin "One Step Simplification" (formula "32"))
                                                (rule "eqSymm" (formula "32"))
                                                (rule "replace_known_left" (formula "41") (term "0") (ifseqformula "32"))
                                                (builtin "One Step Simplification" (formula "41"))
                                                (rule "allLeft" (formula "34") (inst "t=x_0"))
                                                (rule "replaceKnownSelect_taclet14_0" (formula "34") (term "1,1,1"))
                                                (rule "replaceKnownSelect_taclet18_0" (formula "34") (term "1,0,1"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet15_0" (formula "34") (term "1,1,1"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet21_0" (formula "34") (term "1,0,1"))
                                                (rule "applyEq" (formula "34") (term "1,1,1") (ifseqformula "1"))
                                                (rule "inEqSimp_contradInEq0" (formula "34") (term "1,0") (ifseqformula "3"))
                                                (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0"))
                                                (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0"))
                                                (rule "polySimp_addComm0" (formula "34") (term "0,0,0,1,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1,0"))
                                                (rule "add_literals" (formula "34") (term "1,1,0,0,1,0"))
                                                (rule "times_zero_1" (formula "34") (term "1,0,0,1,0"))
                                                (rule "add_zero_right" (formula "34") (term "0,0,1,0"))
                                                (rule "leq_literals" (formula "34") (term "0,1,0"))
                                                (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_contradInEq1" (formula "34") (term "0") (ifseqformula "6"))
                                                (rule "qeq_literals" (formula "34") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "34"))
                                                (rule "pullOutSelect" (formula "34") (term "1") (inst "selectSK=selectSK_17"))
                                                (rule "simplifySelectOfAnon" (formula "35"))
                                                (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "38")))
                                                (rule "simplifySelectOfAnon" (formula "34"))
                                                (builtin "One Step Simplification" (formula "34"))
                                                (rule "elementOfArrayRange" (formula "35") (term "0,0") (inst "iv=iv"))
                                                (builtin "One Step Simplification" (formula "35"))
                                                (rule "applyEqReverse" (formula "34") (term "1") (ifseqformula "35"))
                                                (rule "hideAuxiliaryEq" (formula "35"))
                                                (rule "elementOfArrayRange" (formula "34") (term "0,0") (inst "iv=iv"))
                                                (builtin "One Step Simplification" (formula "34"))
                                                (rule "eqSymm" (formula "34"))
                                                (rule "close" (formula "42") (ifseqformula "34"))
                                             )
                                          )
                                       )
                                       (branch "CUT: MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(add(beginEntry, x_0))) = null FALSE"
                                          (builtin "One Step Simplification" (formula "38"))
                                          (rule "notRight" (formula "38"))
                                          (rule "ifthenelse_split" (formula "4") (term "0"))
                                          (branch "x_0 = i_0 TRUE"
                                             (rule "applyEqReverse" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "5"))
                                             (rule "applyEqReverse" (formula "2") (term "1,2,0") (ifseqformula "5"))
                                             (rule "applyEqReverse" (formula "6") (term "0,0,0,0,0") (ifseqformula "5"))
                                             (rule "applyEqReverse" (formula "6") (term "1,2,0") (ifseqformula "5"))
                                             (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "5"))
                                             (rule "applyEqReverse" (formula "6") (term "1,1,0") (ifseqformula "5"))
                                             (rule "applyEqReverse" (formula "6") (term "1,0,0,1,0,0") (ifseqformula "5"))
                                             (rule "applyEqReverse" (formula "2") (term "0,0,0,0,0") (ifseqformula "5"))
                                             (rule "hideAuxiliaryEq" (formula "5"))
                                             (rule "applyEqRigid" (formula "6") (term "0") (ifseqformula "4"))
                                             (rule "inEqSimp_homoInEq0" (formula "6"))
                                             (rule "polySimp_pullOutFactor1" (formula "6") (term "0"))
                                             (rule "add_literals" (formula "6") (term "1,0"))
                                             (rule "times_zero_1" (formula "6") (term "0"))
                                             (rule "qeq_literals" (formula "6"))
                                             (rule "true_left" (formula "6"))
                                             (rule "applyEq" (formula "42") (term "1,0,2,1,0,0") (ifseqformula "4"))
                                             (rule "applyEqRigid" (formula "37") (term "1,0,2,0") (ifseqformula "4"))
                                             (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "37"))
                                             (builtin "One Step Simplification" (formula "2"))
                                             (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "37"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "ifthenelse_negated" (formula "2") (term "0"))
                                             (rule "ifthenelse_negated" (formula "5") (term "0"))
                                             (rule "applyEqRigid" (formula "42") (term "1,0,2,1,0,1") (ifseqformula "4"))
                                             (rule "applyEqRigid" (formula "7") (term "0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "3") (term "0") (ifseqformula "4"))
                                             (rule "inEqSimp_homoInEq0" (formula "3"))
                                             (rule "polySimp_addComm1" (formula "3") (term "0"))
                                             (rule "applyEqRigid" (formula "1") (term "1,0,2,1,0") (ifseqformula "4"))
                                             (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "2"))
                                             (rule "applyEqReverse" (formula "41") (term "1,1") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "41"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "40")))
                                             (rule "closeFalse" (formula "4"))
                                          )
                                          (branch "x_0 = i_0 FALSE"
                                             (rule "applyEqReverse" (formula "2") (term "1,2,0") (ifseqformula "4"))
                                             (rule "applyEqReverse" (formula "5") (term "0,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEqReverse" (formula "2") (term "0,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEqReverse" (formula "5") (term "1,2,0") (ifseqformula "4"))
                                             (rule "applyEqReverse" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "4"))
                                             (rule "applyEqReverse" (formula "5") (term "1,0,0,1,0,0") (ifseqformula "4"))
                                             (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "4"))
                                             (rule "applyEqReverse" (formula "5") (term "1,1,0") (ifseqformula "4"))
                                             (rule "hideAuxiliaryEq" (formula "4"))
                                             (rule "inEqSimp_strengthen0" (formula "5") (ifseqformula "37"))
                                             (rule "inEqSimp_contradEq3" (formula "37") (ifseqformula "5"))
                                             (rule "polySimp_mulComm0" (formula "37") (term "1,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0"))
                                             (rule "add_literals" (formula "37") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "37") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "37") (term "0,0"))
                                             (rule "qeq_literals" (formula "37") (term "0"))
                                             (builtin "One Step Simplification" (formula "37"))
                                             (rule "false_right" (formula "37"))
                                             (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "5"))
                                             (rule "times_zero_1" (formula "7") (term "0,0"))
                                             (rule "add_zero_left" (formula "7") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                                             (rule "mul_literals" (formula "7") (term "1"))
                                             (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "7"))
                                             (rule "leq_literals" (formula "34") (term "0"))
                                             (builtin "One Step Simplification" (formula "34"))
                                             (rule "true_left" (formula "34"))
                                             (rule "ifthenelse_split" (formula "2") (term "0"))
                                             (branch " ! MapCaseStudy.MapEntry::select(anon_heap_loop<<anonHeapFunction>>, target, arr(add(beginTarget, x_0))) = null & ! boolean::select(heap, MapCaseStudy.MapEntry::select(anon_heap_loop<<anonHeapFunction>>, target, arr(add(beginTarget, x_0))), java.lang.Object::<created>) = TRUE TRUE"
                                                (rule "andLeft" (formula "2"))
                                                (rule "notLeft" (formula "2"))
                                                (rule "notLeft" (formula "2"))
                                                (rule "applyEqReverse" (formula "44") (term "1,1") (ifseqformula "2"))
                                                (rule "hideAuxiliaryEq" (formula "2"))
                                                (rule "eqSymm" (formula "43") (term "1"))
                                                (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "37"))
                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "36")))
                                                (rule "applyEqReverse" (formula "43") (term "1,0") (ifseqformula "3"))
                                                (rule "hideAuxiliaryEq" (formula "3"))
                                                (rule "eqSymm" (formula "42") (term "0"))
                                                (rule "allLeft" (formula "32") (inst "t=x_0"))
                                                (rule "replaceKnownSelect_taclet14_0" (formula "32") (term "1,1,1"))
                                                (rule "replaceKnownSelect_taclet18_0" (formula "32") (term "1,0,1"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet15_0" (formula "32") (term "1,1,1"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet21_0" (formula "32") (term "1,0,1"))
                                                (rule "inEqSimp_contradInEq0" (formula "32") (term "1,0") (ifseqformula "3"))
                                                (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0"))
                                                (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0"))
                                                (rule "polySimp_addComm0" (formula "32") (term "0,0,0,1,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1,0"))
                                                (rule "add_literals" (formula "32") (term "1,1,0,0,1,0"))
                                                (rule "times_zero_1" (formula "32") (term "1,0,0,1,0"))
                                                (rule "add_zero_right" (formula "32") (term "0,0,1,0"))
                                                (rule "leq_literals" (formula "32") (term "0,1,0"))
                                                (builtin "One Step Simplification" (formula "32"))
                                                (rule "inEqSimp_contradInEq1" (formula "32") (term "0") (ifseqformula "6"))
                                                (rule "qeq_literals" (formula "32") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "32"))
                                                (rule "pullOutSelect" (formula "32") (term "1") (inst "selectSK=selectSK_13"))
                                                (rule "simplifySelectOfAnon" (formula "32"))
                                                (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "39")) (ifInst ""  (formula "1")))
                                                (rule "simplifySelectOfAnon" (formula "33"))
                                                (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "38")) (ifInst ""  (formula "37")))
                                                (rule "applyEqReverse" (formula "32") (term "1") (ifseqformula "33"))
                                                (rule "hideAuxiliaryEq" (formula "33"))
                                                (rule "elementOfArrayRange" (formula "32") (term "0,0") (inst "iv=iv"))
                                                (builtin "One Step Simplification" (formula "32"))
                                                (rule "eqSymm" (formula "32"))
                                                (rule "replace_known_left" (formula "43") (term "0") (ifseqformula "32"))
                                                (builtin "One Step Simplification" (formula "43"))
                                                (rule "allLeft" (formula "34") (inst "t=x_0"))
                                                (rule "replaceKnownSelect_taclet18_0" (formula "34") (term "1,0,1"))
                                                (rule "replaceKnownSelect_taclet14_0" (formula "34") (term "1,1,1"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet21_0" (formula "34") (term "1,0,1"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet15_0" (formula "34") (term "1,1,1"))
                                                (rule "inEqSimp_contradInEq0" (formula "34") (term "1,0") (ifseqformula "3"))
                                                (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0"))
                                                (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0"))
                                                (rule "polySimp_addComm0" (formula "34") (term "0,0,0,1,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1,0"))
                                                (rule "add_literals" (formula "34") (term "1,1,0,0,1,0"))
                                                (rule "times_zero_1" (formula "34") (term "1,0,0,1,0"))
                                                (rule "add_zero_right" (formula "34") (term "0,0,1,0"))
                                                (rule "leq_literals" (formula "34") (term "0,1,0"))
                                                (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_contradInEq1" (formula "34") (term "0") (ifseqformula "6"))
                                                (rule "qeq_literals" (formula "34") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "34"))
                                                (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=selectSK_14"))
                                                (rule "simplifySelectOfAnon" (formula "34"))
                                                (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "39")) (ifInst ""  (formula "38")))
                                                (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "34"))
                                                (rule "hideAuxiliaryEq" (formula "34"))
                                                (rule "eqSymm" (formula "34"))
                                                (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=selectSK_15"))
                                                (rule "simplifySelectOfAnon" (formula "34"))
                                                (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "40")) (ifInst ""  (formula "1")))
                                                (rule "eqSymm" (formula "35"))
                                                (rule "applyEqReverse" (formula "34") (term "1") (ifseqformula "35"))
                                                (rule "hideAuxiliaryEq" (formula "35"))
                                                (rule "elementOfArrayRange" (formula "34") (term "0,0") (inst "iv=iv"))
                                                (builtin "One Step Simplification" (formula "34"))
                                                (rule "eqSymm" (formula "34"))
                                                (rule "close" (formula "44") (ifseqformula "34"))
                                             )
                                             (branch " ! MapCaseStudy.MapEntry::select(anon_heap_loop<<anonHeapFunction>>, target, arr(add(beginTarget, x_0))) = null & ! boolean::select(heap, MapCaseStudy.MapEntry::select(anon_heap_loop<<anonHeapFunction>>, target, arr(add(beginTarget, x_0))), java.lang.Object::<created>) = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "43") (term "1,1") (ifseqformula "2"))
                                                (rule "hideAuxiliaryEq" (formula "2"))
                                                (rule "eqSymm" (formula "42") (term "1"))
                                                (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "36"))
                                                (builtin "One Step Simplification" (formula "3"))
                                                (rule "applyEqReverse" (formula "42") (term "1,0") (ifseqformula "3"))
                                                (rule "hideAuxiliaryEq" (formula "3"))
                                                (rule "eqSymm" (formula "41") (term "0"))
                                                (rule "allLeft" (formula "32") (inst "t=x_0"))
                                                (rule "replaceKnownSelect_taclet18_0" (formula "32") (term "1,0,1"))
                                                (rule "replaceKnownSelect_taclet14_0" (formula "32") (term "1,1,1"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet21_0" (formula "32") (term "1,0,1"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet15_0" (formula "32") (term "1,1,1"))
                                                (rule "inEqSimp_contradInEq1" (formula "32") (term "0,0") (ifseqformula "6"))
                                                (rule "qeq_literals" (formula "32") (term "0,0,0"))
                                                (builtin "One Step Simplification" (formula "32"))
                                                (rule "inEqSimp_contradInEq0" (formula "32") (term "0") (ifseqformula "3"))
                                                (rule "inEqSimp_homoInEq1" (formula "32") (term "0,0"))
                                                (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "32") (term "0,1,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "32") (term "0,0,0"))
                                                (rule "polySimp_addComm0" (formula "32") (term "0,0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,0"))
                                                (rule "add_literals" (formula "32") (term "1,1,0,0,0"))
                                                (rule "times_zero_1" (formula "32") (term "1,0,0,0"))
                                                (rule "add_zero_right" (formula "32") (term "0,0,0"))
                                                (rule "leq_literals" (formula "32") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "32"))
                                                (rule "pullOutSelect" (formula "32") (term "1") (inst "selectSK=selectSK_11"))
                                                (rule "simplifySelectOfAnon" (formula "33"))
                                                (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "37")))
                                                (rule "simplifySelectOfAnon" (formula "32"))
                                                (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "38")) (ifInst ""  (formula "1")))
                                                (rule "elementOfArrayRange" (formula "33") (term "0,0") (inst "iv=iv"))
                                                (builtin "One Step Simplification" (formula "33"))
                                                (rule "applyEqReverse" (formula "32") (term "1") (ifseqformula "33"))
                                                (rule "hideAuxiliaryEq" (formula "33"))
                                                (rule "elementOfArrayRange" (formula "32") (term "0,0") (inst "iv=iv"))
                                                (builtin "One Step Simplification" (formula "32"))
                                                (rule "eqSymm" (formula "32"))
                                                (rule "replace_known_left" (formula "42") (term "0") (ifseqformula "32"))
                                                (builtin "One Step Simplification" (formula "42"))
                                                (rule "allLeft" (formula "34") (inst "t=x_0"))
                                                (rule "replaceKnownSelect_taclet14_0" (formula "34") (term "1,1,1"))
                                                (rule "replaceKnownSelect_taclet18_0" (formula "34") (term "1,0,1"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet15_0" (formula "34") (term "1,1,1"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet21_0" (formula "34") (term "1,0,1"))
                                                (rule "inEqSimp_contradInEq0" (formula "34") (term "1,0") (ifseqformula "3"))
                                                (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0"))
                                                (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0"))
                                                (rule "polySimp_addComm0" (formula "34") (term "0,0,0,1,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1,0"))
                                                (rule "add_literals" (formula "34") (term "1,1,0,0,1,0"))
                                                (rule "times_zero_1" (formula "34") (term "1,0,0,1,0"))
                                                (rule "add_zero_right" (formula "34") (term "0,0,1,0"))
                                                (rule "leq_literals" (formula "34") (term "0,1,0"))
                                                (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_contradInEq1" (formula "34") (term "0") (ifseqformula "6"))
                                                (rule "qeq_literals" (formula "34") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "34"))
                                                (rule "pullOutSelect" (formula "34") (term "1") (inst "selectSK=selectSK_12"))
                                                (rule "simplifySelectOfAnon" (formula "34"))
                                                (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "39")) (ifInst ""  (formula "1")))
                                                (rule "simplifySelectOfAnon" (formula "35"))
                                                (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "38")))
                                                (rule "elementOfArrayRange" (formula "34") (term "0,0") (inst "iv=iv"))
                                                (builtin "One Step Simplification" (formula "34"))
                                                (rule "applyEqReverse" (formula "35") (term "1") (ifseqformula "34"))
                                                (rule "hideAuxiliaryEq" (formula "34"))
                                                (rule "elementOfArrayRange" (formula "34") (term "0,0") (inst "iv=iv"))
                                                (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "43")))
                                                (rule "closeFalse" (formula "34"))
                                             )
                                          )
                                       )
                                    )
                                    (branch "leq(x_0, add(Z(neglit(1(#))), numberCopies)) FALSE"
                                       (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "inEqSimp_leqRight" (formula "36"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1"))
                                       (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "5"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0"))
                                       (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "1"))
                                       (rule "andLeft" (formula "10"))
                                       (rule "inEqSimp_homoInEq1" (formula "10"))
                                       (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                                       (rule "add_literals" (formula "10") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "10") (term "1,0"))
                                       (rule "add_zero_right" (formula "10") (term "0"))
                                       (rule "leq_literals" (formula "10"))
                                       (rule "closeFalse" (formula "10"))
                                    )
                                 )
                              )
                           )
                           (branch "Case 2"
                              (rule "allRight" (formula "36") (inst "sk=o_7") (userinteraction))
                              (rule "instAll" (formula "36") (term "0,0,1,0,0") (ifseqformula "31") (userinteraction))
                              (rule "orRight" (formula "37"))
                              (rule "orRight" (formula "38"))
                              (rule "orRight" (formula "37"))
                              (rule "replace_known_right" (formula "37") (term "0,1") (ifseqformula "39"))
                              (builtin "One Step Simplification" (formula "37"))
                              (rule "notRight" (formula "37"))
                              (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "39"))
                              (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "38")))
                              (rule "notLeft" (formula "2"))
                              (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                              (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=selectSK_46"))
                              (rule "simplifySelectOfStore" (formula "1"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "simplifySelectOfAnon" (formula "1"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")) (ifInst ""  (formula "38")))
                              (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                              (rule "close" (formula "33") (ifseqformula "2"))
                           )
                        )
                        (branch "Case 2"
                           (rule "allRight" (formula "36") (inst "sk=f_0"))
                           (rule "allRight" (formula "36") (inst "sk=o_1"))
                           (rule "orRight" (formula "36"))
                           (rule "orRight" (formula "36"))
                           (rule "eqSymm" (formula "38"))
                           (rule "eqSymm" (formula "36") (term "0,0,0,1"))
                           (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                           (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=selectSK_21"))
                           (rule "simplifySelectOfStore" (formula "1"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "castDel" (formula "1") (term "1,0"))
                           (rule "eqSymm" (formula "38"))
                           (rule "eqSymm" (formula "1") (term "0,0,0"))
                           (rule "eqSymm" (formula "1") (term "1,0,0"))
                           (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=selectSK_22"))
                           (rule "simplifySelectOfAnon" (formula "1"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "38")))
                           (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
                           (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0"))
                           (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "37"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "commute_and" (formula "1") (term "0,0"))
                           (rule "cut_direct" (formula "37") (term "0,0"))
                           (branch "CUT: o_1 = null TRUE"
                              (builtin "One Step Simplification" (formula "38"))
                              (rule "false_right" (formula "38"))
                              (rule "applyEqRigid" (formula "37") (term "0,0") (ifseqformula "1"))
                              (rule "eqSymm" (formula "37") (term "0"))
                              (rule "replace_known_right" (formula "37") (term "0") (ifseqformula "35"))
                              (builtin "One Step Simplification" (formula "37"))
                              (rule "false_right" (formula "37"))
                              (rule "applyEqRigid" (formula "37") (term "1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                              (rule "eqSymm" (formula "2") (term "1,0,0"))
                              (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "35"))
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "applyEqReverse" (formula "37") (term "1") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "eqSymm" (formula "36"))
                              (rule "applyEq" (formula "36") (term "1,0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "36"))
                              (rule "closeTrue" (formula "36"))
                           )
                           (branch "CUT: o_1 = null FALSE"
                              (builtin "One Step Simplification" (formula "38"))
                              (rule "notRight" (formula "38"))
                              (rule "cut_direct" (formula "37") (term "0"))
                              (branch "CUT: o_1 = target TRUE"
                                 (builtin "One Step Simplification" (formula "38"))
                                 (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "39") (term "1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "38") (term "0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "2") (term "1,2,0") (ifseqformula "1"))
                                 (rule "nnf_ex2all" (formula "37"))
                                 (rule "nnf_notAnd" (formula "1") (term "0"))
                                 (rule "inEqSimp_notLeq" (formula "1") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,0,1,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                                 (rule "polySimp_mulAssoc" (formula "1") (term "0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0,1,1,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                                 (rule "commute_or" (formula "1") (term "0,0"))
                                 (rule "commute_or_2" (formula "1") (term "0"))
                                 (rule "ifthenelse_split" (formula "3") (term "0"))
                                 (branch "f_0 = arr(add(beginTarget, i_0)) TRUE"
                                    (rule "applyEqReverse" (formula "39") (term "1") (ifseqformula "4"))
                                    (rule "hideAuxiliaryEq" (formula "4"))
                                    (rule "applyEq" (formula "38") (term "2,0") (ifseqformula "3"))
                                    (rule "narrowSelectArrayType" (formula "38") (term "0") (ifseqformula "8") (ifseqformula "36"))
                                    (rule "applyEq" (formula "1") (term "1,0,1,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "castDel" (formula "1") (term "0,0,0"))
                                    (rule "castDel" (formula "1") (term "0,1,0"))
                                    (rule "instanceof_static_type" (formula "1") (term "0,0,1"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "1") (term "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,1"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0,1"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0,1"))
                                    (rule "polySimp_pullOutFactor1" (formula "1") (term "0,0,0,1"))
                                    (rule "add_literals" (formula "1") (term "1,0,0,0,1"))
                                    (rule "times_zero_1" (formula "1") (term "0,0,0,1"))
                                    (rule "add_zero_left" (formula "1") (term "0,0,1"))
                                    (rule "inEqSimp_homoInEq0" (formula "1") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                                    (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "1") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0,0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "6"))
                                    (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
                                    (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                    (rule "leq_literals" (formula "1") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "30"))
                                    (rule "qeq_literals" (formula "1") (term "0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "f_0 = arr(add(beginTarget, i_0)) FALSE"
                                    (rule "close" (formula "39") (ifseqformula "3"))
                                 )
                              )
                              (branch "CUT: o_1 = target FALSE"
                                 (builtin "One Step Simplification" (formula "38"))
                                 (rule "false_right" (formula "38"))
                                 (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "37"))
                                 (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "39")))
                                 (rule "closeFalse" (formula "2"))
                              )
                           )
                        )
                     )
                     (branch "Case 2"
                        (rule "andRight" (formula "36"))
                        (branch "Case 1"
                           (rule "inEqSimp_leqRight" (formula "36"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "4"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "1"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_literals" (formula "1") (term "0"))
                           (rule "leq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "Case 2"
                           (rule "polySimp_mulComm0" (formula "36") (term "1,1"))
                           (rule "inEqSimp_geqRight" (formula "36"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,1,1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "1,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,1,1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,1,1,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_zero_right" (formula "1") (term "0"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_literals" (formula "1") (term "0"))
                           (rule "leq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                  )
                  (branch "Null Reference (m_arr_1 = null)"
                     (rule "false_right" (formula "37"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "Index Out of Bounds (m_arr_1 != null, but x_2 Out of Bounds!)"
                     (rule "false_right" (formula "37"))
                     (rule "andLeft" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "orLeft" (formula "1"))
                     (branch "leq(length(m_arr_1), x_2)"
                        (builtin "One Step Simplification" (formula "1"))
                        (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "36")))
                        (rule "false_right" (formula "33"))
                        (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                        (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "1"))
                        (rule "andLeft" (formula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "3") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                        (rule "add_literals" (formula "3") (term "1,1,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0"))
                        (rule "add_literals" (formula "3") (term "0"))
                        (rule "leq_literals" (formula "3"))
                        (rule "closeFalse" (formula "3"))
                     )
                     (branch "lt(x_2, Z(0(#)))"
                        (builtin "One Step Simplification" (formula "1"))
                        (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "36")))
                        (rule "false_right" (formula "33"))
                        (rule "inEqSimp_ltToLeq" (formula "1"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "mul_literals" (formula "1") (term "0,1"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
                        (rule "andLeft" (formula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "1,1,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0"))
                        (rule "add_literals" (formula "1") (term "0"))
                        (rule "leq_literals" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "Array Store Exception (incompatible dynamic element type of m_arr_1 and m)"
                     (rule "false_right" (formula "37"))
                     (rule "andLeft" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "notLeft" (formula "3"))
                     (builtin "One Step Simplification" (formula "2"))
                     (builtin "One Step Simplification" (formula "1"))
                     (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "38")))
                     (builtin "One Step Simplification" (formula "34"))
                     (rule "false_right" (formula "35"))
                     (rule "inEqSimp_ltToLeq" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "array_store_known_dynamic_array_type" (formula "34") (ifseqformula "18"))
                     (rule "orRight" (formula "34"))
                     (rule "instanceof_static_type" (formula "35") (term "0"))
                     (builtin "One Step Simplification" (formula "35"))
                     (rule "closeTrue" (formula "35"))
                  )
               )
               (branch "Null Reference (m_arr_4 = null)"
                  (rule "false_right" (formula "37"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "33")))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "Index Out of Bounds (m_arr_4 != null, but x_6 Out of Bounds!)"
                  (rule "false_right" (formula "37"))
                  (rule "andLeft" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "orLeft" (formula "1"))
                  (branch "leq(length(m_arr_4), x_6)"
                     (builtin "One Step Simplification" (formula "1"))
                     (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "34")))
                     (rule "false_right" (formula "33"))
                     (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                     (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "1"))
                     (rule "times_zero_1" (formula "15") (term "0,0"))
                     (rule "add_zero_left" (formula "15") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                     (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "1"))
                     (rule "polySimp_rightDist" (formula "17") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "17") (term "0"))
                     (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
                     (rule "polySimp_pullOutFactor2" (formula "17") (term "0,0,0"))
                     (rule "add_literals" (formula "17") (term "1,0,0,0"))
                     (rule "times_zero_1" (formula "17") (term "0,0,0"))
                     (rule "add_zero_left" (formula "17") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "17"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                     (rule "polySimp_elimOne" (formula "17") (term "0"))
                     (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "17"))
                     (rule "andLeft" (formula "4"))
                     (rule "inEqSimp_homoInEq1" (formula "4"))
                     (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                     (rule "add_literals" (formula "4") (term "1,1,0"))
                     (rule "times_zero_1" (formula "4") (term "1,0"))
                     (rule "add_zero_right" (formula "4") (term "0"))
                     (rule "leq_literals" (formula "4"))
                     (rule "closeFalse" (formula "4"))
                  )
                  (branch "lt(x_6, Z(0(#)))"
                     (builtin "One Step Simplification" (formula "1"))
                     (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "34")))
                     (rule "false_right" (formula "33"))
                     (rule "inEqSimp_ltToLeq" (formula "1"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "0,1"))
                     (rule "inEqSimp_exactShadow3" (formula "28") (ifseqformula "1"))
                     (rule "times_zero_1" (formula "28") (term "0,0"))
                     (rule "add_zero_left" (formula "28") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "28"))
                     (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                     (rule "polySimp_elimOne" (formula "28") (term "0"))
                     (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "14"))
                     (rule "qeq_literals" (formula "28") (term "0"))
                     (builtin "One Step Simplification" (formula "28"))
                     (rule "closeFalse" (formula "28"))
                  )
               )
            )
         )
      )
      (branch "Null Reference (m_arr_2 = null)"
         (rule "false_right" (formula "35"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "33")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Use Case"
      (builtin "One Step Simplification" (formula "24"))
      (builtin "One Step Simplification" (formula "29"))
      (rule "translateJavaSubInt" (formula "24") (term "2,1,0,1,1,1,1,1,0,1,0"))
      (rule "translateJavaAddInt" (formula "24") (term "0,2,1,0,1,1,1,0,1,0"))
      (rule "translateJavaSubInt" (formula "24") (term "2,1,0,1,1,1,1,0,1,0"))
      (rule "translateJavaSubInt" (formula "24") (term "2,1,0,0,1,1,0,1,0"))
      (rule "translateJavaSubInt" (formula "24") (term "2,1,0,1,0,1,1,0,1,0"))
      (rule "translateJavaAddInt" (formula "24") (term "0,2,1,0,1,1,0,1,0"))
      (rule "translateJavaAddInt" (formula "24") (term "0,2,1,0,0,0,1,0,1,0"))
      (rule "translateJavaAddInt" (formula "24") (term "0,2,1,0,1,1,0,1,0,1,0"))
      (rule "translateJavaAddInt" (formula "24") (term "0,2,1,0,0,1,0,1,0"))
      (rule "translateJavaAddInt" (formula "24") (term "0,2,1,0,1,0,0,1,0,1,0"))
      (rule "translateJavaAddInt" (formula "24") (term "0,2,1,0,1,0,1,0,1,0"))
      (rule "translateJavaAddInt" (formula "24") (term "0,2,1,0,1,1,1,0,1,0,1,0"))
      (rule "translateJavaAddInt" (formula "24") (term "0,2,1,1,0,1,0,1,0"))
      (rule "translateJavaAddInt" (formula "24") (term "0,2,1,1,1,1,0,1,0"))
      (rule "translateJavaAddInt" (formula "29") (term "0,2,1,0,1,1,0"))
      (rule "translateJavaAddInt" (formula "24") (term "0,2,1,0,1,1,1,1,1,0,1,0"))
      (rule "translateJavaSubInt" (formula "24") (term "2,1,0,1,1,1,0,1,0"))
      (rule "translateJavaAddInt" (formula "24") (term "0,2,1,0,1,1,1,1,0,1,0"))
      (rule "translateJavaAddInt" (formula "24") (term "0,2,1,0,0,1,1,0,1,0"))
      (rule "translateJavaAddInt" (formula "24") (term "0,2,1,0,1,0,1,1,0,1,0"))
      (rule "translateJavaSubInt" (formula "24") (term "2,1,0,0,0,1,0,1,0"))
      (rule "translateJavaSubInt" (formula "24") (term "2,1,0,1,1,0,1,0,1,0"))
      (rule "translateJavaSubInt" (formula "24") (term "2,1,0,1,0,0,1,0,1,0"))
      (rule "translateJavaSubInt" (formula "24") (term "2,1,0,1,0,1,0,1,0"))
      (rule "translateJavaSubInt" (formula "24") (term "2,1,0,1,1,1,0,1,0,1,0"))
      (rule "translateJavaSubInt" (formula "29") (term "2,1,0,1,1,0"))
      (rule "andLeft" (formula "24"))
      (rule "andLeft" (formula "24"))
      (rule "andLeft" (formula "24"))
      (rule "polySimp_elimSub" (formula "32") (term "2,1,0,1,1,0"))
      (rule "mul_literals" (formula "32") (term "1,2,1,0,1,1,0"))
      (rule "polySimp_elimSub" (formula "26") (term "2,1,0,1,0,0,1,0"))
      (rule "mul_literals" (formula "26") (term "1,2,1,0,1,0,0,1,0"))
      (rule "polySimp_elimSub" (formula "26") (term "2,1,0,1,1,1,0"))
      (rule "mul_literals" (formula "26") (term "1,2,1,0,1,1,1,0"))
      (rule "polySimp_elimSub" (formula "26") (term "2,1,0,1,0,1,1,0"))
      (rule "mul_literals" (formula "26") (term "1,2,1,0,1,0,1,1,0"))
      (rule "polySimp_elimSub" (formula "26") (term "2,1,0,1,1,1,1,0"))
      (rule "mul_literals" (formula "26") (term "1,2,1,0,1,1,1,1,0"))
      (rule "polySimp_elimSub" (formula "26") (term "2,1,0,0,0,1,0"))
      (rule "mul_literals" (formula "26") (term "1,2,1,0,0,0,1,0"))
      (rule "eqSymm" (formula "26") (term "0,1,0"))
      (rule "polySimp_elimSub" (formula "26") (term "2,1,0,0,1,1,0"))
      (rule "mul_literals" (formula "26") (term "1,2,1,0,0,1,1,0"))
      (rule "polySimp_elimSub" (formula "26") (term "2,1,0,1,1,1,1,1,0"))
      (rule "mul_literals" (formula "26") (term "1,2,1,0,1,1,1,1,1,0"))
      (rule "polySimp_elimSub" (formula "26") (term "2,1,0,1,1,0,0,1,0"))
      (rule "mul_literals" (formula "26") (term "1,2,1,0,1,1,0,0,1,0"))
      (rule "polySimp_elimSub" (formula "26") (term "2,1,0,1,0,0,1,0"))
      (rule "mul_literals" (formula "26") (term "1,2,1,0,1,0,0,1,0"))
      (rule "polySimp_elimSub" (formula "26") (term "2,1,0,0,0,1,0"))
      (rule "mul_literals" (formula "26") (term "1,2,1,0,0,0,1,0"))
      (rule "eqSymm" (formula "26") (term "0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
      (rule "polySimp_addComm1" (formula "32") (term "2,1,0,1,1,0"))
      (rule "polySimp_addComm1" (formula "26") (term "2,1,0,1,1,1,0"))
      (rule "polySimp_addComm1" (formula "26") (term "2,1,0,1,0,1,1,0"))
      (rule "polySimp_addComm1" (formula "26") (term "2,1,0,1,1,1,1,0"))
      (rule "polySimp_addComm1" (formula "26") (term "2,1,0,0,1,1,0"))
      (rule "polySimp_addComm1" (formula "26") (term "2,1,0,1,1,1,1,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "25"))
      (rule "inEqSimp_commuteLeq" (formula "24"))
      (rule "polySimp_addComm1" (formula "26") (term "2,1,0,1,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "26") (term "2,1,0,0,0,1,0"))
      (rule "eqSymm" (formula "26") (term "0,1,0"))
      (rule "polySimp_addComm0" (formula "32") (term "0,2,1,0,1,1,0"))
      (rule "polySimp_addComm0" (formula "26") (term "0,2,1,0,1,1,1,0"))
      (rule "polySimp_addComm0" (formula "26") (term "0,2,1,0,1,0,1,1,0"))
      (rule "polySimp_addComm0" (formula "26") (term "0,2,1,0,1,1,1,1,0"))
      (rule "polySimp_addComm0" (formula "26") (term "0,2,1,0,0,1,1,0"))
      (rule "polySimp_addComm0" (formula "26") (term "0,2,1,0,1,1,1,1,1,0"))
      (rule "polySimp_addComm1" (formula "26") (term "2,1,0,1,1,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "26") (term "2,1,0,1,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "26") (term "2,1,0,0,0,1,0"))
      (rule "eqSymm" (formula "26") (term "0,1,0"))
      (rule "polySimp_addComm0" (formula "26") (term "0,2,1,0,0,0,1,0"))
      (rule "eqSymm" (formula "26") (term "0,1,0"))
      (rule "polySimp_addComm0" (formula "26") (term "0,2,1,0,1,1,0,0,1,0"))
      (rule "polySimp_addComm0" (formula "26") (term "0,2,1,0,0,0,1,0"))
      (rule "eqSymm" (formula "26") (term "0,1,0"))
      (rule "polySimp_addComm0" (formula "26") (term "0,2,1,0,1,1,0,1,0"))
      (rule "polySimp_addComm0" (formula "26") (term "0,2,1,0,1,0,0,1,0"))
      (rule "variableDeclarationAssign" (formula "32") (term "1"))
      (rule "variableDeclaration" (formula "32") (term "1") (newnames "b_1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
      (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
      (rule "pullOutSelect" (formula "26") (term "1,1,1,1,1,0") (inst "selectSK=selectSK_0"))
      (rule "simplifySelectOfAnon" (formula "26"))
      (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "30")) (ifInst ""  (formula "2")))
      (rule "replaceKnownSelect_taclet0_0" (formula "27") (term "1,1,1,0,1,0"))
      (rule "elementOfArrayRange" (formula "26") (term "0,0") (inst "iv=iv"))
      (builtin "One Step Simplification" (formula "26"))
      (rule "hideAuxiliaryEq" (formula "26"))
      (rule "replaceKnownAuxiliaryConstant_taclet1_0" (formula "26") (term "1,1,1,1,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet1_0" (formula "26") (term "1,1,1,0,1,0"))
      (rule "nnf_imp2or" (formula "27") (term "0"))
      (rule "nnf_imp2or" (formula "26") (term "0"))
      (rule "nnf_notAnd" (formula "27") (term "1,0"))
      (builtin "One Step Simplification" (formula "27"))
      (rule "nnf_notAnd" (formula "26") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
      (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
      (rule "mul_literals" (formula "26") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "27") (term "0,0"))
      (builtin "One Step Simplification" (formula "27"))
      (rule "nnf_notOr" (formula "27") (term "0,0,0"))
      (rule "nnf_notOr" (formula "27") (term "0,0,0,0"))
      (rule "commute_or" (formula "27") (term "1,0"))
      (rule "commute_or" (formula "27") (term "0,0"))
      (rule "commute_or_2" (formula "27") (term "0"))
      (rule "shift_paren_or" (formula "27") (term "0,0"))
      (builtin "One Step Simplification" (formula "27"))
      (rule "cnf_rightDist" (formula "26") (term "0"))
      (rule "distr_forallAnd" (formula "26"))
      (rule "andLeft" (formula "26"))
      (rule "commute_or" (formula "27") (term "0"))
      (rule "cnf_rightDist" (formula "28") (term "0"))
      (rule "distr_forallAnd" (formula "28"))
      (rule "andLeft" (formula "28"))
      (rule "commute_or" (formula "29") (term "0"))
      (builtin "One Step Simplification" (formula "29"))
      (rule "castDel" (formula "29") (term "1,0,1,0"))
      (rule "castDel" (formula "29") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "29"))
      (rule "true_left" (formula "29"))
      (rule "cnf_rightDist" (formula "28") (term "0"))
      (builtin "One Step Simplification" (formula "28"))
      (rule "commute_or" (formula "28") (term "0"))
      (rule "less_than_comparison_simple" (formula "33") (term "1"))
      (builtin "One Step Simplification" (formula "33"))
      (rule "inEqSimp_ltToLeq" (formula "33") (term "0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "33") (term "0,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "33") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "33") (term "0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "33") (term "0,0,0,1,0"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "32") (term "0") (ifseqformula "1"))
      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "30"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "methodCallEmpty" (formula "34") (term "1"))
      (rule "emptyModality" (formula "34") (term "1"))
      (builtin "One Step Simplification" (formula "34"))
      (rule "impRight" (formula "34"))
      (rule "notLeft" (formula "1"))
      (rule "inEqSimp_geqRight" (formula "30"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1"))
      (rule "polySimp_elimOne" (formula "1") (term "1"))
      (rule "inEqSimp_antiSymm" (formula "27") (ifseqformula "1"))
      (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "1"))
      (rule "mul_literals" (formula "7") (term "0,0"))
      (rule "add_zero_left" (formula "7") (term "0"))
      (rule "methodCallEmpty" (formula "36") (term "1"))
      (rule "tryEmpty" (formula "36") (term "1"))
      (rule "emptyModality" (formula "36") (term "1"))
      (rule "andRight" (formula "36"))
      (branch "Case 1"
         (rule "andRight" (formula "36"))
         (branch "Case 1"
            (rule "andRight" (formula "36"))
            (branch "Case 1"
               (builtin "One Step Simplification" (formula "36"))
               (rule "replaceKnownSelect_taclet0_0" (formula "36") (term "1,1,1,1,1,0"))
               (rule "replaceKnownSelect_taclet0_0" (formula "36") (term "1,1,1,0,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet1_0" (formula "36") (term "1,1,1,1,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet1_0" (formula "36") (term "1,1,1,0,1,0"))
               (rule "allRight" (formula "36") (inst "sk=x_8"))
               (rule "orRight" (formula "36"))
               (rule "orRight" (formula "36"))
               (rule "eqSymm" (formula "38") (term "1"))
               (rule "eqSymm" (formula "38") (term "0"))
               (rule "inEqSimp_leqRight" (formula "36"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "37"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "applyEq" (formula "38") (term "1,2,1,0,0,0") (ifseqformula "29"))
               (rule "eqSymm" (formula "38") (term "0"))
               (rule "applyEq" (formula "38") (term "1,2,1,0,1,0,1") (ifseqformula "29"))
               (rule "eqSymm" (formula "38") (term "1"))
               (rule "applyEq" (formula "30") (term "0") (ifseqformula "29"))
               (rule "inEqSimp_homoInEq1" (formula "30"))
               (rule "polySimp_pullOutFactor1" (formula "30") (term "0"))
               (rule "add_literals" (formula "30") (term "1,0"))
               (rule "times_zero_1" (formula "30") (term "0"))
               (rule "leq_literals" (formula "30"))
               (rule "true_left" (formula "30"))
               (rule "applyEq" (formula "30") (term "1,2,1,0,1,0,1,0") (ifseqformula "29"))
               (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
               (rule "applyEq" (formula "3") (term "0") (ifseqformula "28"))
               (rule "inEqSimp_homoInEq0" (formula "3"))
               (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
               (rule "add_literals" (formula "3") (term "1,0"))
               (rule "times_zero_1" (formula "3") (term "0"))
               (rule "qeq_literals" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "applyEq" (formula "28") (term "1,2,1,0,0,1,0") (ifseqformula "27"))
               (rule "eqSymm" (formula "28") (term "1,0"))
               (rule "applyEq" (formula "29") (term "1,2,1,0,1,0,1,0") (ifseqformula "27"))
               (rule "applyEq" (formula "8") (term "0") (ifseqformula "27"))
               (rule "applyEq" (formula "13") (term "1,1") (ifseqformula "26"))
               (rule "applyEq" (formula "28") (term "1,2,1,0,0,1,0") (ifseqformula "26"))
               (rule "eqSymm" (formula "28") (term "1,0"))
               (rule "applyEq" (formula "10") (term "1,1") (ifseqformula "26"))
               (rule "applyEq" (formula "27") (term "1,2,1,0,1,0,1,0") (ifseqformula "26"))
               (rule "applyEq" (formula "27") (term "1,2,1,0,0,1,0") (ifseqformula "26"))
               (rule "eqSymm" (formula "27") (term "1,0"))
               (rule "applyEq" (formula "34") (term "1,2,1,0,0,0") (ifseqformula "26"))
               (rule "eqSymm" (formula "34") (term "0"))
               (rule "applyEq" (formula "28") (term "1,2,1,0,1,0,1,0") (ifseqformula "26"))
               (rule "applyEq" (formula "28") (term "1,2,1,0,0,1,0") (ifseqformula "26"))
               (rule "eqSymm" (formula "28") (term "1,0"))
               (rule "applyEq" (formula "34") (term "1,2,1,0,0,1") (ifseqformula "26"))
               (rule "eqSymm" (formula "34") (term "1"))
               (rule "applyEq" (formula "1") (term "0,1,0,0") (ifseqformula "26"))
               (rule "applyEq" (formula "34") (term "1,2,1,0,1,0,0") (ifseqformula "26"))
               (rule "eqSymm" (formula "34") (term "0"))
               (rule "applyEq" (formula "34") (term "1,2,1,0,0,1") (ifseqformula "26"))
               (rule "eqSymm" (formula "34") (term "1"))
               (rule "applyEq" (formula "34") (term "1,2,1,0,1,0,0") (ifseqformula "26"))
               (rule "eqSymm" (formula "34") (term "0"))
               (rule "applyEq" (formula "34") (term "1,2,1,0,1,0,1") (ifseqformula "26"))
               (rule "eqSymm" (formula "34") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
               (rule "mul_literals" (formula "2") (term "0,0"))
               (rule "add_zero_left" (formula "2") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
               (rule "mul_literals" (formula "2") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "2"))
               (rule "leq_literals" (formula "26") (term "0"))
               (builtin "One Step Simplification" (formula "26"))
               (rule "true_left" (formula "26"))
               (rule "pullOutSelect" (formula "34") (term "1,1,0") (inst "selectSK=selectSK_39"))
               (rule "applyEq" (formula "35") (term "1,1,1") (ifseqformula "1"))
               (rule "simplifySelectOfAnon" (formula "1"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "33")) (ifInst ""  (formula "9")))
               (rule "elementOfArrayRange" (formula "1") (term "0,0") (inst "iv=iv"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "eqSymm" (formula "1") (term "0,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,0,0"))
               (rule "pullOutSelect" (formula "35") (term "1,0,0") (inst "selectSK=selectSK_40"))
               (rule "applyEq" (formula "36") (term "1,0,1") (ifseqformula "1"))
               (rule "simplifySelectOfAnon" (formula "1"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "32")) (ifInst ""  (formula "6")))
               (rule "elementOfArrayRange" (formula "1") (term "0,0") (inst "iv=iv"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")))
               (rule "applyEqReverse" (formula "36") (term "1,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "36") (term "1,0,1") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "35") (term "1,0") (inst "selectSK=selectSK_41"))
               (rule "simplifySelectOfAnon" (formula "1"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "pullOutSelect" (formula "36") (term "1,1") (inst "selectSK=selectSK_42"))
               (rule "simplifySelectOfAnon" (formula "1"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "pullOutSelect" (formula "37") (term "0,0") (inst "selectSK=selectSK_43"))
               (rule "simplifySelectOfAnon" (formula "1"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "pullOutSelect" (formula "38") (term "0,1") (inst "selectSK=selectSK_44"))
               (rule "simplifySelectOfAnon" (formula "1"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEq_and_int4" (formula "5") (term "0,0,0,0"))
               (rule "inEqSimp_homoInEq1" (formula "5") (term "1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,0,1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "5") (term "1,0,1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "5") (term "0,1,0,1,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "5") (term "0,1,0,0,0,0"))
               (rule "polySimp_pullOutFactor1" (formula "5") (term "0,0,1,0,0,0,0"))
               (rule "add_literals" (formula "5") (term "1,0,0,1,0,0,0,0"))
               (rule "times_zero_1" (formula "5") (term "0,0,1,0,0,0,0"))
               (rule "add_zero_left" (formula "5") (term "0,1,0,0,0,0"))
               (rule "inEqSimp_invertInEq0" (formula "5") (term "1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "5") (term "0,1,0,0,0,0"))
               (rule "times_zero_2" (formula "5") (term "1,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "5") (term "0,1,0,0,0,0"))
               (rule "replace_known_left" (formula "5") (term "1,0,0,0,0") (ifseqformula "8"))
               (builtin "One Step Simplification" (formula "5"))
               (rule "applyEq_and_int6" (formula "5") (term "0,0,0"))
               (rule "inEqSimp_homoInEq0" (formula "5") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,0,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "5") (term "1,0,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "5") (term "0,1,0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "5") (term "0,1,0,0,0"))
               (rule "polySimp_addComm1" (formula "5") (term "0,0,1,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,0,1,0,0,0"))
               (rule "add_literals" (formula "5") (term "1,1,0,0,0,1,0,0,0"))
               (rule "times_zero_1" (formula "5") (term "1,0,0,0,1,0,0,0"))
               (rule "add_zero_right" (formula "5") (term "0,0,0,1,0,0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "5") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "5") (term "0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "5") (term "0,1,0,0,0"))
               (rule "replace_known_left" (formula "5") (term "1,0,0,0") (ifseqformula "6"))
               (builtin "One Step Simplification" (formula "5"))
               (rule "instanceof_static_type" (formula "5") (term "0,0,0"))
               (builtin "One Step Simplification" (formula "5"))
               (rule "applyEqReverse" (formula "3") (term "1,0,0,1,0,0") (ifseqformula "5"))
               (rule "applyEqReverse" (formula "4") (term "0,0,0,0,0") (ifseqformula "5"))
               (rule "applyEqReverse" (formula "4") (term "1,2,0") (ifseqformula "5"))
               (rule "applyEqReverse" (formula "3") (term "1,1,0") (ifseqformula "5"))
               (rule "applyEqReverse" (formula "4") (term "1,0,0,1,0,0") (ifseqformula "5"))
               (rule "applyEqReverse" (formula "3") (term "0,0,0,0,0") (ifseqformula "5"))
               (rule "applyEqReverse" (formula "3") (term "1,2,0") (ifseqformula "5"))
               (rule "applyEqReverse" (formula "4") (term "1,1,0") (ifseqformula "5"))
               (rule "hideAuxiliaryEq" (formula "5"))
               (rule "ifthenelse_split" (formula "2") (term "0"))
               (branch " ! MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(add(beginEntry, x_8))) = null & ! boolean::select(heap, MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(add(beginEntry, x_8))), java.lang.Object::<created>) = TRUE TRUE"
                  (rule "andLeft" (formula "2"))
                  (rule "notLeft" (formula "2"))
                  (rule "notLeft" (formula "2"))
                  (rule "referencedObjectIsCreatedRight" (formula "34") (ifseqformula "35"))
                  (rule "close" (formula "34") (ifseqformula "9"))
               )
               (branch " ! MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(add(beginEntry, x_8))) = null & ! boolean::select(heap, MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(add(beginEntry, x_8))), java.lang.Object::<created>) = TRUE FALSE"
                  (rule "applyEqReverse" (formula "39") (term "0,0") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "33"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "38") (term "0,1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "ifthenelse_split" (formula "1") (term "0"))
                  (branch " ! MapCaseStudy.MapEntry::select(anon_heap_loop<<anonHeapFunction>>, target, arr(add(beginTarget, x_8))) = null & ! boolean::select(heap, MapCaseStudy.MapEntry::select(anon_heap_loop<<anonHeapFunction>>, target, arr(add(beginTarget, x_8))), java.lang.Object::<created>) = TRUE TRUE"
                     (rule "andLeft" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "applyEqReverse" (formula "39") (term "1,1") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "eqSymm" (formula "38") (term "1"))
                     (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "32"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")))
                     (rule "applyEqReverse" (formula "38") (term "1,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "eqSymm" (formula "37") (term "0"))
                     (rule "allLeft" (formula "28") (inst "t=x_8"))
                     (rule "replaceKnownSelect_taclet2_0" (formula "28") (term "1,0,1"))
                     (rule "replaceKnownSelect_taclet6_0" (formula "28") (term "0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet12_0" (formula "28") (term "0,1"))
                     (rule "replaceKnownSelect_taclet3_0" (formula "28") (term "1,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet4_0" (formula "28") (term "1,1,1"))
                     (rule "replaceKnownSelect_taclet8_0" (formula "28") (term "1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet11_0" (formula "28") (term "1,1"))
                     (rule "inEqSimp_contradInEq0" (formula "28") (term "1,0") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0"))
                     (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0"))
                     (rule "polySimp_addComm0" (formula "28") (term "0,0,0,1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1,0"))
                     (rule "add_literals" (formula "28") (term "1,1,0,0,1,0"))
                     (rule "times_zero_1" (formula "28") (term "1,0,0,1,0"))
                     (rule "add_zero_right" (formula "28") (term "0,0,1,0"))
                     (rule "leq_literals" (formula "28") (term "0,1,0"))
                     (builtin "One Step Simplification" (formula "28"))
                     (rule "inEqSimp_contradInEq1" (formula "28") (term "0") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "28") (term "0,0"))
                     (builtin "One Step Simplification" (formula "28"))
                     (rule "replace_known_left" (formula "38") (term "1") (ifseqformula "28"))
                     (builtin "One Step Simplification" (formula "38"))
                     (rule "allLeft" (formula "27") (inst "t=x_8"))
                     (rule "replaceKnownSelect_taclet3_0" (formula "27") (term "1,1,1"))
                     (rule "replaceKnownSelect_taclet2_0" (formula "27") (term "1,0,1"))
                     (rule "replaceKnownSelect_taclet5_0" (formula "27") (term "0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet13_0" (formula "27") (term "0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet4_0" (formula "27") (term "1,1,1"))
                     (rule "replaceKnownSelect_taclet7_0" (formula "27") (term "1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet10_0" (formula "27") (term "1,1"))
                     (rule "replace_known_right" (formula "27") (term "1") (ifseqformula "39"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "inEqSimp_contradInEq1" (formula "27") (term "0") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "27") (term "0,0"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "27"))
                     (rule "andLeft" (formula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0"))
                     (rule "add_literals" (formula "1") (term "0"))
                     (rule "leq_literals" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch " ! MapCaseStudy.MapEntry::select(anon_heap_loop<<anonHeapFunction>>, target, arr(add(beginTarget, x_8))) = null & ! boolean::select(heap, MapCaseStudy.MapEntry::select(anon_heap_loop<<anonHeapFunction>>, target, arr(add(beginTarget, x_8))), java.lang.Object::<created>) = TRUE FALSE"
                     (rule "applyEqReverse" (formula "38") (term "1,1") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "eqSymm" (formula "37") (term "1"))
                     (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "31"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEqReverse" (formula "37") (term "1,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "eqSymm" (formula "36") (term "0"))
                     (rule "allLeft" (formula "28") (inst "t=x_8"))
                     (rule "replaceKnownSelect_taclet3_0" (formula "28") (term "1,1,1"))
                     (rule "replaceKnownSelect_taclet2_0" (formula "28") (term "1,0,1"))
                     (rule "replaceKnownSelect_taclet6_0" (formula "28") (term "0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet12_0" (formula "28") (term "0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet4_0" (formula "28") (term "1,1,1"))
                     (rule "replaceKnownSelect_taclet8_0" (formula "28") (term "1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet11_0" (formula "28") (term "1,1"))
                     (rule "inEqSimp_contradInEq0" (formula "28") (term "1,0") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0"))
                     (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0"))
                     (rule "polySimp_addComm0" (formula "28") (term "0,0,0,1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1,0"))
                     (rule "add_literals" (formula "28") (term "1,1,0,0,1,0"))
                     (rule "times_zero_1" (formula "28") (term "1,0,0,1,0"))
                     (rule "add_zero_right" (formula "28") (term "0,0,1,0"))
                     (rule "leq_literals" (formula "28") (term "0,1,0"))
                     (builtin "One Step Simplification" (formula "28"))
                     (rule "inEqSimp_contradInEq1" (formula "28") (term "0") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "28") (term "0,0"))
                     (builtin "One Step Simplification" (formula "28"))
                     (rule "replace_known_left" (formula "37") (term "1") (ifseqformula "28"))
                     (builtin "One Step Simplification" (formula "37"))
                     (rule "allLeft" (formula "27") (inst "t=x_8"))
                     (rule "replaceKnownSelect_taclet2_0" (formula "27") (term "1,0,1"))
                     (rule "replaceKnownSelect_taclet5_0" (formula "27") (term "0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet13_0" (formula "27") (term "0,1"))
                     (rule "replaceKnownSelect_taclet3_0" (formula "27") (term "1,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet4_0" (formula "27") (term "1,1,1"))
                     (rule "replaceKnownSelect_taclet7_0" (formula "27") (term "1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet10_0" (formula "27") (term "1,1"))
                     (rule "replace_known_right" (formula "27") (term "1") (ifseqformula "38"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "inEqSimp_contradInEq0" (formula "27") (term "1") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "27") (term "0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "27") (term "0,0,1"))
                     (rule "polySimp_addComm0" (formula "27") (term "0,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
                     (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "27") (term "0,0,1"))
                     (rule "leq_literals" (formula "27") (term "0,1"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "27"))
                     (rule "qeq_literals" (formula "3") (term "0"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "closeFalse" (formula "3"))
                  )
               )
            )
            (branch "Case 2"
               (rule "andRight" (formula "36"))
               (branch "Case 1"
                  (builtin "One Step Simplification" (formula "36"))
                  (rule "allRight" (formula "36") (inst "sk=o_6") (userinteraction))
                  (rule "orRight" (formula "36"))
                  (rule "orRight" (formula "36"))
                  (rule "andRight" (formula "36"))
                  (branch "Case 1"
                     (rule "notRight" (formula "36"))
                     (rule "orLeft" (formula "1"))
                     (branch " boolean::select(heap, o_6, java.lang.Object::<created>) = TRUE"
                        (rule "orRight" (formula "38"))
                        (rule "close" (formula "38") (ifseqformula "1"))
                     )
                     (branch " boolean::select(anon_heap_loop<<anonHeapFunction>>, o_6, java.lang.Object::<created>) = TRUE"
                        (rule "orRight" (formula "38"))
                        (rule "instAll" (formula "37") (term "0") (ifseqformula "32") (userinteraction))
                        (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "38")) (ifInst ""  (formula "39")))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "Case 2"
                     (rule "notRight" (formula "36"))
                     (rule "orRight" (formula "38"))
                     (rule "close" (formula "37") (ifseqformula "1"))
                  )
               )
               (branch "Case 2"
                  (builtin "One Step Simplification" (formula "36"))
                  (rule "applyEq" (formula "29") (term "1,2,1,0,0,1,0") (ifseqformula "27"))
                  (rule "eqSymm" (formula "29") (term "1,0"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "27"))
                  (rule "inEqSimp_homoInEq0" (formula "1"))
                  (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,0"))
                  (rule "times_zero_1" (formula "1") (term "0"))
                  (rule "qeq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "applyEq" (formula "6") (term "0") (ifseqformula "26"))
                  (rule "applyEq" (formula "11") (term "1,1") (ifseqformula "25"))
                  (rule "applyEq" (formula "28") (term "1,2,1,0,1,0,1,0") (ifseqformula "25"))
                  (rule "applyEq" (formula "28") (term "1,2,1,0,0,1,0") (ifseqformula "25"))
                  (rule "eqSymm" (formula "28") (term "1,0"))
                  (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                  (rule "applyEq" (formula "25") (term "0") (ifseqformula "24"))
                  (rule "inEqSimp_homoInEq1" (formula "25"))
                  (rule "polySimp_pullOutFactor1" (formula "25") (term "0"))
                  (rule "add_literals" (formula "25") (term "1,0"))
                  (rule "times_zero_1" (formula "25") (term "0"))
                  (rule "leq_literals" (formula "25"))
                  (rule "true_left" (formula "25"))
                  (rule "applyEq" (formula "32") (term "1,2,1,0") (ifseqformula "24"))
                  (rule "applyEq" (formula "8") (term "1,1") (ifseqformula "24"))
                  (rule "applyEq" (formula "26") (term "1,2,1,0,0,1,0") (ifseqformula "24"))
                  (rule "eqSymm" (formula "26") (term "1,0"))
                  (rule "applyEq" (formula "25") (term "1,2,1,0,0,1,0") (ifseqformula "24"))
                  (rule "eqSymm" (formula "25") (term "1,0"))
                  (rule "applyEq" (formula "25") (term "1,2,1,0,1,0,1,0") (ifseqformula "24"))
                  (rule "applyEq" (formula "25") (term "1,2,1,0,1,1,1,0") (ifseqformula "24"))
                  (rule "applyEq" (formula "26") (term "1,2,1,0,1,1,1,0") (ifseqformula "24"))
                  (rule "Class_invariant_axiom_for_MapCaseStudy_AMapImplementation" (formula "32") (inst "i=i_3") (inst "o=o") (inst "i_0=i_0") (inst "i_1=i_1") (inst "i1=i1") (inst "i2=i2") (inst "i_2=i_2") (inst "sk=sk_1"))
                  (branch "Use Axiom"
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "eqSymm" (formula "32") (term "1"))
                     (rule "eqSymm" (formula "32") (term "0,1,0,1,0,1,0,0,0,0,0"))
                     (rule "eqSymm" (formula "32") (term "1,0,0,1,0,1,0"))
                     (rule "eqSymm" (formula "32") (term "1,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0,1,0,0,0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0,1,0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0,1,0,1,0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,1,0,1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "32") (term "0,0,0,1,0,1,0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0,0,0,1,0,1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,0,1,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0,0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,0,0,0,1"))
                     (rule "polySimp_addComm1" (formula "32") (term "0,0,0,0,1,0,1,0,0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,1,0,0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,0,1,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,0,0,0,1"))
                     (rule "subsetSingletonLeft" (formula "32") (term "0,0,0,0,0,0,0,0,0,0"))
                     (rule "subsetSingletonLeft" (formula "32") (term "1,0,0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,1,0,0,0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,1,0,0,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,1,0,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "32") (term "0,1,1,0,0,1,0,0,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,1,0,0,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,1,0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "32") (term "0,1,1,0,0,1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,1,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "32") (term "0,1,1,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,1,0,1,0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,1,0,1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,1,0,1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "32") (term "0,1,1,0,0,1,0,1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,1,0,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,1,0,1,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,0,1,0,1,0"))
                     (rule "mul_literals" (formula "32") (term "0,1,1,0,0,0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,0,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,0,0,0,1"))
                     (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,0,0,0,1"))
                     (rule "mul_literals" (formula "32") (term "0,1,1,0,0,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,0,0,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "32") (term "0,0,0,1,0,1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "0,0,0,0,1,0,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "32") (term "0,0,0,0,1,0,1,0,0,0,0,0"))
                     (rule "pullOutSelect" (formula "32") (term "0,0,1,0,0,0,0,0,0") (inst "selectSK=selectSK_23"))
                     (rule "applyEq" (formula "33") (term "1,1,1,0,1,0,1,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "33") (term "0,1,1,1,0,0,1,0,1,0,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "33") (term "1,0,0,1,0,1,0,0,0,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "33") (term "0,0,1,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "33") (term "0,1,1,1,0,0,0,0,0,1") (ifseqformula "1"))
                     (rule "applyEq" (formula "33") (term "0,1,1,0,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "33") (term "1,1,0,0,1,0,1,0,1,0,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "33") (term "0,1,1,1,0,0,0,1,0,1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "33") (term "1,1,1,1,0,1,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "33") (term "0,1,1,1,0,0,1,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "33") (term "1,0,1,0,0,0,0,1") (ifseqformula "1"))
                     (rule "applyEq" (formula "33") (term "0,1,1,1,0,0,1,0,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "33") (term "1,1,1,1,0,0,1,0,1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "33") (term "0,1,0,1") (ifseqformula "1"))
                     (rule "applyEq" (formula "33") (term "1,1,1,0,1,0,1,0,1,0,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "33") (term "0,1,1,1,0,0,1,0,0,0,0,0,0,0") (ifseqformula "1"))
                     (rule "simplifySelectOfAnon" (formula "1"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")) (ifInst ""  (formula "4")))
                     (rule "elementOfArrayRange" (formula "1") (term "0,0") (inst "iv=iv"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEqReverse" (formula "33") (term "0,1,1,1,0,0,1,0,1,0,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "33") (term "0,0,1,0,0,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "33") (term "1,1,1,0,1,0,1,0,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "33") (term "0,1,0,1") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "33") (term "1,1,1,1,0,0,1,0,1,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "33") (term "0,1,1,1,0,0,1,0,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "33") (term "1,0,1,0,0,0,0,1") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "33") (term "0,1,1,1,0,0,1,0,0,0,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "33") (term "0,1,1,1,0,0,1,0,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "33") (term "1,1,1,1,0,1,0,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "33") (term "0,1,1,0,0,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "33") (term "0,0,1,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "33") (term "1,0,0,1,0,1,0,0,0,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "33") (term "0,1,1,1,0,0,0,0,0,1") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "33") (term "0,1,1,1,0,0,0,1,0,1,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "33") (term "1,1,0,0,1,0,1,0,1,0,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "33") (term "1,1,1,0,1,0,1,0,1,0,0,0,0,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "replace_known_right" (formula "32") (term "0,1,0,0,0,0,0,0") (ifseqformula "28"))
                     (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "16")))
                     (rule "pullOutSelect" (formula "32") (term "0,0,1,0,0,0") (inst "selectSK=selectSK_24"))
                     (rule "applyEq" (formula "33") (term "0,1,1,0,1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "33") (term "0,0,1,0,1,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "33") (term "0,1,0,0,0,0,0,0") (ifseqformula "1"))
                     (rule "simplifySelectOfAnon" (formula "1"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")) (ifInst ""  (formula "4")))
                     (rule "elementOfArrayRange" (formula "1") (term "0,0") (inst "iv=iv"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEqReverse" (formula "33") (term "0,0,1,0,1,0,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "33") (term "0,0,1,0,0,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "33") (term "0,1,1,0,1,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "33") (term "0,1,0,0,0,0,0,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "replace_known_left" (formula "32") (term "1,0,0,0") (ifseqformula "17"))
                     (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "13")))
                     (rule "pullOutSelect" (formula "32") (term "2,1,0,0,0,0,0") (inst "selectSK=selectSK_25"))
                     (rule "applyEq" (formula "33") (term "1,1") (ifseqformula "1"))
                     (rule "applyEq" (formula "33") (term "2,0,0,0,0,0,0") (ifseqformula "1"))
                     (rule "simplifySelectOfAnon" (formula "1"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")) (ifInst ""  (formula "4")))
                     (rule "elementOfArrayRange" (formula "1") (term "0,0") (inst "iv=iv"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEqReverse" (formula "33") (term "2,0,0,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "33") (term "1,1") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "33") (term "2,1,0,0,0,0,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "elementOfUnionEQ" (formula "32") (term "1,0,0,0,0,0") (ifseqformula "21"))
                     (rule "elementOfInfiniteUnion" (formula "32") (term "1,1,0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "eqSymm" (formula "32") (term "1,0,1,1,0,0,0,0,0"))
                     (rule "sortsDisjointModuloNull" (formula "32") (term "1,0,1,1,0,0,0,0,0"))
                     (rule "replace_known_right" (formula "32") (term "1,1,0,1,1,0,0,0,0,0") (ifseqformula "29"))
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "elementOfUnion" (formula "32") (term "1,0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "elementOfUnionEQ" (formula "32") (term "0,0,0,0,0") (ifseqformula "21"))
                     (rule "elementOfInfiniteUnion" (formula "32") (term "1,0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "eqSymm" (formula "32") (term "1,0,1,0,0,0,0,0"))
                     (rule "sortsDisjointModuloNull" (formula "32") (term "1,0,1,0,0,0,0,0"))
                     (rule "replace_known_right" (formula "32") (term "1,1,0,1,0,0,0,0,0") (ifseqformula "29"))
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "elementOfUnion" (formula "32") (term "0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "nnf_imp2or" (formula "32") (term "0,1,0"))
                     (rule "nnf_imp2or" (formula "32") (term "0,1,0,0"))
                     (rule "nnf_notAnd" (formula "32") (term "0,0,1,0"))
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "nnf_imp2or" (formula "32") (term "0,1,0,0,0"))
                     (rule "nnf_notAnd" (formula "32") (term "0,0,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,1,0,0"))
                     (rule "add_literals" (formula "32") (term "0,0,0,1,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "32") (term "0,0,1,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0,1,0,0"))
                     (rule "mul_literals" (formula "32") (term "1,0,0,0,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "32") (term "0,0,0,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0,1,0,0"))
                     (rule "mul_literals" (formula "32") (term "1,0,0,0,1,0,0"))
                     (rule "nnf_notOr" (formula "32") (term "0,0,0,1,0"))
                     (rule "nnf_imp2or" (formula "32") (term "0,0,0,0,0"))
                     (rule "nnf_notAnd" (formula "32") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0,1,0,0,0"))
                     (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0,1,0,0,0"))
                     (rule "add_literals" (formula "32") (term "0,0,0,0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "32") (term "1,0,0,0,1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,1,0,0,0"))
                     (rule "add_literals" (formula "32") (term "0,0,0,1,0,0,1,0,0,0"))
                     (rule "add_zero_left" (formula "32") (term "0,0,1,0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0,1,0,0,0"))
                     (rule "nnf_imp2or" (formula "32") (term "0,1,0,1,0,0,0"))
                     (rule "nnf_notOr" (formula "32") (term "0,0,0,0,1,0"))
                     (rule "nnf_notAnd" (formula "32") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0,0,0,0,0"))
                     (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0,0,0,0,0"))
                     (rule "add_literals" (formula "32") (term "0,0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "32") (term "1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,0,0,0,0"))
                     (rule "add_literals" (formula "32") (term "0,0,0,1,0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "32") (term "0,0,1,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0,0,0,0,0"))
                     (rule "nnf_notAnd" (formula "32") (term "0,0,1,0,1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0,1,0,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0,0,0,1,0,1,0,0,0"))
                     (rule "mul_literals" (formula "32") (term "0,1,0,0,0,0,0,1,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "32") (term "0,0,0,0,0,1,0,1,0,0,0"))
                     (rule "add_literals" (formula "32") (term "0,0,0,0,0,0,1,0,1,0,0,0"))
                     (rule "add_zero_left" (formula "32") (term "0,0,0,0,0,1,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0,1,0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "1,0,0,0,1,0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "32") (term "1,0,0,0,1,0,1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0,1,0,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,1,0,1,0,0,0"))
                     (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,1,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,1,0,1,0,0,0"))
                     (rule "add_literals" (formula "32") (term "0,0,0,1,0,0,1,0,1,0,0,0"))
                     (rule "add_zero_left" (formula "32") (term "0,0,1,0,0,1,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0,1,0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,1,0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0,1,0,1,0,0,0"))
                     (rule "commuteUnion" (formula "32") (term "0,0,1"))
                     (rule "commuteUnion_2" (formula "32") (term "0,1"))
                     (rule "all_pull_out3" (formula "32") (term "0,1,0,0,0"))
                     (rule "cut_direct" (formula "32") (term "1"))
                     (branch "CUT: union(union(allFields(self), allFields(MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry))), infiniteUnion{int i_3;}(if ( geq(i_3, Z(0(#))) & leq(i_3, add(Z(neglit(1(#))), length(MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry))))) then (allFields(MapCaseStudy.MapEntry::select(anon(heap, arrayRange(target, beginTarget, add(add(Z(neglit(1(#))), beginTarget), i_0)), anon_heap_loop<<anonHeapFunction>>), MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(i_3)))) else (empty))) = LocSet::select(heap, self, MapCaseStudy.MapInterface::$footprint) TRUE"
                        (builtin "One Step Simplification" (formula "33"))
                        (rule "andRight" (formula "33"))
                        (branch "Case 1"
                           (rule "andRight" (formula "33"))
                           (branch "Case 1"
                              (rule "andRight" (formula "33"))
                              (branch "Case 1"
                                 (rule "allRight" (formula "33") (inst "sk=i_2_0"))
                                 (rule "orRight" (formula "33"))
                                 (rule "notRight" (formula "34"))
                                 (rule "orRight" (formula "34"))
                                 (rule "inEqSimp_geqRight" (formula "35"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_leqRight" (formula "35"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=selectSK_38"))
                                 (rule "simplifySelectOfAnon" (formula "3"))
                                 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "33")) (ifInst ""  (formula "6")))
                                 (rule "elementOfArrayRange" (formula "3") (term "0,0") (inst "iv=iv"))
                                 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "36")))
                                 (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "allLeft" (formula "18") (inst "t=i_2_0"))
                                 (rule "replace_known_left" (formula "18") (term "0,1") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "2"))
                                 (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
                                 (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
                                 (rule "add_literals" (formula "18") (term "0,0,1"))
                                 (rule "leq_literals" (formula "18") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "inEqSimp_contradInEq1" (formula "18") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "18") (term "0"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "closeFalse" (formula "18"))
                              )
                              (branch "Case 2"
                                 (rule "allRight" (formula "33") (inst "sk=i1_0"))
                                 (rule "allRight" (formula "33") (inst "sk=i2_0"))
                                 (rule "orRight" (formula "33"))
                                 (rule "orRight" (formula "33"))
                                 (rule "orRight" (formula "35"))
                                 (rule "notRight" (formula "36"))
                                 (rule "orRight" (formula "36"))
                                 (rule "inEqSimp_geqRight" (formula "35"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_leqRight" (formula "35"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_geqRight" (formula "37"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_leqRight" (formula "37"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "4") (term "0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                 (rule "mul_literals" (formula "1") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                 (rule "polySimp_elimOne" (formula "4") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "pullOutSelect" (formula "5") (term "1") (inst "selectSK=selectSK_35"))
                                 (rule "simplifySelectOfAnon" (formula "6"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "simplifySelectOfAnon" (formula "5"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "elementOfArrayRange" (formula "6") (term "0,0,0") (inst "iv=iv"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "elementOfArrayRange" (formula "5") (term "0,0,0") (inst "iv=iv"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "pullOutSelect" (formula "6") (term "1,1,0") (inst "selectSK=selectSK_36"))
                                 (rule "applyEq" (formula "7") (term "0,0,0,0,0") (ifseqformula "6"))
                                 (rule "applyEq" (formula "7") (term "1,2,0") (ifseqformula "6"))
                                 (rule "applyEq" (formula "7") (term "1,0,0,1,0,0") (ifseqformula "6"))
                                 (rule "simplifySelectOfAnon" (formula "6"))
                                 (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "36")) (ifInst ""  (formula "9")))
                                 (rule "elementOfArrayRange" (formula "6") (term "0,0") (inst "iv=iv"))
                                 (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "39")))
                                 (rule "applyEqReverse" (formula "7") (term "1,2,0") (ifseqformula "6"))
                                 (rule "applyEqReverse" (formula "7") (term "0,0,0,0,0") (ifseqformula "6"))
                                 (rule "applyEqReverse" (formula "7") (term "1,1,0") (ifseqformula "6"))
                                 (rule "applyEqReverse" (formula "7") (term "1,0,0,1,0,0") (ifseqformula "6"))
                                 (rule "hideAuxiliaryEq" (formula "6"))
                                 (rule "pullOutSelect" (formula "5") (term "1,0,0,1,0,0") (inst "selectSK=selectSK_37"))
                                 (rule "applyEq" (formula "6") (term "0,0,0,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "6") (term "1,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "6") (term "1,2,0") (ifseqformula "5"))
                                 (rule "simplifySelectOfAnon" (formula "5"))
                                 (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "36")) (ifInst ""  (formula "9")))
                                 (rule "elementOfArrayRange" (formula "5") (term "0,0") (inst "iv=iv"))
                                 (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "39")))
                                 (rule "applyEqReverse" (formula "6") (term "0,0,0,0,0") (ifseqformula "5"))
                                 (rule "applyEqReverse" (formula "6") (term "1,2,0") (ifseqformula "5"))
                                 (rule "applyEqReverse" (formula "6") (term "1,1,0") (ifseqformula "5"))
                                 (rule "applyEqReverse" (formula "6") (term "1,0,0,1,0,0") (ifseqformula "5"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "ifthenelse_split" (formula "6") (term "0"))
                                 (branch " ! MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(i2_0)) = null & ! boolean::select(heap, MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(i2_0)), java.lang.Object::<created>) = TRUE TRUE"
                                    (rule "andLeft" (formula "6"))
                                    (rule "notLeft" (formula "6"))
                                    (rule "notLeft" (formula "6"))
                                    (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "36"))
                                    (rule "close" (formula "35") (ifseqformula "9"))
                                 )
                                 (branch " ! MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(i2_0)) = null & ! boolean::select(heap, MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(i2_0)), java.lang.Object::<created>) = TRUE FALSE"
                                    (rule "applyEqReverse" (formula "5") (term "1") (ifseqformula "6"))
                                    (rule "hideAuxiliaryEq" (formula "6"))
                                    (rule "ifthenelse_split" (formula "5") (term "0"))
                                    (branch " ! MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(i1_0)) = null & ! boolean::select(heap, MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(i1_0)), java.lang.Object::<created>) = TRUE TRUE"
                                       (rule "andLeft" (formula "5"))
                                       (rule "notLeft" (formula "6"))
                                       (rule "notLeft" (formula "5"))
                                       (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "34"))
                                       (rule "close" (formula "35") (ifseqformula "8"))
                                    )
                                    (branch " ! MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(i1_0)) = null & ! boolean::select(heap, MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(i1_0)), java.lang.Object::<created>) = TRUE FALSE"
                                       (rule "eqSymm" (formula "5"))
                                       (rule "allLeft" (formula "21") (inst "t=i1_0"))
                                       (rule "inEqSimp_commuteGeq" (formula "21") (term "1,0,0,0,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "21") (term "0,0,0,0,0") (ifseqformula "3"))
                                       (rule "qeq_literals" (formula "21") (term "0,0,0,0,0,0"))
                                       (builtin "One Step Simplification" (formula "21"))
                                       (rule "inEqSimp_contradInEq1" (formula "21") (term "0,0,0,0") (ifseqformula "4"))
                                       (rule "inEqSimp_homoInEq1" (formula "21") (term "0,0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "21") (term "1,1,0,0,0,0,0,0"))
                                       (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,0"))
                                       (rule "leq_literals" (formula "21") (term "0,0,0,0,0"))
                                       (builtin "One Step Simplification" (formula "21"))
                                       (rule "commute_or" (formula "21") (term "0,0"))
                                       (rule "allLeft" (formula "20") (inst "t=i1_0"))
                                       (rule "inEqSimp_commuteGeq" (formula "20") (term "1,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0") (ifseqformula "4"))
                                       (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "20") (term "1,1,0,0,1,0"))
                                       (rule "times_zero_1" (formula "20") (term "1,0,0,1,0"))
                                       (rule "add_zero_right" (formula "20") (term "0,0,1,0"))
                                       (rule "leq_literals" (formula "20") (term "0,1,0"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "inEqSimp_contradInEq1" (formula "20") (term "0") (ifseqformula "3"))
                                       (rule "qeq_literals" (formula "20") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "notLeft" (formula "20"))
                                       (rule "replace_known_right" (formula "36") (term "0,0") (ifseqformula "35"))
                                       (builtin "One Step Simplification" (formula "36"))
                                       (rule "notRight" (formula "36"))
                                       (rule "allLeft" (formula "26") (inst "t=i1_0"))
                                       (rule "inEqSimp_commuteGeq" (formula "26") (term "1,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "26") (term "0,0") (ifseqformula "4"))
                                       (rule "qeq_literals" (formula "26") (term "0,0,0"))
                                       (builtin "One Step Simplification" (formula "26"))
                                       (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "5"))
                                       (rule "inEqSimp_homoInEq1" (formula "26") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,0"))
                                       (rule "add_literals" (formula "26") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "26") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "26") (term "0,0,0"))
                                       (rule "leq_literals" (formula "26") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "26"))
                                       (rule "cut_direct" (formula "38") (term "0,0"))
                                       (branch "CUT: MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(i2_0)) = null TRUE"
                                          (builtin "One Step Simplification" (formula "39"))
                                          (rule "false_right" (formula "39"))
                                          (rule "applyEq" (formula "7") (term "1,0") (ifseqformula "1"))
                                          (rule "eqSymm" (formula "7"))
                                          (rule "applyEq" (formula "27") (term "1,0") (ifseqformula "7"))
                                          (rule "applyEq" (formula "23") (term "1,0,1,0") (ifseqformula "7"))
                                          (rule "allLeft" (formula "23") (inst "t=i2_0"))
                                          (rule "inEqSimp_commuteGeq" (formula "23") (term "1,0"))
                                          (rule "applyEq" (formula "23") (term "1,0,0,1") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "inEqSimp_contradInEq1" (formula "23") (term "0") (ifseqformula "3"))
                                          (rule "inEqSimp_homoInEq1" (formula "23") (term "0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,0"))
                                          (rule "add_literals" (formula "23") (term "1,1,0,0,0"))
                                          (rule "times_zero_1" (formula "23") (term "1,0,0,0"))
                                          (rule "add_zero_right" (formula "23") (term "0,0,0"))
                                          (rule "leq_literals" (formula "23") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "inEqSimp_contradInEq1" (formula "23") (ifseqformula "4"))
                                          (rule "andLeft" (formula "23"))
                                          (rule "inEqSimp_homoInEq1" (formula "23"))
                                          (rule "polySimp_pullOutFactor1b" (formula "23") (term "0"))
                                          (rule "add_literals" (formula "23") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "23") (term "1,0"))
                                          (rule "add_zero_right" (formula "23") (term "0"))
                                          (rule "leq_literals" (formula "23"))
                                          (rule "closeFalse" (formula "23"))
                                       )
                                       (branch "CUT: MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(i2_0)) = null FALSE"
                                          (builtin "One Step Simplification" (formula "39"))
                                          (rule "notRight" (formula "39"))
                                          (rule "allLeft" (formula "23") (inst "t=i2_0"))
                                          (rule "replace_known_left" (formula "23") (term "0,1") (ifseqformula "7"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "23") (term "0") (ifseqformula "3"))
                                          (rule "inEqSimp_homoInEq1" (formula "23") (term "0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,0"))
                                          (rule "add_literals" (formula "23") (term "1,1,0,0,0"))
                                          (rule "times_zero_1" (formula "23") (term "1,0,0,0"))
                                          (rule "add_literals" (formula "23") (term "0,0,0"))
                                          (rule "leq_literals" (formula "23") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "inEqSimp_contradInEq1" (formula "23") (ifseqformula "4"))
                                          (rule "andLeft" (formula "23"))
                                          (rule "inEqSimp_homoInEq1" (formula "23"))
                                          (rule "polySimp_pullOutFactor1b" (formula "23") (term "0"))
                                          (rule "add_literals" (formula "23") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "23") (term "1,0"))
                                          (rule "add_zero_right" (formula "23") (term "0"))
                                          (rule "leq_literals" (formula "23"))
                                          (rule "closeFalse" (formula "23"))
                                       )
                                    )
                                 )
                              )
                           )
                           (branch "Case 2"
                              (rule "allRight" (formula "33") (inst "sk=i_1_0"))
                              (rule "orRight" (formula "33"))
                              (rule "orRight" (formula "33"))
                              (rule "inEqSimp_geqRight" (formula "34"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_leqRight" (formula "34"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "pullOutSelect" (formula "35") (term "1,0") (inst "selectSK=selectSK_32"))
                              (rule "simplifySelectOfAnon" (formula "1"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "pullOutSelect" (formula "36") (term "1") (inst "selectSK=selectSK_33"))
                              (rule "simplifySelectOfAnon" (formula "1"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "pullOutSelect" (formula "2") (term "1,2,0") (inst "selectSK=selectSK_34"))
                              (rule "applyEq" (formula "3") (term "1,0,0,1,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "1") (term "0,0,0,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "3") (term "1,1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "3") (term "0,0,0,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "1") (term "1,2,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "1") (term "1,1,0") (ifseqformula "2"))
                              (rule "simplifySelectOfAnon" (formula "2"))
                              (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "34")) (ifInst ""  (formula "7")))
                              (rule "elementOfArrayRange" (formula "2") (term "0,0") (inst "iv=iv"))
                              (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "37")))
                              (rule "applyEqReverse" (formula "3") (term "1,1,0") (ifseqformula "2"))
                              (rule "applyEqReverse" (formula "1") (term "1,1,0") (ifseqformula "2"))
                              (rule "applyEqReverse" (formula "3") (term "1,0,0,1,0,0") (ifseqformula "2"))
                              (rule "applyEqReverse" (formula "3") (term "0,0,0,0,0") (ifseqformula "2"))
                              (rule "applyEqReverse" (formula "1") (term "0,0,0,0,0") (ifseqformula "2"))
                              (rule "applyEqReverse" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "2"))
                              (rule "applyEqReverse" (formula "1") (term "1,2,0") (ifseqformula "2"))
                              (rule "applyEqReverse" (formula "3") (term "1,2,0") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "ifthenelse_split" (formula "1") (term "0"))
                              (branch " ! MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(i_1_0)) = null & ! boolean::select(heap, MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(i_1_0)), java.lang.Object::<created>) = TRUE TRUE"
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "referencedObjectIsCreatedRight" (formula "33") (ifseqformula "34"))
                                 (rule "close" (formula "33") (ifseqformula "7"))
                              )
                              (branch " ! MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(i_1_0)) = null & ! boolean::select(heap, MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(i_1_0)), java.lang.Object::<created>) = TRUE FALSE"
                                 (rule "applyEqReverse" (formula "38") (term "1") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "32"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "37") (term "1,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "allLeft" (formula "21") (inst "t=i_1_0"))
                                 (rule "replace_known_right" (formula "21") (term "1") (ifseqformula "37"))
                                 (builtin "One Step Simplification" (formula "21"))
                                 (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "2"))
                                 (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                                 (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                                 (rule "add_literals" (formula "21") (term "0,0,1"))
                                 (rule "leq_literals" (formula "21") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "21"))
                                 (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "21"))
                                 (rule "qeq_literals" (formula "1") (term "0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                        )
                        (branch "Case 2"
                           (rule "allRight" (formula "33") (inst "sk=o_2"))
                           (rule "orRight" (formula "33"))
                           (rule "orRight" (formula "33"))
                           (rule "eqSymm" (formula "35") (term "1,0,0"))
                           (rule "replace_known_right" (formula "33") (term "0,1") (ifseqformula "34"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "equiv_right" (formula "35"))
                           (branch "Case 1"
                              (rule "exLeft" (formula "1") (inst "sk=i_0_3"))
                              (rule "andLeft" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "inEqSimp_homoInEq0" (formula "2"))
                              (rule "polySimp_addComm1" (formula "2") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1"))
                              (rule "polySimp_rightDist" (formula "2") (term "1"))
                              (rule "mul_literals" (formula "2") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=selectSK_30"))
                              (rule "simplifySelectOfAnon" (formula "3"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "elementOfArrayRange" (formula "3") (term "0,0,0") (inst "iv=iv"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "4"))
                              (rule "pullOutSelect" (formula "3") (term "1,0,0,1,0,0") (inst "selectSK=selectSK_31"))
                              (rule "applyEq" (formula "4") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "4") (term "1,2,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "4") (term "0,0,0,0,0") (ifseqformula "3"))
                              (rule "simplifySelectOfAnon" (formula "3"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "34")) (ifInst ""  (formula "7")))
                              (rule "elementOfArrayRange" (formula "3") (term "0,0") (inst "iv=iv"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "37")))
                              (rule "applyEqReverse" (formula "4") (term "0,0,0,0,0") (ifseqformula "3"))
                              (rule "applyEqReverse" (formula "4") (term "1,2,0") (ifseqformula "3"))
                              (rule "applyEqReverse" (formula "4") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEqReverse" (formula "4") (term "1,0,0,1,0,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "cut_direct" (formula "37") (term "0,0"))
                              (branch "CUT: boolean::select(heap, o_2, java.lang.Object::<created>) = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "38"))
                                 (rule "false_right" (formula "38"))
                                 (rule "ifthenelse_split" (formula "4") (term "0"))
                                 (branch " ! MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(i_0_3)) = null & ! boolean::select(heap, MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(i_0_3)), java.lang.Object::<created>) = TRUE TRUE"
                                    (rule "andLeft" (formula "4"))
                                    (rule "notLeft" (formula "4"))
                                    (rule "notLeft" (formula "4"))
                                    (rule "referencedObjectIsCreatedRight" (formula "34") (ifseqformula "35"))
                                    (rule "close" (formula "34") (ifseqformula "8"))
                                 )
                                 (branch " ! MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(i_0_3)) = null & ! boolean::select(heap, MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(i_0_3)), java.lang.Object::<created>) = TRUE FALSE"
                                    (rule "allLeft" (formula "24") (inst "t=i_0_3"))
                                    (rule "inEqSimp_commuteGeq" (formula "24") (term "1,0"))
                                    (rule "applyEq" (formula "24") (term "1,0,1") (ifseqformula "4"))
                                    (rule "inEqSimp_contradInEq1" (formula "24") (term "0,0") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "24") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "24"))
                                    (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "3"))
                                    (rule "inEqSimp_homoInEq1" (formula "24") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,0"))
                                    (rule "add_literals" (formula "24") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "24") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "24") (term "0,0,0"))
                                    (rule "leq_literals" (formula "24") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "24"))
                                    (rule "allLeft" (formula "20") (inst "t=i_0_3"))
                                    (rule "inEqSimp_commuteGeq" (formula "20") (term "1,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0") (ifseqformula "3"))
                                    (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1,0"))
                                    (rule "add_literals" (formula "20") (term "1,1,0,0,1,0"))
                                    (rule "times_zero_1" (formula "20") (term "1,0,0,1,0"))
                                    (rule "add_zero_right" (formula "20") (term "0,0,1,0"))
                                    (rule "leq_literals" (formula "20") (term "0,1,0"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "inEqSimp_contradInEq1" (formula "20") (term "0") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "20") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "notLeft" (formula "20"))
                                    (rule "replace_known_right" (formula "36") (term "0,0") (ifseqformula "35"))
                                    (builtin "One Step Simplification" (formula "36"))
                                    (rule "notRight" (formula "36"))
                                    (rule "notInDomain" (formula "42"))
                                    (rule "applyEq" (formula "26") (term "0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "1") (term "1") (ifseqformula "26"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "6") (term "1,0") (ifseqformula "10"))
                                    (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "2"))
                                    (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "38")))
                                    (rule "true_left" (formula "6"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "1") (ifseqformula "10"))
                                    (rule "cut_direct" (formula "26") (term "0"))
                                    (branch "CUT: java.lang.Object::select(heap, MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(i_0_3)), MapCaseStudy.MapEntry::$value) = null TRUE"
                                       (builtin "One Step Simplification" (formula "27"))
                                       (rule "true_left" (formula "27"))
                                       (rule "applyEq" (formula "1") (term "1") (ifseqformula "26"))
                                       (rule "applyEq" (formula "27") (term "1") (ifseqformula "26"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "6") (term "0") (ifseqformula "10"))
                                       (rule "applyEq" (formula "6") (term "1,0,1") (ifseqformula "7"))
                                       (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "6"))
                                       (rule "true_left" (formula "6"))
                                       (rule "allLeft" (formula "30") (inst "t=i_0_3"))
                                       (rule "inEqSimp_commuteGeq" (formula "30") (term "1,0,0"))
                                       (rule "applyEq" (formula "30") (term "0,1,0") (ifseqformula "6"))
                                       (rule "replace_known_right" (formula "30") (term "1,0") (ifseqformula "44"))
                                       (builtin "One Step Simplification" (formula "30"))
                                       (rule "applyEq" (formula "30") (term "1,0,0,0") (ifseqformula "6"))
                                       (rule "replace_known_right" (formula "30") (term "0,0,0") (ifseqformula "45"))
                                       (builtin "One Step Simplification" (formula "30"))
                                       (rule "applyEq" (formula "30") (term "1,0,0,1") (ifseqformula "6"))
                                       (rule "replace_known_left" (formula "30") (term "0,1") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "30"))
                                       (rule "inEqSimp_contradInEq1" (formula "30") (term "0") (ifseqformula "4"))
                                       (rule "qeq_literals" (formula "30") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "30"))
                                       (rule "inEqSimp_contradInEq1" (formula "30") (ifseqformula "5"))
                                       (rule "andLeft" (formula "30"))
                                       (rule "inEqSimp_homoInEq1" (formula "30"))
                                       (rule "polySimp_pullOutFactor1b" (formula "30") (term "0"))
                                       (rule "add_literals" (formula "30") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "30") (term "1,0"))
                                       (rule "add_zero_right" (formula "30") (term "0"))
                                       (rule "leq_literals" (formula "30"))
                                       (rule "closeFalse" (formula "30"))
                                    )
                                    (branch "CUT: java.lang.Object::select(heap, MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(i_0_3)), MapCaseStudy.MapEntry::$value) = null FALSE"
                                       (builtin "One Step Simplification" (formula "26"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "6") (term "0") (ifseqformula "10"))
                                       (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "7"))
                                       (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "45"))
                                       (builtin "One Step Simplification" (formula "6"))
                                       (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "7"))
                                       (rule "allLeft" (formula "30") (inst "t=i_0_3"))
                                       (rule "inEqSimp_commuteGeq" (formula "30") (term "1,0,0"))
                                       (rule "applyEq" (formula "30") (term "1,0,0,1") (ifseqformula "6"))
                                       (rule "replace_known_left" (formula "30") (term "0,1") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "30"))
                                       (rule "applyEq" (formula "30") (term "1,0,0,0") (ifseqformula "6"))
                                       (rule "replace_known_right" (formula "30") (term "0,0,0") (ifseqformula "46"))
                                       (builtin "One Step Simplification" (formula "30"))
                                       (rule "applyEq" (formula "30") (term "0,1") (ifseqformula "6"))
                                       (rule "replace_known_right" (formula "30") (term "1") (ifseqformula "45"))
                                       (builtin "One Step Simplification" (formula "30"))
                                       (rule "inEqSimp_contradInEq1" (formula "30") (term "0") (ifseqformula "4"))
                                       (rule "qeq_literals" (formula "30") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "30"))
                                       (rule "inEqSimp_contradInEq1" (formula "30") (ifseqformula "5"))
                                       (rule "andLeft" (formula "30"))
                                       (rule "inEqSimp_homoInEq1" (formula "30"))
                                       (rule "polySimp_pullOutFactor1b" (formula "30") (term "0"))
                                       (rule "add_literals" (formula "30") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "30") (term "1,0"))
                                       (rule "add_literals" (formula "30") (term "0"))
                                       (rule "leq_literals" (formula "30"))
                                       (rule "closeFalse" (formula "30"))
                                    )
                                 )
                              )
                              (branch "CUT: boolean::select(heap, o_2, java.lang.Object::<created>) = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "38"))
                                 (rule "notRight" (formula "38"))
                                 (rule "ifthenelse_split" (formula "4") (term "0"))
                                 (branch " ! MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(i_0_3)) = null & ! boolean::select(heap, MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(i_0_3)), java.lang.Object::<created>) = TRUE TRUE"
                                    (rule "andLeft" (formula "4"))
                                    (rule "notLeft" (formula "4"))
                                    (rule "notLeft" (formula "4"))
                                    (rule "referencedObjectIsCreatedRight" (formula "34") (ifseqformula "35"))
                                    (rule "close" (formula "34") (ifseqformula "8"))
                                 )
                                 (branch " ! MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(i_0_3)) = null & ! boolean::select(heap, MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(i_0_3)), java.lang.Object::<created>) = TRUE FALSE"
                                    (rule "referencedObjectIsCreatedRightEQ" (formula "39") (ifseqformula "4") (ifseqformula "40"))
                                    (rule "close" (formula "39") (ifseqformula "8"))
                                 )
                              )
                           )
                           (branch "Case 2"
                              (rule "nnf_ex2all" (formula "36"))
                              (rule "nnf_notAnd" (formula "1") (term "0"))
                              (rule "nnf_notAnd" (formula "1") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                              (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                              (rule "cut_direct" (formula "35") (term "0,0"))
                              (branch "CUT: boolean::select(heap, o_2, java.lang.Object::<created>) = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "36"))
                                 (rule "false_right" (formula "36"))
                                 (rule "allLeft" (formula "23") (inst "t=o_2"))
                                 (rule "exLeft" (formula "23") (inst "sk=i_0_2"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "eqSymm" (formula "25") (term "1,0"))
                                 (rule "replace_known_right" (formula "24") (term "1,0") (ifseqformula "39"))
                                 (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "3")) (ifInst ""  (formula "1")))
                                 (rule "replace_known_left" (formula "23") (term "0,1") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "3")) (ifInst ""  (formula "39")))
                                 (rule "replace_known_left" (formula "25") (term "0,0,0,0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "39")) (ifInst ""  (formula "1")))
                                 (rule "inEqSimp_homoInEq0" (formula "24"))
                                 (rule "polySimp_addComm1" (formula "24") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "24"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1"))
                                 (rule "polySimp_rightDist" (formula "24") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
                                 (rule "mul_literals" (formula "24") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "24") (term "1,1"))
                                 (rule "allLeft" (formula "18") (inst "t=i_0_2"))
                                 (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "18") (term "0,0") (ifseqformula "24"))
                                 (rule "qeq_literals" (formula "18") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "inEqSimp_contradInEq1" (formula "18") (term "0") (ifseqformula "25"))
                                 (rule "inEqSimp_homoInEq1" (formula "18") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,0"))
                                 (rule "add_literals" (formula "18") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "18") (term "1,0,0,0"))
                                 (rule "add_literals" (formula "18") (term "0,0,0"))
                                 (rule "leq_literals" (formula "18") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "notLeft" (formula "18"))
                                 (rule "allLeft" (formula "22") (inst "t=i_0_2"))
                                 (rule "inEqSimp_commuteGeq" (formula "22") (term "1,0"))
                                 (rule "applyEq" (formula "22") (term "1,0,1") (ifseqformula "26"))
                                 (rule "inEqSimp_contradInEq1" (formula "22") (term "0,0") (ifseqformula "24"))
                                 (rule "qeq_literals" (formula "22") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "inEqSimp_contradInEq1" (formula "22") (term "0") (ifseqformula "25"))
                                 (rule "inEqSimp_homoInEq1" (formula "22") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,0"))
                                 (rule "add_literals" (formula "22") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "22") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "22") (term "0,0,0"))
                                 (rule "leq_literals" (formula "22") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "allLeft" (formula "2") (inst "t=i_0_2"))
                                 (rule "inEqSimp_commuteGeq" (formula "2") (term "1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "2") (term "0,0") (ifseqformula "25"))
                                 (rule "qeq_literals" (formula "2") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "26"))
                                 (rule "inEqSimp_homoInEq1" (formula "2") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0"))
                                 (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "2") (term "0,0,0"))
                                 (rule "leq_literals" (formula "2") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "pullOutSelect" (formula "36") (term "1,0") (inst "selectSK=selectSK_28"))
                                 (rule "simplifySelectOfAnon" (formula "1"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")) (ifInst ""  (formula "6")))
                                 (rule "elementOfArrayRange" (formula "1") (term "0,0") (inst "iv=iv"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")))
                                 (rule "applyEqReverse" (formula "37") (term "1,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=selectSK_29"))
                                 (rule "simplifySelectOfAnon" (formula "1"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "38")))
                                 (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "ifthenelse_negated" (formula "1") (term "0"))
                                 (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "27"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " boolean::select(heap, MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(i_0_2)), java.lang.Object::<created>) = TRUE TRUE"
                                    (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "2"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "closeTrue" (formula "38"))
                                 )
                                 (branch " boolean::select(heap, MapCaseStudy.MapEntry::select(heap, MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(i_0_2)), java.lang.Object::<created>) = TRUE FALSE"
                                    (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "39"))
                                    (rule "close" (formula "37") (ifseqformula "7"))
                                 )
                              )
                              (branch "CUT: boolean::select(heap, o_2, java.lang.Object::<created>) = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "36"))
                                 (rule "notRight" (formula "36"))
                                 (rule "inDomainImpliesCreated" (formula "3"))
                                 (rule "close" (formula "37") (ifseqformula "3"))
                              )
                           )
                        )
                     )
                     (branch "CUT: union(union(allFields(self), allFields(MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry))), infiniteUnion{int i_3;}(if ( geq(i_3, Z(0(#))) & leq(i_3, add(Z(neglit(1(#))), length(MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry))))) then (allFields(MapCaseStudy.MapEntry::select(anon(heap, arrayRange(target, beginTarget, add(add(Z(neglit(1(#))), beginTarget), i_0)), anon_heap_loop<<anonHeapFunction>>), MapCaseStudy.MapEntry[]::select(heap, self, MapCaseStudy.AbstractMap::$entry), arr(i_3)))) else (empty))) = LocSet::select(heap, self, MapCaseStudy.MapInterface::$footprint) FALSE"
                        (builtin "One Step Simplification" (formula "33"))
                        (rule "false_right" (formula "33"))
                        (rule "equalityToElementOfRight" (formula "32") (inst "ov=ov") (inst "fv=fv"))
                        (rule "allRight" (formula "32") (inst "sk=ov_0"))
                        (rule "allRight" (formula "32") (inst "sk=fv_0"))
                        (rule "elementOfUnion" (formula "32") (term "0"))
                        (rule "elementOfInfiniteUnion" (formula "32") (term "1,0"))
                        (builtin "One Step Simplification" (formula "32"))
                        (rule "eqSymm" (formula "32") (term "1,0,1,0"))
                        (rule "elementOfUnion" (formula "32") (term "0,0"))
                        (builtin "One Step Simplification" (formula "32"))
                        (rule "elementOfUnionEQ" (formula "32") (term "1") (ifseqformula "21"))
                        (rule "elementOfInfiniteUnion" (formula "32") (term "1,1"))
                        (builtin "One Step Simplification" (formula "32"))
                        (rule "eqSymm" (formula "32") (term "1,0,1,1"))
                        (rule "elementOfUnion" (formula "32") (term "0,1"))
                        (builtin "One Step Simplification" (formula "32"))
                        (rule "equiv_right" (formula "32"))
                        (branch "Case 1"
                           (rule "orRight" (formula "33"))
                           (rule "orRight" (formula "33"))
                           (rule "replace_known_right" (formula "1") (term "1,0") (ifseqformula "34"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "33")))
                           (rule "exLeft" (formula "1") (inst "sk=i_3_0"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_homoInEq0" (formula "2"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=selectSK_27"))
                           (rule "simplifySelectOfAnon" (formula "3"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "32")) (ifInst ""  (formula "5")))
                           (rule "eqSymm" (formula "4"))
                           (rule "applyEqReverse" (formula "3") (term "1") (ifseqformula "4"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                           (rule "elementOfArrayRange" (formula "3") (term "0,0") (inst "iv=iv"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "34")))
                           (rule "eqSymm" (formula "3"))
                           (rule "applyEq" (formula "37") (term "1,1,0") (ifseqformula "3"))
                           (rule "applyEq" (formula "35") (term "0") (ifseqformula "3"))
                           (rule "sortsDisjointModuloNull" (formula "35"))
                           (rule "replace_known_right" (formula "35") (term "1") (ifseqformula "32"))
                           (builtin "One Step Simplification" (formula "35"))
                           (rule "false_right" (formula "35"))
                           (rule "applyEq" (formula "35") (term "0") (ifseqformula "3"))
                           (rule "sortsDisjointModuloNull" (formula "35"))
                           (rule "replace_known_right" (formula "35") (term "1") (ifseqformula "31"))
                           (builtin "One Step Simplification" (formula "35"))
                           (rule "false_right" (formula "35"))
                           (rule "nnf_ex2all" (formula "35"))
                           (rule "nnf_notAnd" (formula "1") (term "0"))
                           (rule "nnf_notAnd" (formula "1") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                           (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                           (rule "allLeft" (formula "1") (inst "t=i_3_0"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "4"))
                           (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
                           (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                           (rule "add_literals" (formula "1") (term "0,0,1"))
                           (rule "leq_literals" (formula "1") (term "0,1"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "1") (term "0"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "Case 2"
                           (rule "orRight" (formula "33"))
                           (rule "orRight" (formula "33"))
                           (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "33"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")))
                           (rule "exLeft" (formula "1") (inst "sk=i_1"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "eqSymm" (formula "3"))
                           (rule "inEqSimp_homoInEq0" (formula "2"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "applyEq" (formula "36") (term "0") (ifseqformula "3"))
                           (rule "sortsDisjointModuloNull" (formula "36"))
                           (rule "replace_known_right" (formula "36") (term "1") (ifseqformula "31"))
                           (builtin "One Step Simplification" (formula "36"))
                           (rule "false_right" (formula "36"))
                           (rule "applyEq" (formula "35") (term "0") (ifseqformula "3"))
                           (rule "sortsDisjointModuloNull" (formula "35"))
                           (rule "replace_known_right" (formula "35") (term "1") (ifseqformula "32"))
                           (builtin "One Step Simplification" (formula "35"))
                           (rule "false_right" (formula "35"))
                           (rule "applyEq" (formula "35") (term "1,1,0") (ifseqformula "3"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                           (rule "nnf_ex2all" (formula "35"))
                           (rule "nnf_notAnd" (formula "1") (term "0"))
                           (rule "nnf_notAnd" (formula "1") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                           (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                           (rule "allLeft" (formula "1") (inst "t=i_1"))
                           (rule "inEqSimp_commuteGeq" (formula "1") (term "1,0"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (term "0,0") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "1") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "4"))
                           (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "leq_literals" (formula "1") (term "0,0"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=selectSK_26"))
                           (rule "simplifySelectOfAnon" (formula "1"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")) (ifInst ""  (formula "6")))
                           (rule "eqSymm" (formula "33"))
                           (rule "elementOfArrayRange" (formula "1") (term "0,0") (inst "iv=iv"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")) (ifInst ""  (formula "33")))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                  )
                  (branch "Show Axiom Satisfiability"
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "closeTrue" (formula "32"))
                  )
               )
            )
         )
         (branch "Case 2"
            (builtin "One Step Simplification" (formula "36"))
            (rule "closeTrue" (formula "36"))
         )
      )
      (branch "Case 2"
         (builtin "One Step Simplification" (formula "36"))
         (rule "allRight" (formula "36") (inst "sk=f_1"))
         (rule "allRight" (formula "36") (inst "sk=o_4"))
         (rule "orRight" (formula "36"))
         (rule "orRight" (formula "36"))
         (rule "eqSymm" (formula "38"))
         (rule "eqSymm" (formula "36") (term "0,0,0,1"))
         (rule "applyEq" (formula "38") (term "1,2,1,0,0") (ifseqformula "27"))
         (rule "applyEq" (formula "13") (term "1,1") (ifseqformula "27"))
         (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
         (rule "applyEq" (formula "7") (term "0") (ifseqformula "26"))
         (rule "applyEq" (formula "26") (term "0") (ifseqformula "25"))
         (rule "inEqSimp_homoInEq1" (formula "26"))
         (rule "polySimp_pullOutFactor1" (formula "26") (term "0"))
         (rule "add_literals" (formula "26") (term "1,0"))
         (rule "times_zero_1" (formula "26") (term "0"))
         (rule "leq_literals" (formula "26"))
         (rule "true_left" (formula "26"))
         (rule "applyEq" (formula "26") (term "1,2,1,0,1,0,1,0") (ifseqformula "25"))
         (rule "applyEq" (formula "27") (term "1,2,1,0,1,0,1,0") (ifseqformula "25"))
         (rule "applyEq" (formula "1") (term "0") (ifseqformula "25"))
         (rule "inEqSimp_homoInEq0" (formula "1"))
         (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "1,0"))
         (rule "times_zero_1" (formula "1") (term "0"))
         (rule "qeq_literals" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "applyEq" (formula "32") (term "1,1,1,0,1") (ifseqformula "24"))
         (rule "applyEq" (formula "25") (term "1,2,1,0,0,1,0") (ifseqformula "24"))
         (rule "eqSymm" (formula "25") (term "1,0"))
         (rule "applyEq" (formula "26") (term "1,2,1,0,0,1,0") (ifseqformula "24"))
         (rule "eqSymm" (formula "26") (term "1,0"))
         (rule "applyEq" (formula "8") (term "1,1") (ifseqformula "24"))
         (rule "applyEq" (formula "26") (term "1,2,1,0,1,0,1,0") (ifseqformula "24"))
         (rule "applyEq" (formula "25") (term "1,2,1,0,0,1,0") (ifseqformula "24"))
         (rule "eqSymm" (formula "25") (term "1,0"))
         (rule "applyEq" (formula "26") (term "1,2,1,0,0,1,0") (ifseqformula "24"))
         (rule "eqSymm" (formula "26") (term "1,0"))
         (rule "applyEq" (formula "25") (term "1,2,1,0,1,1,1,0") (ifseqformula "24"))
         (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=selectSK_45"))
         (rule "simplifySelectOfAnon" (formula "1"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")))
         (rule "eqSymm" (formula "35"))
         (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
         (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0"))
         (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "33"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")))
         (rule "closeFalse" (formula "1"))
      )
   )
)
(branch "Show Axiom Satisfiability"
   (builtin "One Step Simplification" (formula "12"))
   (rule "closeTrue" (formula "12"))
)
)

}
