\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Oct 30 14:15:33 CET 2013
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]RETREAT_MODE_OPTIONS_KEY=RETREAT_MODE_NONE
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=6000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=Strings-Strings\\:on , reach-reach\\:on , JavaCard-JavaCard\\:on , assertions-assertions\\:on , bigint-bigint\\:on , programRules-programRules\\:Java , intRules-intRules\\:arithmeticSemanticsIgnoringOF , modelFields-modelFields\\:showSatisfiability , initialisation-initialisation\\:disableStaticInitialisation , sequences-sequences\\:on , integerSimplificationRules-integerSimplificationRules\\:full , runtimeExceptions-runtimeExceptions\\:ban , optimisedSelectRules-optimisedSelectRules\\:on
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "..";

\proofObligation "#Proof Obligation Settings
#Wed Oct 30 14:15:33 CET 2013
name=CaseStudyUseMaps.MapImplementation[CaseStudyUseMaps.MapImplementation\\:\\:putOverwrite2(int,java.lang.Object)].JML normal_behavior operation contract.0
contract=CaseStudyUseMaps.MapImplementation[CaseStudyUseMaps.MapImplementation\\:\\:putOverwrite2(int,java.lang.Object)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "kai" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "6451")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "8"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "10") (term "0,0,0,0,1"))
(rule "eqSymm" (formula "10") (term "1,0,0,1,0,1"))
(rule "replace_known_right" (formula "4") (term "1") (ifseqformula "9"))
(builtin "One Step Simplification" (formula "4"))
(rule "inEqSimp_ltToLeq" (formula "6"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "6") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "elementOfSingleton" (formula "10") (term "0,0,0,0,1,0,1"))
(rule "assignment" (formula "10") (term "1"))
(builtin "One Step Simplification" (formula "10"))
(rule "inEqSimp_sepNegMonomial0" (formula "6"))
(rule "polySimp_mulLiterals" (formula "6") (term "0"))
(rule "polySimp_elimOne" (formula "6") (term "0"))
(rule "nnf_imp2or" (formula "10") (term "0,0,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "10") (term "1,0,0,1,0,0,0,1"))
(builtin "One Step Simplification" (formula "10"))
(rule "nnf_notAnd" (formula "10") (term "0,0,0,1,0,0,0,1"))
(builtin "One Step Simplification" (formula "10"))
(rule "nnf_notOr" (formula "10") (term "0,0,0,0,1,0,0,0,1"))
(rule "Class_invariant_axiom_for_CaseStudyUseMaps_MapImplementation" (formula "7") (inst "o=o") (inst "i=i") (inst "i_0=i_0") (inst "i1=i1") (inst "i2=i2") (inst "i_1=i_1") (inst "i_2=i_2") (inst "sk=sk_0"))
(branch "Use Axiom"
   (builtin "One Step Simplification" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "notLeft" (formula "8"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "notLeft" (formula "9"))
   (rule "andLeft" (formula "7"))
   (rule "notLeft" (formula "8"))
   (rule "eqSymm" (formula "22"))
   (rule "eqSymm" (formula "15") (term "1,0,0,1,0"))
   (rule "eqSymm" (formula "13"))
   (rule "eqSymm" (formula "9") (term "0,1,0,1,0"))
   (rule "eqSymm" (formula "9") (term "1,1,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
   (rule "subsetSingletonLeft" (formula "18"))
   (rule "subsetSingletonLeft" (formula "17"))
   (rule "applyEq" (formula "17") (term "2") (ifseqformula "10"))
   (rule "applyEq" (formula "18") (term "2") (ifseqformula "10"))
   (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "13"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,0,1,0"))
   (rule "mul_literals" (formula "15") (term "0,1,1,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
   (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1,0"))
   (rule "mul_literals" (formula "9") (term "0,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
   (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
   (rule "elementOfUnion" (formula "17"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "eqSymm" (formula "17") (term "1"))
   (rule "sortsDisjointModuloNull" (formula "17") (term "1"))
   (rule "replace_known_right" (formula "17") (term "0,1") (ifseqformula "21"))
   (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "23")))
   (rule "elementOfUnion" (formula "18"))
   (builtin "One Step Simplification" (formula "18"))
   (rule "eqSymm" (formula "18") (term "1"))
   (rule "sortsDisjointModuloNull" (formula "18") (term "1"))
   (rule "replace_known_right" (formula "18") (term "0,1") (ifseqformula "21"))
   (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "23")))
   (rule "elementOfUnion" (formula "17"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "true_left" (formula "17"))
   (rule "elementOfUnion" (formula "17"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "true_left" (formula "17"))
   (rule "nnf_imp2or" (formula "15") (term "0"))
   (rule "nnf_imp2or" (formula "9") (term "1,0,1,0"))
   (rule "nnf_imp2or" (formula "14") (term "0"))
   (rule "nnf_imp2or" (formula "7") (term "0"))
   (rule "nnf_imp2or" (formula "8") (term "0"))
   (rule "nnf_imp2or" (formula "9") (term "0"))
   (rule "nnf_notAnd" (formula "15") (term "0,0"))
   (builtin "One Step Simplification" (formula "15"))
   (rule "nnf_notAnd" (formula "14") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
   (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
   (rule "mul_literals" (formula "14") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "7") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
   (rule "mul_literals" (formula "7") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
   (rule "mul_literals" (formula "7") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "8") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
   (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
   (rule "mul_literals" (formula "8") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "9") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
   (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
   (rule "mul_literals" (formula "9") (term "1,0,0,0"))
   (rule "nnf_imp2or" (formula "9") (term "0,1,0"))
   (rule "nnf_notOr" (formula "15") (term "0,0,0"))
   (rule "nnf_notAnd" (formula "9") (term "0,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,1,0"))
   (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0,1,0"))
   (rule "add_zero_right" (formula "9") (term "0,0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,1,0"))
   (rule "mul_literals" (formula "9") (term "1,0,0,0,1,0"))
   (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,1,0"))
   (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,1,0"))
   (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,1,0"))
   (rule "add_zero_left" (formula "9") (term "0,0,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,1,0"))
   (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_putOverwrite2,savedHeapBefore_putOverwrite2"))
   (builtin "One Step Simplification" (formula "23"))
   (rule "eval_order_array_access1" (formula "23") (term "1") (inst "#v0=o_arr"))
   (rule "variableDeclarationAssign" (formula "23") (term "1"))
   (rule "variableDeclaration" (formula "23") (term "1") (newnames "o_arr"))
   (rule "assignment_read_attribute_this" (formula "23"))
   (builtin "One Step Simplification" (formula "23"))
   (rule "assignment_to_reference_array_component" (formula "23"))
   (branch "Normal Execution (o_arr != null)"
      (builtin "One Step Simplification" (formula "23"))
      (rule "assignment_write_attribute_this" (formula "23"))
      (builtin "One Step Simplification" (formula "23"))
      (rule "pullOutSelect" (formula "23") (term "1,1,3,0,1,0") (inst "selectSK=selectSK_0"))
      (rule "simplifySelectOfStore" (formula "1"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "24") (term "1,1,3,0,1,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "23") (term "0,3,0,1,0") (inst "selectSK=selectSK_1"))
      (rule "simplifySelectOfStore" (formula "1"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "24") (term "0,3,0,1,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "23") (term "1,3,0,1,0") (inst "selectSK=selectSK_2"))
      (rule "simplifySelectOfStore" (formula "1"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
      (rule "applyEqReverse" (formula "24") (term "1,3,0,1,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "emptyStatement" (formula "23") (term "1"))
      (rule "assignment_write_attribute_this" (formula "23"))
      (builtin "One Step Simplification" (formula "23"))
      (rule "pullOutSelect" (formula "23") (term "0,1,0,3,0,1,0") (inst "selectSK=selectSK_3"))
      (rule "simplifySelectOfStore" (formula "1"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "simplifySelectOfStore" (formula "1"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "24") (term "0,1,0,3,0,1,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "23") (term "0,0,0,3,0,1,0") (inst "selectSK=selectSK_4"))
      (rule "simplifySelectOfStore" (formula "1"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "replaceKnownSelect_taclet0_0" (formula "1") (term "0"))
      (rule "replaceKnownAuxiliaryConstant_taclet1_0" (formula "1") (term "0"))
      (rule "applyEqReverse" (formula "24") (term "0,0,0,3,0,1,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "emptyStatement" (formula "23") (term "1"))
      (rule "commute_or" (formula "15") (term "0,0"))
      (rule "cnf_eqv" (formula "15") (term "1,0"))
      (rule "nnf_notEx" (formula "15") (term "0,1,1,0"))
      (rule "nnf_notAnd" (formula "15") (term "0,0,1,1,0"))
      (rule "nnf_notAnd" (formula "15") (term "0,0,0,1,1,0"))
      (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,0,1,1,0"))
      (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,0,1,1,0"))
      (rule "add_zero_right" (formula "15") (term "0,0,0,0,0,0,1,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,1,1,0"))
      (rule "mul_literals" (formula "15") (term "1,0,0,0,0,1,1,0"))
      (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,0,1,1,0"))
      (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,0,1,1,0"))
      (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,0,1,1,0"))
      (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,0,1,1,0"))
      (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,0,1,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,1,1,0"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,1,1,0"))
      (rule "commute_or" (formula "9") (term "1,0,1,0"))
      (rule "cnf_rightDist" (formula "15") (term "0,0"))
      (builtin "One Step Simplification" (formula "15"))
      (rule "commuteUnion_2" (formula "23") (term "3,0,1,0"))
      (rule "shift_paren_or" (formula "9") (term "0,1,0"))
      (rule "arrayLengthIsAShort" (formula "6") (term "0"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "true_left" (formula "6"))
      (rule "arrayLengthNotNegative" (formula "6") (term "0"))
      (rule "commuteUnion" (formula "24") (term "0,3,0,1,0"))
      (rule "mapSizeAxioms" (formula "17") (term "0"))
      (rule "andLeft" (formula "17"))
      (rule "replace_known_left" (formula "18") (term "0,1") (ifseqformula "20"))
      (builtin "One Step Simplification" (formula "18"))
      (rule "notLeft" (formula "18"))
      (rule "applyEq" (formula "20") (term "0") (ifseqformula "18"))
      (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
      (rule "inEqSimp_contradEq7" (formula "20") (ifseqformula "6"))
      (rule "mul_literals" (formula "20") (term "1,0,0"))
      (rule "add_zero_left" (formula "20") (term "0,0"))
      (rule "leq_literals" (formula "20") (term "0"))
      (builtin "One Step Simplification" (formula "20"))
      (rule "false_right" (formula "20"))
      (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "6"))
      (rule "leq_literals" (formula "17") (term "0"))
      (builtin "One Step Simplification" (formula "17"))
      (rule "true_left" (formula "17"))
      (rule "arrayLengthNotNegative" (formula "14") (term "0"))
      (rule "applyEq" (formula "14") (term "0") (ifseqformula "15"))
      (rule "arrayLengthIsAShort" (formula "14") (term "0"))
      (builtin "One Step Simplification" (formula "14"))
      (rule "true_left" (formula "14"))
      (rule "methodCallEmpty" (formula "24") (term "1"))
      (rule "tryEmpty" (formula "24") (term "1"))
      (rule "emptyModality" (formula "24") (term "1"))
      (builtin "One Step Simplification" (formula "24"))
      (rule "eqSymm" (formula "24") (term "1,0,0,1"))
      (rule "pullOutSelect" (formula "24") (term "1,1,0,0,0") (inst "selectSK=selectSK_5"))
      (rule "simplifySelectOfStore" (formula "1"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "replaceKnownSelect_taclet9_0" (formula "1") (term "0"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_0" (formula "1") (term "0"))
      (rule "applyEqReverse" (formula "25") (term "1,1,0,0,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "24") (term "1,0,0") (inst "selectSK=selectSK_6"))
      (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
      (rule "simplifySelectOfStore" (formula "1"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "simplifySelectOfStore" (formula "1"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "castDel" (formula "1") (term "0"))
      (rule "applyEqReverse" (formula "25") (term "1,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "24") (term "1,0,0,0") (inst "selectSK=selectSK_7"))
      (rule "simplifySelectOfStore" (formula "1"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "simplifySelectOfStore" (formula "1"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "replaceKnownSelect_taclet4_0" (formula "1") (term "0"))
      (rule "replaceKnownAuxiliaryConstant_taclet5_0" (formula "1") (term "0"))
      (rule "applyEqReverse" (formula "25") (term "1,0,0,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "Class_invariant_axiom_for_CaseStudyUseMaps_MapImplementation" (formula "24") (term "1,1,0") (inst "o=o") (inst "i=i") (inst "i_0=i_0") (inst "i1=i1") (inst "i2=i2") (inst "i_1=i_1") (inst "i_2=i_2") (inst "sk=sk_1"))
      (branch "Use Axiom"
         (builtin "One Step Simplification" (formula "24"))
         (rule "replaceKnownSelect_taclet13_0" (formula "24") (term "0,1,1,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet15_0" (formula "24") (term "0,1,1,1,0"))
         (rule "replaceKnownSelect_taclet11_0" (formula "24") (term "0,0,1,0,0,0,1,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet12_0" (formula "24") (term "0,0,1,0,0,0,1,1,0"))
         (rule "replaceKnownSelect_taclet13_0" (formula "24") (term "0,0,1,0,0,0,0,1,1,0"))
         (rule "replaceKnownSelect_taclet11_0" (formula "24") (term "0,1,1,0,0,0,0,1,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet15_0" (formula "24") (term "0,0,1,0,0,0,0,1,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet12_0" (formula "24") (term "0,1,1,0,0,0,0,1,1,0"))
         (rule "replaceKnownSelect_taclet13_0" (formula "24") (term "0,1,1,0,1,0,0,0,0,0,1,1,0"))
         (rule "replaceKnownSelect_taclet11_0" (formula "24") (term "0,0,1,0,0,0,0,0,0,0,1,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet15_0" (formula "24") (term "0,1,1,0,1,0,0,0,0,0,1,1,0"))
         (rule "replaceKnownSelect_taclet13_0" (formula "24") (term "0,0,1,0,1,0,0,0,0,0,0,1,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet12_0" (formula "24") (term "0,0,1,0,0,0,0,0,0,0,1,1,0"))
         (rule "replaceKnownSelect_taclet11_0" (formula "24") (term "0,0,1,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "replaceKnownSelect_taclet11_0" (formula "24") (term "1,1,0,1,0,1,0,0,0,0,0,0,1,1,0"))
         (rule "replaceKnownSelect_taclet11_0" (formula "24") (term "0,1,1,0,0,1,0,0,0,0,0,0,1,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet15_0" (formula "24") (term "0,0,1,0,1,0,0,0,0,0,0,1,1,0"))
         (rule "replaceKnownSelect_taclet11_0" (formula "24") (term "1,0,1,0,0,1,0,1,0,0,0,0,0,1,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet12_0" (formula "24") (term "0,0,1,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet12_0" (formula "24") (term "1,1,0,1,0,1,0,0,0,0,0,0,1,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet12_0" (formula "24") (term "0,1,1,0,0,1,0,0,0,0,0,0,1,1,0"))
         (rule "replaceKnownSelect_taclet11_0" (formula "24") (term "0,1,1,0,0,0,1,0,1,0,0,0,0,0,1,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet12_0" (formula "24") (term "1,0,1,0,0,1,0,1,0,0,0,0,0,1,1,0"))
         (rule "replaceKnownSelect_taclet11_0" (formula "24") (term "0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet12_0" (formula "24") (term "0,1,1,0,0,0,1,0,1,0,0,0,0,0,1,1,0"))
         (rule "replaceKnownSelect_taclet11_0" (formula "24") (term "0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "replaceKnownSelect_taclet11_0" (formula "24") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet12_0" (formula "24") (term "0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "replaceKnownSelect_taclet11_0" (formula "24") (term "1,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "replaceKnownSelect_taclet11_0" (formula "24") (term "1,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "replaceKnownSelect_taclet11_0" (formula "24") (term "0,1,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet12_0" (formula "24") (term "0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet12_0" (formula "24") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "replaceKnownSelect_taclet11_0" (formula "24") (term "0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "replaceKnownSelect_taclet11_0" (formula "24") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet12_0" (formula "24") (term "1,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet12_0" (formula "24") (term "1,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet12_0" (formula "24") (term "0,1,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet12_0" (formula "24") (term "0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet12_0" (formula "24") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "eqSymm" (formula "24") (term "1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "eqSymm" (formula "24") (term "0,1,0,0,0,1,1,0"))
         (rule "eqSymm" (formula "24") (term "1,0,0,0,0,0,0,0,1,1,0"))
         (rule "eqSymm" (formula "24") (term "1,0,0,1,0,1,0,0,0,0,0,1,1,0"))
         (rule "eqSymm" (formula "24") (term "0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "replace_known_left" (formula "24") (term "1,0,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "12"))
         (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "19")))
         (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1,0,0,0,0,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,1,0,0,0,0,0,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,0,1,0,1,0,0,0,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,0,1,0,1,0,0,0,0,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1,0,0,0,0,0,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,0,1,0,1,0,0,0,0,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "sizeOfMapUpdate" (formula "24") (term "0,1,0,0,0,0,1,1,0"))
         (rule "replace_known_left" (formula "24") (term "0,0,1,0,0,0,0,1,1,0") (ifseqformula "18"))
         (builtin "One Step Simplification" (formula "24"))
         (rule "polySimp_addComm0" (formula "24") (term "2,0,1,0,0,0,0,1,1,0"))
         (rule "isFiniteOfMapUpdate" (formula "24") (term "1,1,1,0"))
         (rule "replace_known_left" (formula "24") (term "1,1,1,0") (ifseqformula "18"))
         (builtin "One Step Simplification" (formula "24"))
         (rule "subsetSingletonLeft" (formula "24") (term "1,0,1,1,0"))
         (rule "getOfMapUpdate" (formula "24") (term "0,1,0,1,0,0,0,0,0,1,1,0"))
         (rule "inDomainOfMapUpdate" (formula "24") (term "1,1,0,1,0,0,0,0,1,1,0"))
         (rule "subsetSingletonLeft" (formula "24") (term "1,1,1,0"))
         (rule "applyEq" (formula "24") (term "1,2,0,1,0,0,0,1,1,0") (ifseqformula "17"))
         (rule "applyEq" (formula "24") (term "1,0,1,0,0,0,1,1,0") (ifseqformula "17"))
         (builtin "One Step Simplification" (formula "24"))
         (rule "polySimp_homoEq" (formula "24") (term "1,1,0,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,0,1,1,0,0,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "24") (term "1,0,1,1,0,0,0,1,1,0"))
         (rule "mul_literals" (formula "24") (term "0,1,0,1,1,0,0,0,1,1,0"))
         (rule "polySimp_addAssoc" (formula "24") (term "0,1,1,0,0,0,1,1,0"))
         (rule "polySimp_addComm0" (formula "24") (term "0,0,1,1,0,0,0,1,1,0"))
         (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,1,1,0,0,0,1,1,0"))
         (rule "add_literals" (formula "24") (term "1,1,0,1,1,0,0,0,1,1,0"))
         (rule "times_zero_1" (formula "24") (term "1,0,1,1,0,0,0,1,1,0"))
         (rule "add_zero_right" (formula "24") (term "0,1,1,0,0,0,1,1,0"))
         (rule "equal_literals" (formula "24") (term "1,1,0,0,0,1,1,0"))
         (builtin "One Step Simplification" (formula "24"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,0,1,0,1,0,0,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0,1,0,1,0,0,0,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0,1,0,1,0,0,0,0,1,1,0"))
         (rule "mul_literals" (formula "24") (term "0,1,1,0,0,0,1,0,1,0,0,0,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0,1,0,1,0,0,0,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0,1,0,1,0,0,0,0,1,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,0,0,0,0,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,0,0,0,0,0,1,1,0"))
         (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,0,0,0,0,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,0,0,0,0,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,0,0,0,0,0,1,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "mul_literals" (formula "24") (term "0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "pullOutSelect" (formula "24") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0") (inst "selectSK=selectSK_8"))
         (rule "applyEq" (formula "25") (term "0,0,1,0,0,1,1,0") (ifseqformula "1"))
         (rule "applyEq" (formula "25") (term "0,0,1,0,0,0,0,0,0,0,1,1,0") (ifseqformula "1"))
         (rule "applyEq" (formula "25") (term "1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "1"))
         (rule "applyEq" (formula "25") (term "0,1,1,1,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "1"))
         (rule "applyEq" (formula "25") (term "0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "1"))
         (rule "applyEq" (formula "25") (term "1,1,1,0,1,0,0,0,0,0,1,1,0") (ifseqformula "1"))
         (rule "applyEq" (formula "25") (term "0,0,1,0,0,0,0,0,0,1,1,0") (ifseqformula "1"))
         (rule "simplifySelectOfStore" (formula "1"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "replaceKnownSelect_taclet6_0" (formula "1") (term "0"))
         (rule "replaceKnownAuxiliaryConstant_taclet8_0" (formula "1") (term "0"))
         (rule "applyEqReverse" (formula "25") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "25") (term "0,0,1,0,0,1,1,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "25") (term "0,0,1,0,0,0,0,0,0,0,1,1,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "25") (term "1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "25") (term "0,1,1,1,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "25") (term "0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "25") (term "1,1,1,0,1,0,0,0,0,0,1,1,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "25") (term "0,0,1,0,0,0,0,0,0,1,1,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "replace_known_right" (formula "24") (term "0,1,0,0,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "20"))
         (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "13")) (ifInst ""  (formula "14")) (ifInst ""  (formula "21")))
         (rule "applyEq" (formula "24") (term "1,1,1,0,0,1,0,0,0,0,0,0,0,1,1,0") (ifseqformula "14"))
         (rule "pullOutSelect" (formula "24") (term "2,1,0,1,1,0") (inst "selectSK=selectSK_9"))
         (rule "applyEq" (formula "25") (term "2,1,1,1,0") (ifseqformula "1"))
         (rule "applyEq" (formula "25") (term "0,1,0,0,0,0,0,1,1,0") (ifseqformula "1"))
         (rule "simplifySelectOfStore" (formula "1"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "castDel" (formula "1") (term "0"))
         (rule "applyEqReverse" (formula "25") (term "2,1,0,1,1,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "25") (term "2,1,1,1,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "25") (term "0,1,0,0,0,0,0,1,1,0") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "25"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "elementOfUnion" (formula "24") (term "1,1,1,0"))
         (builtin "One Step Simplification" (formula "24"))
         (rule "eqSymm" (formula "24") (term "1,1,1,1,0"))
         (rule "sortsDisjointModuloNull" (formula "24") (term "1,1,1,1,0"))
         (rule "replace_known_right" (formula "24") (term "1,1,1,1,1,0") (ifseqformula "22"))
         (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "20")))
         (rule "elementOfUnion" (formula "24") (term "1,0,1,1,0"))
         (builtin "One Step Simplification" (formula "24"))
         (rule "eqSymm" (formula "24") (term "1,1,0,1,1,0"))
         (rule "sortsDisjointModuloNull" (formula "24") (term "1,1,0,1,1,0"))
         (rule "replace_known_right" (formula "24") (term "1,1,1,0,1,1,0") (ifseqformula "22"))
         (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "20")))
         (rule "elementOfUnion" (formula "24") (term "1,1,1,0"))
         (builtin "One Step Simplification" (formula "24"))
         (rule "elementOfUnion" (formula "24") (term "1,1,1,0"))
         (builtin "One Step Simplification" (formula "24"))
         (rule "nnf_imp2or" (formula "24") (term "0,1,0,1,1,0"))
         (rule "nnf_imp2or" (formula "24") (term "0,1,0,0,1,1,0"))
         (rule "nnf_notAnd" (formula "24") (term "0,0,1,0,1,1,0"))
         (builtin "One Step Simplification" (formula "24"))
         (rule "nnf_imp2or" (formula "24") (term "0,1,0,0,0,1,1,0"))
         (rule "nnf_notOr" (formula "24") (term "0,0,0,1,0,1,1,0"))
         (rule "nnf_notAnd" (formula "24") (term "0,0,1,0,0,1,1,0"))
         (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,1,0,0,1,1,0"))
         (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,1,0,0,1,1,0"))
         (rule "add_literals" (formula "24") (term "0,0,0,0,0,1,0,0,1,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1,0,0,1,1,0"))
         (rule "mul_literals" (formula "24") (term "1,0,0,0,1,0,0,1,1,0"))
         (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,1,0,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,1,0,0,1,1,0"))
         (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,1,0,0,1,1,0"))
         (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,1,0,0,1,1,0"))
         (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,1,0,0,1,1,0"))
         (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,1,0,0,1,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,1,0,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,1,0,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,1,0,0,1,1,0"))
         (rule "nnf_imp2or" (formula "24") (term "0,0,0,0,0,0,1,1,0"))
         (rule "nnf_imp2or" (formula "24") (term "0,1,0,0,0,0,1,1,0"))
         (rule "nnf_notAnd" (formula "24") (term "0,0,1,0,0,0,1,1,0"))
         (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,1,0,0,0,1,1,0"))
         (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,1,0,0,0,1,1,0"))
         (rule "add_literals" (formula "24") (term "0,0,0,0,0,1,0,0,0,1,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1,0,0,0,1,1,0"))
         (rule "mul_literals" (formula "24") (term "1,0,0,0,1,0,0,0,1,1,0"))
         (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,1,0,0,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,1,0,0,0,1,1,0"))
         (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,1,0,0,0,1,1,0"))
         (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,1,0,0,0,1,1,0"))
         (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,1,0,0,0,1,1,0"))
         (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,1,0,0,0,1,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,1,0,0,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,1,0,0,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,1,0,0,0,1,1,0"))
         (rule "nnf_imp2or" (formula "24") (term "0,1,0,1,0,0,0,1,1,0"))
         (rule "nnf_notAnd" (formula "24") (term "0,0,0,0,0,0,0,1,1,0"))
         (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,0,0,0,0,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,0,0,0,0,0,1,1,0"))
         (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,0,0,0,0,0,1,1,0"))
         (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,0,0,0,0,0,1,1,0"))
         (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,0,0,0,0,0,1,1,0"))
         (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,0,0,0,0,0,1,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,0,0,0,0,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,0,0,0,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0,0,0,0,0,1,1,0"))
         (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,0,0,0,0,0,1,1,0"))
         (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "add_literals" (formula "24") (term "0,0,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,0,0,0,0,0,1,1,0"))
         (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "nnf_notAnd" (formula "24") (term "0,0,1,0,0,0,0,1,1,0"))
         (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,1,0,0,0,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,1,0,0,0,0,1,1,0"))
         (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,1,0,0,0,0,1,1,0"))
         (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,1,0,0,0,0,1,1,0"))
         (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,1,0,0,0,0,1,1,0"))
         (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,1,0,0,0,0,1,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,1,0,0,0,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,1,0,0,0,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,1,0,0,0,0,1,1,0"))
         (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,1,0,0,0,0,1,1,0"))
         (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,1,0,0,0,0,1,1,0"))
         (rule "add_literals" (formula "24") (term "0,0,0,0,0,1,0,0,0,0,1,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1,0,0,0,0,1,1,0"))
         (rule "mul_literals" (formula "24") (term "1,0,0,0,1,0,0,0,0,1,1,0"))
         (rule "nnf_imp2or" (formula "24") (term "1,0,1,0,1,0,0,0,1,1,0"))
         (rule "nnf_notAnd" (formula "24") (term "0,0,1,0,1,0,0,0,1,1,0"))
         (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,1,0,1,0,0,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,1,0,1,0,0,0,1,1,0"))
         (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,1,0,1,0,0,0,1,1,0"))
         (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,1,0,1,0,0,0,1,1,0"))
         (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,1,0,1,0,0,0,1,1,0"))
         (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,1,0,1,0,0,0,1,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,1,0,1,0,0,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,1,0,1,0,0,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,1,0,1,0,0,0,1,1,0"))
         (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,1,0,1,0,0,0,1,1,0"))
         (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,1,0,1,0,0,0,1,1,0"))
         (rule "add_literals" (formula "24") (term "0,0,0,0,0,1,0,1,0,0,0,1,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1,0,1,0,0,0,1,1,0"))
         (rule "mul_literals" (formula "24") (term "1,0,0,0,1,0,1,0,0,0,1,1,0"))
         (rule "ex_pull_out2" (formula "16") (term "0,1,0"))
         (rule "all_pull_out2" (formula "16") (term "1,1,0"))
         (rule "all_pull_out3" (formula "10") (term "0"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "7") (term "0,0") (ifseqformula "1"))
         (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "20"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0") (ifseqformula "1"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "22"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "shift_paren_or" (formula "12") (term "0,0"))
         (rule "commute_or" (formula "18") (term "0,0,1,0"))
         (rule "commute_or_2" (formula "18") (term "0,1,1,0"))
         (rule "shift_paren_or" (formula "12") (term "0,0,0"))
         (rule "commute_or_2" (formula "18") (term "0,0,1,1,0"))
         (rule "shift_paren_or" (formula "12") (term "0,0,0,0"))
         (rule "commute_or" (formula "18") (term "0,0,0,1,1,0"))
         (rule "cnf_rightDist" (formula "18") (term "0,0,1,0"))
         (rule "commute_or" (formula "18") (term "1,0,0,1,0"))
         (rule "cnf_rightDist" (formula "18") (term "0,0,0,1,0"))
         (rule "commute_or" (formula "18") (term "1,0,0,0,1,0"))
         (rule "cut_direct" (formula "26") (term "0,0"))
         (branch "CUT: mapUpdate(mapUpdate(self.map, self.keys[index_0], value), self.keys[index_0], value) = mapUpdate(self.map, self.keys[index_0], value) TRUE"
            (builtin "One Step Simplification" (formula "27"))
            (rule "ex_pull_out0" (formula "19") (term "1,0"))
            (rule "allLeft" (formula "12") (inst "t=index_0"))
            (rule "inEqSimp_commuteGeq" (formula "12") (term "1,0"))
            (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0") (ifseqformula "10"))
            (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1,0"))
            (rule "add_literals" (formula "12") (term "1,1,0,0,1,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,0,1,0"))
            (rule "add_zero_right" (formula "12") (term "0,0,1,0"))
            (rule "leq_literals" (formula "12") (term "0,1,0"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_contradInEq1" (formula "12") (term "0") (ifseqformula "7"))
            (rule "qeq_literals" (formula "12") (term "0,0"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "notLeft" (formula "12"))
            (rule "allLeft" (formula "11") (inst "t=index_0"))
            (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
            (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0") (ifseqformula "10"))
            (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0"))
            (rule "add_literals" (formula "11") (term "1,1,0,0,1,0"))
            (rule "times_zero_1" (formula "11") (term "1,0,0,1,0"))
            (rule "add_zero_right" (formula "11") (term "0,0,1,0"))
            (rule "leq_literals" (formula "11") (term "0,1,0"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "7"))
            (rule "qeq_literals" (formula "11") (term "0,0"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "notLeft" (formula "11"))
            (rule "all_pull_out1" (formula "19") (term "0,1,0"))
            (rule "allLeft" (formula "18") (inst "t=index_0"))
            (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0"))
            (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0") (ifseqformula "10"))
            (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1,0"))
            (rule "add_literals" (formula "18") (term "1,1,0,0,1,0"))
            (rule "times_zero_1" (formula "18") (term "1,0,0,1,0"))
            (rule "add_zero_right" (formula "18") (term "0,0,1,0"))
            (rule "leq_literals" (formula "18") (term "0,1,0"))
            (builtin "One Step Simplification" (formula "18"))
            (rule "inEqSimp_contradInEq1" (formula "18") (term "0") (ifseqformula "7"))
            (rule "qeq_literals" (formula "18") (term "0,0"))
            (builtin "One Step Simplification" (formula "18"))
            (rule "ex_pull_out3" (formula "20") (term "0"))
            (rule "cut_direct" (formula "30") (term "1,1,0"))
            (branch "CUT: inDomain(self.map, self.keys[index_0]) TRUE"
               (builtin "One Step Simplification" (formula "31"))
               (rule "andRight" (formula "31"))
               (branch
                  (rule "andRight" (formula "31"))
                  (branch
                     (rule "allRight" (formula "31") (inst "sk=o_2"))
                     (rule "orRight" (formula "31"))
                     (rule "orRight" (formula "31"))
                     (rule "orRight" (formula "33"))
                     (rule "replace_known_right" (formula "31") (term "0,1") (ifseqformula "32"))
                     (builtin "One Step Simplification" (formula "31"))
                     (rule "notRight" (formula "31"))
                     (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=selectSK_22"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                     (rule "close" (formula "34") (ifseqformula "2"))
                  )
                  (branch
                     (rule "andRight" (formula "31"))
                     (branch
                        (rule "andRight" (formula "31"))
                        (branch
                           (rule "andRight" (formula "31"))
                           (branch
                              (rule "andRight" (formula "31"))
                              (branch
                                 (rule "allRight" (formula "31") (inst "sk=i_2_0"))
                                 (rule "orRight" (formula "31"))
                                 (rule "notRight" (formula "32"))
                                 (rule "orRight" (formula "32"))
                                 (rule "inEqSimp_geqRight" (formula "33"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_leqRight" (formula "33"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=selectSK_21"))
                                 (rule "simplifySelectOfStore" (formula "3"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "simplifySelectOfStore" (formula "3"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "simplifySelectOfStore" (formula "3"))
                                 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "32")))
                                 (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "allLeft" (formula "15") (inst "t=i_2_0"))
                                 (rule "replace_known_left" (formula "15") (term "0,1") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "15"))
                                 (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "15") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "15"))
                                 (rule "inEqSimp_contradInEq1" (formula "15") (ifseqformula "2"))
                                 (rule "andLeft" (formula "15"))
                                 (rule "inEqSimp_homoInEq1" (formula "15"))
                                 (rule "polySimp_pullOutFactor1b" (formula "15") (term "0"))
                                 (rule "add_literals" (formula "15") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "15") (term "1,0"))
                                 (rule "add_zero_right" (formula "15") (term "0"))
                                 (rule "leq_literals" (formula "15"))
                                 (rule "closeFalse" (formula "15"))
                              )
                              (branch
                                 (rule "allRight" (formula "31") (inst "sk=i_1_0"))
                                 (rule "orRight" (formula "31"))
                                 (rule "notRight" (formula "32"))
                                 (rule "orRight" (formula "32"))
                                 (rule "inEqSimp_geqRight" (formula "33"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_leqRight" (formula "33"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=selectSK_20"))
                                 (rule "simplifySelectOfStore" (formula "3"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "simplifySelectOfStore" (formula "3"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "simplifySelectOfStore" (formula "3"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "castDel" (formula "3") (term "1,0"))
                                 (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                                 (rule "ifEqualsNull" (formula "3"))
                                 (rule "replace_known_right" (formula "3") (term "1,0") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "andLeft" (formula "3"))
                                 (rule "notLeft" (formula "3"))
                                 (rule "all_pull_out3" (formula "25") (term "0,0"))
                                 (rule "cnf_rightDist" (formula "25") (term "0,0,0"))
                                 (rule "distr_forallAnd" (formula "25") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "distr_existsAnd1" (formula "25") (term "0"))
                                 (rule "distr_forallAnd" (formula "25"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "commute_or_2" (formula "26") (term "0,0"))
                                 (rule "shift_paren_or" (formula "26") (term "0,0,0"))
                                 (rule "swapQuantifiersAll" (formula "26"))
                                 (builtin "One Step Simplification" (formula "26"))
                                 (rule "castDel" (formula "26") (term "1,0,0,0,0,0,0"))
                                 (rule "castDel" (formula "26") (term "0,1,0,0,0"))
                                 (rule "castDel" (formula "26") (term "1,0,0,1,0,0"))
                                 (rule "instanceof_static_type" (formula "26") (term "0,0,1,0"))
                                 (builtin "One Step Simplification" (formula "26"))
                                 (rule "cnf_rightDist" (formula "25") (term "0,0"))
                                 (rule "shift_paren_or" (formula "25") (term "1,0,0"))
                                 (rule "commute_or_2" (formula "25") (term "0,1,0,0"))
                                 (rule "cnf_rightDist" (formula "25") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "25") (term "0,0,0,0"))
                                 (rule "shift_paren_or" (formula "25") (term "1,0,0,0"))
                                 (rule "commute_or" (formula "25") (term "0,0,0,0,0"))
                                 (rule "allLeft" (formula "17") (inst "t=i_1_0"))
                                 (rule "replace_known_left" (formula "17") (term "0,1") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "17"))
                                 (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "17") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "17"))
                                 (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "17"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "inEqSimp_homoInEq1" (formula "2"))
                                 (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                 (rule "add_literals" (formula "2") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "2") (term "1,0"))
                                 (rule "add_literals" (formula "2") (term "0"))
                                 (rule "leq_literals" (formula "2"))
                                 (rule "closeFalse" (formula "2"))
                              )
                           )
                           (branch
                              (rule "allRight" (formula "31") (inst "sk=i1_0"))
                              (rule "orRight" (formula "31"))
                              (rule "orRight" (formula "31"))
                              (rule "allRight" (formula "33") (inst "sk=i2_0"))
                              (rule "orRight" (formula "33"))
                              (rule "orRight" (formula "34"))
                              (rule "orRight" (formula "33"))
                              (rule "notRight" (formula "35"))
                              (rule "inEqSimp_leqRight" (formula "32"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_geqRight" (formula "33"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_geqRight" (formula "35"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_leqRight" (formula "35"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "polySimp_addComm1" (formula "3") (term "0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                              (rule "polySimp_elimOne" (formula "3") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "pullOutSelect" (formula "5") (term "1") (inst "selectSK=selectSK_19"))
                              (rule "simplifySelectOfStore" (formula "5"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "simplifySelectOfStore" (formula "6"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "simplifySelectOfStore" (formula "5"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "simplifySelectOfStore" (formula "6"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "simplifySelectOfStore" (formula "5"))
                              (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "34")))
                              (rule "simplifySelectOfStore" (formula "6"))
                              (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "34")))
                              (rule "applyEqReverse" (formula "6") (term "1") (ifseqformula "5"))
                              (rule "hideAuxiliaryEq" (formula "5"))
                              (rule "all_pull_out3" (formula "26") (term "0,0"))
                              (rule "cnf_rightDist" (formula "26") (term "0,0,0"))
                              (rule "distr_forallAnd" (formula "26") (term "0,0"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "distr_existsAnd1" (formula "26") (term "0"))
                              (rule "distr_forallAnd" (formula "26"))
                              (rule "andLeft" (formula "26"))
                              (rule "commute_or_2" (formula "27") (term "0,0"))
                              (rule "shift_paren_or" (formula "27") (term "0,0,0"))
                              (rule "swapQuantifiersAll" (formula "27"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "castDel" (formula "27") (term "1,0,0,0,0,0,0"))
                              (rule "castDel" (formula "27") (term "0,1,0,0,0"))
                              (rule "castDel" (formula "27") (term "1,0,0,1,0,0"))
                              (rule "instanceof_static_type" (formula "27") (term "0,0,1,0"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "cnf_rightDist" (formula "26") (term "0,0"))
                              (rule "shift_paren_or" (formula "26") (term "1,0,0"))
                              (rule "commute_or_2" (formula "26") (term "0,1,0,0"))
                              (rule "cnf_rightDist" (formula "26") (term "0,0,0"))
                              (rule "commute_or_2" (formula "26") (term "0,0,0,0"))
                              (rule "shift_paren_or" (formula "26") (term "1,0,0,0"))
                              (rule "commute_or" (formula "26") (term "0,0,0,0,0"))
                              (rule "allLeft" (formula "19") (inst "t=i1_0"))
                              (rule "inEqSimp_commuteGeq" (formula "19") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_contradInEq1" (formula "19") (term "0,0,0,0,0,0") (ifseqformula "4"))
                              (rule "qeq_literals" (formula "19") (term "0,0,0,0,0,0,0"))
                              (builtin "One Step Simplification" (formula "19"))
                              (rule "inEqSimp_contradInEq1" (formula "19") (term "0,0,0,0,0") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "19") (term "0,0,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,0,0,0,0,0"))
                              (rule "add_literals" (formula "19") (term "1,1,0,0,0,0,0,0,0"))
                              (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "19") (term "0,0,0,0,0,0,0"))
                              (rule "leq_literals" (formula "19") (term "0,0,0,0,0,0"))
                              (builtin "One Step Simplification" (formula "19"))
                              (rule "commute_or_2" (formula "19") (term "0,0"))
                              (rule "allLeft" (formula "17") (inst "t=i1_0"))
                              (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0"))
                              (rule "inEqSimp_contradInEq1" (formula "17") (term "0,0") (ifseqformula "4"))
                              (rule "qeq_literals" (formula "17") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "17"))
                              (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "17") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,0"))
                              (rule "add_literals" (formula "17") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "17") (term "1,0,0,0"))
                              (rule "add_literals" (formula "17") (term "0,0,0"))
                              (rule "leq_literals" (formula "17") (term "0,0"))
                              (builtin "One Step Simplification" (formula "17"))
                              (rule "notLeft" (formula "17"))
                              (rule "allLeft" (formula "17") (inst "t=i2_0"))
                              (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0"))
                              (rule "applyEq" (formula "17") (term "0,0,1") (ifseqformula "5"))
                              (rule "replace_known_right" (formula "17") (term "0,1") (ifseqformula "32"))
                              (builtin "One Step Simplification" (formula "17"))
                              (rule "true_left" (formula "17"))
                              (rule "mapEqualityLeft" (formula "7") (inst "vy=vy"))
                              (rule "getOfMapUpdate" (formula "7") (term "0,0"))
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "eqSymm" (formula "7") (term "1,0"))
                              (rule "getOfMapUpdate" (formula "7") (term "0,1,0"))
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "commute_or" (formula "7") (term "0"))
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "castDel" (formula "7") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "true_left" (formula "7"))
                              (rule "allLeft" (formula "18") (inst "t=i1_0"))
                              (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0"))
                              (rule "inEqSimp_contradInEq1" (formula "18") (term "0,0") (ifseqformula "4"))
                              (rule "qeq_literals" (formula "18") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "inEqSimp_contradInEq1" (formula "18") (term "0") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "18") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,0"))
                              (rule "add_literals" (formula "18") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "18") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "18") (term "0,0,0"))
                              (rule "leq_literals" (formula "18") (term "0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "notLeft" (formula "18"))
                              (rule "allLeft" (formula "18") (inst "t=i2_0"))
                              (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0"))
                              (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0") (ifseqformula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1,0"))
                              (rule "add_literals" (formula "18") (term "1,1,0,0,1,0"))
                              (rule "times_zero_1" (formula "18") (term "1,0,0,1,0"))
                              (rule "add_zero_right" (formula "18") (term "0,0,1,0"))
                              (rule "leq_literals" (formula "18") (term "0,1,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "inEqSimp_contradInEq1" (formula "18") (term "0") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "18") (term "0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "notLeft" (formula "18"))
                              (rule "allLeft" (formula "26") (inst "t=i2_0"))
                              (rule "inEqSimp_commuteGeq" (formula "26") (term "1,0"))
                              (rule "applyEq" (formula "26") (term "1,0,1") (ifseqformula "5"))
                              (rule "inEqSimp_contradInEq1" (formula "26") (term "1,0") (ifseqformula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1,0"))
                              (rule "add_literals" (formula "26") (term "1,1,0,0,1,0"))
                              (rule "times_zero_1" (formula "26") (term "1,0,0,1,0"))
                              (rule "add_zero_right" (formula "26") (term "0,0,1,0"))
                              (rule "leq_literals" (formula "26") (term "0,1,0"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "26") (term "0,0"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "allLeft" (formula "27") (inst "t=i1_0"))
                              (rule "inEqSimp_commuteGeq" (formula "27") (term "1,0"))
                              (rule "applyEq" (formula "27") (term "0,1") (ifseqformula "26"))
                              (rule "inEqSimp_contradInEq1" (formula "27") (term "0,0") (ifseqformula "4"))
                              (rule "qeq_literals" (formula "27") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "inEqSimp_contradInEq1" (formula "27") (term "0") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "27") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,0"))
                              (rule "add_literals" (formula "27") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "27") (term "1,0,0,0"))
                              (rule "add_literals" (formula "27") (term "0,0,0"))
                              (rule "leq_literals" (formula "27") (term "0,0"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "applyEq" (formula "33") (term "0") (ifseqformula "27"))
                              (rule "applyEq" (formula "26") (term "1") (ifseqformula "27"))
                              (rule "allLeft" (formula "19") (inst "t=i2_0"))
                              (rule "replace_known_right" (formula "19") (term "1,0,0") (ifseqformula "43"))
                              (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "5")))
                              (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "19") (term "0") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "19") (term "0,0"))
                              (builtin "One Step Simplification" (formula "19"))
                              (rule "inEqSimp_contradInEq1" (formula "19") (ifseqformula "2"))
                              (rule "andLeft" (formula "19"))
                              (rule "inEqSimp_homoInEq1" (formula "19"))
                              (rule "polySimp_pullOutFactor1b" (formula "19") (term "0"))
                              (rule "add_literals" (formula "19") (term "1,1,0"))
                              (rule "times_zero_1" (formula "19") (term "1,0"))
                              (rule "add_literals" (formula "19") (term "0"))
                              (rule "leq_literals" (formula "19"))
                              (rule "closeFalse" (formula "19"))
                           )
                        )
                        (branch
                           (rule "allRight" (formula "31") (inst "sk=i_0_0"))
                           (rule "orRight" (formula "31"))
                           (rule "orRight" (formula "31"))
                           (rule "inEqSimp_leqRight" (formula "31"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "32"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "pullOutSelect" (formula "33") (term "1") (inst "selectSK=selectSK_17"))
                           (rule "simplifySelectOfStore" (formula "1"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfStore" (formula "1"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfStore" (formula "1"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "castDel" (formula "1") (term "1,0"))
                           (rule "pullOutSelect" (formula "34") (term "0,0,0") (inst "selectSK=selectSK_18"))
                           (rule "applyEq" (formula "35") (term "1,2,0") (ifseqformula "1"))
                           (rule "simplifySelectOfStore" (formula "1"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfStore" (formula "1"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfStore" (formula "1"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "32")))
                           (rule "applyEqReverse" (formula "35") (term "1,2,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "35") (term "0,0,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "eqSymm" (formula "34") (term "0,0"))
                           (rule "all_pull_out3" (formula "24") (term "0,0"))
                           (rule "cnf_rightDist" (formula "24") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "24") (term "0,0"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "distr_existsAnd1" (formula "24") (term "0"))
                           (rule "distr_forallAnd" (formula "24"))
                           (rule "andLeft" (formula "24"))
                           (rule "commute_or_2" (formula "25") (term "0,0"))
                           (rule "shift_paren_or" (formula "25") (term "0,0,0"))
                           (rule "swapQuantifiersAll" (formula "25"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "castDel" (formula "25") (term "1,0,0,0,0,0,0"))
                           (rule "castDel" (formula "25") (term "0,1,0,0,0"))
                           (rule "castDel" (formula "25") (term "1,0,0,1,0,0"))
                           (rule "instanceof_static_type" (formula "25") (term "0,0,1,0"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "cnf_rightDist" (formula "24") (term "0,0"))
                           (rule "shift_paren_or" (formula "24") (term "1,0,0"))
                           (rule "commute_or_2" (formula "24") (term "0,1,0,0"))
                           (rule "cnf_rightDist" (formula "24") (term "0,0,0"))
                           (rule "commute_or_2" (formula "24") (term "0,0,0,0"))
                           (rule "shift_paren_or" (formula "24") (term "1,0,0,0"))
                           (rule "commute_or" (formula "24") (term "0,0,0,0,0"))
                           (rule "ifthenelse_split" (formula "1") (term "0"))
                           (branch "index_0 = i_0_0 TRUE"
                              (rule "applyEqReverse" (formula "36") (term "1") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "36"))
                              (rule "orRight" (formula "36"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "applyEq" (formula "35") (term "0,2,0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "35"))
                              (rule "closeTrue" (formula "35"))
                           )
                           (branch "index_0 = i_0_0 FALSE"
                              (rule "applyEqReverse" (formula "36") (term "1") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "allLeft" (formula "14") (inst "t=i_0_0"))
                              (rule "inEqSimp_commuteGeq" (formula "14") (term "1,0"))
                              (rule "inEqSimp_contradInEq1" (formula "14") (term "1,0") (ifseqformula "1"))
                              (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1,0"))
                              (rule "add_literals" (formula "14") (term "1,1,0,0,1,0"))
                              (rule "times_zero_1" (formula "14") (term "1,0,0,1,0"))
                              (rule "add_zero_right" (formula "14") (term "0,0,1,0"))
                              (rule "leq_literals" (formula "14") (term "0,1,0"))
                              (builtin "One Step Simplification" (formula "14"))
                              (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "14") (term "0,0"))
                              (builtin "One Step Simplification" (formula "14"))
                              (rule "notLeft" (formula "14"))
                              (rule "ifthenelse_split" (formula "36") (term "0"))
                              (branch "self.keys[index_0] = self.keys[i_0_0] TRUE"
                                 (rule "eqSymm" (formula "37"))
                                 (rule "applyEq" (formula "5") (term "1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "5") (term "1,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "30") (term "0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "22") (term "1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "4") (term "1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "5") (term "1,0,0") (ifseqformula "1"))
                                 (rule "allLeft" (formula "17") (inst "t=i_0_0"))
                                 (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "17") (term "0,0,0,0,0,0") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "17") (term "0,0,0,0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "17"))
                                 (rule "inEqSimp_contradInEq1" (formula "17") (term "0,0,0,0,0") (ifseqformula "2"))
                                 (rule "inEqSimp_homoInEq1" (formula "17") (term "0,0,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "17") (term "1,1,0,0,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,0,0"))
                                 (rule "leq_literals" (formula "17") (term "0,0,0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "17"))
                                 (rule "commute_or_2" (formula "17") (term "0,0"))
                                 (rule "allLeft" (formula "16") (inst "t=i_0_0"))
                                 (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "16") (term "0,0") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "16") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "16"))
                                 (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "2"))
                                 (rule "inEqSimp_homoInEq1" (formula "16") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,0"))
                                 (rule "add_literals" (formula "16") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "16") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "16") (term "0,0,0"))
                                 (rule "leq_literals" (formula "16") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "16"))
                                 (rule "notLeft" (formula "16"))
                                 (rule "allLeft" (formula "24") (inst "t=i_0_0"))
                                 (rule "inEqSimp_commuteGeq" (formula "24") (term "1,0"))
                                 (rule "applyEq" (formula "24") (term "0,1") (ifseqformula "23"))
                                 (rule "inEqSimp_contradInEq1" (formula "24") (term "0,0") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "24") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "2"))
                                 (rule "inEqSimp_homoInEq1" (formula "24") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,0"))
                                 (rule "add_literals" (formula "24") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "24") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "24") (term "0,0,0"))
                                 (rule "leq_literals" (formula "24") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "applyEq" (formula "33") (term "0") (ifseqformula "24"))
                                 (rule "applyEq" (formula "23") (term "1") (ifseqformula "24"))
                                 (rule "allLeft" (formula "17") (inst "t=index_0"))
                                 (rule "replace_known_left" (formula "17") (term "0,1") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "33")))
                                 (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "11"))
                                 (rule "qeq_literals" (formula "17") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "17"))
                                 (rule "inEqSimp_contradInEq1" (formula "17") (ifseqformula "14"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "inEqSimp_homoInEq1" (formula "17"))
                                 (rule "polySimp_pullOutFactor1b" (formula "17") (term "0"))
                                 (rule "add_literals" (formula "17") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "17") (term "1,0"))
                                 (rule "add_zero_right" (formula "17") (term "0"))
                                 (rule "leq_literals" (formula "17"))
                                 (rule "closeFalse" (formula "17"))
                              )
                              (branch "self.keys[index_0] = self.keys[i_0_0] FALSE"
                                 (rule "mapEqualityLeft" (formula "4") (inst "vy=vy"))
                                 (rule "getOfMapUpdate" (formula "4") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "eqSymm" (formula "4") (term "1,0"))
                                 (rule "getOfMapUpdate" (formula "4") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "commute_or" (formula "4") (term "0"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "castDel" (formula "4") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "allLeft" (formula "15") (inst "t=i_0_0"))
                                 (rule "inEqSimp_commuteGeq" (formula "15") (term "1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "15") (term "1,0") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "15") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "15") (term "1,0,0,1,0"))
                                 (rule "add_zero_right" (formula "15") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "15") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "15"))
                                 (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "2"))
                                 (rule "qeq_literals" (formula "15") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "15"))
                                 (rule "notLeft" (formula "15"))
                                 (rule "allLeft" (formula "22") (inst "t=i_0_0"))
                                 (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "39"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                                 (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "22") (term "0,0,1"))
                                 (rule "leq_literals" (formula "22") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "22"))
                                 (rule "qeq_literals" (formula "2") (term "0"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "closeFalse" (formula "2"))
                              )
                           )
                        )
                     )
                     (branch
                        (rule "allRight" (formula "31") (inst "sk=o_1"))
                        (rule "orRight" (formula "31"))
                        (rule "orRight" (formula "31"))
                        (rule "eqSymm" (formula "33") (term "1,1"))
                        (rule "eqSymm" (formula "33") (term "1,0,0"))
                        (rule "replace_known_right" (formula "31") (term "0,1") (ifseqformula "32"))
                        (builtin "One Step Simplification" (formula "31"))
                        (rule "notRight" (formula "31"))
                        (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=selectSK_13"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "equiv_right" (formula "33"))
                        (branch
                           (rule "orRight" (formula "34"))
                           (rule "exLeft" (formula "1") (inst "sk=i_3"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_homoInEq0" (formula "2"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=selectSK_16"))
                           (rule "simplifySelectOfStore" (formula "3"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "simplifySelectOfStore" (formula "3"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "simplifySelectOfStore" (formula "3"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "33")))
                           (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "all_pull_out3" (formula "25") (term "0,0"))
                           (rule "cnf_rightDist" (formula "25") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "25") (term "0,0"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "distr_existsAnd1" (formula "25") (term "0"))
                           (rule "distr_forallAnd" (formula "25"))
                           (rule "andLeft" (formula "25"))
                           (rule "commute_or_2" (formula "26") (term "0,0"))
                           (rule "shift_paren_or" (formula "26") (term "0,0,0"))
                           (rule "swapQuantifiersAll" (formula "26"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "castDel" (formula "26") (term "0,1,0,0,0"))
                           (rule "castDel" (formula "26") (term "1,0,0,1,0,0"))
                           (rule "castDel" (formula "26") (term "1,0,0,0,0,0,0"))
                           (rule "instanceof_static_type" (formula "26") (term "0,0,1,0"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "cnf_rightDist" (formula "25") (term "0,0"))
                           (rule "shift_paren_or" (formula "25") (term "1,0,0"))
                           (rule "commute_or_2" (formula "25") (term "0,1,0,0"))
                           (rule "cnf_rightDist" (formula "25") (term "0,0,0"))
                           (rule "commute_or_2" (formula "25") (term "0,0,0,0"))
                           (rule "shift_paren_or" (formula "25") (term "1,0,0,0"))
                           (rule "commute_or" (formula "25") (term "0,0,0,0,0"))
                           (rule "allLeft" (formula "16") (inst "t=i_3"))
                           (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0"))
                           (rule "applyEq" (formula "16") (term "0,0,1") (ifseqformula "3"))
                           (rule "replace_known_right" (formula "16") (term "0,1") (ifseqformula "37"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "mapEqualityLeft" (formula "6") (inst "vy=vy"))
                           (rule "getOfMapUpdate" (formula "6") (term "1,0"))
                           (rule "eqSymm" (formula "6") (term "0"))
                           (rule "getOfMapUpdate" (formula "6") (term "1,0"))
                           (rule "eqSymm" (formula "6") (term "0"))
                           (rule "getOfMapUpdate" (formula "6") (term "2,0,0"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "eqSymm" (formula "6") (term "1,0"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "commute_or" (formula "6") (term "0"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "castDel" (formula "6") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "true_left" (formula "6"))
                           (rule "allLeft" (formula "17") (inst "t=i_3"))
                           (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0"))
                           (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1,0"))
                           (rule "add_literals" (formula "17") (term "1,1,0,0,1,0"))
                           (rule "times_zero_1" (formula "17") (term "1,0,0,1,0"))
                           (rule "add_literals" (formula "17") (term "0,0,1,0"))
                           (rule "leq_literals" (formula "17") (term "0,1,0"))
                           (builtin "One Step Simplification" (formula "17"))
                           (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "17") (term "0,0"))
                           (builtin "One Step Simplification" (formula "17"))
                           (rule "notLeft" (formula "17"))
                           (rule "allLeft" (formula "24") (inst "t=i_3"))
                           (rule "inEqSimp_commuteGeq" (formula "24") (term "1,0"))
                           (rule "applyEq" (formula "24") (term "1,0,1") (ifseqformula "3"))
                           (rule "inEqSimp_contradInEq1" (formula "24") (term "0,0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "24") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "24") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,0"))
                           (rule "add_literals" (formula "24") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "24") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "24") (term "0,0,0"))
                           (rule "leq_literals" (formula "24") (term "0,0"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "notInDomain" (formula "39"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "25"))
                           (rule "eqSymm" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "7") (term "1,1") (ifseqformula "9"))
                           (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "33"))
                           (builtin "One Step Simplification" (formula "7"))
                           (rule "allLeft" (formula "28") (inst "t=java.lang.Object::select(heap,
                         java.lang.Object[]::select(heap,
                                                    self,
                                                    CaseStudyUseMaps.MapImplementation::$keys),
                         arr(index_0))"))
                           (rule "exLeft" (formula "28") (inst "sk=i_4"))
                           (rule "andLeft" (formula "28"))
                           (rule "andLeft" (formula "28"))
                           (rule "replace_known_left" (formula "30") (term "0,0,0,0") (ifseqformula "6"))
                           (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "36")) (ifInst ""  (formula "7")))
                           (rule "replace_known_left" (formula "28") (term "0,1") (ifseqformula "7"))
                           (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "6")) (ifInst ""  (formula "36")))
                           (rule "replace_known_left" (formula "29") (term "0,0,0,0") (ifseqformula "6"))
                           (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "36")) (ifInst ""  (formula "7")))
                           (rule "inEqSimp_homoInEq0" (formula "29"))
                           (rule "polySimp_addComm1" (formula "29") (term "0"))
                           (rule "applyEq" (formula "36") (term "0") (ifseqformula "30"))
                           (rule "applyEq" (formula "25") (term "1,0") (ifseqformula "30"))
                           (rule "applyEq" (formula "8") (term "1,1") (ifseqformula "30"))
                           (rule "applyEq" (formula "6") (term "1") (ifseqformula "30"))
                           (rule "applyEq" (formula "45") (term "0") (ifseqformula "30"))
                           (rule "applyEq" (formula "8") (term "1,0,0") (ifseqformula "30"))
                           (rule "applyEq" (formula "7") (term "1,0") (ifseqformula "30"))
                           (rule "applyEq" (formula "8") (term "1,0") (ifseqformula "30"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "29"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1"))
                           (rule "polySimp_rightDist" (formula "29") (term "1"))
                           (rule "mul_literals" (formula "29") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "29") (term "1,1"))
                           (rule "allLeft" (formula "20") (inst "t=i_4"))
                           (rule "inEqSimp_commuteGeq" (formula "20") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0,0,0,0,0") (ifseqformula "30"))
                           (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1,0,0,0,0,0"))
                           (rule "add_literals" (formula "20") (term "1,1,0,0,1,0,0,0,0,0"))
                           (rule "times_zero_1" (formula "20") (term "1,0,0,1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "20") (term "0,0,1,0,0,0,0,0"))
                           (rule "leq_literals" (formula "20") (term "0,1,0,0,0,0,0"))
                           (builtin "One Step Simplification" (formula "20"))
                           (rule "inEqSimp_contradInEq1" (formula "20") (term "0,0,0,0,0") (ifseqformula "29"))
                           (rule "qeq_literals" (formula "20") (term "0,0,0,0,0,0"))
                           (builtin "One Step Simplification" (formula "20"))
                           (rule "commute_or_2" (formula "20") (term "0,0"))
                           (rule "allLeft" (formula "32") (inst "t=java.lang.Object::select(heap,
                         java.lang.Object[]::select(heap,
                                                    self,
                                                    CaseStudyUseMaps.MapImplementation::$keys),
                         arr(i_4))"))
                           (rule "exLeft" (formula "32") (inst "sk=i_5"))
                           (rule "andLeft" (formula "32"))
                           (rule "andLeft" (formula "32"))
                           (rule "eqSymm" (formula "34") (term "1,0"))
                           (rule "replace_known_left" (formula "34") (term "0,0,0,0") (ifseqformula "6"))
                           (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "40")) (ifInst ""  (formula "7")))
                           (rule "replace_known_left" (formula "32") (term "0,1") (ifseqformula "7"))
                           (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "6")) (ifInst ""  (formula "40")))
                           (rule "replace_known_left" (formula "33") (term "0,0,0,0") (ifseqformula "6"))
                           (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "40")) (ifInst ""  (formula "7")))
                           (rule "inEqSimp_homoInEq0" (formula "33"))
                           (rule "polySimp_addComm1" (formula "33") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "33"))
                           (rule "polySimp_mulComm0" (formula "33") (term "1"))
                           (rule "polySimp_rightDist" (formula "33") (term "1"))
                           (rule "mul_literals" (formula "33") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "33") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "33") (term "1,1"))
                           (rule "allLeft" (formula "28") (inst "t=i_4"))
                           (rule "inEqSimp_commuteGeq" (formula "28") (term "1,0"))
                           (rule "applyEq" (formula "28") (term "0,1") (ifseqformula "26"))
                           (rule "inEqSimp_contradInEq1" (formula "28") (term "0,0") (ifseqformula "30"))
                           (rule "qeq_literals" (formula "28") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "inEqSimp_contradInEq1" (formula "28") (term "0") (ifseqformula "31"))
                           (rule "inEqSimp_homoInEq1" (formula "28") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,0"))
                           (rule "add_literals" (formula "28") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "28") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "28") (term "0,0,0"))
                           (rule "leq_literals" (formula "28") (term "0,0"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "applyEq" (formula "26") (term "1") (ifseqformula "28"))
                           (rule "applyEq" (formula "42") (term "0") (ifseqformula "28"))
                           (rule "allLeft" (formula "29") (inst "t=i_5"))
                           (rule "inEqSimp_commuteGeq" (formula "29") (term "1,0"))
                           (rule "applyEq" (formula "29") (term "1,0,1") (ifseqformula "36"))
                           (rule "applyEq" (formula "29") (term "0,1") (ifseqformula "26"))
                           (rule "eqSymm" (formula "29") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "29") (term "1,0") (ifseqformula "35"))
                           (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1,0"))
                           (rule "add_literals" (formula "29") (term "1,1,0,0,1,0"))
                           (rule "times_zero_1" (formula "29") (term "1,0,0,1,0"))
                           (rule "add_zero_right" (formula "29") (term "0,0,1,0"))
                           (rule "leq_literals" (formula "29") (term "0,1,0"))
                           (builtin "One Step Simplification" (formula "29"))
                           (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "34"))
                           (rule "qeq_literals" (formula "29") (term "0,0"))
                           (builtin "One Step Simplification" (formula "29"))
                           (rule "allLeft" (formula "18") (inst "t=i_5"))
                           (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0"))
                           (rule "applyEq" (formula "18") (term "0,0,1") (ifseqformula "37"))
                           (rule "replace_known_right" (formula "18") (term "0,1") (ifseqformula "43"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "allLeft" (formula "20") (inst "t=i_5"))
                           (rule "replace_known_left" (formula "20") (term "0,1") (ifseqformula "37"))
                           (builtin "One Step Simplification" (formula "20"))
                           (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "36"))
                           (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                           (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "20") (term "0,0,1"))
                           (rule "leq_literals" (formula "20") (term "0,1"))
                           (builtin "One Step Simplification" (formula "20"))
                           (rule "inEqSimp_contradInEq1" (formula "20") (term "0") (ifseqformula "35"))
                           (rule "qeq_literals" (formula "20") (term "0,0"))
                           (builtin "One Step Simplification" (formula "20"))
                           (rule "applyEqRigid" (formula "30") (term "0,2,0") (ifseqformula "20"))
                           (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "applyEqRigid" (formula "34") (term "0") (ifseqformula "20"))
                           (rule "applyEqRigid" (formula "34") (term "1,1") (ifseqformula "20"))
                           (rule "applyEq" (formula "34") (term "0,2,0") (ifseqformula "20"))
                           (builtin "One Step Simplification" (formula "34"))
                           (rule "true_left" (formula "34"))
                           (rule "allLeft" (formula "21") (inst "t=index_0"))
                           (rule "replace_known_left" (formula "21") (term "0,1") (ifseqformula "34"))
                           (builtin "One Step Simplification" (formula "21"))
                           (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "21") (term "0,0") (ifseqformula "14"))
                           (rule "qeq_literals" (formula "21") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "21"))
                           (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "17"))
                           (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                           (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "21") (term "0,0,1"))
                           (rule "leq_literals" (formula "21") (term "0,1"))
                           (builtin "One Step Simplification" (formula "21"))
                           (rule "applyEq" (formula "14") (term "0") (ifseqformula "21"))
                           (rule "applyEq" (formula "33") (term "0,2,0") (ifseqformula "20"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "true_left" (formula "33"))
                           (rule "applyEq" (formula "29") (term "0,2,0") (ifseqformula "20"))
                           (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "applyEq" (formula "16") (term "1,1") (ifseqformula "20"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "0") (ifseqformula "10"))
                           (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "5"))
                           (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "44"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "5"))
                           (rule "mapEqualityLeft" (formula "8") (inst "vy=vy"))
                           (rule "getOfMapUpdate" (formula "8") (term "1,0"))
                           (rule "eqSymm" (formula "8") (term "0"))
                           (rule "getOfMapUpdate" (formula "8") (term "1,0"))
                           (rule "eqSymm" (formula "8") (term "0"))
                           (rule "getOfMapUpdate" (formula "8") (term "2,0,0"))
                           (builtin "One Step Simplification" (formula "8"))
                           (rule "eqSymm" (formula "8") (term "1,0"))
                           (builtin "One Step Simplification" (formula "8"))
                           (rule "commute_or" (formula "8") (term "0"))
                           (builtin "One Step Simplification" (formula "8"))
                           (rule "castDel" (formula "8") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "8"))
                           (rule "true_left" (formula "8"))
                           (rule "allLeft" (formula "21") (inst "t=i_3"))
                           (rule "inEqSimp_commuteGeq" (formula "21") (term "1,0,0,0,0,0"))
                           (rule "applyEq" (formula "21") (term "1,0,1,0") (ifseqformula "4"))
                           (rule "inEqSimp_contradInEq1" (formula "21") (term "1,0,0,0,0,0") (ifseqformula "3"))
                           (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1,0,0,0,0,0"))
                           (rule "add_literals" (formula "21") (term "1,1,0,0,1,0,0,0,0,0"))
                           (rule "times_zero_1" (formula "21") (term "1,0,0,1,0,0,0,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,1,0,0,0,0,0"))
                           (rule "leq_literals" (formula "21") (term "0,1,0,0,0,0,0"))
                           (builtin "One Step Simplification" (formula "21"))
                           (rule "inEqSimp_contradInEq1" (formula "21") (term "0,0,0,0,0") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "21") (term "0,0,0,0,0,0"))
                           (builtin "One Step Simplification" (formula "21"))
                           (rule "commute_or_2" (formula "21") (term "0,0"))
                           (rule "allLeft" (formula "33") (inst "t=i_3"))
                           (rule "inEqSimp_commuteGeq" (formula "33") (term "1,0,0"))
                           (rule "applyEq" (formula "33") (term "1,0,0,1") (ifseqformula "4"))
                           (rule "replace_known_left" (formula "33") (term "0,1") (ifseqformula "5"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "applyEq" (formula "33") (term "1,0,0,0") (ifseqformula "4"))
                           (rule "replace_known_right" (formula "33") (term "0,0,0") (ifseqformula "46"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "applyEq" (formula "33") (term "0,1") (ifseqformula "4"))
                           (rule "replace_known_right" (formula "33") (term "1") (ifseqformula "45"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "inEqSimp_contradInEq1" (formula "33") (term "0") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "33") (term "0,0"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "33"))
                           (rule "andLeft" (formula "3"))
                           (rule "inEqSimp_homoInEq1" (formula "3"))
                           (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                           (rule "add_literals" (formula "3") (term "1,1,0"))
                           (rule "times_zero_1" (formula "3") (term "1,0"))
                           (rule "add_literals" (formula "3") (term "0"))
                           (rule "leq_literals" (formula "3"))
                           (rule "closeFalse" (formula "3"))
                        )
                        (branch
                           (rule "nnf_ex2all" (formula "34"))
                           (rule "nnf_notAnd" (formula "1") (term "0"))
                           (rule "nnf_notAnd" (formula "1") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                           (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                           (rule "all_pull_out3" (formula "24") (term "0,0"))
                           (rule "cnf_rightDist" (formula "24") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "24") (term "0,0"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "distr_existsAnd1" (formula "24") (term "0"))
                           (rule "distr_forallAnd" (formula "24"))
                           (rule "andLeft" (formula "24"))
                           (rule "commute_or_2" (formula "25") (term "0,0"))
                           (rule "shift_paren_or" (formula "25") (term "0,0,0"))
                           (rule "swapQuantifiersAll" (formula "25"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "castDel" (formula "25") (term "0,1,0,0,0"))
                           (rule "castDel" (formula "25") (term "1,0,0,1,0,0"))
                           (rule "castDel" (formula "25") (term "1,0,0,0,0,0,0"))
                           (rule "instanceof_static_type" (formula "25") (term "0,0,1,0"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "cnf_rightDist" (formula "24") (term "0,0"))
                           (rule "shift_paren_or" (formula "24") (term "1,0,0"))
                           (rule "commute_or_2" (formula "24") (term "0,1,0,0"))
                           (rule "cnf_rightDist" (formula "24") (term "0,0,0"))
                           (rule "commute_or_2" (formula "24") (term "0,0,0,0"))
                           (rule "shift_paren_or" (formula "24") (term "1,0,0,0"))
                           (rule "commute_or" (formula "24") (term "0,0,0,0,0"))
                           (rule "cut_direct" (formula "2") (term "1"))
                           (branch "CUT: self.keys[index_0] = o_1 TRUE"
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "true_left" (formula "3"))
                              (rule "applyEq" (formula "28") (term "0") (ifseqformula "2"))
                              (rule "applyEq" (formula "5") (term "1,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "5") (term "1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "22") (term "1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "5") (term "1,1") (ifseqformula "2"))
                              (rule "applyEq" (formula "4") (term "1") (ifseqformula "2"))
                              (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,1,0") (ifseqformula "2"))
                              (rule "allLeft" (formula "1") (inst "t=index_0"))
                              (rule "inEqSimp_commuteGeq" (formula "1") (term "1,0"))
                              (rule "inEqSimp_contradInEq1" (formula "1") (term "1,0") (ifseqformula "15"))
                              (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1,0"))
                              (rule "add_literals" (formula "1") (term "1,1,0,0,1,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,1,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0,1,0"))
                              (rule "leq_literals" (formula "1") (term "0,1,0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "12"))
                              (rule "qeq_literals" (formula "1") (term "0,0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "pullOutSelect" (formula "28") (term "0") (inst "selectSK=selectSK_15"))
                              (rule "simplifySelectOfStore" (formula "1"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "simplifySelectOfStore" (formula "1"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "replaceKnownSelect_taclet4_0" (formula "1") (term "0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet5_0" (formula "1") (term "0"))
                              (rule "applyEqReverse" (formula "29") (term "0") (ifseqformula "1"))
                              (rule "close" (formula "29") (ifseqformula "3"))
                           )
                           (branch "CUT: self.keys[index_0] = o_1 FALSE"
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "mapEqualityLeft" (formula "5") (inst "vy=vy"))
                              (rule "getOfMapUpdate" (formula "5") (term "0,0"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "eqSymm" (formula "5") (term "1,0"))
                              (rule "getOfMapUpdate" (formula "5") (term "0,1,0"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "commute_or" (formula "5") (term "0"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "castDel" (formula "5") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "true_left" (formula "5"))
                              (rule "allLeft" (formula "1") (inst "t=index_0"))
                              (rule "replaceKnownSelect_taclet16_0" (formula "1") (term "0,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet18_0" (formula "1") (term "0,0,1"))
                              (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "29"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "allLeft" (formula "24") (inst "t=o_1"))
                              (rule "exLeft" (formula "24") (inst "sk=i_2"))
                              (rule "andLeft" (formula "24"))
                              (rule "andLeft" (formula "24"))
                              (rule "eqSymm" (formula "26") (term "1,0"))
                              (rule "replace_known_left" (formula "25") (term "0,0,0,0") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "39")) (ifInst ""  (formula "3")))
                              (rule "replace_known_right" (formula "26") (term "1,0,0") (ifseqformula "39"))
                              (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "2")) (ifInst ""  (formula "3")))
                              (rule "replace_known_right" (formula "24") (term "1,0") (ifseqformula "39"))
                              (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "2")) (ifInst ""  (formula "3")))
                              (rule "inEqSimp_homoInEq0" (formula "25"))
                              (rule "polySimp_addComm1" (formula "25") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "25"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1"))
                              (rule "polySimp_rightDist" (formula "25") (term "1"))
                              (rule "mul_literals" (formula "25") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1"))
                              (rule "allLeft" (formula "23") (inst "t=i_2"))
                              (rule "inEqSimp_commuteGeq" (formula "23") (term "1,0"))
                              (rule "applyEq" (formula "23") (term "1,0,1") (ifseqformula "27"))
                              (rule "inEqSimp_contradInEq1" (formula "23") (term "1,0") (ifseqformula "26"))
                              (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1,0"))
                              (rule "add_literals" (formula "23") (term "1,1,0,0,1,0"))
                              (rule "times_zero_1" (formula "23") (term "1,0,0,1,0"))
                              (rule "add_zero_right" (formula "23") (term "0,0,1,0"))
                              (rule "leq_literals" (formula "23") (term "0,1,0"))
                              (builtin "One Step Simplification" (formula "23"))
                              (rule "inEqSimp_contradInEq1" (formula "23") (term "0") (ifseqformula "25"))
                              (rule "qeq_literals" (formula "23") (term "0,0"))
                              (builtin "One Step Simplification" (formula "23"))
                              (rule "allLeft" (formula "1") (inst "t=i_2"))
                              (rule "inEqSimp_commuteGeq" (formula "1") (term "1,0"))
                              (rule "inEqSimp_contradInEq1" (formula "1") (term "1,0") (ifseqformula "27"))
                              (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1,0"))
                              (rule "add_literals" (formula "1") (term "1,1,0,0,1,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,1,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0,1,0"))
                              (rule "leq_literals" (formula "1") (term "0,1,0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "26"))
                              (rule "qeq_literals" (formula "1") (term "0,0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=selectSK_14"))
                              (rule "simplifySelectOfStore" (formula "1"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "simplifySelectOfStore" (formula "1"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "simplifySelectOfStore" (formula "1"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")))
                              (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
                              (rule "close" (formula "33") (ifseqformula "28"))
                           )
                        )
                     )
                  )
               )
               (branch
                  (rule "allRight" (formula "31") (inst "sk=f_0"))
                  (rule "allRight" (formula "31") (inst "sk=o_0"))
                  (rule "orRight" (formula "31"))
                  (rule "orRight" (formula "31"))
                  (rule "pullOutSelect" (formula "33") (term "0") (inst "selectSK=selectSK_10"))
                  (rule "simplifySelectOfStore" (formula "1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "castDel" (formula "1") (term "1,0"))
                  (rule "eqSymm" (formula "34"))
                  (rule "eqSymm" (formula "1") (term "1,0,0"))
                  (rule "eqSymm" (formula "1") (term "0,0,0"))
                  (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=selectSK_11"))
                  (rule "simplifySelectOfStore" (formula "1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "castDel" (formula "1") (term "1,0"))
                  (rule "eqSymm" (formula "1") (term "1,0,0"))
                  (rule "eqSymm" (formula "1") (term "0,0,0"))
                  (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=selectSK_12"))
                  (rule "simplifySelectOfStore" (formula "1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "castDel" (formula "1") (term "1,0"))
                  (rule "eqSymm" (formula "1") (term "1,0,0"))
                  (rule "eqSymm" (formula "1") (term "0,0,0"))
                  (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "34"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "commute_and" (formula "33"))
                  (rule "commute_and" (formula "2") (term "0,0"))
                  (rule "commute_and" (formula "1") (term "0,0"))
                  (rule "all_pull_out3" (formula "23") (term "0,0"))
                  (rule "cnf_rightDist" (formula "23") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "23") (term "0,0"))
                  (builtin "One Step Simplification" (formula "23"))
                  (rule "distr_existsAnd1" (formula "23") (term "0"))
                  (rule "distr_forallAnd" (formula "23"))
                  (rule "andLeft" (formula "23"))
                  (rule "commute_or_2" (formula "24") (term "0,0"))
                  (rule "shift_paren_or" (formula "24") (term "0,0,0"))
                  (rule "swapQuantifiersAll" (formula "24"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "castDel" (formula "24") (term "0,1,0,0,0"))
                  (rule "castDel" (formula "24") (term "1,0,0,1,0,0"))
                  (rule "castDel" (formula "24") (term "1,0,0,0,0,0,0"))
                  (rule "instanceof_static_type" (formula "24") (term "0,0,1,0"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "cnf_rightDist" (formula "23") (term "0,0"))
                  (rule "shift_paren_or" (formula "23") (term "1,0,0"))
                  (rule "commute_or_2" (formula "23") (term "0,1,0,0"))
                  (rule "cnf_rightDist" (formula "23") (term "0,0,0"))
                  (rule "commute_or_2" (formula "23") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "23") (term "1,0,0,0"))
                  (rule "commute_or" (formula "23") (term "0,0,0,0,0"))
                  (rule "cut_direct" (formula "35") (term "0,0"))
                  (branch "CUT: o_0 = null TRUE"
                     (builtin "One Step Simplification" (formula "36"))
                     (rule "false_right" (formula "36"))
                     (rule "applyEqRigid" (formula "35") (term "0,1") (ifseqformula "1"))
                     (rule "eqSymm" (formula "35") (term "1"))
                     (rule "replace_known_right" (formula "35") (term "1") (ifseqformula "31"))
                     (builtin "One Step Simplification" (formula "35"))
                     (rule "false_right" (formula "35"))
                     (rule "applyEq" (formula "35") (term "1,0") (ifseqformula "1"))
                     (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                     (rule "eqSymm" (formula "2") (term "1,0,0"))
                     (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "33"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                     (rule "eqSymm" (formula "2") (term "1,0,0"))
                     (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "32"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "applyEqReverse" (formula "34") (term "1") (ifseqformula "2"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "eqSymm" (formula "33"))
                     (rule "applyEq" (formula "33") (term "1,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "33"))
                     (rule "closeTrue" (formula "33"))
                  )
                  (branch "CUT: o_0 = null FALSE"
                     (builtin "One Step Simplification" (formula "36"))
                     (rule "notRight" (formula "36"))
                     (rule "ifthenelse_split" (formula "2") (term "0"))
                     (branch "f_0 = map ∧ o_0 = self TRUE"
                        (rule "andLeft" (formula "2"))
                        (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "applyEq" (formula "38") (term "1,0") (ifseqformula "3"))
                        (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "applyEqReverse" (formula "38") (term "1") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "applyEqRigid" (formula "35") (term "0,0") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "35"))
                        (rule "false_right" (formula "35"))
                        (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                        (rule "applyEq" (formula "35") (term "2,0") (ifseqformula "1"))
                        (rule "narrowSelectType" (formula "35") (term "0") (ifseqformula "6"))
                        (rule "eqSymm" (formula "35"))
                        (rule "applyEq" (formula "34") (term "0") (ifseqformula "2"))
                        (rule "mapEqualityLeft" (formula "4") (inst "vy=vy"))
                        (rule "getOfMapUpdate" (formula "4") (term "1,0"))
                        (rule "eqSymm" (formula "4") (term "0"))
                        (rule "getOfMapUpdate" (formula "4") (term "1,0"))
                        (rule "eqSymm" (formula "4") (term "0"))
                        (rule "getOfMapUpdate" (formula "4") (term "2,0,0"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,0"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "commute_or" (formula "4") (term "0"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "castDel" (formula "4") (term "0,0,0"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "mapEqualityRight" (formula "34") (inst "vy=vy"))
                        (rule "allRight" (formula "34") (inst "sk=vy_1"))
                        (rule "getOfMapUpdate" (formula "34") (term "0"))
                        (builtin "One Step Simplification" (formula "34"))
                        (rule "orRight" (formula "34"))
                        (rule "notRight" (formula "34"))
                        (rule "eqSymm" (formula "35"))
                        (rule "applyEq" (formula "35") (term "1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "35") (term "0") (ifseqformula "22"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "5") (term "1,1") (ifseqformula "7"))
                        (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "29"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "allLeft" (formula "25") (inst "t=java.lang.Object::select(heap,
                         java.lang.Object[]::select(heap,
                                                    self,
                                                    CaseStudyUseMaps.MapImplementation::$keys),
                         arr(index_0))"))
                        (rule "exLeft" (formula "25") (inst "sk=i_0"))
                        (rule "andLeft" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "replace_known_left" (formula "27") (term "0,0,0,0") (ifseqformula "4"))
                        (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "32")) (ifInst ""  (formula "5")))
                        (rule "replace_known_left" (formula "26") (term "0,0,0,0") (ifseqformula "4"))
                        (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "32")) (ifInst ""  (formula "5")))
                        (rule "replace_known_left" (formula "25") (term "0,1") (ifseqformula "5"))
                        (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "4")) (ifInst ""  (formula "32")))
                        (rule "inEqSimp_homoInEq0" (formula "26"))
                        (rule "polySimp_addComm1" (formula "26") (term "0"))
                        (rule "applyEq" (formula "23") (term "1,0") (ifseqformula "27"))
                        (rule "applyEq" (formula "4") (term "1") (ifseqformula "27"))
                        (rule "applyEq" (formula "5") (term "1,0") (ifseqformula "27"))
                        (rule "applyEq" (formula "1") (term "1") (ifseqformula "27"))
                        (rule "applyEq" (formula "40") (term "1,0") (ifseqformula "27"))
                        (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "27"))
                        (rule "applyEq" (formula "6") (term "1,1") (ifseqformula "27"))
                        (rule "applyEq" (formula "6") (term "1,0,0") (ifseqformula "27"))
                        (rule "applyEq" (formula "32") (term "0") (ifseqformula "27"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "26"))
                        (rule "polySimp_mulComm0" (formula "26") (term "1"))
                        (rule "polySimp_rightDist" (formula "26") (term "1"))
                        (rule "mul_literals" (formula "26") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "26") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "26") (term "1,1"))
                        (rule "allLeft" (formula "18") (inst "t=i_0"))
                        (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "18") (term "0,0,0,0,0,0") (ifseqformula "26"))
                        (rule "qeq_literals" (formula "18") (term "0,0,0,0,0,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "inEqSimp_contradInEq1" (formula "18") (term "0,0,0,0,0") (ifseqformula "27"))
                        (rule "inEqSimp_homoInEq1" (formula "18") (term "0,0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,0,0,0,0,0"))
                        (rule "add_literals" (formula "18") (term "1,1,0,0,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "18") (term "0,0,0,0,0,0,0"))
                        (rule "leq_literals" (formula "18") (term "0,0,0,0,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "commute_or_2" (formula "18") (term "0,0"))
                        (rule "allLeft" (formula "29") (inst "t=java.lang.Object::select(heap,
                         java.lang.Object[]::select(heap,
                                                    self,
                                                    CaseStudyUseMaps.MapImplementation::$keys),
                         arr(i_0))"))
                        (rule "exLeft" (formula "29") (inst "sk=i_1"))
                        (rule "andLeft" (formula "29"))
                        (rule "andLeft" (formula "29"))
                        (rule "eqSymm" (formula "31") (term "1,0"))
                        (rule "replace_known_right" (formula "31") (term "1,0,0") (ifseqformula "36"))
                        (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "4")) (ifInst ""  (formula "5")))
                        (rule "replace_known_left" (formula "29") (term "0,0,0,0") (ifseqformula "4"))
                        (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "36")) (ifInst ""  (formula "5")))
                        (rule "replace_known_left" (formula "30") (term "0,1") (ifseqformula "5"))
                        (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "4")) (ifInst ""  (formula "36")))
                        (rule "inEqSimp_homoInEq0" (formula "30"))
                        (rule "polySimp_addComm1" (formula "30") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "30"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1"))
                        (rule "polySimp_rightDist" (formula "30") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,1"))
                        (rule "mul_literals" (formula "30") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "30") (term "1,1"))
                        (rule "allLeft" (formula "17") (inst "t=i_0"))
                        (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "17") (term "0,0") (ifseqformula "27"))
                        (rule "qeq_literals" (formula "17") (term "0,0,0"))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "28"))
                        (rule "inEqSimp_homoInEq1" (formula "17") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,0"))
                        (rule "add_literals" (formula "17") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "17") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "17") (term "0,0,0"))
                        (rule "leq_literals" (formula "17") (term "0,0"))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "notLeft" (formula "17"))
                        (rule "allLeft" (formula "25") (inst "t=i_0"))
                        (rule "inEqSimp_commuteGeq" (formula "25") (term "1,0"))
                        (rule "applyEq" (formula "25") (term "0,1") (ifseqformula "24"))
                        (rule "inEqSimp_contradInEq1" (formula "25") (term "1,0") (ifseqformula "28"))
                        (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1,0"))
                        (rule "add_literals" (formula "25") (term "1,1,0,0,1,0"))
                        (rule "times_zero_1" (formula "25") (term "1,0,0,1,0"))
                        (rule "add_literals" (formula "25") (term "0,0,1,0"))
                        (rule "leq_literals" (formula "25") (term "0,1,0"))
                        (builtin "One Step Simplification" (formula "25"))
                        (rule "inEqSimp_contradInEq1" (formula "25") (term "0") (ifseqformula "27"))
                        (rule "qeq_literals" (formula "25") (term "0,0"))
                        (builtin "One Step Simplification" (formula "25"))
                        (rule "applyEq" (formula "39") (term "0") (ifseqformula "25"))
                        (rule "applyEq" (formula "24") (term "1") (ifseqformula "25"))
                        (rule "applyEq" (formula "44") (term "0") (ifseqformula "25"))
                        (rule "allLeft" (formula "17") (inst "t=i_1"))
                        (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "17") (term "0,0") (ifseqformula "31"))
                        (rule "qeq_literals" (formula "17") (term "0,0,0"))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "32"))
                        (rule "inEqSimp_homoInEq1" (formula "17") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,0"))
                        (rule "add_literals" (formula "17") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "17") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "17") (term "0,0,0"))
                        (rule "leq_literals" (formula "17") (term "0,0"))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "notLeft" (formula "17"))
                        (rule "allLeft" (formula "26") (inst "t=i_1"))
                        (rule "inEqSimp_commuteGeq" (formula "26") (term "1,0"))
                        (rule "applyEq" (formula "26") (term "1,0,1") (ifseqformula "33"))
                        (rule "applyEq" (formula "26") (term "0,1") (ifseqformula "24"))
                        (rule "eqSymm" (formula "26") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "26") (term "0,0") (ifseqformula "31"))
                        (rule "qeq_literals" (formula "26") (term "0,0,0"))
                        (builtin "One Step Simplification" (formula "26"))
                        (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "32"))
                        (rule "inEqSimp_homoInEq1" (formula "26") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,0"))
                        (rule "add_literals" (formula "26") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "26") (term "1,0,0,0"))
                        (rule "add_literals" (formula "26") (term "0,0,0"))
                        (rule "leq_literals" (formula "26") (term "0,0"))
                        (builtin "One Step Simplification" (formula "26"))
                        (rule "applyEq" (formula "38") (term "0") (ifseqformula "26"))
                        (rule "allLeft" (formula "16") (inst "t=i_1"))
                        (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0"))
                        (rule "applyEq" (formula "16") (term "0,0,1") (ifseqformula "34"))
                        (rule "replace_known_right" (formula "16") (term "0,1") (ifseqformula "40"))
                        (builtin "One Step Simplification" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "allLeft" (formula "18") (inst "t=i_1"))
                        (rule "replace_known_left" (formula "18") (term "0,1") (ifseqformula "34"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "33"))
                        (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
                        (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "18") (term "0,0,1"))
                        (rule "leq_literals" (formula "18") (term "0,1"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "inEqSimp_contradInEq1" (formula "18") (term "0") (ifseqformula "32"))
                        (rule "qeq_literals" (formula "18") (term "0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "applyEqRigid" (formula "34") (term "0,2,0") (ifseqformula "18"))
                        (builtin "One Step Simplification" (formula "34"))
                        (rule "true_left" (formula "34"))
                        (rule "applyEq" (formula "32") (term "0") (ifseqformula "18"))
                        (rule "applyEqRigid" (formula "27") (term "0,2,0") (ifseqformula "18"))
                        (builtin "One Step Simplification" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "applyEq" (formula "31") (term "1,1") (ifseqformula "18"))
                        (rule "allLeft" (formula "19") (inst "t=index_0"))
                        (rule "replace_known_left" (formula "19") (term "0,1") (ifseqformula "31"))
                        (builtin "One Step Simplification" (formula "19"))
                        (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "15"))
                        (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                        (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "19") (term "0,0,1"))
                        (rule "leq_literals" (formula "19") (term "0,1"))
                        (builtin "One Step Simplification" (formula "19"))
                        (rule "inEqSimp_contradInEq1" (formula "19") (term "0") (ifseqformula "12"))
                        (rule "qeq_literals" (formula "19") (term "0,0"))
                        (builtin "One Step Simplification" (formula "19"))
                        (rule "applyEq" (formula "12") (term "0") (ifseqformula "19"))
                        (rule "applyEq" (formula "14") (term "1,1") (ifseqformula "18"))
                        (rule "applyEq" (formula "25") (term "0,2,0") (ifseqformula "17"))
                        (builtin "One Step Simplification" (formula "25"))
                        (rule "true_left" (formula "25"))
                        (rule "applyEq" (formula "28") (term "0,2,0") (ifseqformula "17"))
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "true_left" (formula "28"))
                        (rule "mapEqualityRight" (formula "40") (inst "vy=vy"))
                        (rule "allRight" (formula "40") (inst "sk=vy_2"))
                        (rule "getOfMapUpdate" (formula "40") (term "0"))
                        (builtin "One Step Simplification" (formula "40"))
                        (rule "orRight" (formula "40"))
                        (rule "notRight" (formula "40"))
                        (rule "eqSymm" (formula "41"))
                        (rule "applyEq" (formula "41") (term "1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "41") (term "0") (ifseqformula "25"))
                        (rule "mapEqualityLeft" (formula "7") (inst "vy=vy"))
                        (rule "getOfMapUpdate" (formula "7") (term "0,0"))
                        (builtin "One Step Simplification" (formula "7"))
                        (rule "eqSymm" (formula "7") (term "1,0"))
                        (rule "getOfMapUpdate" (formula "7") (term "0,1,0"))
                        (builtin "One Step Simplification" (formula "7"))
                        (rule "commute_or" (formula "7") (term "0"))
                        (builtin "One Step Simplification" (formula "7"))
                        (rule "typeEqDerived2" (formula "7") (term "0,0,1") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "7"))
                        (rule "castDel" (formula "7") (term "0,0"))
                        (builtin "One Step Simplification" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "41") (term "1,0") (ifseqformula "9"))
                        (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "7"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")))
                        (rule "true_left" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "33") (term "0") (ifseqformula "9"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "34"))
                        (builtin "One Step Simplification" (formula "1"))
                        (opengoal " ")
                     )
                     (branch "f_0 = map ∧ o_0 = self FALSE"
                        (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                        (rule "hideAuxiliaryEq" (formula "2"))
                        (rule "cut_direct" (formula "35") (term "0"))
                        (branch "CUT: f_0 = arr(index_0) TRUE"
                           (builtin "One Step Simplification" (formula "36"))
                           (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "false_right" (formula "28"))
                           (rule "applyEq" (formula "3") (term "2,2,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "applyEqReverse" (formula "37") (term "1") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "applyEq" (formula "36") (term "2,0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "36"))
                           (rule "closeTrue" (formula "36"))
                        )
                        (branch "CUT: f_0 = arr(index_0) FALSE"
                           (builtin "One Step Simplification" (formula "36"))
                           (rule "false_right" (formula "36"))
                           (rule "mapEqualityLeft" (formula "4") (inst "vy=vy"))
                           (rule "getOfMapUpdate" (formula "4") (term "1,0"))
                           (rule "eqSymm" (formula "4") (term "0"))
                           (rule "getOfMapUpdate" (formula "4") (term "1,0"))
                           (rule "eqSymm" (formula "4") (term "0"))
                           (rule "getOfMapUpdate" (formula "4") (term "2,0,0"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "eqSymm" (formula "4") (term "1,0"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "commute_or" (formula "4") (term "0"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "castDel" (formula "4") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "ifthenelse_split" (formula "2") (term "0"))
                           (branch "f_0 = footprint ∧ o_0 = self TRUE"
                              (rule "andLeft" (formula "2"))
                              (rule "applyEqReverse" (formula "39") (term "1") (ifseqformula "4"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "applyEq" (formula "28") (term "0") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "false_right" (formula "28"))
                              (rule "applyEq" (formula "37") (term "2,0") (ifseqformula "2"))
                              (rule "narrowSelectType" (formula "37") (term "0") (ifseqformula "7"))
                              (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "34") (term "0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "34"))
                              (rule "false_right" (formula "34"))
                              (rule "applyEq" (formula "34") (term "0") (ifseqformula "2"))
                              (rule "applyEq" (formula "34") (term "1,0") (ifseqformula "2"))
                              (rule "close" (formula "34") (ifseqformula "17"))
                           )
                           (branch "f_0 = footprint ∧ o_0 = self FALSE"
                              (rule "close" (formula "38") (ifseqformula "2"))
                           )
                        )
                     )
                  )
               )
            )
            (branch "CUT: inDomain(self.map, self.keys[index_0]) FALSE"
               (builtin "One Step Simplification" (formula "31"))
               (rule "false_right" (formula "31"))
               (rule "all_pull_out3" (formula "20") (term "0,0"))
               (rule "cnf_rightDist" (formula "20") (term "0,0,0"))
               (rule "distr_forallAnd" (formula "20") (term "0,0"))
               (builtin "One Step Simplification" (formula "20"))
               (rule "distr_existsAnd1" (formula "20") (term "0"))
               (rule "distr_forallAnd" (formula "20"))
               (rule "andLeft" (formula "20"))
               (rule "commute_or_2" (formula "21") (term "0,0"))
               (rule "shift_paren_or" (formula "21") (term "0,0,0"))
               (rule "swapQuantifiersAll" (formula "21"))
               (builtin "One Step Simplification" (formula "21"))
               (rule "castDel" (formula "21") (term "1,0,0,0,0,0,0"))
               (rule "castDel" (formula "21") (term "0,1,0,0,0"))
               (rule "castDel" (formula "21") (term "1,0,0,1,0,0"))
               (rule "instanceof_static_type" (formula "21") (term "0,0,1,0"))
               (builtin "One Step Simplification" (formula "21"))
               (rule "cnf_rightDist" (formula "20") (term "0,0"))
               (rule "shift_paren_or" (formula "20") (term "1,0,0"))
               (rule "commute_or_2" (formula "20") (term "0,1,0,0"))
               (rule "cnf_rightDist" (formula "20") (term "0,0,0"))
               (rule "commute_or_2" (formula "20") (term "0,0,0,0"))
               (rule "shift_paren_or" (formula "20") (term "1,0,0,0"))
               (rule "commute_or" (formula "20") (term "0,0,0,0,0"))
               (rule "allLeft" (formula "21") (inst "t=index_0"))
               (rule "replace_known_right" (formula "21") (term "1,0") (ifseqformula "25"))
               (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "32")))
               (rule "inEqSimp_commuteGeq" (formula "21") (term "1,0"))
               (rule "inEqSimp_contradInEq1" (formula "21") (term "0,0") (ifseqformula "7"))
               (rule "qeq_literals" (formula "21") (term "0,0,0"))
               (builtin "One Step Simplification" (formula "21"))
               (rule "inEqSimp_contradInEq1" (formula "21") (term "0") (ifseqformula "10"))
               (rule "inEqSimp_homoInEq1" (formula "21") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,0"))
               (rule "add_literals" (formula "21") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "21") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "21") (term "0,0,0"))
               (rule "leq_literals" (formula "21") (term "0,0"))
               (builtin "One Step Simplification" (formula "21"))
               (rule "notLeft" (formula "21"))
               (rule "referencedObjectIsCreatedRight" (formula "24") (ifseqformula "25"))
               (rule "close" (formula "24") (ifseqformula "3"))
            )
         )
         (branch "CUT: mapUpdate(mapUpdate(self.map, self.keys[index_0], value), self.keys[index_0], value) = mapUpdate(self.map, self.keys[index_0], value) FALSE"
            (builtin "One Step Simplification" (formula "27"))
            (rule "false_right" (formula "27"))
            (rule "ex_pull_out0" (formula "18") (term "1,0"))
            (rule "allLeft" (formula "11") (inst "t=index_0"))
            (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
            (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0") (ifseqformula "9"))
            (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0"))
            (rule "add_literals" (formula "11") (term "1,1,0,0,1,0"))
            (rule "times_zero_1" (formula "11") (term "1,0,0,1,0"))
            (rule "add_zero_right" (formula "11") (term "0,0,1,0"))
            (rule "leq_literals" (formula "11") (term "0,1,0"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "6"))
            (rule "qeq_literals" (formula "11") (term "0,0"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "notLeft" (formula "11"))
            (rule "allLeft" (formula "10") (inst "t=index_0"))
            (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
            (rule "inEqSimp_contradInEq1" (formula "10") (term "1,0") (ifseqformula "9"))
            (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1,0"))
            (rule "add_literals" (formula "10") (term "1,1,0,0,1,0"))
            (rule "times_zero_1" (formula "10") (term "1,0,0,1,0"))
            (rule "add_zero_right" (formula "10") (term "0,0,1,0"))
            (rule "leq_literals" (formula "10") (term "0,1,0"))
            (builtin "One Step Simplification" (formula "10"))
            (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "6"))
            (rule "qeq_literals" (formula "10") (term "0,0"))
            (builtin "One Step Simplification" (formula "10"))
            (rule "notLeft" (formula "10"))
            (rule "allLeft" (formula "17") (inst "t=index_0"))
            (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0"))
            (rule "inEqSimp_contradInEq1" (formula "17") (term "0,0") (ifseqformula "6"))
            (rule "qeq_literals" (formula "17") (term "0,0,0"))
            (builtin "One Step Simplification" (formula "17"))
            (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "9"))
            (rule "inEqSimp_homoInEq1" (formula "17") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,0"))
            (rule "add_literals" (formula "17") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "17") (term "1,0,0,0"))
            (rule "add_literals" (formula "17") (term "0,0,0"))
            (rule "leq_literals" (formula "17") (term "0,0"))
            (builtin "One Step Simplification" (formula "17"))
            (rule "all_pull_out1" (formula "19") (term "0,1,0"))
            (rule "ex_pull_out3" (formula "19") (term "0"))
            (rule "all_pull_out3" (formula "19") (term "0,0"))
            (rule "cnf_rightDist" (formula "19") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "19") (term "0,0"))
            (builtin "One Step Simplification" (formula "19"))
            (rule "distr_existsAnd1" (formula "19") (term "0"))
            (rule "distr_forallAnd" (formula "19"))
            (rule "andLeft" (formula "19"))
            (rule "commute_or_2" (formula "20") (term "0,0"))
            (rule "shift_paren_or" (formula "20") (term "0,0,0"))
            (rule "swapQuantifiersAll" (formula "20"))
            (builtin "One Step Simplification" (formula "20"))
            (rule "castDel" (formula "20") (term "1,0,0,0,0,0,0"))
            (rule "castDel" (formula "20") (term "0,1,0,0,0"))
            (rule "castDel" (formula "20") (term "1,0,0,1,0,0"))
            (rule "instanceof_static_type" (formula "20") (term "0,0,1,0"))
            (builtin "One Step Simplification" (formula "20"))
            (rule "cnf_rightDist" (formula "19") (term "0,0"))
            (rule "shift_paren_or" (formula "19") (term "1,0,0"))
            (rule "commute_or_2" (formula "19") (term "0,1,0,0"))
            (rule "cnf_rightDist" (formula "19") (term "0,0,0"))
            (rule "commute_or_2" (formula "19") (term "0,0,0,0"))
            (rule "shift_paren_or" (formula "19") (term "1,0,0,0"))
            (rule "commute_or" (formula "19") (term "0,0,0,0,0"))
            (rule "mapEqualityRight" (formula "30") (inst "vy=vy"))
            (rule "allRight" (formula "30") (inst "sk=vy_0"))
            (rule "getOfMapUpdate" (formula "30") (term "1"))
            (rule "eqSymm" (formula "30"))
            (rule "getOfMapUpdate" (formula "30") (term "1"))
            (rule "eqSymm" (formula "30"))
            (rule "getOfMapUpdate" (formula "30") (term "2,0"))
            (builtin "One Step Simplification" (formula "30"))
            (rule "orRight" (formula "30"))
            (rule "notRight" (formula "30"))
            (rule "eqSymm" (formula "31"))
            (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "1")))
            (rule "closeTrue" (formula "31"))
         )
      )
      (branch "Show Axiom Satisfiability"
         (builtin "One Step Simplification" (formula "24"))
         (rule "closeTrue" (formula "24"))
      )
   )
   (branch "Null Reference (o_arr = null)"
      (rule "false_right" (formula "24"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
      (rule "closeFalse" (formula "1"))
   )
   (branch "Index Out of Bounds (o_arr != null, but _index_0 Out of Bounds!)"
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
      (builtin "One Step Simplification" (formula "24"))
      (rule "false_right" (formula "24"))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
      (rule "add_zero_right" (formula "1") (term "0,0,1"))
      (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "14"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
      (rule "mul_literals" (formula "1") (term "1,1"))
      (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "7"))
      (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
      (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "leq_literals" (formula "1") (term "0,0"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "6"))
      (rule "qeq_literals" (formula "1") (term "0"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "Array Store Exception (incompatible dynamic element type of o_arr and _value)"
      (builtin "One Step Simplification" (formula "24"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")) (ifInst ""  (formula "6")))
      (rule "false_right" (formula "24"))
      (rule "andLeft" (formula "1"))
      (rule "notLeft" (formula "2"))
      (rule "inEqSimp_ltToLeq" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "array_store_known_dynamic_array_type" (formula "19") (ifseqformula "13"))
      (rule "orRight" (formula "19"))
      (rule "instanceof_static_type" (formula "19") (term "0"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "closeTrue" (formula "19"))
   )
)
(branch "Show Axiom Satisfiability"
   (builtin "One Step Simplification" (formula "8"))
   (rule "closeTrue" (formula "8"))
)
)

}
