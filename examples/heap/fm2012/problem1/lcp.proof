\settings {
"#Proof-Settings-Config-File
#Thu Aug 30 14:39:24 CEST 2012
[SMTSettings]maxGenericSorts=2
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]UseBuiltUniqueness=false
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[Strategy]Timeout=-1
[StrategyProperty]RETREAT_MODE_OPTIONS_KEY=RETREAT_MODE_NONE
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , initialisation-initialisation\\:disableStaticInitialisation , runtimeExceptions-runtimeExceptions\\:ban
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[View]HideIntermediateProofsteps=false
[View]HideClosedSubtrees=false
[General]UseOCL=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[View]ShowWholeTaclet=false
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMinimum=-2147483645
[General]StupidMode=true
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[General]OneStepSimplification=true
[General]UseJML=true
[SMTSettings]integersMaximum=2147483645
[General]DnDDirectionSensitive=true
[View]FontIndex=2
[View]UseSystemLookAndFeel=false
[SMTSettings]useUninterpretedMultiplication=true
[Strategy]MaximumNumberOfAutomaticApplications=10000
[View]MaxTooltipLines=40
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_NONCLOSE
[SMTSettings]SelectedTaclets=
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_NONE
[SMTSettings]explicitTypeHierarchy=false
"
}

\javaSource "";

\proofObligation "#Proof Obligation Settings
#Thu Aug 30 14:39:24 CEST 2012
name=LCP[LCP\\:\\:lcp([I,int,int)].JML normal_behavior operation contract.0
contract=LCP[LCP\\:\\:lcp([I,int,int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "daniel" ) (keyVersion "1cbc02a9ce016203c5bdb29034716f1c3c09ccd2"))

(autoModeTime "2606")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "10"))
(rule "andLeft" (formula "10"))
(rule "notLeft" (formula "2"))
(rule "notLeft" (formula "10"))
(rule "assignment" (formula "13") (term "1"))
(builtin "One Step Simplification" (formula "13"))
(rule "eqSymm" (formula "12"))
(rule "eqSymm" (formula "13") (term "0,0,1,0,1"))
(rule "translateJavaSubInt" (formula "13") (term "1,1,1,0,1,0,0,0,1"))
(rule "eqSymm" (formula "13") (term "1,0,0,0,0,0,1"))
(rule "translateJavaSubInt" (formula "13") (term "1,0,1,0,1,0,0,0,1"))
(rule "translateJavaAddInt" (formula "13") (term "0,2,1,0,0,0,1,0,0,0,1"))
(rule "translateJavaAddInt" (formula "13") (term "0,2,0,0,0,0,1,0,0,0,1"))
(rule "eqSymm" (formula "13") (term "1,1,0,1,0,0,0,1"))
(rule "translateJavaAddInt" (formula "13") (term "0,2,1,1,0,0,0,0,0,1"))
(rule "translateJavaAddInt" (formula "13") (term "0,2,0,1,0,0,0,0,0,1"))
(rule "eqSymm" (formula "13") (term "0,1,0,1,0,0,0,1"))
(rule "eqSymm" (formula "13") (term "0,0,0,1,0,0,0,1"))
(rule "replace_known_right" (formula "4") (term "1") (ifseqformula "10"))
(builtin "One Step Simplification" (formula "4"))
(rule "polySimp_elimSub" (formula "13") (term "0,1,1,0,1,0,0,0,1"))
(rule "polySimp_elimSub" (formula "13") (term "0,0,1,0,1,0,0,0,1"))
(rule "polySimp_homoEq" (formula "13") (term "1,1,0,1,0,0,0,1"))
(rule "polySimp_homoEq" (formula "13") (term "0,1,0,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "6"))
(rule "inEqSimp_ltToLeq" (formula "8"))
(rule "polySimp_mulComm0" (formula "13") (term "1,0,1,1,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "polySimp_addComm0" (formula "13") (term "0,2,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "13") (term "0,2,0,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "7"))
(rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "13") (term "1,1,0,1,1,0,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "13") (term "1,1,0,0,1,0,1,0,0,0,1"))
(rule "polySimp_addComm1" (formula "6") (term "0"))
(rule "polySimp_addComm1" (formula "8") (term "0"))
(rule "polySimp_rightDist" (formula "13") (term "1,0,1,1,0,1,0,0,0,1"))
(rule "polySimp_mulAssoc" (formula "13") (term "0,1,0,1,1,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "13") (term "0,0,1,0,1,1,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,1,1,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "13") (term "0,1,0,1,1,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,1,0,0,0,1"))
(rule "polySimp_mulAssoc" (formula "13") (term "0,1,0,0,1,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "13") (term "0,0,1,0,0,1,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0,1,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "13") (term "0,1,0,0,1,0,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "13") (term "0,1,1,0,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,1,0,0,0,1"))
(rule "polySimp_sepNegMonomial" (formula "13") (term "1,1,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "13") (term "0,1,1,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "13") (term "0,1,1,0,1,0,0,0,1"))
(rule "polySimp_sepNegMonomial" (formula "13") (term "0,1,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "13") (term "0,0,1,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "13") (term "0,0,1,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "13") (term "0,1,1,0,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0,0,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "6"))
(rule "polySimp_mulLiterals" (formula "6") (term "0"))
(rule "polySimp_elimOne" (formula "6") (term "0"))
(rule "inEqSimp_sepNegMonomial0" (formula "8"))
(rule "polySimp_mulLiterals" (formula "8") (term "0"))
(rule "polySimp_elimOne" (formula "8") (term "0"))
(rule "nnf_imp2or" (formula "13") (term "0,0,0,0,0,1"))
(rule "nnf_notAnd" (formula "13") (term "0,0,0,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,0,0,0,1"))
(rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0,0,0,0,1"))
(rule "add_zero_left" (formula "13") (term "0,0,1,0,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0,0,0,0,1"))
(rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,0,0,0,0,1"))
(rule "add_zero_right" (formula "13") (term "0,0,0,0,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0,0,1"))
(rule "Class_invariant_axiom_for_LCP" (formula "9") (inst "sk=sk_0") (ifseqformula "3"))
(branch "Use Axiom"
   (rule "true_left" (formula "9"))
   (rule "methodBodyExpand" (formula "12") (term "1") (newnames "heapBefore_lcp"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "variableDeclarationAssign" (formula "12") (term "1"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "l"))
   (rule "assignment" (formula "12") (term "1"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "arrayLengthNotNegative" (formula "6") (term "0"))
   (builtin "Loop Invariant" (formula "13") (newnames "heapBeforeLoop,lBeforeLoop,l_0,anon_heap_loop,o,f,variant,b"))
   (branch "Invariant Initially Valid"
      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "1")) (ifInst ""  (formula "4")))
      (rule "leq_literals" (formula "13") (term "0,0,0,1"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "translateJavaAddInt" (formula "13") (term "0,1,0,0,1"))
      (rule "add_zero_left" (formula "13") (term "0,1,0,0,1"))
      (rule "translateJavaAddInt" (formula "13") (term "0,2,1,1,0,1,0,1"))
      (rule "translateJavaAddInt" (formula "13") (term "0,2,0,1,0,1,0,1"))
      (rule "translateJavaSubInt" (formula "13") (term "1,0"))
      (rule "translateJavaAddInt" (formula "13") (term "0,0,0,0,1"))
      (rule "add_zero_left" (formula "13") (term "0,0,0,0,1"))
      (rule "eqSymm" (formula "13") (term "0,1,1"))
      (rule "eqSymm" (formula "13") (term "1,0,1,0,1"))
      (rule "replace_known_right" (formula "13") (term "0,1,1") (ifseqformula "12"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "polySimp_elimSub" (formula "13") (term "1,0"))
      (rule "times_zero_2" (formula "13") (term "1,1,0"))
      (rule "add_zero_right" (formula "13") (term "1,0"))
      (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,1"))
      (rule "times_zero_1" (formula "13") (term "1,0,0,1,0,0,1,1"))
      (rule "add_zero_right" (formula "13") (term "0,0,1,0,0,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "13") (term "0"))
      (rule "replace_known_left" (formula "13") (term "0") (ifseqformula "6"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1"))
      (rule "mul_literals" (formula "13") (term "1,1,0,0,1"))
      (rule "inEqSimp_subsumption1" (formula "13") (term "0,0") (ifseqformula "7"))
      (rule "inEqSimp_homoInEq0" (formula "13") (term "0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,0,0"))
      (rule "add_literals" (formula "13") (term "1,1,0,0,0,0"))
      (rule "times_zero_1" (formula "13") (term "1,0,0,0,0"))
      (rule "add_zero_right" (formula "13") (term "0,0,0,0"))
      (rule "qeq_literals" (formula "13") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "inEqSimp_subsumption1" (formula "13") (term "0") (ifseqformula "9"))
      (rule "inEqSimp_homoInEq0" (formula "13") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,0"))
      (rule "add_literals" (formula "13") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "13") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "13") (term "0,0,0"))
      (rule "qeq_literals" (formula "13") (term "0,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "allRight" (formula "13") (inst "sk=i_0"))
      (rule "impRight" (formula "13"))
      (rule "andLeft" (formula "1"))
      (rule "polySimp_addComm0" (formula "15") (term "0,2,1"))
      (rule "polySimp_addComm0" (formula "15") (term "0,2,0"))
      (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
      (rule "qeq_literals" (formula "2") (term "0"))
      (builtin "One Step Simplification" (formula "2"))
      (rule "closeFalse" (formula "2"))
   )
   (branch "Body Preserves Invariant"
      (builtin "One Step Simplification" (formula "11"))
      (builtin "One Step Simplification" (formula "15"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "11"))
      (rule "notLeft" (formula "12"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "12"))
      (rule "variableDeclarationAssign" (formula "20") (term "1"))
      (rule "variableDeclaration" (formula "20") (term "1") (newnames "b_2"))
      (rule "blockThrow" (formula "20") (term "1,0,0,1,0,1"))
      (rule "variableDeclarationAssign" (formula "20") (term "1,0,1"))
      (rule "variableDeclaration" (formula "20") (term "1,0,1") (newnames "exc_1"))
      (rule "assignment" (formula "20") (term "1,0,1"))
      (rule "variableDeclaration" (formula "20") (term "1,1,0,1") (newnames "thrownExc"))
      (rule "translateJavaSubInt" (formula "15") (term "1"))
      (rule "eqSymm" (formula "16"))
      (rule "translateJavaAddInt" (formula "14") (term "0,2,1,1,0"))
      (rule "translateJavaAddInt" (formula "14") (term "0,2,0,1,0"))
      (rule "translateJavaAddInt" (formula "13") (term "0"))
      (rule "translateJavaAddInt" (formula "12") (term "0"))
      (rule "translateJavaSubInt" (formula "19") (term "0,1,1,1,1,0,1,1,0,1"))
      (rule "translateJavaSubInt" (formula "19") (term "1,0,1,1,1,0,1,1,0,1"))
      (rule "eqSymm" (formula "19") (term "0,0,1,0,1,1,0,1,1,0,1"))
      (rule "translateJavaAddInt" (formula "19") (term "0,2,0,1,0,1,0,0,0,1,1,0,1,1,0,1"))
      (rule "eqSymm" (formula "19") (term "0,1,0,0,1,1,0,1,1,0,1"))
      (rule "translateJavaAddInt" (formula "19") (term "0,0,1,0,0,0,0,1,1,0,1,1,0,1"))
      (rule "translateJavaAddInt" (formula "19") (term "0,2,1,1,0,1,0,0,0,1,1,0,1,1,0,1"))
      (rule "translateJavaAddInt" (formula "19") (term "0,1,1,0,0,0,0,1,1,0,1,1,0,1"))
      (rule "translateJavaSubInt" (formula "19") (term "0,1,1,1,0"))
      (rule "eqSymm" (formula "14") (term "1,0"))
      (rule "eqSymm" (formula "19") (term "1,0,1,0,0,0,1,1,0,1,1,0,1"))
      (rule "polySimp_elimSub" (formula "15") (term "1"))
      (rule "polySimp_elimSub" (formula "19") (term "0,1,1,1,1,0,1,1,0,1"))
      (rule "polySimp_elimSub" (formula "19") (term "1,0,1,1,1,0,1,1,0,1"))
      (rule "polySimp_elimSub" (formula "19") (term "0,1,1,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,1,0,0,0,1,1,0,1,1,0,1"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,1,0,0,0,1,1,0,1,1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "19") (term "1,1,1,1,0,1,1,0,1"))
      (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,1,1,1,0,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
      (rule "polySimp_addComm0" (formula "19") (term "0,0,1,0,0,0,0,1,1,0,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "11"))
      (rule "polySimp_addComm0" (formula "19") (term "0,1,1,0,0,0,0,1,1,0,1,1,0,1"))
      (rule "polySimp_addComm0" (formula "15") (term "1"))
      (rule "polySimp_addComm0" (formula "19") (term "1,0,1,1,1,0,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1,0,0,0,1,1,0,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,0,0,1,1,0,1,1,0,1"))
      (rule "polySimp_addComm0" (formula "19") (term "0,1,1,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "13"))
      (rule "inEqSimp_commuteLeq" (formula "12"))
      (rule "polySimp_addComm0" (formula "19") (term "1,0,1,1,1,1,0,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "19") (term "0,1,0,0,0,0,1,1,0,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "19") (term "1,1,0,0,0,0,1,1,0,1,1,0,1"))
      (rule "polySimp_addAssoc" (formula "19") (term "0,1,1,1,1,0,1,1,0,1"))
      (rule "polySimp_addComm1" (formula "19") (term "0,0,1,1,1,1,0,1,1,0,1"))
      (rule "inEqSimp_homoInEq0" (formula "15"))
      (rule "times_zero_2" (formula "15") (term "1,0"))
      (rule "add_zero_right" (formula "15") (term "0"))
      (rule "inEqSimp_homoInEq0" (formula "19") (term "0,1,1,1,0,1,1,0,1"))
      (rule "times_zero_2" (formula "19") (term "1,0,0,1,1,1,0,1,1,0,1"))
      (rule "add_zero_right" (formula "19") (term "0,0,1,1,1,0,1,1,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,1,0,0,0,1,1,0,1,1,0,1"))
      (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,1,0,0,0,1,1,0,1,1,0,1"))
      (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,1,0,0,0,1,1,0,1,1,0,1"))
      (rule "mul_literals" (formula "19") (term "0,1,1,0,0,1,0,0,0,1,1,0,1,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,1,0,0,0,1,1,0,1,1,0,1"))
      (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,1,0,0,0,1,1,0,1,1,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,1,1,1,0,1,1,0,1"))
      (rule "polySimp_mulComm0" (formula "19") (term "1,1,1,1,1,0,1,1,0,1"))
      (rule "polySimp_rightDist" (formula "19") (term "1,1,1,1,1,0,1,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,1,1,1,0,1,1,0,1"))
      (rule "polySimp_elimOne" (formula "19") (term "1,1,1,1,1,1,0,1,1,0,1"))
      (rule "polySimp_rightDist" (formula "19") (term "0,1,1,1,1,1,0,1,1,0,1"))
      (rule "mul_literals" (formula "19") (term "0,0,1,1,1,1,1,0,1,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "19") (term "1,0,1,1,1,1,1,0,1,1,0,1"))
      (rule "polySimp_elimOne" (formula "19") (term "1,0,1,1,1,1,1,0,1,1,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "15"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1"))
      (rule "polySimp_elimOne" (formula "15") (term "1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "0,1,1,1,0,1,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "19") (term "1,0,1,1,1,0,1,1,0,1"))
      (rule "polySimp_elimOne" (formula "19") (term "1,0,1,1,1,0,1,1,0,1"))
      (rule "nnf_imp2or" (formula "14") (term "0"))
      (rule "nnf_notAnd" (formula "14") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
      (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0"))
      (rule "add_literals" (formula "14") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
      (rule "mul_literals" (formula "14") (term "1,0,0,0"))
      (rule "nnf_imp2or" (formula "19") (term "0,1,0,0,0,1,1,0,1,1,0,1"))
      (rule "nnf_notAnd" (formula "19") (term "0,0,1,0,0,0,1,1,0,1,1,0,1"))
      (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,1,0,0,0,1,1,0,1,1,0,1"))
      (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0,1,0,0,0,1,1,0,1,1,0,1"))
      (rule "add_zero_right" (formula "19") (term "0,0,0,0,0,1,0,0,0,1,1,0,1,1,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,1,0,0,0,1,1,0,1,1,0,1"))
      (rule "mul_literals" (formula "19") (term "1,0,0,0,1,0,0,0,1,1,0,1,1,0,1"))
      (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,1,0,0,0,1,1,0,1,1,0,1"))
      (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,1,0,0,0,1,1,0,1,1,0,1"))
      (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,1,0,0,0,1,1,0,1,1,0,1"))
      (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,1,0,0,0,1,1,0,1,1,0,1"))
      (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,1,0,0,0,1,1,0,1,1,0,1"))
      (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,1,0,0,0,1,1,0,1,1,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,1,0,0,0,1,1,0,1,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,1,0,0,0,1,1,0,1,1,0,1"))
      (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,1,0,0,0,1,1,0,1,1,0,1"))
      (rule "compound_assignment_3_nonsimple" (formula "19") (term "1"))
      (rule "ifUnfold" (formula "19") (term "1,1,0,1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "19") (term "1,1,0,1") (newnames "x_13"))
      (rule "ifElseUnfold" (formula "19") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_14"))
      (rule "compound_assignment_2" (formula "19") (term "1") (inst "#v=x_15"))
      (rule "variableDeclarationAssign" (formula "19") (term "1"))
      (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_15"))
      (rule "compound_assignment_3_nonsimple" (formula "19") (term "1"))
      (rule "ifElseUnfold" (formula "19") (term "1") (inst "#boolv=x_16"))
      (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_16"))
      (rule "compound_assignment_2" (formula "19") (term "1") (inst "#v=x_17"))
      (rule "variableDeclarationAssign" (formula "19") (term "1"))
      (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_17"))
      (rule "compound_less_than_comparison_2" (formula "19") (term "1") (inst "#v1=x_19") (inst "#v0=x_18"))
      (rule "variableDeclarationAssign" (formula "19") (term "1"))
      (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_18"))
      (rule "assignmentAdditionInt" (formula "19") (term "1"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "variableDeclarationAssign" (formula "19") (term "1"))
      (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_19"))
      (rule "assignment_read_length" (formula "19"))
      (branch "Normal Execution (_a != null)"
         (builtin "One Step Simplification" (formula "19"))
         (rule "translateJavaAddInt" (formula "19") (term "0,1,0,0"))
         (rule "polySimp_addComm0" (formula "19") (term "0,1,0,0"))
         (rule "less_than_comparison_simple" (formula "19") (term "1"))
         (builtin "One Step Simplification" (formula "19"))
         (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "19") (term "0,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "19") (term "0,0,0,1,0"))
         (rule "compound_assignment_1_new" (formula "19") (term "1"))
         (builtin "One Step Simplification" (formula "19"))
         (rule "ifElseSplit" (formula "19"))
         (branch "if x_16 true"
            (builtin "One Step Simplification" (formula "1"))
            (builtin "One Step Simplification" (formula "20"))
            (rule "notLeft" (formula "1"))
            (rule "assignment" (formula "20") (term "1"))
            (builtin "One Step Simplification" (formula "20"))
            (rule "inEqSimp_geqRight" (formula "16"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
            (rule "polySimp_mulAssoc" (formula "1") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0,1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
            (rule "polySimp_elimOne" (formula "1") (term "0,1"))
            (rule "inEqSimp_antiSymm" (formula "13") (ifseqformula "1"))
            (rule "applyEq" (formula "14") (term "0") (ifseqformula "13"))
            (rule "inEqSimp_homoInEq1" (formula "14"))
            (rule "polySimp_pullOutFactor1" (formula "14") (term "0"))
            (rule "add_literals" (formula "14") (term "1,0"))
            (rule "times_zero_1" (formula "14") (term "0"))
            (rule "leq_literals" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "applyEq" (formula "20") (term "1,0,1,1,1,0,0") (ifseqformula "13"))
            (rule "polySimp_addAssoc" (formula "20") (term "0,1,1,1,0,0"))
            (rule "polySimp_pullOutFactor2" (formula "20") (term "0,0,1,1,1,0,0"))
            (rule "add_literals" (formula "20") (term "1,0,0,1,1,1,0,0"))
            (rule "times_zero_1" (formula "20") (term "0,0,1,1,1,0,0"))
            (rule "add_zero_left" (formula "20") (term "0,1,1,1,0,0"))
            (rule "applyEq" (formula "1") (term "0") (ifseqformula "13"))
            (rule "inEqSimp_homoInEq0" (formula "1"))
            (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "1,0"))
            (rule "times_zero_1" (formula "1") (term "0"))
            (rule "qeq_literals" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "applyEq" (formula "15") (term "0") (ifseqformula "12"))
            (rule "inEqSimp_homoInEq1" (formula "15"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
            (rule "polySimp_rightDist" (formula "15") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "15") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "15") (term "0"))
            (rule "polySimp_pullOutFactor1" (formula "15") (term "0,0"))
            (rule "add_literals" (formula "15") (term "1,0,0"))
            (rule "times_zero_1" (formula "15") (term "0,0"))
            (rule "add_zero_left" (formula "15") (term "0"))
            (rule "applyEq" (formula "6") (term "0") (ifseqformula "12"))
            (rule "applyEq" (formula "9") (term "0") (ifseqformula "12"))
            (rule "inEqSimp_homoInEq1" (formula "9"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "0,1,0"))
            (rule "polySimp_addComm1" (formula "9") (term "0"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
            (rule "applyEq" (formula "13") (term "0") (ifseqformula "12"))
            (rule "inEqSimp_homoInEq1" (formula "13"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
            (rule "polySimp_rightDist" (formula "13") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "0,1,0"))
            (rule "polySimp_addComm1" (formula "13") (term "0"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
            (rule "polySimp_pullOutFactor1" (formula "13") (term "0,0,0"))
            (rule "add_literals" (formula "13") (term "1,0,0,0"))
            (rule "times_zero_1" (formula "13") (term "0,0,0"))
            (rule "add_zero_left" (formula "13") (term "0,0"))
            (rule "applyEq" (formula "7") (term "0") (ifseqformula "12"))
            (rule "inEqSimp_homoInEq1" (formula "7"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "7") (term "0"))
            (rule "polySimp_addComm1" (formula "7") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
            (rule "add_literals" (formula "7") (term "1,1,0"))
            (rule "times_zero_1" (formula "7") (term "1,0"))
            (rule "add_zero_right" (formula "7") (term "0"))
            (rule "inEqSimp_invertInEq0" (formula "15"))
            (rule "mul_literals" (formula "15") (term "1"))
            (rule "polySimp_mulLiterals" (formula "15") (term "0"))
            (rule "polySimp_elimOne" (formula "15") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "6"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9"))
            (rule "polySimp_mulComm0" (formula "9") (term "1"))
            (rule "polySimp_rightDist" (formula "9") (term "1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1"))
            (rule "polySimp_rightDist" (formula "9") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1"))
            (rule "mul_literals" (formula "9") (term "0,0,1"))
            (rule "polySimp_elimOne" (formula "9") (term "1,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1"))
            (rule "polySimp_elimOne" (formula "13") (term "1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "7"))
            (rule "polySimp_mulLiterals" (formula "7") (term "0"))
            (rule "polySimp_elimOne" (formula "7") (term "0"))
            (rule "inEqSimp_strengthen0" (formula "13") (ifseqformula "17"))
            (rule "inEqSimp_contradEq3" (formula "17") (ifseqformula "13"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0"))
            (rule "add_literals" (formula "17") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "17") (term "1,0,0"))
            (rule "add_literals" (formula "17") (term "0,0"))
            (rule "qeq_literals" (formula "17") (term "0"))
            (builtin "One Step Simplification" (formula "17"))
            (rule "false_right" (formula "17"))
            (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "7"))
            (rule "leq_literals" (formula "11") (term "0"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "12"))
            (rule "times_zero_1" (formula "8") (term "0,0"))
            (rule "add_zero_left" (formula "8") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "8"))
            (rule "mul_literals" (formula "8") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "8"))
            (rule "leq_literals" (formula "5") (term "0"))
            (builtin "One Step Simplification" (formula "5"))
            (rule "true_left" (formula "5"))
            (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "9"))
            (rule "times_zero_1" (formula "8") (term "0,0"))
            (rule "add_zero_left" (formula "8") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "8"))
            (rule "polySimp_mulComm0" (formula "8") (term "1"))
            (rule "polySimp_rightDist" (formula "8") (term "1"))
            (rule "mul_literals" (formula "8") (term "0,1"))
            (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "8"))
            (rule "inEqSimp_homoInEq0" (formula "5") (term "0"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
            (rule "polySimp_elimOne" (formula "5") (term "1,0,0"))
            (rule "polySimp_pullOutFactor2b" (formula "5") (term "0,0"))
            (rule "add_literals" (formula "5") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "5") (term "1,0,0"))
            (rule "add_zero_right" (formula "5") (term "0,0"))
            (rule "qeq_literals" (formula "5") (term "0"))
            (builtin "One Step Simplification" (formula "5"))
            (rule "true_left" (formula "5"))
            (rule "compound_assignment_1_new" (formula "16") (term "1"))
            (builtin "One Step Simplification" (formula "16"))
            (rule "ifElseSplit" (formula "16"))
            (branch "if x_14 true"
               (builtin "One Step Simplification" (formula "17"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "assignment" (formula "16") (term "1"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "methodCallEmpty" (formula "16") (term "1"))
               (rule "emptyModality" (formula "16") (term "1"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "closeTrue" (formula "16"))
            )
            (branch "if x_14 false"
               (builtin "One Step Simplification" (formula "17"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "if x_16 false"
            (builtin "One Step Simplification" (formula "1"))
            (builtin "One Step Simplification" (formula "20"))
            (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq0" (formula "13") (term "0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "13") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
            (rule "polySimp_addComm1" (formula "13") (term "0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,0,0"))
            (rule "add_literals" (formula "13") (term "1,1,0,0,0,0"))
            (rule "times_zero_1" (formula "13") (term "1,0,0,0,0"))
            (rule "add_zero_right" (formula "13") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0"))
            (rule "add_literals" (formula "13") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "13") (term "1,0,0"))
            (rule "add_literals" (formula "13") (term "0,0"))
            (rule "qeq_literals" (formula "13") (term "0"))
            (builtin "One Step Simplification" (formula "13"))
            (rule "true_left" (formula "13"))
            (rule "compound_less_than_comparison_2" (formula "19") (term "1") (inst "#v1=x_17") (inst "#v0=x_16"))
            (rule "variableDeclarationAssign" (formula "19") (term "1"))
            (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_20"))
            (rule "assignmentAdditionInt" (formula "19") (term "1"))
            (builtin "One Step Simplification" (formula "19"))
            (rule "variableDeclarationAssign" (formula "19") (term "1"))
            (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_21"))
            (rule "assignment_read_length" (formula "19"))
            (branch "Normal Execution (_a != null)"
               (builtin "One Step Simplification" (formula "19"))
               (rule "translateJavaAddInt" (formula "19") (term "0,1,0,0"))
               (rule "polySimp_addComm0" (formula "19") (term "0,1,0,0"))
               (rule "less_than_comparison_simple" (formula "19") (term "1"))
               (builtin "One Step Simplification" (formula "19"))
               (rule "blockEmpty" (formula "19") (term "1"))
               (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,1,0"))
               (rule "polySimp_addComm1" (formula "19") (term "0,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,0,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "19") (term "0,0,0,1,0"))
               (rule "compound_assignment_1_new" (formula "19") (term "1"))
               (builtin "One Step Simplification" (formula "19"))
               (rule "ifElseSplit" (formula "19"))
               (branch "if x_14 true"
                  (builtin "One Step Simplification" (formula "1"))
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "notLeft" (formula "1"))
                  (rule "assignment" (formula "20") (term "1"))
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "inEqSimp_geqRight" (formula "16"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "polySimp_mulAssoc" (formula "1") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,1"))
                  (rule "inEqSimp_antiSymm" (formula "14") (ifseqformula "1"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "14"))
                  (rule "inEqSimp_homoInEq0" (formula "1"))
                  (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,0"))
                  (rule "times_zero_1" (formula "1") (term "0"))
                  (rule "qeq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "applyEq" (formula "7") (term "0") (ifseqformula "13"))
                  (rule "applyEq" (formula "16") (term "0") (ifseqformula "13"))
                  (rule "inEqSimp_homoInEq1" (formula "16"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "16") (term "0"))
                  (rule "polySimp_pullOutFactor1" (formula "16") (term "0,0"))
                  (rule "add_literals" (formula "16") (term "1,0,0"))
                  (rule "times_zero_1" (formula "16") (term "0,0"))
                  (rule "add_zero_left" (formula "16") (term "0"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "13"))
                  (rule "inEqSimp_homoInEq1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "applyEq" (formula "14") (term "0") (ifseqformula "13"))
                  (rule "inEqSimp_homoInEq1" (formula "14"))
                  (rule "polySimp_pullOutFactor1" (formula "14") (term "0"))
                  (rule "add_literals" (formula "14") (term "1,0"))
                  (rule "times_zero_1" (formula "14") (term "0"))
                  (rule "leq_literals" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "applyEq" (formula "19") (term "1,0,1,1,1,0,0") (ifseqformula "13"))
                  (rule "polySimp_addAssoc" (formula "19") (term "0,1,1,1,0,0"))
                  (rule "polySimp_pullOutFactor2" (formula "19") (term "0,0,1,1,1,0,0"))
                  (rule "add_literals" (formula "19") (term "1,0,0,1,1,1,0,0"))
                  (rule "times_zero_1" (formula "19") (term "0,0,1,1,1,0,0"))
                  (rule "add_zero_left" (formula "19") (term "0,1,1,1,0,0"))
                  (rule "applyEq" (formula "8") (term "0") (ifseqformula "13"))
                  (rule "inEqSimp_homoInEq1" (formula "8"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0"))
                  (rule "polySimp_addComm1" (formula "8") (term "0,0"))
                  (rule "applyEq" (formula "10") (term "0") (ifseqformula "13"))
                  (rule "inEqSimp_homoInEq1" (formula "10"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "10") (term "0"))
                  (rule "polySimp_addComm1" (formula "10") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                  (rule "add_literals" (formula "10") (term "1,1,0"))
                  (rule "times_zero_1" (formula "10") (term "1,0"))
                  (rule "add_zero_right" (formula "10") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                  (rule "inEqSimp_invertInEq0" (formula "15"))
                  (rule "mul_literals" (formula "15") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                  (rule "polySimp_elimOne" (formula "15") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "8"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                  (rule "polySimp_elimOne" (formula "8") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "10"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                  (rule "polySimp_elimOne" (formula "10") (term "0"))
                  (rule "inEqSimp_contradEq7" (formula "17") (ifseqformula "1"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0"))
                  (rule "add_literals" (formula "17") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "17") (term "1,0,0"))
                  (rule "add_literals" (formula "17") (term "0,0"))
                  (rule "leq_literals" (formula "17") (term "0"))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "false_right" (formula "17"))
                  (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "10"))
                  (rule "leq_literals" (formula "12") (term "0"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "methodCallEmpty" (formula "16") (term "1"))
                  (rule "emptyModality" (formula "16") (term "1"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "closeTrue" (formula "16"))
               )
               (branch "if x_14 false"
                  (builtin "One Step Simplification" (formula "20"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq0" (formula "14") (term "0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "14") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,0,0"))
                  (rule "add_literals" (formula "14") (term "1,1,0,0,0,0"))
                  (rule "times_zero_1" (formula "14") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "14") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0"))
                  (rule "add_literals" (formula "14") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "14") (term "1,0,0"))
                  (rule "add_literals" (formula "14") (term "0,0"))
                  (rule "qeq_literals" (formula "14") (term "0"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "compound_equality_comparison_2" (formula "19") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
                  (rule "variableDeclarationAssign" (formula "19") (term "1"))
                  (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_22"))
                  (rule "eval_order_array_access5" (formula "19") (term "1") (inst "#v1=x_23") (inst "#ar1=x_arr"))
                  (rule "variableDeclarationAssign" (formula "19") (term "1"))
                  (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_arr_2"))
                  (rule "assignment" (formula "19") (term "1"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "variableDeclarationAssign" (formula "19") (term "1"))
                  (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_23"))
                  (rule "assignmentAdditionInt" (formula "19") (term "1"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "assignment_array2" (formula "19"))
                  (branch "Normal Execution (x_arr_2 != null)"
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "variableDeclarationAssign" (formula "19") (term "1"))
                     (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_24"))
                     (rule "eval_order_array_access5" (formula "19") (term "1") (inst "#v1=x_25") (inst "#ar1=x_arr"))
                     (rule "variableDeclarationAssign" (formula "19") (term "1"))
                     (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_arr_3"))
                     (rule "assignment" (formula "19") (term "1"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "variableDeclarationAssign" (formula "19") (term "1"))
                     (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_25"))
                     (rule "translateJavaAddInt" (formula "19") (term "0,2,0,1,0,0"))
                     (rule "polySimp_addComm0" (formula "19") (term "0,2,0,1,0,0"))
                     (rule "assignmentAdditionInt" (formula "19") (term "1"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "assignment_array2" (formula "19"))
                     (branch "Normal Execution (x_arr_3 != null)"
                        (builtin "One Step Simplification" (formula "19"))
                        (rule "translateJavaAddInt" (formula "19") (term "0,2,0,1,0"))
                        (rule "polySimp_addComm0" (formula "19") (term "0,2,0,1,0"))
                        (rule "equality_comparison_simple" (formula "19") (term "1"))
                        (builtin "One Step Simplification" (formula "19"))
                        (rule "eqSymm" (formula "19") (term "0,0,1,0"))
                        (rule "methodCallEmpty" (formula "19") (term "1"))
                        (rule "emptyModality" (formula "19") (term "1"))
                        (builtin "One Step Simplification" (formula "19"))
                        (rule "impRight" (formula "19"))
                        (rule "compound_assignment_3_nonsimple" (formula "20") (term "1"))
                        (rule "ifElseUnfold" (formula "20") (term "1") (inst "#boolv=x_14"))
                        (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_26"))
                        (rule "compound_assignment_2" (formula "20") (term "1") (inst "#v=x_27"))
                        (rule "variableDeclarationAssign" (formula "20") (term "1"))
                        (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_27"))
                        (rule "compound_assignment_3_nonsimple" (formula "20") (term "1"))
                        (rule "ifElseUnfold" (formula "20") (term "1") (inst "#boolv=x_28"))
                        (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_28"))
                        (rule "compound_assignment_2" (formula "20") (term "1") (inst "#v=x_29"))
                        (rule "variableDeclarationAssign" (formula "20") (term "1"))
                        (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_29"))
                        (rule "compound_less_than_comparison_2" (formula "20") (term "1") (inst "#v1=x_31") (inst "#v0=x_30"))
                        (rule "variableDeclarationAssign" (formula "20") (term "1"))
                        (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_30"))
                        (rule "assignmentAdditionInt" (formula "20") (term "1"))
                        (builtin "One Step Simplification" (formula "20"))
                        (rule "variableDeclarationAssign" (formula "20") (term "1"))
                        (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_31"))
                        (rule "assignment_read_length" (formula "20"))
                        (branch "Normal Execution (_a != null)"
                           (builtin "One Step Simplification" (formula "20"))
                           (rule "translateJavaAddInt" (formula "20") (term "0,1,0,0"))
                           (rule "polySimp_addComm0" (formula "20") (term "0,1,0,0"))
                           (rule "less_than_comparison_simple" (formula "20") (term "1"))
                           (builtin "One Step Simplification" (formula "20"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,1,0"))
                           (rule "polySimp_addComm1" (formula "20") (term "0,0,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "0,0,0,1,0"))
                           (rule "replace_known_left" (formula "20") (term "0,0,1,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "20"))
                           (rule "compound_assignment_1_new" (formula "20") (term "1"))
                           (builtin "One Step Simplification" (formula "20"))
                           (rule "ifElse" (formula "20") (term "1"))
                           (builtin "One Step Simplification" (formula "20"))
                           (rule "compound_less_than_comparison_2" (formula "20") (term "1") (inst "#v1=x_29") (inst "#v0=x_28"))
                           (rule "variableDeclarationAssign" (formula "20") (term "1"))
                           (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_32"))
                           (rule "assignmentAdditionInt" (formula "20") (term "1"))
                           (builtin "One Step Simplification" (formula "20"))
                           (rule "variableDeclarationAssign" (formula "20") (term "1"))
                           (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_33"))
                           (rule "assignment_read_length" (formula "20"))
                           (branch "Normal Execution (_a != null)"
                              (builtin "One Step Simplification" (formula "20"))
                              (rule "translateJavaAddInt" (formula "20") (term "0,1,0,0"))
                              (rule "polySimp_addComm0" (formula "20") (term "0,1,0,0"))
                              (rule "less_than_comparison_simple" (formula "20") (term "1"))
                              (builtin "One Step Simplification" (formula "20"))
                              (rule "blockEmpty" (formula "20") (term "1"))
                              (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "20") (term "0,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,0,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "20") (term "0,0,0,1,0"))
                              (rule "replace_known_left" (formula "20") (term "0,0,1,0") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "20"))
                              (rule "compound_assignment_1_new" (formula "20") (term "1"))
                              (builtin "One Step Simplification" (formula "20"))
                              (rule "ifElseSplit" (formula "20"))
                              (branch "if x_26 true"
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "if x_26 false"
                                 (builtin "One Step Simplification" (formula "1"))
                                 (builtin "One Step Simplification" (formula "21"))
                                 (rule "true_left" (formula "1"))
                                 (rule "compound_equality_comparison_2" (formula "20") (term "1") (inst "#v1=x_15") (inst "#v0=x_14"))
                                 (rule "variableDeclarationAssign" (formula "20") (term "1"))
                                 (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_34"))
                                 (rule "eval_order_array_access5" (formula "20") (term "1") (inst "#v1=x_35") (inst "#ar1=x_arr"))
                                 (rule "variableDeclarationAssign" (formula "20") (term "1"))
                                 (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_arr_4"))
                                 (rule "assignment" (formula "20") (term "1"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "variableDeclarationAssign" (formula "20") (term "1"))
                                 (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_35"))
                                 (rule "assignmentAdditionInt" (formula "20") (term "1"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "assignment_array2" (formula "20"))
                                 (branch "Normal Execution (x_arr_4 != null)"
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "variableDeclarationAssign" (formula "20") (term "1"))
                                    (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_36"))
                                    (rule "eval_order_array_access5" (formula "20") (term "1") (inst "#v1=x_37") (inst "#ar1=x_arr"))
                                    (rule "variableDeclarationAssign" (formula "20") (term "1"))
                                    (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_arr_5"))
                                    (rule "assignment" (formula "20") (term "1"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "variableDeclarationAssign" (formula "20") (term "1"))
                                    (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_37"))
                                    (rule "translateJavaAddInt" (formula "20") (term "0,2,0,1,0,0"))
                                    (rule "polySimp_addComm0" (formula "20") (term "0,2,0,1,0,0"))
                                    (rule "assignmentAdditionInt" (formula "20") (term "1"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "assignment_array2" (formula "20"))
                                    (branch "Normal Execution (x_arr_5 != null)"
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "translateJavaAddInt" (formula "20") (term "0,2,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "20") (term "0,2,0,1,0"))
                                       (rule "applyEq" (formula "20") (term "0,1,0") (ifseqformula "1"))
                                       (rule "equality_comparison_simple" (formula "20") (term "1"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "blockEmpty" (formula "20") (term "1"))
                                       (rule "if" (formula "20") (term "1"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "postincrement" (formula "20") (term "1"))
                                       (rule "compound_int_cast_expression" (formula "20") (term "1") (inst "#v=x"))
                                       (rule "variableDeclarationAssign" (formula "20") (term "1"))
                                       (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_38"))
                                       (rule "remove_parentheses_right" (formula "20") (term "1"))
                                       (rule "assignmentAdditionInt" (formula "20") (term "1"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "translateJavaAddInt" (formula "20") (term "0,1,0"))
                                       (rule "polySimp_addComm0" (formula "20") (term "0,1,0"))
                                       (rule "widening_identity_cast_5" (formula "20") (term "1"))
                                       (rule "assignment" (formula "20") (term "1"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "tryEmpty" (formula "20") (term "1"))
                                       (rule "methodCallEmpty" (formula "20") (term "1"))
                                       (rule "emptyModality" (formula "20") (term "1"))
                                       (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "19")))
                                       (rule "polySimp_addComm0" (formula "20") (term "1,0,1,0,0"))
                                       (rule "replace_known_left" (formula "20") (term "0,1,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "polySimp_addComm0" (formula "20") (term "1,1,0,0"))
                                       (rule "replace_known_left" (formula "20") (term "1,0,0") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "polySimp_addAssoc" (formula "20") (term "0,1,1,1"))
                                       (rule "add_literals" (formula "20") (term "0,0,1,1,1"))
                                       (rule "add_zero_left" (formula "20") (term "0,1,1,1"))
                                       (rule "polySimp_addAssoc" (formula "20") (term "1,1,1"))
                                       (rule "polySimp_pullOutFactor1" (formula "20") (term "0,1,1,1"))
                                       (rule "add_literals" (formula "20") (term "1,0,1,1,1"))
                                       (rule "times_zero_1" (formula "20") (term "0,1,1,1"))
                                       (rule "add_zero_left" (formula "20") (term "1,1,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "20") (term "1,1"))
                                       (rule "polySimp_pullOutFactor1" (formula "20") (term "0,1,1"))
                                       (rule "add_literals" (formula "20") (term "1,0,1,1"))
                                       (rule "times_zero_1" (formula "20") (term "0,1,1"))
                                       (rule "qeq_literals" (formula "20") (term "1,1"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "0,0"))
                                       (rule "mul_literals" (formula "20") (term "1,0,0"))
                                       (rule "inEqSimp_subsumption1" (formula "20") (term "0,0") (ifseqformula "14"))
                                       (rule "leq_literals" (formula "20") (term "0,0,0"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "cut_direct" (formula "20") (term "1"))
                                       (branch "CUT: a.length >= 1 + l_0 TRUE"
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "allRight" (formula "21") (inst "sk=i_1"))
                                          (rule "orRight" (formula "21"))
                                          (rule "orRight" (formula "21"))
                                          (rule "inEqSimp_leqRight" (formula "21"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_geqRight" (formula "22"))
                                          (rule "polySimp_addComm0" (formula "23") (term "0,2,0"))
                                          (rule "polySimp_addComm0" (formula "23") (term "0,2,1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "1") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "3"))
                                          (rule "inEqSimp_homoInEq0" (formula "19") (term "0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0"))
                                          (rule "add_literals" (formula "19") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "19") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "19") (term "0,0"))
                                          (rule "qeq_literals" (formula "19") (term "0"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "true_left" (formula "19"))
                                          (rule "instAll" (formula "22") (term "0,0,2,1") (ifseqformula "18") (userinteraction))
                                          (rule "polySimp_addComm0" (formula "1") (term "0,2,1,1"))
                                          (rule "polySimp_addComm0" (formula "1") (term "0,2,0,1"))
                                          (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "23"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "3"))
                                          (rule "qeq_literals" (formula "1") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "inEqSimp_antiSymm" (formula "2") (ifseqformula "1"))
                                          (rule "applyEq" (formula "5") (term "1,1") (ifseqformula "2"))
                                          (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                                          (rule "inEqSimp_homoInEq0" (formula "1"))
                                          (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                                          (rule "add_literals" (formula "1") (term "1,0"))
                                          (rule "times_zero_1" (formula "1") (term "0"))
                                          (rule "qeq_literals" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "2"))
                                          (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
                                          (rule "add_literals" (formula "2") (term "1,0"))
                                          (rule "times_zero_1" (formula "2") (term "0"))
                                          (rule "leq_literals" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "applyEqRigid" (formula "18") (term "1,1,0,0") (ifseqformula "1"))
                                          (rule "applyEqRigid" (formula "17") (term "0") (ifseqformula "1"))
                                          (rule "applyEqRigid" (formula "4") (term "0,0,2,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "21") (term "0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "5") (term "1,0,1") (ifseqformula "1"))
                                          (rule "applyEqRigid" (formula "6") (term "1,0,1") (ifseqformula "1"))
                                          (rule "applyEqRigid" (formula "21") (term "0,0,2,0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "closeTrue" (formula "21"))
                                       )
                                       (branch "CUT: a.length >= 1 + l_0 FALSE"
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "false_right" (formula "21"))
                                          (rule "inEqSimp_geqRight" (formula "20"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1"))
                                          (rule "inEqSimp_antiSymm" (formula "17") (ifseqformula "1"))
                                          (rule "applyEq" (formula "13") (term "0") (ifseqformula "17"))
                                          (rule "inEqSimp_homoInEq1" (formula "13"))
                                          (rule "polySimp_addComm1" (formula "13") (term "0"))
                                          (rule "applyEq" (formula "4") (term "0") (ifseqformula "17"))
                                          (rule "inEqSimp_homoInEq1" (formula "4"))
                                          (rule "polySimp_addComm1" (formula "4") (term "0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0"))
                                          (rule "add_literals" (formula "4") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "4") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "4") (term "0,0"))
                                          (rule "applyEq" (formula "1") (term "0") (ifseqformula "17"))
                                          (rule "inEqSimp_homoInEq0" (formula "1"))
                                          (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                                          (rule "add_literals" (formula "1") (term "1,0"))
                                          (rule "times_zero_1" (formula "1") (term "0"))
                                          (rule "qeq_literals" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "applyEq" (formula "9") (term "0") (ifseqformula "16"))
                                          (rule "applyEq" (formula "2") (term "0") (ifseqformula "15"))
                                          (rule "inEqSimp_homoInEq1" (formula "2"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0"))
                                          (rule "add_literals" (formula "2") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "2") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "2") (term "0,0"))
                                          (rule "applyEq" (formula "9") (term "0") (ifseqformula "15"))
                                          (rule "inEqSimp_homoInEq1" (formula "9"))
                                          (rule "polySimp_addComm1" (formula "9") (term "0"))
                                          (rule "applyEq" (formula "16") (term "0") (ifseqformula "15"))
                                          (rule "inEqSimp_homoInEq1" (formula "16"))
                                          (rule "polySimp_pullOutFactor1" (formula "16") (term "0"))
                                          (rule "add_literals" (formula "16") (term "1,0"))
                                          (rule "times_zero_1" (formula "16") (term "0"))
                                          (rule "leq_literals" (formula "16"))
                                          (rule "true_left" (formula "16"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "11"))
                                          (rule "polySimp_mulComm0" (formula "11") (term "1"))
                                          (rule "polySimp_rightDist" (formula "11") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "11") (term "1,1"))
                                          (rule "mul_literals" (formula "11") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "11") (term "1,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                          (rule "mul_literals" (formula "3") (term "1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                          (rule "mul_literals" (formula "2") (term "1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "9"))
                                          (rule "polySimp_mulComm0" (formula "9") (term "1"))
                                          (rule "polySimp_rightDist" (formula "9") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "9") (term "1,1"))
                                          (rule "mul_literals" (formula "9") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "9") (term "1,1"))
                                          (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "2"))
                                          (rule "qeq_literals" (formula "10") (term "0"))
                                          (builtin "One Step Simplification" (formula "10"))
                                          (rule "closeFalse" (formula "10"))
                                       )
                                    )
                                    (branch "Null Reference (x_arr_5 = null)"
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "Index Out of Bounds (x_arr_5 != null, but x_37 Out of Bounds!)"
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
                                       (builtin "One Step Simplification" (formula "21"))
                                       (rule "false_right" (formula "21"))
                                       (rule "translateJavaAddInt" (formula "1") (term "1,0"))
                                       (rule "translateJavaAddInt" (formula "1") (term "0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                       (rule "polySimp_addComm0" (formula "1") (term "1,0"))
                                       (rule "polySimp_addComm0" (formula "1") (term "1,0,1"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,1"))
                                       (rule "mul_literals" (formula "1") (term "0,1,1"))
                                       (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "3"))
                                       (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0,0,0"))
                                       (rule "add_literals" (formula "1") (term "1,1,0,0,0,0,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                                       (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                       (rule "leq_literals" (formula "1") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "1"))
                                       (rule "times_zero_1" (formula "12") (term "0,0"))
                                       (rule "add_zero_left" (formula "12") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "12"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "0"))
                                       (rule "inEqSimp_contradInEq0" (formula "16") (ifseqformula "12"))
                                       (rule "qeq_literals" (formula "16") (term "0"))
                                       (builtin "One Step Simplification" (formula "16"))
                                       (rule "closeFalse" (formula "16"))
                                    )
                                 )
                                 (branch "Null Reference (x_arr_4 = null)"
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "Index Out of Bounds (x_arr_4 != null, but x_35 Out of Bounds!)"
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "false_right" (formula "21"))
                                    (rule "translateJavaAddInt" (formula "1") (term "1,0"))
                                    (rule "translateJavaAddInt" (formula "1") (term "0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                    (rule "polySimp_addComm0" (formula "1") (term "1,0"))
                                    (rule "polySimp_addComm0" (formula "1") (term "1,0,1"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,1"))
                                    (rule "mul_literals" (formula "1") (term "0,1,1"))
                                    (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "4"))
                                    (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0,0,0"))
                                    (rule "add_literals" (formula "1") (term "1,1,0,0,0,0,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                                    (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                    (rule "leq_literals" (formula "1") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "1"))
                                    (rule "times_zero_1" (formula "9") (term "0,0"))
                                    (rule "add_zero_left" (formula "9") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                    (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                    (rule "polySimp_elimOne" (formula "9") (term "0"))
                                    (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "16"))
                                    (rule "qeq_literals" (formula "9") (term "0"))
                                    (builtin "One Step Simplification" (formula "9"))
                                    (rule "closeFalse" (formula "9"))
                                 )
                              )
                           )
                           (branch "Null Reference (_a = null)"
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                        (branch "Null Reference (_a = null)"
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch "Null Reference (x_arr_3 = null)"
                        (builtin "One Step Simplification" (formula "20"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "Index Out of Bounds (x_arr_3 != null, but x_25 Out of Bounds!)"
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
                        (builtin "One Step Simplification" (formula "20"))
                        (rule "false_right" (formula "20"))
                        (rule "translateJavaAddInt" (formula "1") (term "1,0"))
                        (rule "translateJavaAddInt" (formula "1") (term "0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "1") (term "0,0,1"))
                        (rule "polySimp_addComm0" (formula "1") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "1,0,1"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1"))
                        (rule "mul_literals" (formula "1") (term "0,1,1"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "1") (term "1,1,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                        (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0"))
                        (rule "leq_literals" (formula "1") (term "0,0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "1"))
                        (rule "times_zero_1" (formula "11") (term "0,0"))
                        (rule "add_zero_left" (formula "11") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                        (rule "polySimp_elimOne" (formula "11") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "15"))
                        (rule "qeq_literals" (formula "11") (term "0"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "closeFalse" (formula "11"))
                     )
                  )
                  (branch "Null Reference (x_arr_2 = null)"
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "Index Out of Bounds (x_arr_2 != null, but x_23 Out of Bounds!)"
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
                     (builtin "One Step Simplification" (formula "20"))
                     (rule "false_right" (formula "20"))
                     (rule "translateJavaAddInt" (formula "1") (term "1,0"))
                     (rule "translateJavaAddInt" (formula "1") (term "0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "1") (term "0,0,1"))
                     (rule "polySimp_addComm0" (formula "1") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "1,0,1"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1"))
                     (rule "mul_literals" (formula "1") (term "0,1,1"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "3"))
                     (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "1") (term "1,1,0,0,0,0,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                     (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0,0"))
                     (rule "leq_literals" (formula "1") (term "0,0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "1"))
                     (rule "times_zero_1" (formula "8") (term "0,0"))
                     (rule "add_zero_left" (formula "8") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                     (rule "polySimp_elimOne" (formula "8") (term "0"))
                     (rule "inEqSimp_contradInEq1" (formula "8") (ifseqformula "15"))
                     (rule "qeq_literals" (formula "8") (term "0"))
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "closeFalse" (formula "8"))
                  )
               )
            )
            (branch "Null Reference (_a = null)"
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
      (branch "Null Reference (_a = null)"
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Use Case"
      (builtin "One Step Simplification" (formula "11"))
      (builtin "One Step Simplification" (formula "15"))
      (rule "andLeft" (formula "11"))
      (rule "notLeft" (formula "12"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "12"))
      (rule "variableDeclarationAssign" (formula "19") (term "1"))
      (rule "variableDeclaration" (formula "19") (term "1") (newnames "b_1"))
      (rule "eqSymm" (formula "15"))
      (rule "translateJavaAddInt" (formula "14") (term "0,2,0,1,0"))
      (rule "translateJavaAddInt" (formula "14") (term "0,2,1,1,0"))
      (rule "translateJavaAddInt" (formula "12") (term "0"))
      (rule "translateJavaAddInt" (formula "13") (term "0"))
      (rule "eqSymm" (formula "14") (term "1,0"))
      (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "11"))
      (rule "inEqSimp_commuteLeq" (formula "12"))
      (rule "inEqSimp_commuteLeq" (formula "13"))
      (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
      (rule "nnf_imp2or" (formula "14") (term "0"))
      (rule "nnf_notAnd" (formula "14") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
      (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
      (rule "add_literals" (formula "14") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
      (rule "mul_literals" (formula "14") (term "1,0,0,0"))
      (rule "compound_assignment_3_nonsimple" (formula "18") (term "1"))
      (rule "ifElseUnfold" (formula "18") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_1"))
      (rule "compound_assignment_2" (formula "18") (term "1") (inst "#v=x_2"))
      (rule "variableDeclarationAssign" (formula "18") (term "1"))
      (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_2"))
      (rule "compound_assignment_3_nonsimple" (formula "18") (term "1"))
      (rule "ifElseUnfold" (formula "18") (term "1") (inst "#boolv=x_3"))
      (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_3"))
      (rule "compound_assignment_2" (formula "18") (term "1") (inst "#v=x_4"))
      (rule "variableDeclarationAssign" (formula "18") (term "1"))
      (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_4"))
      (rule "compound_less_than_comparison_2" (formula "18") (term "1") (inst "#v1=x_6") (inst "#v0=x_5"))
      (rule "variableDeclarationAssign" (formula "18") (term "1"))
      (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_5"))
      (rule "assignmentAdditionInt" (formula "18") (term "1"))
      (builtin "One Step Simplification" (formula "18"))
      (rule "variableDeclarationAssign" (formula "18") (term "1"))
      (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_6"))
      (rule "assignment_read_length" (formula "18"))
      (branch "Normal Execution (_a != null)"
         (builtin "One Step Simplification" (formula "18"))
         (rule "translateJavaAddInt" (formula "18") (term "0,1,0,0"))
         (rule "polySimp_addComm0" (formula "18") (term "0,1,0,0"))
         (rule "less_than_comparison_simple" (formula "18") (term "1"))
         (builtin "One Step Simplification" (formula "18"))
         (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "18") (term "0,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "18") (term "0,0,0,1,0"))
         (rule "compound_assignment_1_new" (formula "18") (term "1"))
         (builtin "One Step Simplification" (formula "18"))
         (rule "ifElse" (formula "18") (term "1"))
         (builtin "One Step Simplification" (formula "18"))
         (rule "assignment" (formula "18") (term "1,1"))
         (builtin "One Step Simplification" (formula "18"))
         (rule "ifthenelse_negated_for" (formula "18"))
         (rule "compound_assignment_1_new" (formula "18") (term "1,2"))
         (builtin "One Step Simplification" (formula "18"))
         (rule "ifthenelse_split_for" (formula "18"))
         (branch "a.length >= 1 + l_0 + x TRUE"
            (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq0" (formula "13") (term "0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "13") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
            (rule "polySimp_addComm1" (formula "13") (term "0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0"))
            (rule "add_literals" (formula "13") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "13") (term "1,0,0"))
            (rule "add_zero_right" (formula "13") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0"))
            (rule "add_literals" (formula "13") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "13") (term "1,0,0"))
            (rule "add_zero_right" (formula "13") (term "0,0"))
            (rule "qeq_literals" (formula "13") (term "0"))
            (builtin "One Step Simplification" (formula "13"))
            (rule "true_left" (formula "13"))
            (rule "compound_less_than_comparison_2" (formula "18") (term "1") (inst "#v1=x_4") (inst "#v0=x_3"))
            (rule "variableDeclarationAssign" (formula "18") (term "1"))
            (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_7"))
            (rule "assignmentAdditionInt" (formula "18") (term "1"))
            (builtin "One Step Simplification" (formula "18"))
            (rule "variableDeclarationAssign" (formula "18") (term "1"))
            (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_8"))
            (rule "assignment_read_length" (formula "18"))
            (branch "Normal Execution (_a != null)"
               (builtin "One Step Simplification" (formula "18"))
               (rule "translateJavaAddInt" (formula "18") (term "0,1,0,0"))
               (rule "polySimp_addComm0" (formula "18") (term "0,1,0,0"))
               (rule "less_than_comparison_simple" (formula "18") (term "1"))
               (builtin "One Step Simplification" (formula "18"))
               (rule "blockEmpty" (formula "18") (term "1"))
               (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,1,0"))
               (rule "polySimp_addComm1" (formula "18") (term "0,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "18") (term "0,0,0,1,0"))
               (rule "compound_assignment_1_new" (formula "18") (term "1"))
               (builtin "One Step Simplification" (formula "18"))
               (rule "ifElseSplit" (formula "18"))
               (branch "if x_1 true"
                  (builtin "One Step Simplification" (formula "1"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "notLeft" (formula "1"))
                  (rule "assignment" (formula "19") (term "1"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "inEqSimp_geqRight" (formula "15"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "polySimp_mulAssoc" (formula "1") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,1"))
                  (rule "inEqSimp_antiSymm" (formula "14") (ifseqformula "1"))
                  (rule "applyEq" (formula "9") (term "0") (ifseqformula "14"))
                  (rule "inEqSimp_homoInEq1" (formula "9"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0"))
                  (rule "polySimp_addComm1" (formula "9") (term "0,0"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "14"))
                  (rule "inEqSimp_homoInEq0" (formula "1"))
                  (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,0"))
                  (rule "times_zero_1" (formula "1") (term "0"))
                  (rule "qeq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "applyEq" (formula "7") (term "0") (ifseqformula "13"))
                  (rule "applyEq" (formula "14") (term "0") (ifseqformula "13"))
                  (rule "inEqSimp_homoInEq1" (formula "14"))
                  (rule "polySimp_pullOutFactor1" (formula "14") (term "0"))
                  (rule "add_literals" (formula "14") (term "1,0"))
                  (rule "times_zero_1" (formula "14") (term "0"))
                  (rule "leq_literals" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "13"))
                  (rule "inEqSimp_homoInEq1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0"))
                  (rule "applyEq" (formula "10") (term "0") (ifseqformula "13"))
                  (rule "inEqSimp_homoInEq1" (formula "10"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "10") (term "0"))
                  (rule "polySimp_addComm1" (formula "10") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                  (rule "add_literals" (formula "10") (term "1,1,0"))
                  (rule "times_zero_1" (formula "10") (term "1,0"))
                  (rule "add_zero_right" (formula "10") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "8"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                  (rule "polySimp_elimOne" (formula "8") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "10"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                  (rule "polySimp_elimOne" (formula "10") (term "0"))
                  (rule "inEqSimp_contradEq7" (formula "17") (ifseqformula "1"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0"))
                  (rule "add_literals" (formula "17") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "17") (term "1,0,0"))
                  (rule "add_zero_right" (formula "17") (term "0,0"))
                  (rule "leq_literals" (formula "17") (term "0"))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "false_right" (formula "17"))
                  (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "10"))
                  (rule "leq_literals" (formula "12") (term "0"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "methodCallEmpty" (formula "16") (term "1"))
                  (rule "emptyModality" (formula "16") (term "1"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "methodCallReturn" (formula "16") (term "1"))
                  (rule "assignment" (formula "16") (term "1"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "methodCallEmpty" (formula "16") (term "1"))
                  (rule "tryEmpty" (formula "16") (term "1"))
                  (rule "emptyModality" (formula "16") (term "1"))
                  (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "12")))
                  (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "13"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "Class_invariant_axiom_for_LCP" (formula "16") (inst "sk=sk_3") (ifseqformula "4"))
                  (branch "Use Axiom"
                     (rule "closeTrue" (formula "16"))
                  )
                  (branch "Show Axiom Satisfiability"
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "closeTrue" (formula "16"))
                  )
               )
               (branch "if x_1 false"
                  (builtin "One Step Simplification" (formula "19"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq0" (formula "14") (term "0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "14") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,0,0"))
                  (rule "add_literals" (formula "14") (term "1,1,0,0,0,0"))
                  (rule "times_zero_1" (formula "14") (term "1,0,0,0,0"))
                  (rule "add_literals" (formula "14") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0"))
                  (rule "add_literals" (formula "14") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "14") (term "1,0,0"))
                  (rule "add_zero_right" (formula "14") (term "0,0"))
                  (rule "qeq_literals" (formula "14") (term "0"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "compound_equality_comparison_2" (formula "18") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
                  (rule "variableDeclarationAssign" (formula "18") (term "1"))
                  (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_9"))
                  (rule "eval_order_array_access5" (formula "18") (term "1") (inst "#v1=x_10") (inst "#ar1=x_arr"))
                  (rule "variableDeclarationAssign" (formula "18") (term "1"))
                  (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_arr"))
                  (rule "assignment" (formula "18") (term "1"))
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "variableDeclarationAssign" (formula "18") (term "1"))
                  (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_10"))
                  (rule "assignmentAdditionInt" (formula "18") (term "1"))
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "assignment_array2" (formula "18"))
                  (branch "Normal Execution (x_arr != null)"
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "variableDeclarationAssign" (formula "18") (term "1"))
                     (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_11"))
                     (rule "eval_order_array_access5" (formula "18") (term "1") (inst "#v1=x_12") (inst "#ar1=x_arr"))
                     (rule "variableDeclarationAssign" (formula "18") (term "1"))
                     (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_arr_1"))
                     (rule "assignment" (formula "18") (term "1"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "variableDeclarationAssign" (formula "18") (term "1"))
                     (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_12"))
                     (rule "translateJavaAddInt" (formula "18") (term "0,2,0,1,0,0"))
                     (rule "polySimp_addComm0" (formula "18") (term "0,2,0,1,0,0"))
                     (rule "assignmentAdditionInt" (formula "18") (term "1"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "assignment_array2" (formula "18"))
                     (branch "Normal Execution (x_arr_1 != null)"
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "translateJavaAddInt" (formula "18") (term "0,2,0,1,0"))
                        (rule "polySimp_addComm0" (formula "18") (term "0,2,0,1,0"))
                        (rule "equality_comparison_simple" (formula "18") (term "1"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "eqSymm" (formula "18") (term "0,0,1,0"))
                        (rule "methodCallEmpty" (formula "18") (term "1"))
                        (rule "emptyModality" (formula "18") (term "1"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "impRight" (formula "18"))
                        (rule "notLeft" (formula "1"))
                        (rule "methodCallReturn" (formula "19") (term "1"))
                        (rule "assignment" (formula "19") (term "1"))
                        (builtin "One Step Simplification" (formula "19"))
                        (rule "methodCallEmpty" (formula "19") (term "1"))
                        (rule "tryEmpty" (formula "19") (term "1"))
                        (rule "emptyModality" (formula "19") (term "1"))
                        (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "15")))
                        (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "14"))
                        (builtin "One Step Simplification" (formula "19"))
                        (rule "Class_invariant_axiom_for_LCP" (formula "19") (inst "sk=sk_2") (ifseqformula "5"))
                        (branch "Use Axiom"
                           (rule "closeTrue" (formula "19"))
                        )
                        (branch "Show Axiom Satisfiability"
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "closeTrue" (formula "19"))
                        )
                     )
                     (branch "Null Reference (x_arr_1 = null)"
                        (builtin "One Step Simplification" (formula "19"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "Index Out of Bounds (x_arr_1 != null, but x_12 Out of Bounds!)"
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                        (builtin "One Step Simplification" (formula "19"))
                        (rule "false_right" (formula "19"))
                        (rule "translateJavaAddInt" (formula "1") (term "0,1"))
                        (rule "translateJavaAddInt" (formula "1") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "1") (term "0,0,1"))
                        (rule "polySimp_addComm0" (formula "1") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "1,0,1"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1"))
                        (rule "mul_literals" (formula "1") (term "0,1,1"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "1") (term "1,1,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                        (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0"))
                        (rule "leq_literals" (formula "1") (term "0,0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "1"))
                        (rule "mul_literals" (formula "11") (term "0,0"))
                        (rule "add_zero_left" (formula "11") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                        (rule "polySimp_elimOne" (formula "11") (term "0"))
                        (rule "inEqSimp_contradInEq0" (formula "15") (ifseqformula "11"))
                        (rule "qeq_literals" (formula "15") (term "0"))
                        (builtin "One Step Simplification" (formula "15"))
                        (rule "closeFalse" (formula "15"))
                     )
                  )
                  (branch "Null Reference (x_arr = null)"
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "Index Out of Bounds (x_arr != null, but x_10 Out of Bounds!)"
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "false_right" (formula "19"))
                     (rule "translateJavaAddInt" (formula "1") (term "0,1"))
                     (rule "translateJavaAddInt" (formula "1") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "1") (term "0,0,1"))
                     (rule "polySimp_addComm0" (formula "1") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "1,0,1"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1"))
                     (rule "mul_literals" (formula "1") (term "0,1,1"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "3"))
                     (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "1") (term "1,1,0,0,0,0,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                     (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0,0"))
                     (rule "leq_literals" (formula "1") (term "0,0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "1"))
                     (rule "times_zero_1" (formula "8") (term "0,0"))
                     (rule "add_zero_left" (formula "8") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                     (rule "polySimp_elimOne" (formula "8") (term "0"))
                     (rule "inEqSimp_contradInEq1" (formula "8") (ifseqformula "15"))
                     (rule "qeq_literals" (formula "8") (term "0"))
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "closeFalse" (formula "8"))
                  )
               )
            )
            (branch "Null Reference (_a = null)"
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "a.length >= 1 + l_0 + x FALSE"
            (rule "inEqSimp_geqRight" (formula "18"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
            (rule "polySimp_mulAssoc" (formula "1") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0,1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
            (rule "polySimp_elimOne" (formula "1") (term "0,1"))
            (rule "inEqSimp_antiSymm" (formula "13") (ifseqformula "1"))
            (rule "applyEq" (formula "14") (term "0") (ifseqformula "13"))
            (rule "inEqSimp_homoInEq1" (formula "14"))
            (rule "polySimp_pullOutFactor1" (formula "14") (term "0"))
            (rule "add_literals" (formula "14") (term "1,0"))
            (rule "times_zero_1" (formula "14") (term "0"))
            (rule "leq_literals" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "applyEq" (formula "10") (term "0") (ifseqformula "13"))
            (rule "inEqSimp_homoInEq1" (formula "10"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "0,1,0"))
            (rule "polySimp_addComm1" (formula "10") (term "0"))
            (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
            (rule "applyEq" (formula "8") (term "0") (ifseqformula "13"))
            (rule "inEqSimp_homoInEq1" (formula "8"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0"))
            (rule "polySimp_addComm1" (formula "8") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "8") (term "0"))
            (rule "add_literals" (formula "8") (term "1,1,0"))
            (rule "times_zero_1" (formula "8") (term "1,0"))
            (rule "add_zero_right" (formula "8") (term "0"))
            (rule "applyEq" (formula "7") (term "0") (ifseqformula "13"))
            (rule "applyEq" (formula "1") (term "0") (ifseqformula "13"))
            (rule "inEqSimp_homoInEq0" (formula "1"))
            (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "1,0"))
            (rule "times_zero_1" (formula "1") (term "0"))
            (rule "qeq_literals" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "applyEq" (formula "13") (term "0") (ifseqformula "12"))
            (rule "inEqSimp_homoInEq1" (formula "13"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
            (rule "polySimp_rightDist" (formula "13") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "0,1,0"))
            (rule "polySimp_addComm1" (formula "13") (term "0"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
            (rule "polySimp_pullOutFactor1" (formula "13") (term "0,0,0"))
            (rule "add_literals" (formula "13") (term "1,0,0,0"))
            (rule "times_zero_1" (formula "13") (term "0,0,0"))
            (rule "add_zero_left" (formula "13") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9"))
            (rule "polySimp_mulComm0" (formula "9") (term "1"))
            (rule "polySimp_rightDist" (formula "9") (term "1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1"))
            (rule "polySimp_rightDist" (formula "9") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1"))
            (rule "mul_literals" (formula "9") (term "0,0,1"))
            (rule "polySimp_elimOne" (formula "9") (term "1,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "7"))
            (rule "polySimp_mulLiterals" (formula "7") (term "0"))
            (rule "polySimp_elimOne" (formula "7") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "6"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1"))
            (rule "polySimp_elimOne" (formula "13") (term "1"))
            (rule "inEqSimp_strengthen0" (formula "13") (ifseqformula "17"))
            (rule "inEqSimp_contradEq3" (formula "17") (ifseqformula "13"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0"))
            (rule "add_literals" (formula "17") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "17") (term "1,0,0"))
            (rule "add_zero_right" (formula "17") (term "0,0"))
            (rule "qeq_literals" (formula "17") (term "0"))
            (builtin "One Step Simplification" (formula "17"))
            (rule "false_right" (formula "17"))
            (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "7"))
            (rule "leq_literals" (formula "11") (term "0"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "12"))
            (rule "times_zero_1" (formula "8") (term "0,0"))
            (rule "add_zero_left" (formula "8") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "8"))
            (rule "mul_literals" (formula "8") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "8"))
            (rule "leq_literals" (formula "5") (term "0"))
            (builtin "One Step Simplification" (formula "5"))
            (rule "true_left" (formula "5"))
            (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "9"))
            (rule "times_zero_1" (formula "8") (term "0,0"))
            (rule "add_zero_left" (formula "8") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "8"))
            (rule "polySimp_mulComm0" (formula "8") (term "1"))
            (rule "polySimp_rightDist" (formula "8") (term "1"))
            (rule "mul_literals" (formula "8") (term "0,1"))
            (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "8"))
            (rule "inEqSimp_homoInEq0" (formula "5") (term "0"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0"))
            (rule "add_literals" (formula "5") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "5") (term "1,0,0"))
            (rule "add_zero_right" (formula "5") (term "0,0"))
            (rule "qeq_literals" (formula "5") (term "0"))
            (builtin "One Step Simplification" (formula "5"))
            (rule "true_left" (formula "5"))
            (rule "ifElse" (formula "16") (term "1"))
            (builtin "One Step Simplification" (formula "16"))
            (rule "assignment" (formula "16") (term "1"))
            (builtin "One Step Simplification" (formula "16"))
            (rule "methodCallEmpty" (formula "16") (term "1"))
            (rule "emptyModality" (formula "16") (term "1"))
            (builtin "One Step Simplification" (formula "16"))
            (rule "methodCallReturn" (formula "16") (term "1"))
            (rule "assignment" (formula "16") (term "1"))
            (builtin "One Step Simplification" (formula "16"))
            (rule "methodCallEmpty" (formula "16") (term "1"))
            (rule "tryEmpty" (formula "16") (term "1"))
            (rule "emptyModality" (formula "16") (term "1"))
            (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "11")))
            (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "13"))
            (builtin "One Step Simplification" (formula "16"))
            (rule "Class_invariant_axiom_for_LCP" (formula "16") (inst "sk=sk_1") (ifseqformula "3"))
            (branch "Use Axiom"
               (rule "closeTrue" (formula "16"))
            )
            (branch "Show Axiom Satisfiability"
               (builtin "One Step Simplification" (formula "16"))
               (rule "closeTrue" (formula "16"))
            )
         )
      )
      (branch "Null Reference (_a = null)"
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
         (rule "closeFalse" (formula "1"))
      )
   )
)
(branch "Show Axiom Satisfiability"
   (builtin "One Step Simplification" (formula "10"))
   (rule "closeTrue" (formula "10"))
)
)

}
