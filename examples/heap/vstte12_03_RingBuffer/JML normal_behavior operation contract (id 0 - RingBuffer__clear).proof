\settings {
"#Proof-Settings-Config-File
#Tue Nov 08 23:38:38 CET 2011
[SMTSettings]maxGenericSorts=2
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]UseBuiltUniqueness=false
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[Strategy]Timeout=-1
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:on , programRules-programRules\\:Java , intRules-intRules\\:arithmeticSemanticsIgnoringOF , initialisation-initialisation\\:disableStaticInitialisation , runtimeExceptions-runtimeExceptions\\:ban
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[View]HideIntermediateProofsteps=true
[View]HideClosedSubtrees=false
[General]UseOCL=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[View]ShowWholeTaclet=false
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMinimum=-2147483645
[General]StupidMode=true
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[General]OneStepSimplification=true
[General]UseJML=true
[SMTSettings]integersMaximum=2147483645
[General]DnDDirectionSensitive=true
[View]FontIndex=2
[View]UseSystemLookAndFeel=false
[SMTSettings]useUninterpretedMultiplication=true
[Strategy]MaximumNumberOfAutomaticApplications=50000
[View]MaxTooltipLines=40
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[SMTSettings]SelectedTaclets=
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[SMTSettings]explicitTypeHierarchy=false
"
}

\javaSource "src";

\rules {

 Axiom_def_modulo {
    \schemaVar \term RingBuffer r;
    \schemaVar \term Heap h;
    \schemaVar \term int x;

    \assumes (RingBuffer::exactInstance(r)=TRUE ==>)
    \find(RingBuffer::modulo(h, r, x))
    \replacewith(\if(x < length(int[]::select(h,r,RingBuffer::$data)))
                 \then(x)
                 \else(x-length(int[]::select(h,r,RingBuffer::$data))))

    \heuristics ( simplify )
  };

}

\chooseContract "JML normal_behavior operation contract [id: 0 / RingBuffer::clear]";

\proof {
(keyLog "0" (keyUser "mattze" ) (keyVersion "b88cc7b75f75e95abe065dd5173efb1710172c68"))

(autoModeTime "627")

(branch "dummy ID"
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "assignment" (formula "6") (term "1"))
(builtin "One Step Simplification" (formula "6"))
(rule "eqSymm" (formula "6") (term "1,0,0,1,0,1"))
(rule "eqSymm" (formula "6") (term "1,0,0,0,0,1"))
(rule "elementOfUnion" (formula "6") (term "0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "6") (term "0,0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "6") (term "1,0,0,0,0,1,0,1"))
(rule "Class_invariant_axiom_for_RingBuffer" (formula "4") (inst "i=_var0") (inst "sk=sk_0") (ifseqformula "3"))
(branch "Use Axiom"
   (builtin "One Step Simplification" (formula "4"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "4"))
   (rule "notLeft" (formula "4"))
   (rule "translateJavaAddInt" (formula "10") (term "2,0,2,1,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_gtToGeq" (formula "5"))
   (rule "mul_literals" (formula "5") (term "1,0,0"))
   (rule "add_zero_right" (formula "5") (term "0,0"))
   (rule "inEqSimp_ltToLeq" (formula "7"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "8"))
   (rule "inEqSimp_commuteLeq" (formula "6"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
   (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "5"))
   (rule "mul_literals" (formula "5") (term "1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "7"))
   (rule "polySimp_mulComm0" (formula "7") (term "1"))
   (rule "polySimp_rightDist" (formula "7") (term "1"))
   (rule "mul_literals" (formula "7") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
   (rule "polySimp_elimOne" (formula "7") (term "1,1"))
   (rule "Axiom_def_modulo" (formula "10") (term "0,2,1,1,0") (ifseqformula "3"))
   (rule "eqSymm" (formula "10") (term "1,0"))
   (rule "polySimp_elimSub" (formula "10") (term "2,0,2,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,2,0,1,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,2,0,1,0"))
   (rule "polySimp_addComm1" (formula "10") (term "2,0,2,0,1,0"))
   (rule "polySimp_addComm0" (formula "10") (term "0,2,0,2,0,1,0"))
   (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,2,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,2,0,1,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,2,0,1,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,0,2,0,1,0"))
   (rule "polySimp_rightDist" (formula "10") (term "0,1,0,0,2,0,1,0"))
   (rule "mul_literals" (formula "10") (term "0,0,1,0,0,2,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0,0,2,0,1,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,0,1,0,0,2,0,1,0"))
   (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "9"))
   (rule "times_zero_1" (formula "8") (term "0,0"))
   (rule "add_zero_left" (formula "8") (term "0"))
   (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "5"))
   (rule "leq_literals" (formula "8") (term "0"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "true_left" (formula "8"))
   (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "7"))
   (rule "times_zero_1" (formula "6") (term "0,0"))
   (rule "add_zero_left" (formula "6") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "6"))
   (rule "mul_literals" (formula "6") (term "1"))
   (rule "nnf_imp2or" (formula "10") (term "0"))
   (rule "nnf_notAnd" (formula "10") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
   (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
   (rule "mul_literals" (formula "10") (term "1,0,0,0"))
   (rule "methodBodyExpand" (formula "13") (term "1") (newnames "heapBefore_clear,savedHeapBefore_clear"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "assignment" (formula "13") (term "1"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "assignment" (formula "13") (term "1"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "methodCallEmpty" (formula "13") (term "1"))
   (rule "tryEmpty" (formula "13") (term "1"))
   (rule "emptyModality" (formula "13") (term "1"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "eqSymm" (formula "13") (term "1,0,0,1"))
   (rule "eqSymm" (formula "13") (term "1,0,0"))
   (rule "selectOfStore" (formula "13") (term "0,0,0,0"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "selectOfStore" (formula "13") (term "0,0,0,0"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "castDel" (formula "13") (term "0,0,0,0"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "selectOfStore" (formula "13") (term "0,1,0,0,1"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "eqSymm" (formula "13") (term "1,0,0,1,0,0,1"))
   (rule "eqSymm" (formula "13") (term "0,0,0,1,0,0,1"))
   (rule "castDel" (formula "13") (term "1,0,1,0,0,1"))
   (rule "selectOfStore" (formula "13") (term "2,0,1,0,0,1"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "eqSymm" (formula "13") (term "1,0,2,0,1,0,0,1"))
   (rule "eqSymm" (formula "13") (term "0,0,2,0,1,0,0,1"))
   (rule "castDel" (formula "13") (term "1,2,0,1,0,0,1"))
   (rule "selectOfStore" (formula "13") (term "0,0,0"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "selectOfStore" (formula "13") (term "0,0,0"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "Class_invariant_axiom_for_RingBuffer" (formula "13") (term "0") (inst "i=_var1") (inst "sk=sk_1") (ifseqformula "3"))
   (branch "Use Axiom"
      (builtin "One Step Simplification" (formula "13"))
      (rule "translateJavaAddInt" (formula "13") (term "2,0,2,1,1,0,1,0"))
      (rule "inEqSimp_gtToGeq" (formula "13") (term "1,0,0,0,0"))
      (rule "times_zero_1" (formula "13") (term "1,0,0,1,0,0,0,0"))
      (rule "add_literals" (formula "13") (term "0,0,1,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "13") (term "1,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,1,0,0,0"))
      (rule "polySimp_addComm1" (formula "13") (term "0,1,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "13") (term "0,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "13") (term "0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "13") (term "1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0,0"))
      (rule "mul_literals" (formula "13") (term "1,1,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1,0"))
      (rule "mul_literals" (formula "13") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "0,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "13") (term "0,1,1,0,0,0"))
      (rule "Axiom_def_modulo" (formula "13") (term "0,2,1,1,0,1,0") (ifseqformula "3"))
      (rule "eqSymm" (formula "13") (term "1,0,1,0"))
      (rule "polySimp_elimSub" (formula "13") (term "2,0,2,0,1,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,2,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,2,0,1,0,1,0"))
      (rule "polySimp_addComm1" (formula "13") (term "2,0,2,0,1,0,1,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,2,0,1,0,1,0"))
      (rule "polySimp_addComm1" (formula "13") (term "0,0,0,0,2,0,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,2,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,2,0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,2,0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,2,0,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,2,0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "13") (term "0,1,0,0,2,0,1,0,1,0"))
      (rule "mul_literals" (formula "13") (term "0,0,1,0,0,2,0,1,0,1,0"))
      (rule "selectOfStore" (formula "13") (term "0,0,0,0,0,0,0,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "selectOfStore" (formula "13") (term "0,1,0,2,0,1,0,1,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "selectOfStore" (formula "13") (term "0,1,0,2,0,1,0,1,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "selectOfStore" (formula "13") (term "1,1,0,0,0,0,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "castDelInt" (formula "13") (term "1,1,0,0,0,0,0"))
      (rule "selectOfStore" (formula "13") (term "0,0,0,0,0,0,0,0"))
      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "11")))
      (rule "selectOfStore" (formula "13") (term "0,1,1,0,1,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "selectOfStore" (formula "13") (term "1,1,1,0,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "castDelInt" (formula "13") (term "1,1,1,0,0"))
      (rule "selectOfStore" (formula "13") (term "0,0,1,1,0,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "selectOfStore" (formula "13") (term "0,0,1,0,0,0,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "selectOfStore" (formula "13") (term "0,1,0,1,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "selectOfStore" (formula "13") (term "0,0,1,0,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "castDelInt" (formula "13") (term "0,0,1,0,0"))
      (rule "qeq_literals" (formula "13") (term "0,1,0,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "selectOfStore" (formula "13") (term "0,0,1,0,0,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "selectOfStore" (formula "13") (term "0,0,2,0,2,0,1,0,1,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "selectOfStore" (formula "13") (term "0,0,1,0,2,0,2,0,1,0,1,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "selectOfStore" (formula "13") (term "0,0,0,0,0,0,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "selectOfStore" (formula "13") (term "0,0,1,1,0,0,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "inEqSimp_homoInEq1" (formula "13") (term "1,1,0,0,0"))
      (rule "polySimp_addComm1" (formula "13") (term "0,1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,1,0,0,0"))
      (rule "mul_literals" (formula "13") (term "0,1,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,1,1,0,0,0"))
      (rule "selectOfStore" (formula "13") (term "0,1,0,1,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "selectOfStore" (formula "13") (term "0,1,1,0,0,2,0,1,0,1,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "polySimp_addComm1" (formula "13") (term "1,0,0,2,0,1,0,1,0"))
      (rule "selectOfStore" (formula "13") (term "1,1,1,0,0,1,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "castDelInt" (formula "13") (term "1,1,1,0,0,1,0"))
      (rule "add_literals" (formula "13") (term "1,1,0,0,1,0"))
      (rule "selectOfStore" (formula "13") (term "0,0,0,0,0,0,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "castDel" (formula "13") (term "0,0,0,0,0,0,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "selectOfStore" (formula "13") (term "0,0,2,0,2,0,1,0,1,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "selectOfStore" (formula "13") (term "0,0,1,0,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "inEqSimp_subsumption1" (formula "13") (term "1,0,0") (ifseqformula "5"))
      (rule "leq_literals" (formula "13") (term "0,1,0,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "selectOfStore" (formula "13") (term "1,0,1,0,1,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "selectOfStore" (formula "13") (term "0,0,1,0,2,0,2,0,1,0,1,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "polySimp_addComm0" (formula "13") (term "0,2,0,2,0,1,0,1,0"))
      (rule "selectOfStore" (formula "13") (term "0,1,1,1,1,0,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "selectOfStore" (formula "13") (term "0,0,1,0,0"))
      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "6")))
      (rule "selectOfStore" (formula "13") (term "0,0,0,0,0"))
      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "5")))
      (rule "selectOfStore" (formula "13") (term "1,0,1,0,1,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "selectOfStore" (formula "13") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "selectOfStore" (formula "13") (term "0,1,0,1,0,0,2,0,1,0,1,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "selectOfStore" (formula "13") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "7")))
      (rule "selectOfStore" (formula "13") (term "0,1,1,0,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "castDel" (formula "13") (term "0,1,1,0,0"))
      (rule "selectOfStore" (formula "13") (term "0,1,1,0,0,2,0,1,0,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "selectOfStore" (formula "13") (term "0,1,1,0,0,2,0,1,0,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "nnf_imp2or" (formula "13") (term "0,0"))
      (rule "nnf_notAnd" (formula "13") (term "0,0,0"))
      (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0"))
      (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,0"))
      (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0"))
      (rule "mul_literals" (formula "13") (term "1,0,0,0,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "allRight" (formula "13") (inst "sk=f_0"))
      (rule "allRight" (formula "13") (inst "sk=o_0"))
      (rule "orRight" (formula "13"))
      (rule "orRight" (formula "13"))
      (rule "orRight" (formula "13"))
      (rule "replace_known_right" (formula "16") (term "0,2,0") (ifseqformula "14"))
      (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "13")))
      (rule "closeTrue" (formula "16"))
   )
   (branch "Show Axiom Satisfiability"
      (builtin "One Step Simplification" (formula "13"))
      (rule "closeTrue" (formula "13"))
   )
)
(branch "Show Axiom Satisfiability"
   (builtin "One Step Simplification" (formula "5"))
   (rule "closeTrue" (formula "5"))
)
)

}
