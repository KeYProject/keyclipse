\javaSource "src";

\functions {
    Object elementAt(Heap, Object, int);    //model field
    int size(Heap, Object);                 //model field
    LocSet elementsLocs(Heap, Object);      //data group
    
    //these would be automatically created on demand later, but we already need them here
    \unique Field MyArrayList::array;    
    \unique Field MyArrayList::size;
    
}


\contracts {
    contract_for_MyArrayList_enlarge {
        \programVariables {
            MyArrayList self; 
        }

        true
        ->
	\box {
	    #catchAll(Exception exc) {
	        self.enlarge()@MyArrayList;
	    }
        }
        \endmodality 
        (exc = null 
         & \forall int i; (0 <= i & i < self.size 
              -> self.array[i] = (Object)select(heap@pre, (Object[])select(heap@pre, self, MyArrayList::array), arr(i)))
         & self.array.length 
              > (jint)select(heap@pre, (Object[])select(heap@pre, self, MyArrayList::array), Array::length)
        ) 
        
        \modifies {heap}
    };


    contract_for_MyArrayList_add {
        \programVariables {
            MyArrayList self; 
            Object element;
        }
        
	true
        ->
        
        \box {
	    #catchAll(Exception exc) {
	        self.add(element)@MyArrayList;
	    }
        }
        \endmodality 
        (exc = null 
         & \forall int i; (0 <= i & i < size(heap@pre, self) -> elementAt(heap, self, i) = elementAt(heap@pre, self, i))
         & elementAt(heap, self, size(heap@pre, self)) = element        
         & size(heap, self) = size(heap@pre, self)  + 1 
        )
        
        \modifies {heap}     //elementsLocs(heap, self)}
    };
}


\invariants(MyArrayList self) {
    invariant_for_MyArrayList {
        0 <= self.size & self.size <= self.array.length
        & java.lang.Object[]::exactInstance(self.array) = TRUE
    };
}



\rules {
    represents_elementAt_MyArrayList {
        \schemaVar \term Heap h;
        \schemaVar \term MyArrayList o;
        \schemaVar \term int i;
        
        \find(elementAt(h, o, i))
        \replacewith((Object)select(h, (Object[])select(h, o, MyArrayList::array), arr(i)))
	\heuristics(simplify)        
    };

    represents_size_MyArrayList {
        \schemaVar \term Heap h;
        \schemaVar \term MyArrayList o;
        
        \find(size(h, o))
        \replacewith((jint)select(h, o, MyArrayList::size))
        \heuristics(simplify)
    };
    
    represents_elementsLocs_MyArrayList {
        \schemaVar \term Heap h;
        \schemaVar \term MyArrayList o;
        
        \find(elementsLocs(h, o))
        \replacewith(union(allFields(o), allFields((Object[])select(h, o, MyArrayList::array))))
	\heuristics(simplify)        
    };
}


\chooseContract;