<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <methodCall name="self.array(w,array);" pathCondition="true" pathConditionChanged="false">
      <statement name="w.value=1;" pathCondition="true" pathConditionChanged="false">
         <statement name="array[0].value=2;" pathCondition="true" pathConditionChanged="false">
            <statement name="array[1].value=3;" pathCondition="true" pathConditionChanged="false">
               <statement name="return w.value+array[0].value+array[1].value;" pathCondition="true" pathConditionChanged="false">
                  <methodReturn name="&lt;return of self.array(w,array);&gt;" pathCondition="true" pathConditionChanged="false" nameIncludingReturnValue="&lt;return 
	Z(9(#)) {and(equals(AliasTest.IntWrapper::select(heap,array,arr(Z(0(#)))),w),equals(AliasTest.IntWrapper::select(heap,array,arr(Z(1(#)))),AliasTest.IntWrapper::select(heap,array,arr(Z(0(#))))))}, 
	Z(7(#)) {or(and(not(equals(AliasTest.IntWrapper::select(heap,array,arr(Z(0(#)))),w)),equals(AliasTest.IntWrapper::select(heap,array,arr(Z(1(#)))),AliasTest.IntWrapper::select(heap,array,arr(Z(0(#)))))),and(equals(AliasTest.IntWrapper::select(heap,array,arr(Z(0(#)))),w),not(equals(AliasTest.IntWrapper::select(heap,array,arr(Z(1(#)))),AliasTest.IntWrapper::select(heap,array,arr(Z(0(#))))))))}, 
	Z(8(#)) {and(and(not(equals(AliasTest.IntWrapper::select(heap,array,arr(Z(0(#)))),w)),equals(AliasTest.IntWrapper::select(heap,array,arr(Z(1(#)))),w)),not(equals(AliasTest.IntWrapper::select(heap,array,arr(Z(1(#)))),AliasTest.IntWrapper::select(heap,array,arr(Z(0(#)))))))}, 
	Z(6(#)) {and(and(not(equals(AliasTest.IntWrapper::select(heap,array,arr(Z(0(#)))),w)),not(equals(AliasTest.IntWrapper::select(heap,array,arr(Z(1(#)))),w))),not(equals(AliasTest.IntWrapper::select(heap,array,arr(Z(1(#)))),AliasTest.IntWrapper::select(heap,array,arr(Z(0(#)))))))}
as result of self.array(w,array);&gt;" isReturnValueComputed="true">
                     <methodReturnValue name="Z(9(#)) {and(equals(AliasTest.IntWrapper::select(heap,array,arr(Z(0(#)))),w),equals(AliasTest.IntWrapper::select(heap,array,arr(Z(1(#)))),AliasTest.IntWrapper::select(heap,array,arr(Z(0(#))))))}" returnValueString="Z(9(#))" hasCondition="true" conditionString="and(equals(AliasTest.IntWrapper::select(heap,array,arr(Z(0(#)))),w),equals(AliasTest.IntWrapper::select(heap,array,arr(Z(1(#)))),AliasTest.IntWrapper::select(heap,array,arr(Z(0(#))))))">
                     </methodReturnValue>
                     <methodReturnValue name="Z(7(#)) {or(and(not(equals(AliasTest.IntWrapper::select(heap,array,arr(Z(0(#)))),w)),equals(AliasTest.IntWrapper::select(heap,array,arr(Z(1(#)))),AliasTest.IntWrapper::select(heap,array,arr(Z(0(#)))))),and(equals(AliasTest.IntWrapper::select(heap,array,arr(Z(0(#)))),w),not(equals(AliasTest.IntWrapper::select(heap,array,arr(Z(1(#)))),AliasTest.IntWrapper::select(heap,array,arr(Z(0(#))))))))}" returnValueString="Z(7(#))" hasCondition="true" conditionString="or(and(not(equals(AliasTest.IntWrapper::select(heap,array,arr(Z(0(#)))),w)),equals(AliasTest.IntWrapper::select(heap,array,arr(Z(1(#)))),AliasTest.IntWrapper::select(heap,array,arr(Z(0(#)))))),and(equals(AliasTest.IntWrapper::select(heap,array,arr(Z(0(#)))),w),not(equals(AliasTest.IntWrapper::select(heap,array,arr(Z(1(#)))),AliasTest.IntWrapper::select(heap,array,arr(Z(0(#))))))))">
                     </methodReturnValue>
                     <methodReturnValue name="Z(8(#)) {and(and(not(equals(AliasTest.IntWrapper::select(heap,array,arr(Z(0(#)))),w)),equals(AliasTest.IntWrapper::select(heap,array,arr(Z(1(#)))),w)),not(equals(AliasTest.IntWrapper::select(heap,array,arr(Z(1(#)))),AliasTest.IntWrapper::select(heap,array,arr(Z(0(#)))))))}" returnValueString="Z(8(#))" hasCondition="true" conditionString="and(and(not(equals(AliasTest.IntWrapper::select(heap,array,arr(Z(0(#)))),w)),equals(AliasTest.IntWrapper::select(heap,array,arr(Z(1(#)))),w)),not(equals(AliasTest.IntWrapper::select(heap,array,arr(Z(1(#)))),AliasTest.IntWrapper::select(heap,array,arr(Z(0(#)))))))">
                     </methodReturnValue>
                     <methodReturnValue name="Z(6(#)) {and(and(not(equals(AliasTest.IntWrapper::select(heap,array,arr(Z(0(#)))),w)),not(equals(AliasTest.IntWrapper::select(heap,array,arr(Z(1(#)))),w))),not(equals(AliasTest.IntWrapper::select(heap,array,arr(Z(1(#)))),AliasTest.IntWrapper::select(heap,array,arr(Z(0(#)))))))}" returnValueString="Z(6(#))" hasCondition="true" conditionString="and(and(not(equals(AliasTest.IntWrapper::select(heap,array,arr(Z(0(#)))),w)),not(equals(AliasTest.IntWrapper::select(heap,array,arr(Z(1(#)))),w))),not(equals(AliasTest.IntWrapper::select(heap,array,arr(Z(1(#)))),AliasTest.IntWrapper::select(heap,array,arr(Z(0(#)))))))">
                     </methodReturnValue>
                     <termination name="&lt;end&gt;" pathCondition="true" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                     </termination>
                  </methodReturn>
               </statement>
            </statement>
         </statement>
      </statement>
   </methodCall>
</start>
