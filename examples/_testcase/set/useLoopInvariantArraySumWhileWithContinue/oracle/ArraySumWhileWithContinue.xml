<?xml version="1.0" encoding="UTF-8"?>
<startNode name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <methodCall name="ArraySumWhileWithContinue.sum(array);" pathCondition="true" pathConditionChanged="false">
      <statement name="int result = 0;" pathCondition="true" pathConditionChanged="false">
         <callStackEntry path="/0"/>
         <statement name="int i = 0;" pathCondition="true" pathConditionChanged="false">
            <callStackEntry path="/0"/>
            <useLoopInvariant name="invariants: {heap=and(geq(i,Z(0(#))),and(leq(i,length(array)),equals(result_1,bsum{j:int}(Z(0(#)),i,int::select(heap,array,arr(j)))))), savedHeap=null};
modifies: {heap=false, savedHeap=null};
variant: javaSubInt(length(array),i)" pathCondition="true" pathConditionChanged="false" initiallyValid="true">
               <callStackEntry path="/0"/>
               <branchCondition name="!(    i_0 &gt;= 1
    &amp; array.length &gt;= 0
    &amp; array.length &lt;= -1 + i_0
  | i_0 &lt;= -1
  &amp; array.length &gt;= 0
  &amp; array.length &gt;= i_0
  | !(     i_0 &gt;= 0
         &amp; array.length &gt;= 0
         &amp; array.length &gt;= i_0
      -&gt; bsum{int j;}(0, i_0, array[j]) = result_1_0))" pathCondition="!(  array.length &gt;= 0
  &amp; (  i_0 &gt;= 1 &amp; array.length &lt;= -1 + i_0
     | i_0 &lt;= -1
     &amp; array.length &gt;= i_0
     | !(   i_0 &gt;= 0 &amp; array.length &gt;= i_0
         -&gt; bsum{int j;}(0, i_0, array[j]) = result_1_0)))" pathConditionChanged="true" branchCondition="!(    i_0 &gt;= 1
    &amp; array.length &gt;= 0
    &amp; array.length &lt;= -1 + i_0
  | i_0 &lt;= -1
  &amp; array.length &gt;= 0
  &amp; array.length &gt;= i_0
  | !(     i_0 &gt;= 0
         &amp; array.length &gt;= 0
         &amp; array.length &gt;= i_0
      -&gt; bsum{int j;}(0, i_0, array[j]) = result_1_0))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Body Preserves Invariant">
                  <callStackEntry path="/0"/>
                  <branchCondition name="!array = null" pathCondition="   array.length &gt;= 0
-&gt;   !(  i_0 &gt;= 1 &amp; array.length &lt;= -1 + i_0
       | i_0 &lt;= -1
       &amp; array.length &gt;= i_0
       | !(   i_0 &gt;= 0 &amp; array.length &gt;= i_0
           -&gt;   bsum{int j;}(0, i_0, array[j])
              = result_1_0))
   &amp; !array = null" pathConditionChanged="true" branchCondition="!array = null" mergedBranchCondition="false" isBranchConditionComputed="true">
                     <statement name="result_1+=array[i];" pathCondition="   array.length &gt;= 0
-&gt;   !(  i_0 &gt;= 1 &amp; array.length &lt;= -1 + i_0
       | i_0 &lt;= -1
       &amp; array.length &gt;= i_0
       | !(   i_0 &gt;= 0 &amp; array.length &gt;= i_0
           -&gt;   bsum{int j;}(0, i_0, array[j])
              = result_1_0))
   &amp; !array = null" pathConditionChanged="false">
                        <callStackEntry path="/0"/>
                        <branchNode name="if (i&gt;=0) { {     cont_1=true;break inner_label;   } }" pathCondition="   array.length &gt;= 0
-&gt;   !(  i_0 &gt;= 1 &amp; array.length &lt;= -1 + i_0
       | i_0 &lt;= -1
       &amp; array.length &gt;= i_0
       | !(   i_0 &gt;= 0 &amp; array.length &gt;= i_0
           -&gt;   bsum{int j;}(0, i_0, array[j])
              = result_1_0))
   &amp; !array = null" pathConditionChanged="false">
                           <callStackEntry path="/0"/>
                           <statement name="break inner_label;" pathCondition="   array.length &gt;= 0
-&gt;   !(  i_0 &gt;= 1 &amp; array.length &lt;= -1 + i_0
       | i_0 &lt;= -1
       &amp; array.length &gt;= i_0
       | !(   i_0 &gt;= 0 &amp; array.length &gt;= i_0
           -&gt;   bsum{int j;}(0, i_0, array[j])
              = result_1_0))
   &amp; !array = null" pathConditionChanged="false">
                              <callStackEntry path="/0"/>
                              <termination name="&lt;loop body end&gt;" pathCondition="   array.length &gt;= 0
-&gt;   !(  i_0 &gt;= 1 &amp; array.length &lt;= -1 + i_0
       | i_0 &lt;= -1
       &amp; array.length &gt;= i_0
       | !(   i_0 &gt;= 0 &amp; array.length &gt;= i_0
           -&gt;   bsum{int j;}(0, i_0, array[j])
              = result_1_0))
   &amp; !array = null" pathConditionChanged="false" terminationKind="LOOP_BODY">
                              </termination>
                           </statement>
                        </branchNode>
                     </statement>
                  </branchCondition>
                  <branchCondition name="array = null" pathCondition="   array.length &gt;= 0
-&gt;   !(  i_0 &gt;= 1 &amp; array.length &lt;= -1 + i_0
       | i_0 &lt;= -1
       &amp; array.length &gt;= i_0
       | !(   i_0 &gt;= 0 &amp; array.length &gt;= i_0
           -&gt;   bsum{int j;}(0, i_0, array[j])
              = result_1_0))
   &amp; array = null" pathConditionChanged="true" branchCondition="array = null" mergedBranchCondition="false" isBranchConditionComputed="true">
                     <termination name="&lt;loop body end&gt;" pathCondition="   array.length &gt;= 0
-&gt;   !(  i_0 &gt;= 1 &amp; array.length &lt;= -1 + i_0
       | i_0 &lt;= -1
       &amp; array.length &gt;= i_0
       | !(   i_0 &gt;= 0 &amp; array.length &gt;= i_0
           -&gt;   bsum{int j;}(0, i_0, array[j])
              = result_1_0))
   &amp; array = null" pathConditionChanged="false" terminationKind="LOOP_BODY">
                     </termination>
                  </branchCondition>
               </branchCondition>
               <branchCondition name="!(    i_0 &gt;= 1
    &amp; array.length &gt;= 0
    &amp; array.length &lt;= -1 + i_0
  | i_0 &lt;= -1
  &amp; array.length &gt;= 0
  &amp; array.length &gt;= i_0
  | !(     i_0 &gt;= 0
         &amp; array.length &gt;= 0
         &amp; array.length &gt;= i_0
      -&gt; bsum{int j;}(0, i_0, array[j]) = result_1_0))" pathCondition="!(  array.length &gt;= 0
  &amp; (  i_0 &gt;= 1 &amp; array.length &lt;= -1 + i_0
     | i_0 &lt;= -1
     &amp; array.length &gt;= i_0
     | !(   i_0 &gt;= 0 &amp; array.length &gt;= i_0
         -&gt; bsum{int j;}(0, i_0, array[j]) = result_1_0)))" pathConditionChanged="true" branchCondition="!(    i_0 &gt;= 1
    &amp; array.length &gt;= 0
    &amp; array.length &lt;= -1 + i_0
  | i_0 &lt;= -1
  &amp; array.length &gt;= 0
  &amp; array.length &gt;= i_0
  | !(     i_0 &gt;= 0
         &amp; array.length &gt;= 0
         &amp; array.length &gt;= i_0
      -&gt; bsum{int j;}(0, i_0, array[j]) = result_1_0))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Use Case">
                  <callStackEntry path="/0"/>
                  <statement name="return result_1;" pathCondition="!(  array.length &gt;= 0
  &amp; (  i_0 &gt;= 1 &amp; array.length &lt;= -1 + i_0
     | i_0 &lt;= -1
     &amp; array.length &gt;= i_0
     | !(   i_0 &gt;= 0 &amp; array.length &gt;= i_0
         -&gt; bsum{int j;}(0, i_0, array[j]) = result_1_0)))" pathConditionChanged="false">
                     <callStackEntry path="/0"/>
                     <methodReturn name="&lt;return of ArraySumWhileWithContinue.sum(array);&gt;" pathCondition="!(  array.length &gt;= 0
  &amp; (  i_0 &gt;= 1 &amp; array.length &lt;= -1 + i_0
     | i_0 &lt;= -1
     &amp; array.length &gt;= i_0
     | !(   i_0 &gt;= 0 &amp; array.length &gt;= i_0
         -&gt; bsum{int j;}(0, i_0, array[j]) = result_1_0)))" pathConditionChanged="false" isReturnValueComputed="false">
                        <callStackEntry path="/0"/>
                        <termination name="&lt;end&gt;" pathCondition="!(  array.length &gt;= 0
  &amp; (  i_0 &gt;= 1 &amp; array.length &lt;= -1 + i_0
     | i_0 &lt;= -1
     &amp; array.length &gt;= i_0
     | !(   i_0 &gt;= 0 &amp; array.length &gt;= i_0
         -&gt; bsum{int j;}(0, i_0, array[j]) = result_1_0)))" pathConditionChanged="false" terminationKind="NORMAL">
                        </termination>
                     </methodReturn>
                  </statement>
               </branchCondition>
            </useLoopInvariant>
         </statement>
      </statement>
   </methodCall>
</startNode>
