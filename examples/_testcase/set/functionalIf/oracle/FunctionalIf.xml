<?xml version="1.0" encoding="UTF-8"?>
<startNode name="&lt;start&gt;">
   <methodCall name="self.min(_i,_j);">
      <statement name="int result;">
         <branchNode name="if (invert(_i)&lt;invert(_j)) {   result_1=_i; }else  {   result_1=_j; }">
            <methodCall name="self.invert(a);">
               <statement name="return a*-1;">
                  <methodReturn name="&lt;return of self.invert(a);&gt;" nameIncludingReturnValue="&lt;return &apos;i * -1&apos; as result of self.invert(a);&gt;">
                     <methodCall name="self.invert(a_1);">
                        <statement name="return a_1*-1;">
                           <methodReturn name="&lt;return of self.invert(a_1);&gt;" nameIncludingReturnValue="&lt;return &apos;j * -1&apos; as result of self.invert(a_1);&gt;">
                              <branchCondition name="j &lt;= -1 + i TRUE">
                                 <statement name="result_1=_i;">
                                    <statement name="return result_1;">
                                       <methodReturn name="&lt;return of self.min(_i,_j);&gt;" nameIncludingReturnValue="&lt;return &apos;i&apos; as result of self.min(_i,_j);&gt;">
                                          <termination name="&lt;end&gt;" exceptionalTermination="false">
                                          </termination>
                                       </methodReturn>
                                    </statement>
                                 </statement>
                              </branchCondition>
                              <branchCondition name="j &lt;= -1 + i FALSE">
                                 <statement name="result_1=_j;">
                                    <statement name="return result_1;">
                                       <methodReturn name="&lt;return of self.min(_i,_j);&gt;" nameIncludingReturnValue="&lt;return &apos;j&apos; as result of self.min(_i,_j);&gt;">
                                          <termination name="&lt;end&gt;" exceptionalTermination="false">
                                          </termination>
                                       </methodReturn>
                                    </statement>
                                 </statement>
                              </branchCondition>
                           </methodReturn>
                        </statement>
                     </methodCall>
                  </methodReturn>
               </statement>
            </methodCall>
         </branchNode>
      </statement>
   </methodCall>
</startNode>
