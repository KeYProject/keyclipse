<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <methodCall name="WhileWithMethodCallAsCondition.size(array);" pathCondition="true" pathConditionChanged="false">
      <statement name="int result = 0;" pathCondition="true" pathConditionChanged="false">
         <callStackEntry path="/0"/>
         <statement name="int i = 0;" pathCondition="true" pathConditionChanged="false">
            <callStackEntry path="/0"/>
            <loopInvariant name="invariant: i &gt;= 0 &amp; (i &lt;= array.length &amp; result_1 = i);
variant: javaSubInt(array.length, i)
mod: false" pathCondition="true" pathConditionChanged="false" initiallyValid="true">
               <callStackEntry path="/0"/>
               <branchCondition name="update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\[{method-frame(source=size(int[])@WhileWithMethodCallAsCondition): {
    b_3=goOnNice(array,i);
  }
}\] (and(equals(b_3,TRUE),and(geq(i,Z(0(#))),and(geq(length(array),i),equals(result_1,i))))))" pathCondition="update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\[{method-frame(source=size(int[])@WhileWithMethodCallAsCondition): {
    b_3=goOnNice(array,i);
  }
}\] (and(equals(b_3,TRUE),and(geq(i,Z(0(#))),and(geq(length(array),i),equals(result_1,i))))))" pathConditionChanged="true" branchCondition="update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\[{method-frame(source=size(int[])@WhileWithMethodCallAsCondition): {
    b_3=goOnNice(array,i);
  }
}\] (and(equals(b_3,TRUE),and(geq(i,Z(0(#))),and(geq(length(array),i),equals(result_1,i))))))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Body Preserves Invariant">
                  <callStackEntry path="/0"/>
                  <branchCondition name="not(equals(array,null))" pathCondition="not(or(not(or(equals(array,null),update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\[{method-frame(source=size(int[])@WhileWithMethodCallAsCondition): {
    b_3=goOnNice(array,i);
  }
}\] (and(equals(b_3,TRUE),and(geq(i,Z(0(#))),and(geq(length(array),i),equals(result_1,i)))))))),equals(array,null)))" pathConditionChanged="true" branchCondition="not(equals(array,null))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Post (goOnNice)">
                     <operationContract name="result_4 = goOnNice(array, i) catch(exc_6)
pre: i &lt; 0 | !array = null &amp; i &gt;= 0
post: (   i &lt; 0
   -&gt;   !exc_6 = null
      &amp; java.lang.Exception::instance(exc_6) = TRUE)
&amp; (   !array = null &amp; i &gt;= 0
   -&gt;     result_4
        = \if (i &lt; array.length)
              \then (TRUE)
              \else (FALSE)
      &amp; exc_6 = null)
mod: \if (true)
         \then (     \if (true)
                         \then (     \if (true)
                                         \then (     \if (true)
                                                         \then (     \if (true)
                                                                         \then (allLocs)
                                                                         \else (allLocs)
                                                                \cap \if (  !  array
                                                                             = null
                                                                          &amp;    i
                                                                            &gt;= 0)
                                                                         \then (allLocs)
                                                                         \else (allLocs))
                                                         \else (allLocs)
                                                \cap \if (  !  array
                                                             = null
                                                          &amp;    i
                                                            &gt;= 0)
                                                         \then (allLocs)
                                                         \else (allLocs))
                                         \else (allLocs)
                                \cap \if (  !  array
                                             = null
                                          &amp; i &gt;= 0)
                                         \then (allLocs)
                                         \else (allLocs))
                         \else (allLocs)
                \cap \if (!array = null &amp; i &gt;= 0)
                         \then (allLocs)
                         \else (allLocs))
         \else (allLocs)
\cap \if (!array = null &amp; i &gt;= 0)
         \then (allLocs)
         \else (allLocs)
termination: diamond" pathCondition="not(or(not(or(equals(array,null),update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\[{method-frame(source=size(int[])@WhileWithMethodCallAsCondition): {
    b_3=goOnNice(array,i);
  }
}\] (and(equals(b_3,TRUE),and(geq(i,Z(0(#))),and(geq(length(array),i),equals(result_1,i)))))))),equals(array,null)))" pathConditionChanged="false" preconditionComplied="false" hasNotNullCheck="false" notNullCheckComplied="false">
                        <callStackEntry path="/0"/>
                        <branchCondition name="not(equals(array,null))" pathCondition="not(or(not(or(equals(array,null),update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\[{method-frame(source=size(int[])@WhileWithMethodCallAsCondition): {
    b_3=goOnNice(array,i);
  }
}\] (and(equals(b_3,TRUE),and(geq(i,Z(0(#))),and(geq(length(array),i),equals(result_1,i)))))))),equals(array,null)))" pathConditionChanged="true" branchCondition="not(equals(array,null))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Post (goOnNice)">
                           <callStackEntry path="/0"/>
                           <branchCondition name="equals(result_4,TRUE)" pathCondition="not(or(or(not(or(equals(array,null),equals(result_4,TRUE))),not(imp(equals(result_4,TRUE),or(equals(array,null),update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\[{method-frame(source=size(int[])@WhileWithMethodCallAsCondition): {
    b_3=goOnNice(array,i);
  }
}\] (and(equals(b_3,TRUE),and(geq(i,Z(0(#))),and(geq(length(array),i),equals(result_1,i)))))))))),equals(array,null)))" pathConditionChanged="true" branchCondition="equals(result_4,TRUE)" mergedBranchCondition="false" isBranchConditionComputed="true">
                              <callStackEntry path="/0"/>
                              <statement name="result_1++;" pathCondition="not(or(or(not(or(equals(array,null),equals(result_4,TRUE))),not(imp(equals(result_4,TRUE),or(equals(array,null),update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\[{method-frame(source=size(int[])@WhileWithMethodCallAsCondition): {
    b_3=goOnNice(array,i);
  }
}\] (and(equals(b_3,TRUE),and(geq(i,Z(0(#))),and(geq(length(array),i),equals(result_1,i)))))))))),equals(array,null)))" pathConditionChanged="false">
                                 <callStackEntry path="/0"/>
                                 <statement name="i++;" pathCondition="not(or(or(not(or(equals(array,null),equals(result_4,TRUE))),not(imp(equals(result_4,TRUE),or(equals(array,null),update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\[{method-frame(source=size(int[])@WhileWithMethodCallAsCondition): {
    b_3=goOnNice(array,i);
  }
}\] (and(equals(b_3,TRUE),and(geq(i,Z(0(#))),and(geq(length(array),i),equals(result_1,i)))))))))),equals(array,null)))" pathConditionChanged="false">
                                    <callStackEntry path="/0"/>
                                    <termination name="&lt;loop body end&gt;" pathCondition="not(or(or(not(or(equals(array,null),equals(result_4,TRUE))),not(imp(equals(result_4,TRUE),or(equals(array,null),update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\[{method-frame(source=size(int[])@WhileWithMethodCallAsCondition): {
    b_3=goOnNice(array,i);
  }
}\] (and(equals(b_3,TRUE),and(geq(i,Z(0(#))),and(geq(length(array),i),equals(result_1,i)))))))))),equals(array,null)))" pathConditionChanged="false" terminationKind="LOOP_BODY" branchVerified="false">
                                    </termination>
                                 </statement>
                              </statement>
                           </branchCondition>
                           <branchCondition name="not(equals(result_4,TRUE))" pathCondition="not(or(or(not(or(or(equals(array,null),equals(result_4,TRUE)),update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\[{method-frame(source=size(int[])@WhileWithMethodCallAsCondition): {
    b_3=goOnNice(array,i);
  }
}\] (and(equals(b_3,TRUE),and(geq(i,Z(0(#))),and(geq(length(array),i),equals(result_1,i)))))))),not(imp(equals(result_4,TRUE),equals(array,null)))),equals(array,null)))" pathConditionChanged="true" branchCondition="not(equals(result_4,TRUE))" mergedBranchCondition="false" isBranchConditionComputed="true">
                              <callStackEntry path="/0"/>
                              <termination name="&lt;loop body end&gt;" pathCondition="not(or(or(not(or(or(equals(array,null),equals(result_4,TRUE)),update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\[{method-frame(source=size(int[])@WhileWithMethodCallAsCondition): {
    b_3=goOnNice(array,i);
  }
}\] (and(equals(b_3,TRUE),and(geq(i,Z(0(#))),and(geq(length(array),i),equals(result_1,i)))))))),not(imp(equals(result_4,TRUE),equals(array,null)))),equals(array,null)))" pathConditionChanged="false" terminationKind="LOOP_BODY" branchVerified="false">
                              </termination>
                           </branchCondition>
                        </branchCondition>
                        <branchCondition name="false" pathCondition="false" pathConditionChanged="true" branchCondition="false" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Exceptional Post (goOnNice)">
                           <callStackEntry path="/0"/>
                           <termination name="&lt;uncaught java.lang.Throwable&gt;" pathCondition="false" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="true">
                           </termination>
                        </branchCondition>
                     </operationContract>
                  </branchCondition>
                  <branchCondition name="false" pathCondition="false" pathConditionChanged="true" branchCondition="false" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Exceptional Post (goOnNice)">
                     <operationContract name="result_5 = goOnNice(array, i) catch(exc_7)
pre: i &lt; 0 | !array = null &amp; i &gt;= 0
post: (   i &lt; 0
   -&gt;   !exc_7 = null
      &amp; java.lang.Exception::instance(exc_7) = TRUE)
&amp; (   !array = null &amp; i &gt;= 0
   -&gt;     result_5
        = \if (i &lt; array.length)
              \then (TRUE)
              \else (FALSE)
      &amp; exc_7 = null)
mod: \if (true)
         \then (     \if (true)
                         \then (     \if (true)
                                         \then (     \if (true)
                                                         \then (     \if (true)
                                                                         \then (allLocs)
                                                                         \else (allLocs)
                                                                \cap \if (  !  array
                                                                             = null
                                                                          &amp;    i
                                                                            &gt;= 0)
                                                                         \then (allLocs)
                                                                         \else (allLocs))
                                                         \else (allLocs)
                                                \cap \if (  !  array
                                                             = null
                                                          &amp;    i
                                                            &gt;= 0)
                                                         \then (allLocs)
                                                         \else (allLocs))
                                         \else (allLocs)
                                \cap \if (  !  array
                                             = null
                                          &amp; i &gt;= 0)
                                         \then (allLocs)
                                         \else (allLocs))
                         \else (allLocs)
                \cap \if (!array = null &amp; i &gt;= 0)
                         \then (allLocs)
                         \else (allLocs))
         \else (allLocs)
\cap \if (!array = null &amp; i &gt;= 0)
         \then (allLocs)
         \else (allLocs)
termination: diamond" pathCondition="false" pathConditionChanged="false" preconditionComplied="false" hasNotNullCheck="false" notNullCheckComplied="false">
                        <callStackEntry path="/0"/>
                        <branchCondition name="false" pathCondition="false" pathConditionChanged="true" branchCondition="false" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Post (goOnNice)">
                           <callStackEntry path="/0"/>
                           <branchCondition name="equals(result_5,TRUE)" pathCondition="false" pathConditionChanged="true" branchCondition="equals(result_5,TRUE)" mergedBranchCondition="false" isBranchConditionComputed="true">
                              <callStackEntry path="/0"/>
                              <statement name="result_1++;" pathCondition="false" pathConditionChanged="false">
                                 <callStackEntry path="/0"/>
                                 <statement name="i++;" pathCondition="false" pathConditionChanged="false">
                                    <callStackEntry path="/0"/>
                                    <termination name="&lt;loop body end&gt;" pathCondition="false" pathConditionChanged="false" terminationKind="LOOP_BODY" branchVerified="false">
                                    </termination>
                                 </statement>
                              </statement>
                           </branchCondition>
                           <branchCondition name="not(equals(result_5,TRUE))" pathCondition="false" pathConditionChanged="true" branchCondition="not(equals(result_5,TRUE))" mergedBranchCondition="false" isBranchConditionComputed="true">
                              <callStackEntry path="/0"/>
                              <termination name="&lt;loop body end&gt;" pathCondition="false" pathConditionChanged="false" terminationKind="LOOP_BODY" branchVerified="false">
                              </termination>
                           </branchCondition>
                        </branchCondition>
                        <branchCondition name="false" pathCondition="false" pathConditionChanged="true" branchCondition="false" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Exceptional Post (goOnNice)">
                           <callStackEntry path="/0"/>
                           <termination name="&lt;uncaught java.lang.Throwable&gt;" pathCondition="false" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="true">
                           </termination>
                        </branchCondition>
                     </operationContract>
                  </branchCondition>
               </branchCondition>
               <branchCondition name="update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\&lt;{method-frame(source=size(int[])@WhileWithMethodCallAsCondition): {
    b_3=goOnNice(array,i);
  }
}\&gt; (and(not(equals(b_3,TRUE)),and(geq(i,Z(0(#))),and(geq(length(array),i),equals(result_1,i))))))" pathCondition="update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\&lt;{method-frame(source=size(int[])@WhileWithMethodCallAsCondition): {
    b_3=goOnNice(array,i);
  }
}\&gt; (and(not(equals(b_3,TRUE)),and(geq(i,Z(0(#))),and(geq(length(array),i),equals(result_1,i))))))" pathConditionChanged="true" branchCondition="update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\&lt;{method-frame(source=size(int[])@WhileWithMethodCallAsCondition): {
    b_3=goOnNice(array,i);
  }
}\&gt; (and(not(equals(b_3,TRUE)),and(geq(i,Z(0(#))),and(geq(length(array),i),equals(result_1,i))))))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Use Case">
                  <callStackEntry path="/0"/>
                  <statement name="return result_1;" pathCondition="update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\&lt;{method-frame(source=size(int[])@WhileWithMethodCallAsCondition): {
    b_3=goOnNice(array,i);
  }
}\&gt; (and(not(equals(b_3,TRUE)),and(geq(i,Z(0(#))),and(geq(length(array),i),equals(result_1,i))))))" pathConditionChanged="false">
                     <callStackEntry path="/0"/>
                     <branchCondition name="not(equals(array,null))" pathCondition="not(or(not(or(equals(array,null),update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\&lt;{method-frame(source=size(int[])@WhileWithMethodCallAsCondition): {
    b_3=goOnNice(array,i);
  }
}\&gt; (and(not(equals(b_3,TRUE)),and(geq(i,Z(0(#))),and(geq(length(array),i),equals(result_1,i)))))))),equals(array,null)))" pathConditionChanged="true" branchCondition="not(equals(array,null))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Post (goOnNice)">
                        <methodReturn name="&lt;return of WhileWithMethodCallAsCondition.size(array);&gt;" pathCondition="not(or(not(or(equals(array,null),update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\&lt;{method-frame(source=size(int[])@WhileWithMethodCallAsCondition): {
    b_3=goOnNice(array,i);
  }
}\&gt; (and(not(equals(b_3,TRUE)),and(geq(i,Z(0(#))),and(geq(length(array),i),equals(result_1,i)))))))),equals(array,null)))" pathConditionChanged="false" isReturnValueComputed="false">
                           <callStackEntry path="/0"/>
                           <termination name="&lt;end&gt;" pathCondition="not(or(not(or(equals(array,null),update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\&lt;{method-frame(source=size(int[])@WhileWithMethodCallAsCondition): {
    b_3=goOnNice(array,i);
  }
}\&gt; (and(not(equals(b_3,TRUE)),and(geq(i,Z(0(#))),and(geq(length(array),i),equals(result_1,i)))))))),equals(array,null)))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                           </termination>
                        </methodReturn>
                     </branchCondition>
                  </statement>
               </branchCondition>
            </loopInvariant>
         </statement>
      </statement>
   </methodCall>
</start>
