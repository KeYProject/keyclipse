<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <methodCall name="self.compute(current);" pathCondition="true" pathConditionChanged="false">
      <statement name="Node newParent = current.right;" pathCondition="true" pathConditionChanged="false">
         <branchCondition name="not(equals(current,null))" pathCondition="not(equals(current,null))" pathConditionChanged="true" branchCondition="not(equals(current,null))" mergedBranchCondition="false" isBranchConditionComputed="true">
            <statement name="Node oldLeft = newParent.left;" pathCondition="not(equals(current,null))" pathConditionChanged="false">
               <branchCondition name="not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))" pathCondition="and(not(equals(current,null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null)))" pathConditionChanged="true" branchCondition="not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))" mergedBranchCondition="false" isBranchConditionComputed="true">
                  <statement name="newParent.left=current;" pathCondition="and(not(equals(current,null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null)))" pathConditionChanged="false">
                     <statement name="newParent.height=0;" pathCondition="and(not(equals(current,null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null)))" pathConditionChanged="false">
                        <statement name="current.height=0;" pathCondition="and(not(equals(current,null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null)))" pathConditionChanged="false">
                           <statement name="current.right=oldLeft;" pathCondition="and(not(equals(current,null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null)))" pathConditionChanged="false">
                              <branchStatement name="if (oldLeft!=null)" pathCondition="and(not(equals(current,null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null)))" pathConditionChanged="false">
                                 <branchCondition name="not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))" pathCondition="and(and(not(equals(current,null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null)))" pathConditionChanged="true" branchCondition="not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))" mergedBranchCondition="false" isBranchConditionComputed="true">
                                    <statement name="oldLeft.parent=current.right;" pathCondition="and(and(not(equals(current,null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null)))" pathConditionChanged="false">
                                       <branchStatement name="if (current.parent==null)" pathCondition="and(and(not(equals(current,null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null)))" pathConditionChanged="false">
                                          <branchCondition name="equals(if-then-else(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),current),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent)),null)" pathCondition="and(and(and(and(and(not(equals(current,null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))),or(equals(current,null),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),current)))),or(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))),or(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),current)))" pathConditionChanged="true" branchCondition="equals(if-then-else(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),current),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent)),null)" mergedBranchCondition="false" isBranchConditionComputed="true">
                                             <statement name="this.root=newParent;" pathCondition="and(and(and(and(and(not(equals(current,null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))),or(equals(current,null),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),current)))),or(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))),or(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),current)))" pathConditionChanged="false">
                                                <statement name="newParent.parent=null;" pathCondition="and(and(and(and(and(not(equals(current,null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))),or(equals(current,null),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),current)))),or(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))),or(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),current)))" pathConditionChanged="false">
                                                   <statement name="current.parent=newParent;" pathCondition="and(and(and(and(and(not(equals(current,null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))),or(equals(current,null),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),current)))),or(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))),or(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),current)))" pathConditionChanged="false">
                                                      <statement name="return current;" pathCondition="and(and(and(and(and(not(equals(current,null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))),or(equals(current,null),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),current)))),or(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))),or(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),current)))" pathConditionChanged="false">
                                                         <methodReturn name="&lt;return of compute&gt;" signature="&lt;return of self.compute(current);&gt;" pathCondition="and(and(and(and(and(not(equals(current,null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))),or(equals(current,null),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),current)))),or(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))),or(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),current)))" pathConditionChanged="false" isReturnValueComputed="false">
                                                            <termination name="&lt;end&gt;" pathCondition="and(and(and(and(and(not(equals(current,null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))),or(equals(current,null),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),current)))),or(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))),or(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),current)))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                                                            </termination>
                                                         </methodReturn>
                                                      </statement>
                                                   </statement>
                                                </statement>
                                             </statement>
                                          </branchCondition>
                                          <branchCondition name="not(equals(if-then-else(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),current),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent)),null))" pathCondition="and(and(and(not(equals(current,null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))),not(and(and(or(equals(current,null),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null)),or(equals(current,null),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),current)))),or(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null)))))" pathConditionChanged="true" branchCondition="not(equals(if-then-else(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),current),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent)),null))" mergedBranchCondition="false" isBranchConditionComputed="true">
                                             <statement name="current.parent.right=newParent;" pathCondition="and(and(and(not(equals(current,null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))),not(and(and(or(equals(current,null),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null)),or(equals(current,null),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),current)))),or(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null)))))" pathConditionChanged="false">
                                                <statement name="newParent.parent=current.parent;" pathCondition="and(and(and(not(equals(current,null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))),not(and(and(or(equals(current,null),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null)),or(equals(current,null),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),current)))),or(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null)))))" pathConditionChanged="false">
                                                   <statement name="current.parent=newParent;" pathCondition="and(and(and(not(equals(current,null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))),not(and(and(or(equals(current,null),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null)),or(equals(current,null),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),current)))),or(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null)))))" pathConditionChanged="false">
                                                      <statement name="return current;" pathCondition="and(and(and(not(equals(current,null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))),not(and(and(or(equals(current,null),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null)),or(equals(current,null),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),current)))),or(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null)))))" pathConditionChanged="false">
                                                         <methodReturn name="&lt;return of compute&gt;" signature="&lt;return of self.compute(current);&gt;" pathCondition="and(and(and(not(equals(current,null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))),not(and(and(or(equals(current,null),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null)),or(equals(current,null),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),current)))),or(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null)))))" pathConditionChanged="false" isReturnValueComputed="false">
                                                            <termination name="&lt;end&gt;" pathCondition="and(and(and(not(equals(current,null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))),not(and(and(or(equals(current,null),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null)),or(equals(current,null),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),current)))),or(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null)))))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                                                            </termination>
                                                         </methodReturn>
                                                      </statement>
                                                   </statement>
                                                </statement>
                                             </statement>
                                          </branchCondition>
                                       </branchStatement>
                                    </statement>
                                 </branchCondition>
                                 <branchCondition name="equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null)" pathCondition="and(and(not(equals(current,null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))" pathConditionChanged="true" branchCondition="equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null)" mergedBranchCondition="false" isBranchConditionComputed="true">
                                    <branchStatement name="if (current.parent==null)" pathCondition="and(and(not(equals(current,null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))" pathConditionChanged="false">
                                       <branchCondition name="equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null)" pathCondition="and(and(and(not(equals(current,null)),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))" pathConditionChanged="true" branchCondition="equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null)" mergedBranchCondition="false" isBranchConditionComputed="true">
                                          <statement name="this.root=newParent;" pathCondition="and(and(and(not(equals(current,null)),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))" pathConditionChanged="false">
                                             <statement name="newParent.parent=null;" pathCondition="and(and(and(not(equals(current,null)),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))" pathConditionChanged="false">
                                                <statement name="current.parent=newParent;" pathCondition="and(and(and(not(equals(current,null)),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))" pathConditionChanged="false">
                                                   <statement name="return current;" pathCondition="and(and(and(not(equals(current,null)),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))" pathConditionChanged="false">
                                                      <methodReturn name="&lt;return of compute&gt;" signature="&lt;return of self.compute(current);&gt;" pathCondition="and(and(and(not(equals(current,null)),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))" pathConditionChanged="false" isReturnValueComputed="false">
                                                         <termination name="&lt;end&gt;" pathCondition="and(and(and(not(equals(current,null)),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                                                         </termination>
                                                      </methodReturn>
                                                   </statement>
                                                </statement>
                                             </statement>
                                          </statement>
                                       </branchCondition>
                                       <branchCondition name="not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null))" pathCondition="and(and(and(not(equals(current,null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null))),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))" pathConditionChanged="true" branchCondition="not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null))" mergedBranchCondition="false" isBranchConditionComputed="true">
                                          <statement name="current.parent.right=newParent;" pathCondition="and(and(and(not(equals(current,null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null))),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))" pathConditionChanged="false">
                                             <statement name="newParent.parent=current.parent;" pathCondition="and(and(and(not(equals(current,null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null))),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))" pathConditionChanged="false">
                                                <statement name="current.parent=newParent;" pathCondition="and(and(and(not(equals(current,null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null))),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))" pathConditionChanged="false">
                                                   <statement name="return current;" pathCondition="and(and(and(not(equals(current,null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null))),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))" pathConditionChanged="false">
                                                      <methodReturn name="&lt;return of compute&gt;" signature="&lt;return of self.compute(current);&gt;" pathCondition="and(and(and(not(equals(current,null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null))),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))" pathConditionChanged="false" isReturnValueComputed="false">
                                                         <termination name="&lt;end&gt;" pathCondition="and(and(and(not(equals(current,null)),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$parent),null))),not(equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$left),null))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                                                         </termination>
                                                      </methodReturn>
                                                   </statement>
                                                </statement>
                                             </statement>
                                          </statement>
                                       </branchCondition>
                                    </branchStatement>
                                 </branchCondition>
                              </branchStatement>
                           </statement>
                        </statement>
                     </statement>
                  </statement>
               </branchCondition>
               <branchCondition name="equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null)" pathCondition="and(not(equals(current,null)),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))" pathConditionChanged="true" branchCondition="equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null)" mergedBranchCondition="false" isBranchConditionComputed="true">
                  <termination name="&lt;uncaught java.lang.NullPointerException&gt;" pathCondition="and(not(equals(current,null)),equals(algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::select(heap,current,algorithm.AssociationSourceIsNotRepresentativeTermOfEquivalenceClass.Node::$right),null))" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="true">
                  </termination>
               </branchCondition>
            </statement>
         </branchCondition>
         <branchCondition name="equals(current,null)" pathCondition="equals(current,null)" pathConditionChanged="true" branchCondition="equals(current,null)" mergedBranchCondition="false" isBranchConditionComputed="true">
            <termination name="&lt;uncaught java.lang.NullPointerException&gt;" pathCondition="equals(current,null)" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="true">
            </termination>
         </branchCondition>
      </statement>
   </methodCall>
</start>
