<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <methodCall name="UseOperationContractAllBranchesOpenTest.main(x,obj);" pathCondition="true" pathConditionChanged="false">
      <statement name="int magicNumber = obj.magic(x);" pathCondition="true" pathConditionChanged="false">
         <operationContract name="result_0 = obj.magic(x) catch(exc_0)
pre: x &lt; javaUnaryMinusInt(10) &amp; obj.&lt;inv&gt;
| x &gt;= 10
&amp; obj.&lt;inv&gt;
post: (     x &lt; javaUnaryMinusInt(10)
      &amp; obj.&lt;inv&gt;@heapBefore_magic_0
   -&gt;   !exc_0 = null
      &amp; (  (     java.lang.Throwable::instance(exc_0)
               = TRUE
            -&gt; obj.&lt;inv&gt;)
         &amp; java.lang.Exception::instance(exc_0) = TRUE))
&amp; (   x &gt;= 10 &amp; obj.&lt;inv&gt;@heapBefore_magic_0
   -&gt; result_0 = 42 &amp; obj.&lt;inv&gt; &amp; exc_0 = null)
mod: \if (true)  \then (allLocs)  \else (allLocs)
\cap \if (x &gt;= 10 &amp; obj.&lt;inv&gt;)
         \then (allLocs)
         \else (allLocs)
termination: diamond" pathCondition="true" pathConditionChanged="false" preconditionComplied="false" hasNotNullCheck="true" notNullCheckComplied="false">
            <branchCondition name="and(and(java.lang.Object::&lt;inv&gt;(heap,obj),geq(x,Z(0(1(#))))),not(equals(obj,null)))" pathCondition="and(and(java.lang.Object::&lt;inv&gt;(heap,obj),geq(x,Z(0(1(#))))),not(equals(obj,null)))" pathConditionChanged="true" branchCondition="and(and(java.lang.Object::&lt;inv&gt;(heap,obj),geq(x,Z(0(1(#))))),not(equals(obj,null)))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Post (magic)">
               <statement name="int magicNumberCopy = magicNumber;" pathCondition="and(and(java.lang.Object::&lt;inv&gt;(heap,obj),geq(x,Z(0(1(#))))),not(equals(obj,null)))" pathConditionChanged="false">
                  <statement name="return magicNumber+magicNumberCopy;" pathCondition="and(and(java.lang.Object::&lt;inv&gt;(heap,obj),geq(x,Z(0(1(#))))),not(equals(obj,null)))" pathConditionChanged="false">
                     <methodReturn name="&lt;return of UseOperationContractAllBranchesOpenTest.main(x,obj);&gt;" pathCondition="and(and(java.lang.Object::&lt;inv&gt;(heap,obj),geq(x,Z(0(1(#))))),not(equals(obj,null)))" pathConditionChanged="false" isReturnValueComputed="false">
                        <termination name="&lt;end&gt;" pathCondition="and(and(java.lang.Object::&lt;inv&gt;(heap,obj),geq(x,Z(0(1(#))))),not(equals(obj,null)))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                        </termination>
                     </methodReturn>
                  </statement>
               </statement>
            </branchCondition>
            <branchCondition name="and(and(java.lang.Object::&lt;inv&gt;(heap,obj),leq(x,Z(neglit(1(1(#)))))),not(equals(obj,null)))" pathCondition="and(and(java.lang.Object::&lt;inv&gt;(heap,obj),leq(x,Z(neglit(1(1(#)))))),not(equals(obj,null)))" pathConditionChanged="true" branchCondition="and(and(java.lang.Object::&lt;inv&gt;(heap,obj),leq(x,Z(neglit(1(1(#)))))),not(equals(obj,null)))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Exceptional Post (magic)">
               <branchCondition name="and(not(equals(exc_0,null)),equals(java.lang.Exception::instance(exc_0),TRUE))" pathCondition="and(and(and(and(java.lang.Object::&lt;inv&gt;(heap,obj),leq(x,Z(neglit(1(1(#)))))),not(equals(exc_0,null))),equals(java.lang.Exception::instance(exc_0),TRUE)),not(equals(obj,null)))" pathConditionChanged="true" branchCondition="and(not(equals(exc_0,null)),equals(java.lang.Exception::instance(exc_0),TRUE))" mergedBranchCondition="false" isBranchConditionComputed="true">
                  <statement name="return -1;" pathCondition="and(and(and(and(java.lang.Object::&lt;inv&gt;(heap,obj),leq(x,Z(neglit(1(1(#)))))),not(equals(exc_0,null))),equals(java.lang.Exception::instance(exc_0),TRUE)),not(equals(obj,null)))" pathConditionChanged="false">
                     <methodReturn name="&lt;return of UseOperationContractAllBranchesOpenTest.main(x,obj);&gt;" pathCondition="and(and(and(and(java.lang.Object::&lt;inv&gt;(heap,obj),leq(x,Z(neglit(1(1(#)))))),not(equals(exc_0,null))),equals(java.lang.Exception::instance(exc_0),TRUE)),not(equals(obj,null)))" pathConditionChanged="false" isReturnValueComputed="false">
                        <termination name="&lt;end&gt;" pathCondition="and(and(and(and(java.lang.Object::&lt;inv&gt;(heap,obj),leq(x,Z(neglit(1(1(#)))))),not(equals(exc_0,null))),equals(java.lang.Exception::instance(exc_0),TRUE)),not(equals(obj,null)))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                        </termination>
                     </methodReturn>
                  </statement>
               </branchCondition>
               <branchCondition name="imp(equals(java.lang.Exception::instance(exc_0),TRUE),equals(exc_0,null))" pathCondition="and(and(and(java.lang.Object::&lt;inv&gt;(heap,obj),leq(x,Z(neglit(1(1(#)))))),not(equals(obj,null))),imp(equals(java.lang.Exception::instance(exc_0),TRUE),equals(exc_0,null)))" pathConditionChanged="true" branchCondition="imp(equals(java.lang.Exception::instance(exc_0),TRUE),equals(exc_0,null))" mergedBranchCondition="false" isBranchConditionComputed="true">
                  <termination name="&lt;uncaught java.lang.Throwable&gt;" pathCondition="and(and(and(java.lang.Object::&lt;inv&gt;(heap,obj),leq(x,Z(neglit(1(1(#)))))),not(equals(obj,null))),imp(equals(java.lang.Exception::instance(exc_0),TRUE),equals(exc_0,null)))" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="true">
                  </termination>
               </branchCondition>
            </branchCondition>
         </operationContract>
      </statement>
   </methodCall>
</start>
