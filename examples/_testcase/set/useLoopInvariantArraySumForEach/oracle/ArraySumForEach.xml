<?xml version="1.0" encoding="UTF-8"?>
<startNode name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <methodCall name="ArraySumForEach.sum(array);" pathCondition="true" pathConditionChanged="false">
      <statement name="int result = 0;" pathCondition="true" pathConditionChanged="false">
         <callStackEntry path="/0"/>
         <loopNode name="for (int value : array) {   result_1+=value; }" pathCondition="true" pathConditionChanged="false">
            <callStackEntry path="/0"/>
            <useLoopInvariant name="invariants: {heap=and(geq(i,Z(0(#))),and(leq(i,length(array)),equals(result_1,bsum{j:int}(Z(0(#)),i,int::select(heap,array,arr(j)))))), savedHeap=null};
modifies: {heap=false, savedHeap=null};
variant: javaSubInt(length(array),i)" pathCondition="true" pathConditionChanged="false" initiallyValid="true">
               <callStackEntry path="/0"/>
               <branchCondition name="   array.length &gt;= 0
-&gt;   i_0 &gt;= 0
   &amp; array.length &gt;= 1 + i
   &amp; array.length &gt;= i_0
   &amp; bsum{int j;}(0, i_0, array[j]) = result_1_0" pathCondition="   array.length &gt;= 0
-&gt;   i_0 &gt;= 0
   &amp; array.length &gt;= 1 + i
   &amp; array.length &gt;= i_0
   &amp; bsum{int j;}(0, i_0, array[j]) = result_1_0" pathConditionChanged="true" branchCondition="   array.length &gt;= 0
-&gt;   i_0 &gt;= 0
   &amp; array.length &gt;= 1 + i
   &amp; array.length &gt;= i_0
   &amp; bsum{int j;}(0, i_0, array[j]) = result_1_0" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Body Preserves Invariant">
                  <callStackEntry path="/0"/>
                  <statement name="result_1+=value;" pathCondition="   array.length &gt;= 0
-&gt;   i_0 &gt;= 0
   &amp; array.length &gt;= 1 + i
   &amp; array.length &gt;= i_0
   &amp; bsum{int j;}(0, i_0, array[j]) = result_1_0" pathConditionChanged="false">
                     <callStackEntry path="/0"/>
                     <termination name="&lt;loop body end&gt;" pathCondition="   array.length &gt;= 0
-&gt;   i_0 &gt;= 0
   &amp; array.length &gt;= 1 + i
   &amp; array.length &gt;= i_0
   &amp; bsum{int j;}(0, i_0, array[j]) = result_1_0" pathConditionChanged="false" terminationKind="LOOP_BODY">
                     </termination>
                  </statement>
               </branchCondition>
               <branchCondition name="   array.length &gt;= 0
-&gt;   i_0 &gt;= 0
   &amp; array.length &lt;= i
   &amp; array.length &gt;= i_0
   &amp; bsum{int j;}(0, i_0, array[j]) = result_1_0" pathCondition="   array.length &gt;= 0
-&gt;   i_0 &gt;= 0
   &amp; array.length &lt;= i
   &amp; array.length &gt;= i_0
   &amp; bsum{int j;}(0, i_0, array[j]) = result_1_0" pathConditionChanged="true" branchCondition="   array.length &gt;= 0
-&gt;   i_0 &gt;= 0
   &amp; array.length &lt;= i
   &amp; array.length &gt;= i_0
   &amp; bsum{int j;}(0, i_0, array[j]) = result_1_0" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Use Case">
                  <callStackEntry path="/0"/>
                  <statement name="return result_1;" pathCondition="   array.length &gt;= 0
-&gt;   i_0 &gt;= 0
   &amp; array.length &lt;= i
   &amp; array.length &gt;= i_0
   &amp; bsum{int j;}(0, i_0, array[j]) = result_1_0" pathConditionChanged="false">
                     <callStackEntry path="/0"/>
                     <methodReturn name="&lt;return of ArraySumForEach.sum(array);&gt;" pathCondition="   array.length &gt;= 0
-&gt;   i_0 &gt;= 0
   &amp; array.length &lt;= i
   &amp; array.length &gt;= i_0
   &amp; bsum{int j;}(0, i_0, array[j]) = result_1_0" pathConditionChanged="false" isReturnValueComputed="false">
                        <callStackEntry path="/0"/>
                        <termination name="&lt;end&gt;" pathCondition="   array.length &gt;= 0
-&gt;   i_0 &gt;= 0
   &amp; array.length &lt;= i
   &amp; array.length &gt;= i_0
   &amp; bsum{int j;}(0, i_0, array[j]) = result_1_0" pathConditionChanged="false" terminationKind="NORMAL">
                        </termination>
                     </methodReturn>
                  </statement>
               </branchCondition>
            </useLoopInvariant>
         </loopNode>
      </statement>
   </methodCall>
</startNode>
