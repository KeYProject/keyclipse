<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <methodCall name="ArrayAverage.average(array);" pathCondition="true" pathConditionChanged="false">
      <statement name="int sum = sum(array);" pathCondition="true" pathConditionChanged="false">
         <callStackEntry path="/0"/>
         <methodCall name="ArrayAverage.sum(array_1);" pathCondition="true" pathConditionChanged="false">
            <callStackEntry path="/0"/>
            <branchStatement name="if (array_1==null)" pathCondition="true" pathConditionChanged="false">
               <callStackEntry path="/0"/>
               <callStackEntry path="/0/0/0"/>
               <branchCondition name="equals(array,null)" pathCondition="equals(array,null)" pathConditionChanged="true" branchCondition="equals(array,null)" mergedBranchCondition="false" isBranchConditionComputed="true">
                  <callStackEntry path="/0"/>
                  <callStackEntry path="/0/0/0"/>
                  <statement name="throw new Exception ();" pathCondition="equals(array,null)" pathConditionChanged="false">
                     <callStackEntry path="/0"/>
                     <callStackEntry path="/0/0/0"/>
                     <termination name="&lt;uncaught java.lang.Exception&gt;" pathCondition="equals(array,null)" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="true">
                     </termination>
                  </statement>
               </branchCondition>
               <branchCondition name="not(equals(array,null))" pathCondition="not(equals(array,null))" pathConditionChanged="true" branchCondition="not(equals(array,null))" mergedBranchCondition="false" isBranchConditionComputed="true">
                  <callStackEntry path="/0"/>
                  <callStackEntry path="/0/0/0"/>
                  <statement name="int sum = 0;" pathCondition="not(equals(array,null))" pathConditionChanged="false">
                     <callStackEntry path="/0"/>
                     <callStackEntry path="/0/0/0"/>
                     <loopStatement name="for ( int i = 0; i&lt;array_1.length; i++ )" pathCondition="not(equals(array,null))" pathConditionChanged="false">
                        <callStackEntry path="/0"/>
                        <callStackEntry path="/0/0/0"/>
                        <statement name="int i = 0;" pathCondition="not(equals(array,null))" pathConditionChanged="false">
                           <callStackEntry path="/0"/>
                           <callStackEntry path="/0/0/0"/>
                           <loopInvariant name="invariant: i &gt;= 0
&amp; i &lt;= array_1.length
&amp; sum_2 = javaCastInt(bsum{int j;}(0, i, array_1[j]));
variant: javaSubInt(array_1.length, i)
mod: false" pathCondition="not(equals(array,null))" pathConditionChanged="false" initiallyValid="true">
                              <callStackEntry path="/0"/>
                              <callStackEntry path="/0/0/0"/>
                              <branchCondition name="or(lt(length(array),Z(0(#))),and(and(geq(i_0,Z(0(#))),gt(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(geq(i_0,Z(0(#))),not(equals(array,null))),gt(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" pathConditionChanged="true" branchCondition="or(lt(length(array),Z(0(#))),and(and(geq(i_0,Z(0(#))),gt(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Body Preserves Invariant">
                                 <callStackEntry path="/0"/>
                                 <callStackEntry path="/0/0/0"/>
                                 <statement name="sum_2+=array_1[i];" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(geq(i_0,Z(0(#))),not(equals(array,null))),gt(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" pathConditionChanged="false">
                                    <callStackEntry path="/0/0/0"/>
                                    <statement name="i++;" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(geq(i_0,Z(0(#))),not(equals(array,null))),gt(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" pathConditionChanged="false">
                                       <callStackEntry path="/0/0/0"/>
                                       <termination name="&lt;loop body end&gt;" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(geq(i_0,Z(0(#))),not(equals(array,null))),gt(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" pathConditionChanged="false" terminationKind="LOOP_BODY" branchVerified="true">
                                       </termination>
                                    </statement>
                                 </statement>
                              </branchCondition>
                              <branchCondition name="or(lt(length(array),Z(0(#))),and(and(geq(i_0,Z(0(#))),equals(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(geq(i_0,Z(0(#))),not(equals(array,null))),equals(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" pathConditionChanged="true" branchCondition="or(lt(length(array),Z(0(#))),and(and(geq(i_0,Z(0(#))),equals(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Use Case">
                                 <callStackEntry path="/0"/>
                                 <callStackEntry path="/0/0/0"/>
                                 <statement name="return sum_2;" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(geq(i_0,Z(0(#))),not(equals(array,null))),equals(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" pathConditionChanged="false">
                                    <callStackEntry path="/0"/>
                                    <callStackEntry path="/0/0/0"/>
                                    <methodReturn name="&lt;return of sum&gt;" signature="&lt;return of ArrayAverage.sum(array_1);&gt;" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(geq(i_0,Z(0(#))),not(equals(array,null))),equals(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" pathConditionChanged="false" nameIncludingReturnValue="&lt;return sum_2_0 as result of sum&gt;" signatureIncludingReturnValue="&lt;return sum_2_0 as result of ArrayAverage.sum(array_1);&gt;" isReturnValueComputed="true">
                                       <methodReturnValue name="sum_2_0" returnValueString="sum_2_0" hasCondition="false">
                                       </methodReturnValue>
                                       <callStackEntry path="/0"/>
                                       <callStackEntry path="/0/0/0"/>
                                       <statement name="return sum_1/array.length;" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(geq(i_0,Z(0(#))),not(equals(array,null))),equals(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" pathConditionChanged="false">
                                          <callStackEntry path="/0"/>
                                          <branchCondition name="equals(i_0,Z(0(#)))" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(equals(i_0,Z(0(#))),not(equals(array,null))),equals(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" pathConditionChanged="true" branchCondition="equals(i_0,Z(0(#)))" mergedBranchCondition="false" isBranchConditionComputed="true">
                                             <termination name="&lt;uncaught java.lang.ArithmeticException&gt;" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(equals(i_0,Z(0(#))),not(equals(array,null))),equals(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="true">
                                             </termination>
                                          </branchCondition>
                                          <branchCondition name="not(equals(i_0,Z(0(#))))" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(geq(i_0,Z(1(#))),not(equals(array,null))),equals(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" pathConditionChanged="true" branchCondition="not(equals(i_0,Z(0(#))))" mergedBranchCondition="false" isBranchConditionComputed="true">
                                             <methodReturn name="&lt;return of average&gt;" signature="&lt;return of ArrayAverage.average(array);&gt;" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(geq(i_0,Z(1(#))),not(equals(array,null))),equals(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" pathConditionChanged="false" nameIncludingReturnValue="&lt;return 
	quotient_2 {gt(sum_2_0,Z(neglit(1(#))))}, 
	mul(quotient_3,Z(neglit(1(#)))) {lt(sum_2_0,Z(0(#)))}
as result of average&gt;" signatureIncludingReturnValue="&lt;return 
	quotient_2 {gt(sum_2_0,Z(neglit(1(#))))}, 
	mul(quotient_3,Z(neglit(1(#)))) {lt(sum_2_0,Z(0(#)))}
as result of ArrayAverage.average(array);&gt;" isReturnValueComputed="true">
                                                <methodReturnValue name="quotient_2 {gt(sum_2_0,Z(neglit(1(#))))}" returnValueString="quotient_2" hasCondition="true" conditionString="gt(sum_2_0,Z(neglit(1(#))))">
                                                </methodReturnValue>
                                                <methodReturnValue name="mul(quotient_3,Z(neglit(1(#)))) {lt(sum_2_0,Z(0(#)))}" returnValueString="mul(quotient_3,Z(neglit(1(#))))" hasCondition="true" conditionString="lt(sum_2_0,Z(0(#)))">
                                                </methodReturnValue>
                                                <callStackEntry path="/0"/>
                                                <termination name="&lt;end&gt;" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(geq(i_0,Z(1(#))),not(equals(array,null))),equals(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                                                </termination>
                                             </methodReturn>
                                          </branchCondition>
                                       </statement>
                                    </methodReturn>
                                 </statement>
                              </branchCondition>
                           </loopInvariant>
                        </statement>
                     </loopStatement>
                  </statement>
               </branchCondition>
            </branchStatement>
         </methodCall>
      </statement>
   </methodCall>
</start>
