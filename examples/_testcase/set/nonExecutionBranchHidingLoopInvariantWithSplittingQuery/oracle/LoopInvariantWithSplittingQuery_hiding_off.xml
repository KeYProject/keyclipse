<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <methodCall name="LoopInvariantWithSplittingQuery.main(x);" pathCondition="true" pathConditionChanged="false">
      <loopInvariant name="
invariant: magic(x) &gt;= 0;
variant: magic(x)
mod: false" pathCondition="true" pathConditionChanged="false" initiallyValid="true">
         <branchCondition name="not(or(and(and(equals(x_0,mul(res_magic_0,Z(neglit(1(#))))),geq(res_magic_0,Z(1(#)))),equals(x,Z(0(#)))),and(and(equals(x_0,res_magic_0),equals(x,Z(0(#)))),geq(res_magic_0,Z(0(#))))))" pathCondition="not(and(and(and(geq(res_magic_0,Z(0(#))),or(geq(res_magic_0,Z(1(#))),equals(x_0,res_magic_0))),or(equals(x_0,res_magic_0),equals(x_0,mul(res_magic_0,Z(neglit(1(#))))))),equals(x,Z(0(#)))))" pathConditionChanged="true" branchCondition="not(or(and(and(equals(x_0,mul(res_magic_0,Z(neglit(1(#))))),geq(res_magic_0,Z(1(#)))),equals(x,Z(0(#)))),and(and(equals(x_0,res_magic_0),equals(x,Z(0(#)))),geq(res_magic_0,Z(0(#))))))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Body Preserves Invariant">
            <branchCondition name="gt(x_0,Z(neglit(1(#))))" pathCondition="and(not(and(and(and(geq(res_magic_0,Z(0(#))),equals(x,Z(0(#)))),or(equals(x_0,res_magic_0),equals(x_0,mul(res_magic_0,Z(neglit(1(#))))))),or(geq(res_magic_0,Z(1(#))),equals(x_0,res_magic_0)))),geq(x_0,Z(0(#))))" pathConditionChanged="true" branchCondition="gt(x_0,Z(neglit(1(#))))" mergedBranchCondition="false" isBranchConditionComputed="true">
               <methodCall name="LoopInvariantWithSplittingQuery.magic(x_33);" pathCondition="and(not(and(and(and(geq(res_magic_0,Z(0(#))),equals(x,Z(0(#)))),or(equals(x_0,res_magic_0),equals(x_0,mul(res_magic_0,Z(neglit(1(#))))))),or(geq(res_magic_0,Z(1(#))),equals(x_0,res_magic_0)))),geq(x_0,Z(0(#))))" pathConditionChanged="false">
                  <branchStatement name="if (x_33&gt;=0)" pathCondition="and(not(and(and(and(geq(res_magic_0,Z(0(#))),equals(x,Z(0(#)))),or(equals(x_0,res_magic_0),equals(x_0,mul(res_magic_0,Z(neglit(1(#))))))),or(geq(res_magic_0,Z(1(#))),equals(x_0,res_magic_0)))),geq(x_0,Z(0(#))))" pathConditionChanged="false">
                     <statement name="return x_33;" pathCondition="and(not(and(and(and(geq(res_magic_0,Z(0(#))),equals(x,Z(0(#)))),or(equals(x_0,res_magic_0),equals(x_0,mul(res_magic_0,Z(neglit(1(#))))))),or(geq(res_magic_0,Z(1(#))),equals(x_0,res_magic_0)))),geq(x_0,Z(0(#))))" pathConditionChanged="false">
                        <methodReturn name="&lt;return of LoopInvariantWithSplittingQuery.magic(x_33);&gt;" pathCondition="and(not(and(and(and(geq(res_magic_0,Z(0(#))),equals(x,Z(0(#)))),or(equals(x_0,res_magic_0),equals(x_0,mul(res_magic_0,Z(neglit(1(#))))))),or(geq(res_magic_0,Z(1(#))),equals(x_0,res_magic_0)))),geq(x_0,Z(0(#))))" pathConditionChanged="false" nameIncludingReturnValue="&lt;return magic_sk_1 as result of LoopInvariantWithSplittingQuery.magic(x_33);&gt;" isReturnValueComputed="true">
                           <methodReturnValue name="magic_sk_1" returnValueString="magic_sk_1" hasCondition="false">
                           </methodReturnValue>
                           <statement name="x--;" pathCondition="and(not(and(and(and(geq(res_magic_0,Z(0(#))),equals(x,Z(0(#)))),or(equals(x_0,res_magic_0),equals(x_0,mul(res_magic_0,Z(neglit(1(#))))))),or(geq(res_magic_0,Z(1(#))),equals(x_0,res_magic_0)))),geq(x_0,Z(0(#))))" pathConditionChanged="false">
                              <termination name="&lt;loop body end&gt;" pathCondition="and(not(and(and(and(geq(res_magic_0,Z(0(#))),equals(x,Z(0(#)))),or(equals(x_0,res_magic_0),equals(x_0,mul(res_magic_0,Z(neglit(1(#))))))),or(geq(res_magic_0,Z(1(#))),equals(x_0,res_magic_0)))),geq(x_0,Z(0(#))))" pathConditionChanged="false" terminationKind="LOOP_BODY" branchVerified="true">
                              </termination>
                           </statement>
                        </methodReturn>
                     </statement>
                  </branchStatement>
               </methodCall>
            </branchCondition>
            <branchCondition name="lt(x_0,Z(0(#)))" pathCondition="and(not(and(and(and(geq(res_magic_0,Z(0(#))),equals(x,Z(0(#)))),or(equals(x_0,res_magic_0),equals(x_0,mul(res_magic_0,Z(neglit(1(#))))))),or(geq(res_magic_0,Z(1(#))),equals(x_0,res_magic_0)))),leq(x_0,Z(neglit(1(#)))))" pathConditionChanged="true" branchCondition="lt(x_0,Z(0(#)))" mergedBranchCondition="false" isBranchConditionComputed="true">
               <methodCall name="LoopInvariantWithSplittingQuery.magic(x_24);" pathCondition="and(not(and(and(and(geq(res_magic_0,Z(0(#))),equals(x,Z(0(#)))),or(equals(x_0,res_magic_0),equals(x_0,mul(res_magic_0,Z(neglit(1(#))))))),or(geq(res_magic_0,Z(1(#))),equals(x_0,res_magic_0)))),leq(x_0,Z(neglit(1(#)))))" pathConditionChanged="false">
                  <branchStatement name="if (x_24&gt;=0)" pathCondition="and(not(and(and(and(geq(res_magic_0,Z(0(#))),equals(x,Z(0(#)))),or(equals(x_0,res_magic_0),equals(x_0,mul(res_magic_0,Z(neglit(1(#))))))),or(geq(res_magic_0,Z(1(#))),equals(x_0,res_magic_0)))),leq(x_0,Z(neglit(1(#)))))" pathConditionChanged="false">
                     <statement name="return -x_24;" pathCondition="and(not(and(and(and(geq(res_magic_0,Z(0(#))),equals(x,Z(0(#)))),or(equals(x_0,res_magic_0),equals(x_0,mul(res_magic_0,Z(neglit(1(#))))))),or(geq(res_magic_0,Z(1(#))),equals(x_0,res_magic_0)))),leq(x_0,Z(neglit(1(#)))))" pathConditionChanged="false">
                        <methodReturn name="&lt;return of LoopInvariantWithSplittingQuery.magic(x_24);&gt;" pathCondition="and(not(and(and(and(geq(res_magic_0,Z(0(#))),equals(x,Z(0(#)))),or(equals(x_0,res_magic_0),equals(x_0,mul(res_magic_0,Z(neglit(1(#))))))),or(geq(res_magic_0,Z(1(#))),equals(x_0,res_magic_0)))),leq(x_0,Z(neglit(1(#)))))" pathConditionChanged="false" nameIncludingReturnValue="&lt;return magic_sk_1 as result of LoopInvariantWithSplittingQuery.magic(x_24);&gt;" isReturnValueComputed="true">
                           <methodReturnValue name="magic_sk_1" returnValueString="magic_sk_1" hasCondition="false">
                           </methodReturnValue>
                           <statement name="x--;" pathCondition="and(not(and(and(and(geq(res_magic_0,Z(0(#))),equals(x,Z(0(#)))),or(equals(x_0,res_magic_0),equals(x_0,mul(res_magic_0,Z(neglit(1(#))))))),or(geq(res_magic_0,Z(1(#))),equals(x_0,res_magic_0)))),leq(x_0,Z(neglit(1(#)))))" pathConditionChanged="false">
                              <termination name="&lt;loop body end&gt;" pathCondition="and(not(and(and(and(geq(res_magic_0,Z(0(#))),equals(x,Z(0(#)))),or(equals(x_0,res_magic_0),equals(x_0,mul(res_magic_0,Z(neglit(1(#))))))),or(geq(res_magic_0,Z(1(#))),equals(x_0,res_magic_0)))),leq(x_0,Z(neglit(1(#)))))" pathConditionChanged="false" terminationKind="LOOP_BODY" branchVerified="false">
                              </termination>
                           </statement>
                        </methodReturn>
                     </statement>
                  </branchStatement>
               </methodCall>
            </branchCondition>
         </branchCondition>
         <branchCondition name="not(or(or(or(and(and(equals(x_0,mul(res_magic_0,Z(neglit(1(#))))),geq(res_magic_0,Z(1(#)))),leq(x,Z(neglit(1(#))))),and(and(equals(x_0,res_magic_0),leq(x,Z(neglit(1(#))))),geq(res_magic_0,Z(0(#))))),and(and(equals(x_0,mul(res_magic_1,Z(neglit(1(#))))),geq(res_magic_1,Z(1(#)))),geq(x,Z(1(#))))),and(and(equals(x_0,res_magic_1),geq(x,Z(1(#)))),geq(res_magic_1,Z(0(#))))))" pathCondition="imp(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(or(geq(res_magic_0,Z(0(#))),geq(res_magic_1,Z(0(#)))),or(or(geq(res_magic_1,Z(0(#))),equals(x_0,res_magic_0)),equals(x_0,mul(res_magic_0,Z(neglit(1(#))))))),or(or(geq(res_magic_0,Z(1(#))),geq(res_magic_1,Z(0(#)))),equals(x_0,res_magic_0))),or(geq(res_magic_1,Z(0(#))),leq(x,Z(neglit(1(#)))))),or(or(geq(res_magic_0,Z(1(#))),geq(res_magic_1,Z(0(#)))),leq(x,Z(neglit(1(#)))))),or(or(geq(res_magic_0,Z(0(#))),geq(res_magic_1,Z(1(#)))),geq(x,Z(1(#))))),or(geq(res_magic_0,Z(0(#))),geq(x,Z(1(#))))),or(or(or(geq(res_magic_1,Z(1(#))),geq(x,Z(1(#)))),equals(x_0,res_magic_0)),equals(x_0,mul(res_magic_0,Z(neglit(1(#))))))),or(or(or(geq(res_magic_0,Z(1(#))),geq(res_magic_1,Z(1(#)))),geq(x,Z(1(#)))),equals(x_0,res_magic_0))),or(or(geq(x,Z(1(#))),equals(x_0,res_magic_0)),equals(x_0,mul(res_magic_0,Z(neglit(1(#))))))),or(or(geq(res_magic_0,Z(1(#))),geq(x,Z(1(#)))),equals(x_0,res_magic_0))),or(or(geq(res_magic_0,Z(0(#))),geq(res_magic_1,Z(1(#)))),equals(x_0,res_magic_1))),or(or(or(geq(res_magic_0,Z(0(#))),geq(res_magic_1,Z(1(#)))),equals(x_0,mul(res_magic_0,Z(neglit(1(#)))))),equals(x_0,res_magic_1))),or(or(or(geq(res_magic_0,Z(0(#))),geq(res_magic_1,Z(1(#)))),leq(x,Z(neglit(1(#))))),equals(x_0,res_magic_1))),or(or(or(geq(res_magic_1,Z(1(#))),equals(x_0,res_magic_0)),equals(x_0,mul(res_magic_0,Z(neglit(1(#)))))),equals(x_0,res_magic_1))),or(or(or(geq(res_magic_0,Z(1(#))),geq(res_magic_1,Z(1(#)))),equals(x_0,res_magic_0)),equals(x_0,res_magic_1))),or(or(or(geq(res_magic_1,Z(1(#))),leq(x,Z(neglit(1(#))))),equals(x_0,res_magic_0)),equals(x_0,res_magic_1))),or(or(geq(res_magic_1,Z(1(#))),leq(x,Z(neglit(1(#))))),equals(x_0,res_magic_1))),or(or(or(geq(res_magic_1,Z(1(#))),leq(x,Z(neglit(1(#))))),equals(x_0,mul(res_magic_0,Z(neglit(1(#)))))),equals(x_0,res_magic_1))),or(or(or(geq(res_magic_0,Z(1(#))),geq(res_magic_1,Z(1(#)))),leq(x,Z(neglit(1(#))))),equals(x_0,res_magic_1))),or(or(geq(res_magic_0,Z(0(#))),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),or(or(leq(x,Z(neglit(1(#)))),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),or(or(or(equals(x_0,res_magic_0),equals(x_0,mul(res_magic_0,Z(neglit(1(#)))))),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),or(or(or(geq(res_magic_0,Z(0(#))),equals(x_0,mul(res_magic_0,Z(neglit(1(#)))))),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),or(or(or(geq(res_magic_0,Z(0(#))),leq(x,Z(neglit(1(#))))),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),or(or(or(geq(res_magic_0,Z(1(#))),equals(x_0,res_magic_0)),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),or(or(or(geq(res_magic_0,Z(1(#))),leq(x,Z(neglit(1(#))))),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),or(or(or(leq(x,Z(neglit(1(#)))),equals(x_0,res_magic_0)),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),or(or(or(leq(x,Z(neglit(1(#)))),equals(x_0,mul(res_magic_0,Z(neglit(1(#)))))),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),equals(x,Z(0(#))))" pathConditionChanged="true" branchCondition="not(or(or(or(and(and(equals(x_0,mul(res_magic_0,Z(neglit(1(#))))),geq(res_magic_0,Z(1(#)))),leq(x,Z(neglit(1(#))))),and(and(equals(x_0,res_magic_0),leq(x,Z(neglit(1(#))))),geq(res_magic_0,Z(0(#))))),and(and(equals(x_0,mul(res_magic_1,Z(neglit(1(#))))),geq(res_magic_1,Z(1(#)))),geq(x,Z(1(#))))),and(and(equals(x_0,res_magic_1),geq(x,Z(1(#)))),geq(res_magic_1,Z(0(#))))))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Use Case">
            <statement name="return x;" pathCondition="imp(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(or(geq(res_magic_0,Z(0(#))),geq(res_magic_1,Z(0(#)))),or(or(geq(res_magic_1,Z(0(#))),equals(x_0,res_magic_0)),equals(x_0,mul(res_magic_0,Z(neglit(1(#))))))),or(or(geq(res_magic_0,Z(1(#))),geq(res_magic_1,Z(0(#)))),equals(x_0,res_magic_0))),or(geq(res_magic_1,Z(0(#))),leq(x,Z(neglit(1(#)))))),or(or(geq(res_magic_0,Z(1(#))),geq(res_magic_1,Z(0(#)))),leq(x,Z(neglit(1(#)))))),or(or(geq(res_magic_0,Z(0(#))),geq(res_magic_1,Z(1(#)))),geq(x,Z(1(#))))),or(geq(res_magic_0,Z(0(#))),geq(x,Z(1(#))))),or(or(or(geq(res_magic_1,Z(1(#))),geq(x,Z(1(#)))),equals(x_0,res_magic_0)),equals(x_0,mul(res_magic_0,Z(neglit(1(#))))))),or(or(or(geq(res_magic_0,Z(1(#))),geq(res_magic_1,Z(1(#)))),geq(x,Z(1(#)))),equals(x_0,res_magic_0))),or(or(geq(x,Z(1(#))),equals(x_0,res_magic_0)),equals(x_0,mul(res_magic_0,Z(neglit(1(#))))))),or(or(geq(res_magic_0,Z(1(#))),geq(x,Z(1(#)))),equals(x_0,res_magic_0))),or(or(geq(res_magic_0,Z(0(#))),geq(res_magic_1,Z(1(#)))),equals(x_0,res_magic_1))),or(or(or(geq(res_magic_0,Z(0(#))),geq(res_magic_1,Z(1(#)))),equals(x_0,mul(res_magic_0,Z(neglit(1(#)))))),equals(x_0,res_magic_1))),or(or(or(geq(res_magic_0,Z(0(#))),geq(res_magic_1,Z(1(#)))),leq(x,Z(neglit(1(#))))),equals(x_0,res_magic_1))),or(or(or(geq(res_magic_1,Z(1(#))),equals(x_0,res_magic_0)),equals(x_0,mul(res_magic_0,Z(neglit(1(#)))))),equals(x_0,res_magic_1))),or(or(or(geq(res_magic_0,Z(1(#))),geq(res_magic_1,Z(1(#)))),equals(x_0,res_magic_0)),equals(x_0,res_magic_1))),or(or(or(geq(res_magic_1,Z(1(#))),leq(x,Z(neglit(1(#))))),equals(x_0,res_magic_0)),equals(x_0,res_magic_1))),or(or(geq(res_magic_1,Z(1(#))),leq(x,Z(neglit(1(#))))),equals(x_0,res_magic_1))),or(or(or(geq(res_magic_1,Z(1(#))),leq(x,Z(neglit(1(#))))),equals(x_0,mul(res_magic_0,Z(neglit(1(#)))))),equals(x_0,res_magic_1))),or(or(or(geq(res_magic_0,Z(1(#))),geq(res_magic_1,Z(1(#)))),leq(x,Z(neglit(1(#))))),equals(x_0,res_magic_1))),or(or(geq(res_magic_0,Z(0(#))),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),or(or(leq(x,Z(neglit(1(#)))),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),or(or(or(equals(x_0,res_magic_0),equals(x_0,mul(res_magic_0,Z(neglit(1(#)))))),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),or(or(or(geq(res_magic_0,Z(0(#))),equals(x_0,mul(res_magic_0,Z(neglit(1(#)))))),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),or(or(or(geq(res_magic_0,Z(0(#))),leq(x,Z(neglit(1(#))))),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),or(or(or(geq(res_magic_0,Z(1(#))),equals(x_0,res_magic_0)),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),or(or(or(geq(res_magic_0,Z(1(#))),leq(x,Z(neglit(1(#))))),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),or(or(or(leq(x,Z(neglit(1(#)))),equals(x_0,res_magic_0)),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),or(or(or(leq(x,Z(neglit(1(#)))),equals(x_0,mul(res_magic_0,Z(neglit(1(#)))))),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),equals(x,Z(0(#))))" pathConditionChanged="false">
               <methodReturn name="&lt;return of LoopInvariantWithSplittingQuery.main(x);&gt;" pathCondition="imp(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(or(geq(res_magic_0,Z(0(#))),geq(res_magic_1,Z(0(#)))),or(or(geq(res_magic_1,Z(0(#))),equals(x_0,res_magic_0)),equals(x_0,mul(res_magic_0,Z(neglit(1(#))))))),or(or(geq(res_magic_0,Z(1(#))),geq(res_magic_1,Z(0(#)))),equals(x_0,res_magic_0))),or(geq(res_magic_1,Z(0(#))),leq(x,Z(neglit(1(#)))))),or(or(geq(res_magic_0,Z(1(#))),geq(res_magic_1,Z(0(#)))),leq(x,Z(neglit(1(#)))))),or(or(geq(res_magic_0,Z(0(#))),geq(res_magic_1,Z(1(#)))),geq(x,Z(1(#))))),or(geq(res_magic_0,Z(0(#))),geq(x,Z(1(#))))),or(or(or(geq(res_magic_1,Z(1(#))),geq(x,Z(1(#)))),equals(x_0,res_magic_0)),equals(x_0,mul(res_magic_0,Z(neglit(1(#))))))),or(or(or(geq(res_magic_0,Z(1(#))),geq(res_magic_1,Z(1(#)))),geq(x,Z(1(#)))),equals(x_0,res_magic_0))),or(or(geq(x,Z(1(#))),equals(x_0,res_magic_0)),equals(x_0,mul(res_magic_0,Z(neglit(1(#))))))),or(or(geq(res_magic_0,Z(1(#))),geq(x,Z(1(#)))),equals(x_0,res_magic_0))),or(or(geq(res_magic_0,Z(0(#))),geq(res_magic_1,Z(1(#)))),equals(x_0,res_magic_1))),or(or(or(geq(res_magic_0,Z(0(#))),geq(res_magic_1,Z(1(#)))),equals(x_0,mul(res_magic_0,Z(neglit(1(#)))))),equals(x_0,res_magic_1))),or(or(or(geq(res_magic_0,Z(0(#))),geq(res_magic_1,Z(1(#)))),leq(x,Z(neglit(1(#))))),equals(x_0,res_magic_1))),or(or(or(geq(res_magic_1,Z(1(#))),equals(x_0,res_magic_0)),equals(x_0,mul(res_magic_0,Z(neglit(1(#)))))),equals(x_0,res_magic_1))),or(or(or(geq(res_magic_0,Z(1(#))),geq(res_magic_1,Z(1(#)))),equals(x_0,res_magic_0)),equals(x_0,res_magic_1))),or(or(or(geq(res_magic_1,Z(1(#))),leq(x,Z(neglit(1(#))))),equals(x_0,res_magic_0)),equals(x_0,res_magic_1))),or(or(geq(res_magic_1,Z(1(#))),leq(x,Z(neglit(1(#))))),equals(x_0,res_magic_1))),or(or(or(geq(res_magic_1,Z(1(#))),leq(x,Z(neglit(1(#))))),equals(x_0,mul(res_magic_0,Z(neglit(1(#)))))),equals(x_0,res_magic_1))),or(or(or(geq(res_magic_0,Z(1(#))),geq(res_magic_1,Z(1(#)))),leq(x,Z(neglit(1(#))))),equals(x_0,res_magic_1))),or(or(geq(res_magic_0,Z(0(#))),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),or(or(leq(x,Z(neglit(1(#)))),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),or(or(or(equals(x_0,res_magic_0),equals(x_0,mul(res_magic_0,Z(neglit(1(#)))))),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),or(or(or(geq(res_magic_0,Z(0(#))),equals(x_0,mul(res_magic_0,Z(neglit(1(#)))))),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),or(or(or(geq(res_magic_0,Z(0(#))),leq(x,Z(neglit(1(#))))),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),or(or(or(geq(res_magic_0,Z(1(#))),equals(x_0,res_magic_0)),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),or(or(or(geq(res_magic_0,Z(1(#))),leq(x,Z(neglit(1(#))))),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),or(or(or(leq(x,Z(neglit(1(#)))),equals(x_0,res_magic_0)),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),or(or(or(leq(x,Z(neglit(1(#)))),equals(x_0,mul(res_magic_0,Z(neglit(1(#)))))),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),equals(x,Z(0(#))))" pathConditionChanged="false" nameIncludingReturnValue="&lt;return Z(0(#)) as result of LoopInvariantWithSplittingQuery.main(x);&gt;" isReturnValueComputed="true">
                  <methodReturnValue name="Z(0(#))" returnValueString="Z(0(#))" hasCondition="false">
                  </methodReturnValue>
                  <termination name="&lt;end&gt;" pathCondition="imp(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(or(geq(res_magic_0,Z(0(#))),geq(res_magic_1,Z(0(#)))),or(or(geq(res_magic_1,Z(0(#))),equals(x_0,res_magic_0)),equals(x_0,mul(res_magic_0,Z(neglit(1(#))))))),or(or(geq(res_magic_0,Z(1(#))),geq(res_magic_1,Z(0(#)))),equals(x_0,res_magic_0))),or(geq(res_magic_1,Z(0(#))),leq(x,Z(neglit(1(#)))))),or(or(geq(res_magic_0,Z(1(#))),geq(res_magic_1,Z(0(#)))),leq(x,Z(neglit(1(#)))))),or(or(geq(res_magic_0,Z(0(#))),geq(res_magic_1,Z(1(#)))),geq(x,Z(1(#))))),or(geq(res_magic_0,Z(0(#))),geq(x,Z(1(#))))),or(or(or(geq(res_magic_1,Z(1(#))),geq(x,Z(1(#)))),equals(x_0,res_magic_0)),equals(x_0,mul(res_magic_0,Z(neglit(1(#))))))),or(or(or(geq(res_magic_0,Z(1(#))),geq(res_magic_1,Z(1(#)))),geq(x,Z(1(#)))),equals(x_0,res_magic_0))),or(or(geq(x,Z(1(#))),equals(x_0,res_magic_0)),equals(x_0,mul(res_magic_0,Z(neglit(1(#))))))),or(or(geq(res_magic_0,Z(1(#))),geq(x,Z(1(#)))),equals(x_0,res_magic_0))),or(or(geq(res_magic_0,Z(0(#))),geq(res_magic_1,Z(1(#)))),equals(x_0,res_magic_1))),or(or(or(geq(res_magic_0,Z(0(#))),geq(res_magic_1,Z(1(#)))),equals(x_0,mul(res_magic_0,Z(neglit(1(#)))))),equals(x_0,res_magic_1))),or(or(or(geq(res_magic_0,Z(0(#))),geq(res_magic_1,Z(1(#)))),leq(x,Z(neglit(1(#))))),equals(x_0,res_magic_1))),or(or(or(geq(res_magic_1,Z(1(#))),equals(x_0,res_magic_0)),equals(x_0,mul(res_magic_0,Z(neglit(1(#)))))),equals(x_0,res_magic_1))),or(or(or(geq(res_magic_0,Z(1(#))),geq(res_magic_1,Z(1(#)))),equals(x_0,res_magic_0)),equals(x_0,res_magic_1))),or(or(or(geq(res_magic_1,Z(1(#))),leq(x,Z(neglit(1(#))))),equals(x_0,res_magic_0)),equals(x_0,res_magic_1))),or(or(geq(res_magic_1,Z(1(#))),leq(x,Z(neglit(1(#))))),equals(x_0,res_magic_1))),or(or(or(geq(res_magic_1,Z(1(#))),leq(x,Z(neglit(1(#))))),equals(x_0,mul(res_magic_0,Z(neglit(1(#)))))),equals(x_0,res_magic_1))),or(or(or(geq(res_magic_0,Z(1(#))),geq(res_magic_1,Z(1(#)))),leq(x,Z(neglit(1(#))))),equals(x_0,res_magic_1))),or(or(geq(res_magic_0,Z(0(#))),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),or(or(leq(x,Z(neglit(1(#)))),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),or(or(or(equals(x_0,res_magic_0),equals(x_0,mul(res_magic_0,Z(neglit(1(#)))))),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),or(or(or(geq(res_magic_0,Z(0(#))),equals(x_0,mul(res_magic_0,Z(neglit(1(#)))))),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),or(or(or(geq(res_magic_0,Z(0(#))),leq(x,Z(neglit(1(#))))),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),or(or(or(geq(res_magic_0,Z(1(#))),equals(x_0,res_magic_0)),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),or(or(or(geq(res_magic_0,Z(1(#))),leq(x,Z(neglit(1(#))))),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),or(or(or(leq(x,Z(neglit(1(#)))),equals(x_0,res_magic_0)),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),or(or(or(leq(x,Z(neglit(1(#)))),equals(x_0,mul(res_magic_0,Z(neglit(1(#)))))),equals(x_0,res_magic_1)),equals(x_0,mul(res_magic_1,Z(neglit(1(#))))))),equals(x,Z(0(#))))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                  </termination>
               </methodReturn>
            </statement>
         </branchCondition>
      </loopInvariant>
   </methodCall>
</start>
