\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Apr 17 15:52:38 CEST 2014
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=10000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , assertions-assertions\\:on , modelFields-modelFields\\:treatAsAxiom , initialisation-initialisation\\:disableStaticInitialisation , Strings-Strings\\:on , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , optimisedSelectRules-optimisedSelectRules\\:on , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\proofObligation "#Proof Obligation Settings
#Thu Apr 17 15:52:38 CEST 2014
name=getOfArray2seq
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proof {
(keyLog "0" (keyUser "mattias" ) (keyVersion "e5095ad740f809525e4c4689dcc12514a0ca06cc"))

(autoModeTime "1436")

(branch "dummy ID"
(rule "notRight" (formula "1") (userinteraction))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "cut" (inst "cutFormula=  f_h
= store(f_h,
        f_a,
        arr(f_idx),
        any::select(f_h, f_a, arr(f_idx)))") (userinteraction))
(branch "CUT: f_h = store(f_h, f_a, arr(f_idx), any::select(f_h, f_a, arr(f_idx))) TRUE"
   (rule "applyEqRigid" (formula "3") (term "0,0,0") (ifseqformula "1") (userinteraction))
   (rule "applyEqRigid" (formula "3") (term "0,1") (ifseqformula "1") (userinteraction))
   (rule "selectOfStore" (formula "3") (term "1") (userinteraction))
   (rule "array2seqDef" (formula "3") (term "0,0") (inst "u=u") (userinteraction))
   (rule "getOfSeqDef" (formula "3") (term "0") (userinteraction))
   (builtin "One Step Simplification" (formula "2"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "add_zero_right" (formula "3") (term "0,2,0,1,0"))
   (rule "andLeft" (formula "2"))
   (rule "eqSymm" (formula "1"))
   (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "2"))
   (builtin "One Step Simplification" (formula "4"))
   (rule "polySimp_elimSub" (formula "4") (term "1,0,0"))
   (rule "times_zero_2" (formula "4") (term "1,1,0,0"))
   (rule "add_zero_right" (formula "4") (term "1,0,0"))
   (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "3"))
   (builtin "One Step Simplification" (formula "4"))
   (rule "inEqSimp_ltToLeq" (formula "3"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "3") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "2"))
   (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "1"))
   (builtin "One Step Simplification" (formula "4"))
   (rule "closeTrue" (formula "4"))
)
(branch "CUT: f_h = store(f_h, f_a, arr(f_idx), any::select(f_h, f_a, arr(f_idx))) FALSE"
   (rule "equalityToSelect" (formula "2") (inst "ov=ov") (inst "fv=fv") (userinteraction))
   (builtin "One Step Simplification" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "allRight" (formula "3") (inst "sk=ov_2"))
   (rule "allRight" (formula "3") (inst "sk=fv_2"))
   (rule "eqSymm" (formula "4"))
   (rule "eqSymm" (formula "3"))
   (rule "inEqSimp_ltToLeq" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
   (rule "polySimp_elimOne" (formula "2") (term "0"))
   (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_8"))
   (rule "eqSymm" (formula "5"))
   (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=fv_2_0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "castDel" (formula "1") (term "1,0"))
   (rule "eqSymm" (formula "5"))
   (rule "eqSymm" (formula "1") (term "1,0,0"))
   (rule "eqSymm" (formula "1") (term "0,0,0"))
   (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=fv_2_1"))
   (rule "applyEq" (formula "6") (term "0") (ifseqformula "1"))
   (rule "pullOutSelect" (formula "2") (term "1,0") (inst "selectSK=arr_9"))
   (rule "commute_and" (formula "3") (term "0,0"))
   (rule "arrayLengthIsAShort" (formula "6") (term "0"))
   (builtin "One Step Simplification" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "arrayLengthNotNegative" (formula "6") (term "0"))
   (rule "ifthenelse_split" (formula "3") (term "0") (userinteraction))
   (branch "fv_2 = arr(f_idx) & ov_2 = f_a TRUE"
      (rule "andLeft" (formula "3"))
      (rule "applyEqReverse" (formula "10") (term "1") (ifseqformula "5"))
      (rule "hideAuxiliaryEq" (formula "5"))
      (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "4"))
      (rule "applyEq" (formula "1") (term "2,0") (ifseqformula "3"))
      (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
      (rule "applyEqReverse" (formula "9") (term "0") (ifseqformula "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "closeTrue" (formula "9"))
   )
   (branch "fv_2 = arr(f_idx) & ov_2 = f_a FALSE"
      (rule "close" (formula "9") (ifseqformula "3"))
   )
)
)

}
