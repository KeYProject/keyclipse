\settings {
"#Proof-Settings-Config-File
#Tue Jun 11 11:38:12 CEST 2013
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_NONE
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]RETREAT_MODE_OPTIONS_KEY=RETREAT_MODE_NONE
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[Label]Instantiators=
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=50000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=Strings-Strings\\:on , JavaCard-JavaCard\\:on , reach-reach\\:on , assertions-assertions\\:on , bigint-bigint\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , initialisation-initialisation\\:disableStaticInitialisation , modelFields-modelFields\\:showSatisfiability , sequences-sequences\\:on , runtimeExceptions-runtimeExceptions\\:ban , integerSimplificationRules-integerSimplificationRules\\:full
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}



\sorts{
alpha;
}

\predicates{
}

\functions{
alpha alpha::seqGet(Seq,int);
int f_idx;
Seq f_seq;
Seq f_seq2;
}

\schemaVariables{
}

\rules{
}

\proofObligation "#Proof Obligation Settings
#Tue Jun 11 11:38:12 CEST 2013
name=getOfSeqConcat
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proof {
(keyLog "0" (keyUser "mattias" ) (keyVersion "3f0199c8330b513c7802d0f9a530113dde585166"))

(autoModeTime "351")

(branch "dummy ID"
(rule "defOfSeqConcat" (formula "1") (term "0,0") (inst "uSub=uSub") (userinteraction))
(rule "getOfSeqDef" (formula "1") (term "0") (userinteraction))
(rule "cut_direct" (formula "1") (term "0,1") (userinteraction))
(branch "CUT: f_idx < seqLen(f_seq) TRUE"
   (rule "ifthenelse_true" (formula "2") (term "1") (userinteraction))
   (rule "cut_direct" (formula "2") (term "1,0,0") (userinteraction))
   (branch "CUT: f_idx < seqLen(f_seq) + seqLen(f_seq2) - 0 TRUE"
      (rule "concrete_and_3" (formula "3") (term "0,0") (userinteraction))
      (rule "ifthenelse_split" (formula "3") (term "0") (userinteraction))
      (branch "0 <= f_idx TRUE"
         (rule "add_zero_right" (formula "4") (term "0,1,2,0,0"))
         (rule "add_zero_right" (formula "4") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "4") (term "0,0,0,0"))
         (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "3"))
         (rule "ifthenelse_true" (formula "4") (term "0,0"))
         (rule "polySimp_elimSub" (formula "2") (term "1"))
         (rule "times_zero_2" (formula "2") (term "1,1"))
         (rule "add_zero_right" (formula "2") (term "1"))
         (rule "inEqSimp_ltToLeq" (formula "3"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "2"))
         (rule "polySimp_addComm1" (formula "3") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "1"))
         (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
         (rule "polySimp_addComm1" (formula "2") (term "0"))
         (rule "polySimp_addComm1" (formula "2") (term "0,0"))
         (rule "castedGetAny" (formula "4") (term "0"))
         (rule "eqClose" (formula "4"))
         (rule "closeTrue" (formula "4"))
      )
      (branch "0 <= f_idx FALSE"
         (rule "seqSelfDefinition" (formula "4") (term "0,1") (inst "s=s") (inst "u=u") (userinteraction))
         (rule "instAll" (formula "5") (term "0,1") (ifseqformula "1") (userinteraction))
         (rule "applyEqRigid" (formula "6") (term "0,1") (ifseqformula "1") (userinteraction))
         (rule "getOfSeqDef" (formula "6") (term "1") (userinteraction))
         (rule "add_zero_right" (formula "6") (term "1,0,1,1"))
         (rule "eqSymm" (formula "2") (term "0"))
         (rule "eqSymm" (formula "1"))
         (rule "eqSymm" (formula "6"))
         (rule "ifthenelse_concrete4" (formula "6"))
         (rule "orRight" (formula "6"))
         (rule "notRight" (formula "6"))
         (rule "andLeft" (formula "1"))
         (rule "close" (formula "7") (ifseqformula "1"))
      )
   )
   (branch "CUT: f_idx < seqLen(f_seq) + seqLen(f_seq2) - 0 FALSE"
      (rule "concrete_and_4" (formula "3") (term "0,0"))
      (rule "ifthenelse_false" (formula "3") (term "0"))
      (rule "polySimp_elimSub" (formula "2") (term "1"))
      (rule "times_zero_2" (formula "2") (term "1,1"))
      (rule "add_zero_right" (formula "2") (term "1"))
      (rule "inEqSimp_ltRight" (formula "2"))
      (rule "inEqSimp_ltToLeq" (formula "2"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "2") (term "0"))
      (rule "polySimp_rightDist" (formula "1") (term "0,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "0,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "polySimp_addComm0" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
      (rule "polySimp_elimOne" (formula "2") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "lenNonNegative" (formula "2") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "2"))
      (rule "lenNonNegative" (formula "1") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "1"))
      (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
      (rule "times_zero_1" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "5"))
      (rule "andLeft" (formula "1"))
      (rule "inEqSimp_homoInEq1" (formula "1"))
      (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "1,1,0"))
      (rule "times_zero_1" (formula "1") (term "1,0"))
      (rule "add_zero_right" (formula "1") (term "0"))
      (rule "leq_literals" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "CUT: f_idx < seqLen(f_seq) FALSE"
   (rule "ifthenelse_false" (formula "2") (term "1") (userinteraction))
   (rule "add_zero_right" (formula "2") (term "0,1,2,0,1,0"))
   (rule "add_zero_right" (formula "2") (term "1,1,0,1,0"))
   (rule "add_zero_right" (formula "2") (term "0,0,0,1,0"))
   (rule "replace_known_right" (formula "2") (term "0,0,1,0") (ifseqformula "1"))
   (rule "ifthenelse_false" (formula "2") (term "0,1,0"))
   (rule "polySimp_elimSub" (formula "2") (term "1,1,0,0"))
   (rule "times_zero_2" (formula "2") (term "1,1,1,0,0"))
   (rule "add_zero_right" (formula "2") (term "1,1,0,0"))
   (rule "polySimp_elimSub" (formula "2") (term "1,1"))
   (rule "polySimp_elimSub" (formula "2") (term "1,0,1,0"))
   (rule "inEqSimp_ltRight" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
   (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
   (rule "polySimp_addComm0" (formula "1") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0,1,0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0,1,0,0"))
   (rule "castedGetAny" (formula "2") (term "1,0"))
   (rule "ifthenelse_concrete3" (formula "2"))
   (rule "orRight" (formula "2"))
   (rule "inEqSimp_sepNegMonomial1" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
   (rule "polySimp_elimOne" (formula "1") (term "0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "1"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0,1"))
   (rule "polySimp_elimOne" (formula "2") (term "0,1"))
   (rule "cut_direct" (formula "2") (term "0"))
   (branch "CUT: f_idx >= 0 TRUE"
      (rule "concrete_and_1" (formula "3"))
      (rule "inEqSimp_geqRight" (formula "3"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1"))
      (rule "polySimp_rightDist" (formula "1") (term "1"))
      (rule "polySimp_mulAssoc" (formula "1") (term "0,1"))
      (rule "polySimp_mulComm0" (formula "1") (term "0,0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
      (rule "polySimp_elimOne" (formula "1") (term "0,1"))
      (rule "lenNonNegative" (formula "4") (term "0,1,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "1"))
      (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "4"))
      (rule "times_zero_1" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "lenNonNegative" (formula "2") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "2"))
      (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
      (rule "times_zero_1" (formula "2") (term "0,0"))
      (rule "add_zero_left" (formula "2") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
      (rule "polySimp_elimOne" (formula "2") (term "0"))
      (rule "seqSelfDefinition" (formula "6") (term "0,1") (inst "s=s") (inst "u=u") (userinteraction))
      (rule "instAll" (formula "7") (term "0,1") (ifseqformula "1") (userinteraction))
      (rule "eqSymm" (formula "2") (term "0"))
      (rule "eqSymm" (formula "1"))
      (rule "allLeft" (formula "2") (inst "t=f_seq"))
      (rule "applyEqReverse" (formula "9") (term "0,1") (ifseqformula "1") (userinteraction))
      (rule "getOfSeqDef" (formula "9") (term "1") (userinteraction))
      (rule "add_zero_right" (formula "9") (term "1,0,1,1"))
      (rule "eqSymm" (formula "9"))
      (rule "ifthenelse_concrete4" (formula "9"))
      (rule "orRight" (formula "9"))
      (rule "notRight" (formula "9"))
      (rule "andLeft" (formula "1"))
      (rule "polySimp_elimSub" (formula "2") (term "1"))
      (rule "times_zero_2" (formula "2") (term "1,1"))
      (rule "add_zero_right" (formula "2") (term "1"))
      (rule "inEqSimp_ltToLeq" (formula "2"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "2") (term "0"))
      (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
      (rule "inEqSimp_homoInEq0" (formula "1"))
      (rule "times_zero_2" (formula "1") (term "1,0"))
      (rule "add_zero_right" (formula "1") (term "0"))
      (rule "castedGetAny" (formula "11") (term "0"))
      (rule "eqSymm" (formula "11"))
      (rule "inEqSimp_sepNegMonomial0" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
      (rule "polySimp_elimOne" (formula "2") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_contradInEq1" (formula "7") (ifseqformula "1"))
      (rule "andLeft" (formula "7"))
      (rule "inEqSimp_homoInEq1" (formula "7"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
      (rule "polySimp_rightDist" (formula "7") (term "1,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0"))
      (rule "polySimp_elimOne" (formula "7") (term "1,1,0"))
      (rule "polySimp_mulComm0" (formula "7") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "7") (term "0"))
      (rule "polySimp_addComm1" (formula "7") (term "0,0"))
      (rule "polySimp_pullOutFactor2b" (formula "7") (term "0"))
      (rule "add_literals" (formula "7") (term "1,1,0"))
      (rule "times_zero_1" (formula "7") (term "1,0"))
      (rule "add_zero_right" (formula "7") (term "0"))
      (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
      (rule "add_literals" (formula "7") (term "1,1,0"))
      (rule "times_zero_1" (formula "7") (term "1,0"))
      (rule "add_zero_right" (formula "7") (term "0"))
      (rule "leq_literals" (formula "7"))
      (rule "closeFalse" (formula "7"))
   )
   (branch "CUT: f_idx >= 0 FALSE"
      (rule "concrete_and_2" (formula "3"))
      (rule "false_right" (formula "3"))
      (rule "inEqSimp_geqRight" (formula "2"))
      (rule "times_zero_1" (formula "1") (term "1,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "lenNonNegative" (formula "3") (term "0,1,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "1"))
      (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "3"))
      (rule "times_zero_1" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "3"))
      (rule "qeq_literals" (formula "1") (term "0"))
      (rule "concrete_and_2" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
)

}
