<?xml version="1.0" encoding="UTF-8"?>
<dbcmodel:DbcModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dbcmodel="http://www.hentschel.de/dbcmodel" driverId="de.hentschel.visualdbc.dataSource.key">
  <packages name="paycard">
    <types xsi:type="dbcmodel:DbcClass" name="CardException">
      <constructors signature="CardException()"/>
    </types>
    <types xsi:type="dbcmodel:DbcClass" name="LogFile">
      <invariants name="JML class invariant nr 0 in LogFile" condition="\forall int i;&#xA;  (   0 &lt;= i &amp; i &lt; self.logArray.length &amp; inInt(i)&#xA;   -> !self.logArray[i] = null)"/>
      <invariants name="JML class invariant nr 1 in LogFile" condition="!self.logArray = null"/>
      <invariants name="JML class invariant nr 2 in LogFile" condition="self.logArray.length = paycard.LogFile.logFileSize&#xA;&amp; (  self.currentRecord &lt; paycard.LogFile.logFileSize&#xA;   &amp; (  self.currentRecord >= 0&#xA;      &amp; (  !self.logArray = null&#xA;         &amp; \forall int i;&#xA;             (   0 &lt;= i &amp; i &lt; self.logArray.length&#xA;              -> !self.logArray[i] = null))))"/>
      <methods signature="addRecord(balance : int)" returnType="void">
        <operationContracts name="paycard.LogFile[paycard.LogFile::addRecord(int)].JML normal_behavior operation contract.0" proofObligations="//@proofObligations.0" pre="balance >= 0 &amp; self.&lt;inv>" post="\if (!  javaAddInt(heapAtPre[self.currentRecord], 1)&#xA;        = paycard.LogFile.logFileSize)&#xA;      \then (  self.currentRecord&#xA;             = javaAddInt(heapAtPre[self.currentRecord],&#xA;                          1))&#xA;      \else (self.currentRecord = 0)&#xA;&amp; (    self.logArray[self.currentRecord].balance&#xA;     = balance&#xA;   &amp; self.&lt;inv>)&#xA;&amp; exc = null" modifies="mod[heap]: allLocs" termination="diamond"/>
      </methods>
      <methods signature="getMaximumRecord()" returnType="paycard.LogRecord">
        <operationContracts name="paycard.LogFile[paycard.LogFile::getMaximumRecord()].JML normal_behavior operation contract.0" proofObligations="//@proofObligations.0" pre="self.&lt;inv>" post="\forall int i;&#xA;    (   0 &lt;= i &amp; i &lt; self.logArray.length &amp; inInt(i)&#xA;     -> self.logArray[i].balance &lt;= result.balance)&#xA;&amp; (self.&lt;inv> &amp; !result = null)&#xA;&amp; exc = null" modifies="mod[heap]: {}" termination="box"/>
      </methods>
      <attributes name="logFileSize" type="int" visibility="default" static="true"/>
      <attributes name="currentRecord" type="int" visibility="default"/>
      <attributes name="logArray" type="paycard.LogRecord[]" visibility="default"/>
      <constructors signature="LogFile()"/>
    </types>
    <types xsi:type="dbcmodel:DbcClass" name="LogRecord">
      <invariants name="JML class invariant nr 4 in LogRecord" condition="!self.empty = TRUE&#xA;-> self.balance >= 0 &amp; self.transactionId >= 0"/>
      <invariants name="JML class invariant nr 6 in LogRecord" condition="paycard.LogRecord.transactionCounter >= 0"/>
      <methods signature="setRecord(balance : int)" returnType="void">
        <operationContracts name="paycard.LogRecord[paycard.LogRecord::setRecord(int)].JML normal_behavior operation contract.0" proofObligations="//@proofObligations.0" pre="balance >= 0 &amp; self.&lt;inv>" post="self.balance = balance&#xA;&amp;   self.transactionId&#xA;  = heapAtPre[paycard.LogRecord.transactionCounter]&#xA;&amp; self.&lt;inv>&#xA;&amp; exc = null" modifies="mod[heap]:           {(self, empty)} \cup {(self, balance)}&#xA;     \cup {(self, transactionId)}&#xA;\cup {(null, transactionCounter)}" termination="diamond"/>
      </methods>
      <methods signature="getBalance()" returnType="int">
        <operationContracts name="paycard.LogRecord[paycard.LogRecord::getBalance()].JML normal_behavior operation contract.0" proofObligations="//@proofObligations.0" pre="self.&lt;inv>" post="result = self.balance &amp; self.&lt;inv> &amp; exc = null" modifies="mod[heap]: {}" termination="diamond"/>
      </methods>
      <methods signature="getTransactionId()" returnType="int">
        <operationContracts name="paycard.LogRecord[paycard.LogRecord::getTransactionId()].JML normal_behavior operation contract.0" proofObligations="//@proofObligations.0" pre="self.&lt;inv>" post="result = self.transactionId &amp; self.&lt;inv> &amp; exc = null" modifies="mod[heap]: {}" termination="diamond"/>
      </methods>
      <attributes name="transactionCounter" type="int" visibility="default" static="true"/>
      <attributes name="balance" type="int" visibility="default"/>
      <attributes name="transactionId" type="int" visibility="default"/>
      <attributes name="empty" type="boolean" visibility="default"/>
      <constructors signature="LogRecord()"/>
    </types>
    <types xsi:type="dbcmodel:DbcClass" name="PayCard">
      <invariants name="JML class invariant nr 8 in PayCard" condition="!self.log = null"/>
      <invariants name="JML class invariant nr 9 in PayCard" condition="self.balance >= 0"/>
      <invariants name="JML class invariant nr 11 in PayCard" condition="self.limit >  0"/>
      <invariants name="JML class invariant nr 13 in PayCard" condition="self.unsuccessfulOperations >= 0"/>
      <methods signature="createJuniorCard()" static="true" returnType="paycard.PayCard">
        <operationContracts name="paycard.PayCard[paycard.PayCard::createJuniorCard()].JML operation contract.0" proofObligations="//@proofObligations.0" pre="true" post="(exc = null -> result.limit = 100 &amp; !result = null)&#xA;&amp; exc = null" modifies="mod[heap]: allLocs" termination="diamond"/>
      </methods>
      <methods signature="charge(amount : int)" returnType="boolean">
        <operationContracts name="paycard.PayCard[paycard.PayCard::charge(int)].JML exceptional_behavior operation contract.0" proofObligations="//@proofObligations.0" pre="amount &lt;= 0 &amp; self.&lt;inv>" post="!exc = null&#xA;&amp; (  (   java.lang.Exception::instance(exc) = TRUE&#xA;      -> self.&lt;inv>)&#xA;   &amp;   java.lang.IllegalArgumentException::instance(exc)&#xA;     = TRUE)" modifies="mod[heap]: allLocs" termination="diamond"/>
        <operationContracts name="paycard.PayCard[paycard.PayCard::charge(int)].JML normal_behavior operation contract.1" proofObligations="//@proofObligations.0" pre="(  javaAddInt(amount, self.balance) >= self.limit&#xA;   | !self.isValid() = TRUE)&#xA;&amp; (amount >  0 &amp; self.&lt;inv>)" post="!result = TRUE&#xA;&amp; (    self.unsuccessfulOperations&#xA;     = javaAddInt(heapAtPre[self.unsuccessfulOperations],&#xA;                  1)&#xA;   &amp; self.&lt;inv>)&#xA;&amp; exc = null" modifies="mod[heap]: {(self, unsuccessfulOperations)}" termination="diamond"/>
        <operationContracts name="paycard.PayCard[paycard.PayCard::charge(int)].JML normal_behavior operation contract.0" proofObligations="//@proofObligations.0" pre="javaAddInt(amount, self.balance) &lt; self.limit&#xA;&amp; self.isValid() = TRUE&#xA;&amp; (amount >  0 &amp; self.&lt;inv>)" post="result = TRUE&#xA;&amp; (    self.balance&#xA;     = javaAddInt(amount, heapAtPre[self.balance])&#xA;   &amp; self.&lt;inv>)&#xA;&amp; exc = null" modifies="mod[heap]: {(self, balance)}" termination="diamond"/>
      </methods>
      <methods signature="chargeAndRecord(amount : int)" returnType="void">
        <operationContracts name="paycard.PayCard[paycard.PayCard::chargeAndRecord(int)].JML normal_behavior operation contract.0" proofObligations="//@proofObligations.0" pre="amount >  0 &amp; self.&lt;inv>" post="self.balance >= heapAtPre[self.balance]&#xA;&amp; self.&lt;inv>&#xA;&amp; exc = null" modifies="mod[heap]: allLocs \setMinus freshLocs(heap)" termination="diamond"/>
      </methods>
      <methods signature="isValid()" returnType="boolean">
        <operationContracts name="paycard.PayCard[paycard.PayCard::isValid()].JML normal_behavior operation contract.0" proofObligations="//@proofObligations.0" pre="self.&lt;inv>" post="(result = TRUE &lt;-> self.unsuccessfulOperations &lt;= 3)&#xA;&amp; self.&lt;inv>&#xA;&amp; exc = null" modifies="mod[heap]: {}" termination="diamond"/>
      </methods>
      <methods signature="infoCardMsg()" returnType="java.lang.String"/>
      <attributes name="limit" type="int" visibility="default"/>
      <attributes name="unsuccessfulOperations" type="int" visibility="default"/>
      <attributes name="id" type="int" visibility="default"/>
      <attributes name="balance" type="int" visibility="default"/>
      <attributes name="log" type="paycard.LogFile" visibility="default"/>
      <constructors signature="PayCard(limit : int)"/>
      <constructors signature="PayCard()"/>
    </types>
  </packages>
  <connectionSettings key="location" value="/Quicktour/src/paycard"/>
  <connectionSettings key="packageManagement" value="FLAT_LIST"/>
  <connectionSettings key="packageManagementType" value="de.hentschel.visualdbc.datasource.model.DSPackageManagement"/>
  <connectionSettings key="locationType" value="org.eclipse.core.runtime.IPath"/>
  <connectionSettings key="skipLibraryClasses" value="true"/>
  <connectionSettings key="skipLibraryClassesType" value="java.lang.Boolean"/>
  <proofObligations obligation="ContractPO"/>
</dbcmodel:DbcModel>
